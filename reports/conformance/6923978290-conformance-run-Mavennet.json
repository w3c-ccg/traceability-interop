{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6aebeabd-d478-4f08-bc85-9078d68afa24",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ab865dd2-bba6-487e-af0a-35aedb4d8152",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "21ae6ce9-7f5c-4306-9448-0fcab6bd51aa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "99a9cb41-f3d4-46ab-a7dc-2bd552d39eae"
                }
              }
            ]
          },
          {
            "id": "460bd082-b3ab-4ec6-a67b-464483992ea5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5f921f06-aa2b-4ab0-9bb8-6742fe704e7a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "077445e6-207f-4e83-829d-e5b6edf6b2d2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6e8ac82c-ffc0-4664-8d1e-fbefff04c0d8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d1dbabef-7e38-4216-87d2-0ec2f05e21ae",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d8e38157-74c4-4845-a341-bf405c7cce4b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d465cfae-6540-42c5-b1c2-dbecc48bcdbc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d0505a92-c730-457d-a76f-5aad3424b7a5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f2bb6da9-ee3a-4577-a1ef-8daa62f50f93",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5e3f7223-1e02-4a32-a7c4-f46248eaa680"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d5a0edc6-feb0-4850-975c-db7fa466227e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6d84eae1-2d4a-4765-afee-ba57d11f1b22"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd586eb3-d55a-4579-85c4-4cccafd75caf",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "04aeeff4-7356-4b34-80ce-1dda62ff720d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83401303-027c-4aae-9d35-22863ed900be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f049a810-3cfa-4a21-97c3-2893314c0ae1"
            }
          }
        ]
      },
      {
        "id": "c1b00fc1-d645-4a92-977e-6164bd542227",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "80db57be-7a3a-4552-a125-78022d9ca533",
            "name": "Negative Testing",
            "item": [
              {
                "id": "976fc22f-5f8f-4090-bf48-0570095488f9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "88a84191-36af-408a-aaf1-8c073d1846a5",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d63a6ef-760f-4ce5-a035-3087b1b96be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49319fbd-c4fa-4565-9db3-d8cc77db01b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6554f633-1546-4001-b160-55ac955bf50b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c66872-e83c-4311-b6e2-79079b41b34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69b49bff-6286-45ea-95d6-e3c3791a9392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5894d201-6438-4dd9-bb6d-57dd9faead30",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6398649e-cbfe-4dca-bcf6-bd24ccdac950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e75e0bd-3984-426f-80a4-4ab31d84826a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "58541881-fd19-4602-8c99-1bd190e0188d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c1609132-20df-45a8-82a8-ce7848c6ed6f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669f87c9-07ac-4e67-b0b3-ac2aacbf62a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef4c5ea9-8b86-4ef6-b1df-6eb0386656d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd05d5e-df63-4380-8336-9b114a325819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5040643d-1005-47c1-90f9-c12e9b9163ed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "42a12d17-9c5b-40bb-83bf-0957a3f2d0d4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9cf545a5-836b-4730-ac1e-4e7356217857",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6da40e42-1a37-46b5-afb4-576e446550d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7d05cd9e-7abb-4a40-abee-2c8cfbce1dfe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a97fc9f3-312b-494e-89dc-15871d8eb5eb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "e965b87a-9949-40b3-aa6a-05debce46a7c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "184ce6fc-d1e7-46a8-b886-760bfd9ad1dc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3469e8b2-bd0e-4a64-8f29-cf6be4250e13"
            }
          }
        ]
      },
      {
        "id": "36464df0-7dc6-4800-93ec-d249f7453344",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "290fd32b-4847-4b93-aca7-71e6d765a827",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e844c0f4-8717-4821-84ce-17d023e8dbd0",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "bd2b837d-1dcf-4cc3-8ad6-db2cb0116e70",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacf0416-87cb-4c72-b535-7bdd6a526b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb9a1b6b-5795-4fe7-8b96-1c6b08088748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64cdea5d-ff0e-4ddd-9ae9-41b8478b78b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00fdf413-0f44-4551-9a88-3bc2ece0d86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f68f74-ac50-481d-94c3-3771e58fba83",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892cd86a-2878-4535-8d99-2351c241d7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96cf2a7f-0c5b-417d-899b-ef1388cafd7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff9f7f2-1e50-40c1-baee-5c2bafd54a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff4fe385-f4a4-4c5f-a280-5d6965a2aac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1a30a1-3d8c-41c1-9d9c-c4d5e45cc3ec",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fe0df2-beb3-4003-a67b-405b1d755ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cf6832e-44d3-4980-a37b-3a4ca951bb8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36037a8-b695-4acc-a536-be81c377e3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65ce3be0-4a23-4b8b-b41b-7847f02e6542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bdaeff0-c72b-4c9a-bb67-394b81cfa73a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e06e8c-7157-4d5a-ac54-5c5bc926846e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaefb4ad-e968-414a-9254-cd8f982a2de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9435b4-9376-4296-9cdc-e65341c4811e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dcded643-c289-49f5-892a-7270db0b2348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730863a0-b38e-485f-85e2-4f0c5d6a8923",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0dc111a-6431-469e-9692-f8711dd4c5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2b5e19d-2e9b-44b5-ab9e-81256500da79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adba1439-495b-4848-b47a-a006b8c1c9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f94ee18-0f7c-4d81-959e-f63711549007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd3a51c-d7c1-4a97-9e7d-5f7b50c66d45",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8df61b-41f9-4f96-bebc-215a9b9d697f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38e6027c-e69c-4d2b-8273-f2e443c26d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe39d7a2-6bc4-45d5-929c-6a0e7055a5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8d09f6a-8c5b-4b6f-9181-48f2093b28ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07db4029-659a-46e1-ae92-124c2f7e3dae",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2623d326-5b50-45d0-b824-ba1fa6d3e6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45977ccb-9b4e-4b90-8e01-16fded03fbc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3ff27d-e4b4-4a33-890a-3fcb8dd9e636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e87af38-84ba-40c9-af3c-63077a5cf80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4654e5f-94f2-4cd2-a810-1b1e1675100e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47ef7e7-163e-4274-ae91-64f9566f15af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5290b0e-41bc-4166-a352-11c26428e4dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d12435a-d9f4-4294-b75b-68d2b86bc6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3608f61a-944a-4609-92a2-5562291124cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542e07f0-9e6f-4eab-aea9-3994a54762d9",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6e19f9-48b5-45c5-bd3d-462d8602f7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e028eb57-7cf2-4a44-8874-ea9deb48eca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f1ac41d-1818-4785-bf33-b9bf53f8850a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be4c31bc-7b15-45ac-be8f-9a1e23eb8d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3860f66-4c9b-44d3-958b-333262609c28",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "629fcf4c-8d22-44a8-bf14-aaaf87725b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14e5407-010c-4726-8598-924cb59b1dfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ad6a1e-fda6-42d0-a677-6e03711dda85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca814fab-8b0f-4ebe-99ae-5d018586edd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b8ec527-26cf-4120-b93d-34657d3d6517",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900c1faf-2c21-41c3-8edb-2f2727c9c1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb6f921a-0ad5-4de2-8a71-e5b7b375c4d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a2767f-458b-4d40-87b0-5881f6496740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5dc6dc16-a8ea-43f5-824e-23a09f55f077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563d87e2-9615-40f6-bfa5-958abcf85424",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b4b317-1338-494e-b413-baaab7933bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a5f7845-f130-4dff-98fa-7e455fab8c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51585d00-3d85-444a-8cde-37d66130dcaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a7b8a9d-8305-4a66-872b-a81394f76820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22cb71fe-c10e-4915-938a-213d0b62d1d8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "473fabd9-b344-42f6-9697-18c429347baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a15df8bb-042e-4a0a-bda6-db13a4d34031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c726c6fc-fb94-4763-838e-9f9b7c26839f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "785a38cb-f4e0-4e0b-997e-1d2b7255a4f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfda8083-753b-4c8e-984c-7f6a38a64ccc",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156ed5d1-eab0-4003-8264-d9a289f7073e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4abe28fe-208a-4fe1-9ea4-e4c48de8e8ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec19f8c-53aa-414e-9f4e-d8f8281c3800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4d2b8af-4317-44c3-a559-da43629262e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9fc578-f7cb-4221-bd90-624bf4513c53",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be938e2-1870-45de-b6d1-116c3200b023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40b9b351-960e-4aae-aad1-985f83d0076f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01becce-b1b2-4323-84b8-3037f10b8663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e75f9155-6e4f-4a3e-967f-19ce8f955686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d769545-227e-485b-87b9-075b5c478ad8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "880a12f6-234c-4e01-a39a-bfeee6ef19e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19145d0c-606c-48c2-945d-bc6897d62ae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c33079-0185-42b7-be0b-3acd4a6f5e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3c26ef4-365c-4711-ad6d-aa6759e0b03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151f5927-4d19-42ef-9960-3dad68207daf",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6fc37ad-14d7-4342-8c94-8c6e5d0f74df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0ebf16-c4e2-400c-a932-117d45a50a19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a32846-f3a4-43d1-a69f-79f56342134b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ee2ae56-cbc5-4b62-9a9d-9f01ec15089a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3183438e-565e-42f6-84cc-d488ff5d9e65",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a94ccc-77ca-4d83-afac-e08a939044e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac98522e-645d-4679-8cc9-cedc3fee8382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c03b5106-67d7-4b1e-a914-ca91f77b2f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1fd3063-40f8-4b5d-ac6c-2afded88ec1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd125c6-61ab-49e4-9d32-4f16b1a02d5d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "649f7f79-3ad9-4428-89a6-bc011164c478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31f75862-5787-485c-bd5a-8873f60dee19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4201816-ecf8-4c1f-9c92-638275ec98fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8ac91d0-778f-4062-b72b-4f0a9fbb3796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306a8746-1f49-49b7-bdc6-4d670747b9b0",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53dd51a-c12d-4479-8e84-d0fa9fd06862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f5654e-6c83-4298-9ed4-d4c84eed7b3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834fb8f2-f73c-4f5f-94cd-c56485dc7a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af465ccf-a136-408b-a15c-ba31ef6e665a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46af052b-bd4a-491e-8d5d-a8bb8fde7432",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c399088-bfd7-4453-aa79-976bc019eae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fbbf299-a18e-447d-b140-e9757db2c65d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5d7a99-3b89-4d6b-a7b8-1c6076f0d7a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e888a082-1032-4c6d-9ef5-d5d0222dbc73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5724556-9e6c-461e-a5f5-d7951231fbaf",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b73693-cdc2-429a-a3c9-12685d10f841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "864f1a41-0946-47a8-8fd0-dfee52217bb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab2e6d4-9e9b-4d33-a5df-52482c098c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "874184fd-c249-4991-8579-7b535a9437c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065d82a6-1d33-461a-91b7-dbe813012d8a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d2b2b4-e9ec-4a17-af97-6cd7b9f57ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d84b5c6-99c6-4748-b53d-35b968c9d09e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06864b7d-815c-4c7b-95c6-35df33de05b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "41857718-0b78-45ef-ba73-c7da84e8071c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e46d1d-da33-4644-8ad3-921652f67449",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7652249f-2c97-4a57-b770-e438b21df7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "961e9032-5b62-4907-95c6-3a0c3b02cca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb28218-25af-4e6e-8be0-a36a377f2651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8df5b48c-ccb0-452e-b9a1-f8960004ad4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983be79b-a7bc-4424-9e57-90db5c6c4224",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7060ea19-d357-4e9e-a119-2144a772c667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de8e7ad8-2d78-4e9e-b4cf-bface9e2adc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d29113b-6fcf-4dbe-82d2-8c6dbd0467e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f6d451f-795f-40c8-ae56-ec6c2f4fd94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84335e72-e7c6-4d64-9e15-8c68622734bf",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6003e325-b201-4e6c-a180-817ca193db4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29e59a3e-88e6-4ece-806a-3e8de0b26650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d2723a-7c9f-4830-bc14-191743698164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c43746cc-02b3-4123-8b15-e696d66a213b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98315b64-773f-46fa-950f-8ab07e5ff2b1",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c43d178-9529-4f15-835c-2f0c57a13635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe45639-092e-4976-a33e-7197dd963475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657b4985-3dc7-4c59-b39f-0c467926ca7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcd92423-315c-4297-ac35-cd670c5badc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57d0de8-fc7a-487f-b214-69430ba44990",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3daa1e-01a3-4c31-a9b9-ead7aa67cc50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0622a2a7-9743-428a-9f78-c9e2e245c9be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd38c35-6ee9-4697-a3c7-3dde6cf71c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "29f0b7dd-f24b-4252-ae3a-85f9ae9c1df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423d479c-adbc-4fd0-b2f9-6e7b5930d662",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b69343-df6b-440d-8359-400337528cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd9cec82-5b4b-4945-bd47-c3e1eea13ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6f5668-deb0-4bb5-8fd9-abc0a30d828a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d95663d-7bbd-4c84-a829-acab0d7e34f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d967205-4678-474d-8dcb-7bebd7db1346",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01012e5f-1e23-40fc-ab1f-6377b7809575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49ee1201-6ea3-412c-8409-be756f7fc69f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b91f0d97-ff0d-44cc-a723-afef9bfdcef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf79c18f-d3f7-4ea9-b44f-da04ed37aabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77cf34d-cc0e-4e07-b890-efe717867b8e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e46d37c-660f-4ccf-b942-59fffee6aa24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4aa4bc9-ab96-41e5-9a1b-276397003b9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f66223c-84cb-43d0-8bde-ce4e9f56caab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9775f026-adcb-4be9-ab51-2a721e255abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b0fefd8-92f5-45df-92c0-edcb1249529c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5f3a92-601d-40ea-9928-d34ea9745658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db49ef7b-2bb0-4a81-839f-58d1eb0db1f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e535d47a-cc9b-4189-addb-917c99833ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3fabf2f-3faf-48d8-9565-c4be4e0a26a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53758b8c-b05d-40b4-8008-e68b92c02ca1",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ff80ce-481d-4e57-a843-8a8528efa680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c467810b-ef6c-4519-973e-fcbbcaf9fcea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13c11bb-3e2f-4629-bbb0-1100aaafad78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4847223-372b-4e6a-a1b7-65703245347f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955d51cf-0317-4576-a937-2b94a624e7b8",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9633b2e0-6444-4626-b99f-05d2f8ab11e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e161e0e3-84d7-4fbe-8e3f-95c0f19361a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68361f40-4ccf-4626-beba-cc631147154e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "590c9a44-271a-4ba8-87ae-b7c803e9e275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85c8803-da3d-404c-8f0a-8fda6f0b47f7",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0362138-6ff7-45e7-934d-86d877778068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2745caea-5c8c-49df-8c04-c6efcfd1e566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d23a42-31f6-44d1-9380-efc3e2586510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "96beb06d-b5ca-484f-ad85-42b36d8de304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f808450-4077-4d16-ac18-d1b7e7798666",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd076e5-a5be-408c-9efa-311516cf4583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b01bf08a-3be4-4747-973d-91de1401c846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "835722df-cc7d-407e-a539-f25433e1883e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21ff10f9-92df-458d-8bcf-485468d6e3bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a41772-3410-49f4-ab2d-b62b18fb1201",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffedf93-74ed-4bd1-9279-be6e3191e4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14515908-2c7c-4186-89fb-667e33116997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18831fd9-512a-436c-a34e-128ac6ea2b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a5ee784-330c-4bfc-bd1e-2a1ad75078e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51b9532-6318-4217-a4dd-a4cb8e74c41f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a596db-238c-43d7-a9a6-140bb7ae8d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a06df7-8a59-4217-913f-09eae8da53b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881f98a9-aa14-45e7-8046-92efea1bf3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f8b21c7-5d96-4285-a3e7-94219be74e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cbf8bba-2c8c-4057-adf4-4700e4761d58",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12cca813-5dfa-4432-ba42-0ae8c75a88ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5532e2f3-bf6b-43ee-95f6-2dbf13c6545a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54fe5cd1-d764-4fa9-a7a1-5ab8ad491053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "426e90e5-eb66-4ae0-bc37-f0b521f69d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98beaa7d-edb5-43b5-a66e-4e7d2a616c26",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed51342f-9d07-4ecf-82c3-a45527158d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8218aab4-6875-4657-80fd-54f1958b5390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283c8100-f541-4da6-9bb8-929de8fd4dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "33804ed6-be2a-4b73-ad3c-088544cefdd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a49fad-ce5a-442c-94f5-5b20aebca373",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "734976b3-cbbb-407a-bf65-3b47176d360e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e502f22b-ca2c-4e53-8d7a-aafef7967a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806a8a33-35b7-4b7c-9b83-ba71a75d1d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a18a596b-b3b4-4330-8791-7a03614a8a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f493629-8ec3-4a8d-b645-e3f020548958",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0ae200-4bae-4248-b5d1-0be282517d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de0b4a93-0340-40cc-9c84-f74c84908013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0432495-34a5-4946-b34a-1263c359ca54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "40d2903b-288f-4d89-a565-be8ea71ae13e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caec092e-614f-4f6f-8520-cc1bb0d51e87",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "891e74b2-6b63-4be1-83b5-0db3f25a5495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ace55cc-3ba4-4c4e-80e9-5b68aa22d349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3c2ecf-835a-42b8-bc20-4ab4842325c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "897e7f47-fd14-4b36-96c9-0efb75a18875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d2c6080-8de4-4a7b-a2ab-374bbbd2d908",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ef41c9-1540-44dd-bb97-4637bca33cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "096e4569-c8f5-4c1a-9234-6706279bfa42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec52e810-5369-45c8-b59e-3f74aa6903b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f61489ed-45c6-4276-ab8c-8da53f0e1edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b730abbc-a895-4ffd-b8a4-db75580cc324",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b6bf6d-a86e-4437-a747-8ca01bebb9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "960646d8-fd5b-4973-b863-a635e0e9c258"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc10784-b695-4519-aa3b-57648f57af91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9ffadd5-c9bc-4dc2-a3d3-e046ab03f5b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa552b84-4ac2-406c-b2cc-cd4ff5cc2d92",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc74b41-3625-4e14-a658-5db866174495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0461d0c-b334-415a-9076-9eda376e2dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae909534-428a-453a-bec2-b847364bde4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dadc09b2-7231-4940-b8d4-39f08de23784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d290ad73-2d45-42e9-a4ae-3f57467cd55e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e381f3d0-465f-4f08-8785-1599e06bbc86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "399ac1d0-31e7-4472-a273-d1a606c05fbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4e6161-7ad4-438f-a352-c7d1e7c4222f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22af03e3-7116-45c3-a357-6f19e41468aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbcedfe-9111-4d58-89b8-1d25b7ce8578",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "376123b9-7bc2-4746-9b4e-5a79551743e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa557389-bec8-4e66-bc8b-9bc7cd35069d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08414fe-dcd9-440b-b2bd-43809d9be589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecee82a7-4558-4eb2-9167-161af94a44e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc46ee30-dd46-4e07-a669-871c3766c2b2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "177fab5b-be20-43b1-ab87-1eda9b96f8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee477734-8c3d-4c4e-92ae-795ee1b57897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c524dae4-bcd9-496b-a712-2e1c3449381a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "344f055d-b538-4a67-83a6-494ae681d117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821fb468-d120-4f89-885b-5a64c18c982d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d9ee67-1e5f-48fa-a15a-03f7d775d73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62f1e06b-c69b-4a02-b905-589a27b49f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af70968d-5672-4bf0-bd27-e8b06e76bb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cfe22b8b-a573-4c17-a855-96e58d0e8c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93582dc0-116f-4e7b-95fb-d9c0619992a0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72dfb840-ffcd-4d24-be99-0e97ee8b7f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e3f63a5-0baf-4f6a-a7cc-64fd384bfd74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d81c2b-9d38-482d-9eed-2668666cd83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7fc6231-12eb-4e58-a9c9-37f0667c3dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d84724-5a71-4117-beda-bbef162a3162",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38173675-cdae-4c5b-baf0-2dece26efbaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "524155e0-a10b-49fa-a9d1-b3c9a7d8eb7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f64bdc8-87f6-48a8-9ece-232fb1cf80ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3931301e-2aea-487d-9f7b-562050847986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce339838-3ec7-45f0-a4d9-514c24dd5743",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "786c83aa-41d6-458f-9f15-d629a296209f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b728f33d-7951-49c6-8b6d-468ae459df98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79bd3a2d-a864-499a-9e55-baa871f5ae95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7374a8fc-59ec-49ed-8d39-0382cf790448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2592f83-97c6-4378-81de-196e380c16b6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa2ab05-b73f-4a7f-be6a-0ef304121b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db8edad7-0913-4bc8-9272-60a768383828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281ee082-67f6-4039-9080-1b3a3817128d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf9556b-76a4-4cd6-90b0-7896569d74cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cff4d22-a343-412d-bc67-288b72db09d9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fba0406-ad75-4eae-8e5c-e6b7071a650f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1911ee7c-f58c-48f9-8702-7a3aaf95c3f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e4a2dd-22ed-4399-a35e-2cd5c601b05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab70a965-6f80-41f5-b119-734a10b54433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40605b5b-ad4f-43d2-83a0-0da07719be9a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a73f37-b958-4edf-ae7d-675e37558261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac009742-3e46-4316-a04c-da14737cab54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "956ce54f-6a81-4c01-88f8-3feaeada31e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "88affc9f-291e-41cb-846c-d7590f0e5d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95bb04bc-859f-4139-aaa5-0a98ddc0a88c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df33c58-1b8d-4684-a792-805f7a6b852f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b27bb1-fd29-4dc4-818a-ac74a040b7e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4942ed99-61a0-4deb-8f59-a2f96c065e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7100b92a-b0aa-40f0-a226-a0b77bee2656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd22e9c-70be-41a2-81c5-4bff6fbd85ef",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c76bbf-8293-4e96-8914-53158f665062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d8869f-88d9-4dee-bced-182c62643e25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b69f2fcc-5f8c-44d6-aa48-e8c23cc063bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1495aacd-0aaf-473f-8642-c21226e4d943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ee38da-ff68-4bb2-a178-b553a19260d4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b01e0d-f0f7-41a9-b27c-4023a38a8c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c27c6ca-a2b2-4770-bae1-1a152a1360c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d85003d4-de2f-44d8-8b37-d9a10f72349d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1c1b655-2e05-4e32-afb2-458781fe7ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f87c2b5-2649-4364-a08c-e170337ffe75",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f476cd-6946-4c65-a853-ef0c7304f826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f85e7d3-b448-4cec-8ec6-2a4b80f533e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf5dd39-d85f-47ac-9c85-52f85684a963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "32e4e35a-a0b1-48e1-91ec-f91c650c5454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b8fff3-5c49-4297-ae9f-aceba4c16cd1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84fc915-07dd-460f-9363-6f3205726a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b804e911-2b67-4271-a0d3-9fd9329928dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3914f4e9-b446-42b6-9317-79406968f02d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d4cffff-0438-4e09-a714-51a0c43075b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc0f36d-684e-4bf0-aafd-a80933253fae",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e6f1c4-b445-4a07-98f2-de892a8cd4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec6274d-a917-4508-81e8-52b3ee8a3c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e5e637-a16d-4a5a-9516-30fac5cf6eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "200749fd-6196-4ef5-99c9-9e1413e7c451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4a5fb3-0114-4401-b66a-872012a1ff42",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ee9b3c-ca5a-41b4-9d2c-36805480007b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14ba9759-6a2f-4a92-8144-73c293d95aea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ddf57ef-908c-4425-a508-7afefee170d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e3edc70-2c33-464d-9198-47e885c1cedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba8261e-d378-4261-b9b4-830eda6400cc",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf26ac4-06ad-4770-9cf4-5c1c7c3e6ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f909445-ab89-479a-ae42-965e5927cd86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9327a6-bb75-446b-93e6-35ce77a5a0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "618b22b8-e510-46ad-9f40-ad5030770461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec913e1f-8147-43d5-8beb-aa4cc264cdf0",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97fef566-de1e-448b-8101-748b86c7dfdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c850b7-31a7-4a75-8b47-a38fe1b01ec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be04423b-99c4-45e2-8f8b-75a174cc84ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aba690b0-fb8e-4540-a202-00b1e7d099f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b1b5e5-699a-4ab8-8513-1f488820cada",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "909350be-35e7-43c8-b951-7cd2fd826da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10011808-ef22-470c-977d-227b67b0d254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5d4689-ff93-461a-b196-068471c245e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "214148fa-d1ae-4856-8c4b-5f4b5b665a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983cc690-12d6-41bc-9dad-8ff53558a576",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad946d66-efe4-4138-aaef-d08e947a6a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "573fe243-2e6d-4a55-9c16-a5de431706bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6fa3b4-ed90-4f95-92b2-332bfbebe77a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8445909d-c2ec-422c-a681-76d3e8df5bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9830420-a7fc-4c4b-8f10-6e7bb0cc69c2",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6774e1cc-f79c-426a-b2ed-5ad8647d7c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e03ff5e-3e27-4569-9989-e6c2f6a66991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa211fe-5b49-4983-995e-3109de84468b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "263f8891-5d0b-41ab-8755-c047b4a54bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30feb32c-cc05-47c3-8172-ef2bd4aa5382",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f7c0d4-7b64-4fed-8a49-e87f0be65f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dae9617-a60b-43e3-8fd3-ff8995953679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e81eaab-a190-4f0e-8be3-b67dea8865a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bcd75f8-3322-435e-9407-b30f35a42215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d766cb-9345-4dea-8500-519bca30efd8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa94c3f-1239-4995-93d9-97a7a5cf807b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "add465bd-8218-4f81-a0e2-52b7fa610f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e54960f-22a1-4d3b-8afb-8cc310bae086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca31a41-8a42-465d-b15d-950ea9792238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf8fbb6-64c7-43ec-9061-d66195ae3eba",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92010182-397c-4fe1-ad71-a3f1983b0850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0caabf7a-c092-4341-923f-ee6d95e0b4fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c514ffa-a18e-4d36-8198-7adb63a3e9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4f12741-caf9-49b9-a2bc-a40ea680ec06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454b0505-d925-4fdf-aec7-adc12dab2965",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d20fa6c-8159-43df-b047-bd59fd376db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0be7fcf-9c67-4ba9-96f6-f807dbb81622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673b3def-600f-442b-b1a3-c042f013fbda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a2c59b3-61de-4179-9bc7-7ef918c8a9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec0fa103-c759-44e1-b086-5b814e9a7893",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f74908-3d81-4592-ae10-eb057516b730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eae53a7-8dda-43c7-8f0d-1fbde0e23add"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c626a1b2-8fb5-44f2-aa79-a1e408a87550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c84aab9-aab5-452d-84c4-89329fe939c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa29ba1-2253-47ce-9ee0-42dacc16fdc5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96f91af-7201-4eb0-a47f-249445238b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "509962a0-f145-4e11-9e3d-deaf02dabe48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a37a22b-4b64-41c9-87ae-f97050573dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "34b10ebe-4cfa-47c2-be8e-647107a9fa5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e39048-9d39-46ef-b8c8-6ab28b50e5f7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "810a20c0-708b-43b7-b5d4-ddddee6b2f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90afff33-ceb9-437d-99a3-48ee1863eb63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b6a020-973d-4ee2-9e05-40f8f81827e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3698ed7-787e-4f09-b3f6-55e16339b1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3012eeed-8f7b-4000-8302-9c5e900a0bd1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb82149a-0a19-4b1d-a2cb-221c530177ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b5ea640-004c-410c-95e2-63b04a0f775f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20033e0-2d55-4927-a668-1a797d152105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee84465-7b49-4c9a-a6e8-2f71a204b81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec2017d-1744-4f4a-81f8-f7c9d4edaa87",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad488ec-be0d-4599-b797-1424b46f26c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3653eb04-d6e9-4820-af93-8e3b2c8543c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5f4105-b645-4e60-835f-6fc45b288a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90ca6a43-09a5-41c4-9c08-ba649a60f8cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e616b969-084d-4dd4-9db2-09d7ca60471e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99b9729-4e07-4d12-9ff4-3806fcec047e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c38e28a6-5f65-47d4-8129-2474fece73b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03936ea-b081-4379-9833-156c60e798e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fa1418a-4e44-4241-ba92-fd5fd5e1c1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9865cdf6-811f-4110-9924-d724a6264826",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad015cf9-8bdf-4f51-9b69-a79e888cd73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d85c5a4-45be-4bad-8bb7-b7ccb2976614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3685e547-7986-4fa8-8dbb-90f299351811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "651d2f24-c9dc-4924-9b7f-523cc5579459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ada8501-5236-4878-8d23-37ae45d000e7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8555682c-a0c4-48d9-bc4a-c2bc9ad1a18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79075970-62dc-4f8c-b6a0-a2e859902d15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6d9152-75ac-43c4-966e-65acc0566a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ef29c27f-791c-4910-8ba8-7e11514044e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec1a798-785c-4770-91b5-bdcf847602df",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b6916c-2c38-4323-9c1e-f161facc9975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e215c5f-5072-49be-bf6d-2db9c917a5bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d009cc2a-dc0c-464c-8952-6968f2d4d3d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "08637f3b-b38b-441d-b83c-dc697c68b010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e41a12-5b90-454b-bb5f-abcf3d0e7fbd",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb14ea5-b91b-4da0-b9ec-9a2883adc1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6746a920-519c-43cb-af50-2a6492843f53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c6716e-ea2b-4375-90db-a274c51264ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8784b7ea-bf96-46f9-a8a7-2364b95bdbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9f6a84-5cb4-4627-94fb-c53c2db8bd87",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f97437-0f1d-477d-8605-407bbcf90ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "157853b2-8b9e-4dd0-b7da-69c583dc86f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83dcd54b-7245-4b95-bee1-515c3d1eeef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "915382cd-099f-442e-8ea0-6fa6b2be109d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1261a8d0-efb1-48f7-b0db-56ac232f82bf",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cad3d4a-4175-4798-ae5a-b411c9cb68e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e4f92c8-347c-4d37-bb29-8f9bca75ab20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00187b8-27d6-411f-bed8-286aed92a430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ed945b9-aa9f-454d-8717-3dddce63f2a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c73c1f-6a85-4aed-80cf-80f31c4e49f9",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9097a5ab-1faf-4cf9-8650-7855e8437507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6789023c-6279-4951-8634-cf15411fd74a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7b1c51-c6d2-4d8a-8d81-d236ecb2d678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b8895fb-46ee-430b-a8f2-f715cc8fadeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d804497-93f5-4160-8fdb-029745bd5ded",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4dd2e3-2880-4673-bd6e-c044f59c66c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b346954c-833b-40ab-ae02-8ee0f27b40ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d8a226-9828-45fc-b0a1-f3537e1e8a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d97db8d7-141d-49c1-97bf-d4842ab67c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e500c389-ff2e-42bf-a096-9912fe9e399a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e722afea-4282-402c-9562-32883e6b5db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b31fff-ae41-41fa-a3a7-c69a288f8c7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46a5b55-4ee3-4980-b0e5-59950ad378df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "541c7d2a-30ad-477f-9706-18370592e139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ea8bd4-2241-48ba-8454-dcf761a9628d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7a7cc7-3a5b-4133-ace2-eda8ecb9b9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72573e4d-67dc-49cc-8e97-bb8bda3c7d65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93c0b55-ca05-4d64-9bc6-5136adea02de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f44e9b71-ab6f-4d77-9d6c-e80eb3c9dfad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fcb13f7-d2f7-4645-81b9-6e4e8708cad0",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d33ba7-9d12-42e0-95de-7974cf247b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a477af90-ab6a-40fa-ac72-5a39fe3f8d77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4101c97-a482-40e7-813a-47dae2f253dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "875e8220-6065-41d1-89ab-4422f46008e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f099380f-2d85-469f-a5ba-bb6f9607581d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b82db40-60ce-43d3-9ca1-92030e62c630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7c83b3f-398b-4c58-9aa9-0166efff8466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1a0d96-6baf-47cd-ba0b-d31e0cd3cf84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "06a4fa3b-b67a-4c12-99e5-8097bf66cb11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b77aae-c491-4ca1-b734-07d5ea52783f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c020a89-c420-4e28-99b6-890b61e580bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c0b44e1-4ee3-42bf-9a35-3e5c4bb2c995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce30a500-25cf-41b5-8998-63f8aadee195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "378be1c7-5f7f-4f08-ab02-a64d85134c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d849eb6-2ccd-48a5-9ed7-6da83917895a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c869e0-e150-483f-9ed1-c46340c22e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5d80e123-d8bd-4d8e-90b4-dd14f92cbd4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614ec47b-08ed-41e1-8a63-c69ebb4ff4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6500bba-a76c-4277-90b9-c3924be61b21"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d0062829-9b7f-4d75-b6be-6b281ad505e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "66107be4-833c-4fd3-9553-3bdb927a17d1",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01af0062-fde0-4e67-b717-7d26c857b431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e54e22d-b9d2-43c9-98e1-c9728af7688d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca66a0f-e0c0-4029-a7a5-8967bd48a4b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23ba1ec5-49ce-4844-861a-9fcb24526fad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ebdeb85-3227-406d-8200-20bfcdbfedeb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e0875c3-70f4-4790-a2dd-a3c08478875e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0bfcd8b9-b5c3-4884-8529-9a44bf388630",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a930022-fccd-46de-8422-83266bd2df15"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c244c794-6a94-4e0d-922c-f5c387c44a09",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "67205126-7cb4-4280-83ed-4bdc12f54e4f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6eb61bdf-7cd5-4107-a464-a67993db6405",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dfcb0f83-6911-4298-96d9-083210e6a9cb"
                }
              }
            ]
          },
          {
            "id": "dcbb6210-68ce-466d-aed2-140e83cb1fff",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2c068b8f-b8df-49d3-a267-742b5655aef2",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "f5ad6175-1bfd-497f-954f-82a89a03a1e6",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f5a68d-8d4f-490f-b8fe-5c9045810a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a7c9e748-24ef-4b05-b586-ae725b038df1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc027903-9460-40c2-b381-64a40892919f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "526ca205-8362-4773-8e10-2914ce6110d7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1bdc6268-a5a3-4bcd-80fd-0f41a6a199e9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d300d096-8529-4c69-b98f-bf1607722657",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9841e4ad-d978-4322-a5c3-e9084e7ad160"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f05f3e5f-4cec-48ee-82c0-c32af41aa8f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6c234aa7-c4bc-49d9-b1f0-5b0d16631844"
                    }
                  }
                ]
              },
              {
                "id": "e699b2c2-b9df-4fbb-ac17-650ffe65aaae",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "135a2efc-4f55-4521-816d-3fc9875fc5d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a90d75b4-a740-4ac3-a74d-d97a242c2a31"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9bc44244-fd2b-4c9c-ab76-058aeb4fe500",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1c9c1e10-cea1-4f04-9e02-b126c0884791"
                    }
                  }
                ]
              },
              {
                "id": "224e9d10-bd87-4aa4-8ed7-6081e5606839",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e823ff5-b77b-402a-bccf-53cbbb590d0b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "464e8e73-6b21-4483-b0fe-d4a90d6c91c7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8da96a8-8e42-4d63-8042-c6e4d95664a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a0854a42-f798-4d29-9c1f-3c1d9fb46e68"
                    }
                  }
                ]
              },
              {
                "id": "1b14a62b-1cf3-4831-84f3-61c10cfef4c3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98ce94c6-e446-44b0-a277-d1ba559082f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "37388aa1-4257-4159-b1f0-344fb80a008e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6480d76f-e120-49fd-b734-75c218bfbd83",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1ce95bd4-a11a-497a-85db-ec3c06fb212f"
                    }
                  }
                ]
              },
              {
                "id": "61cf49fc-2540-4c0c-a046-7d82b97f2f95",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d0b316f-077c-4c3f-ad8f-7c485845735f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1c8ca68e-47e1-48fd-8719-a4c7e9babcf9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf5d5a49-a950-4430-83b6-466ba8a03291",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8b6d18c3-6e32-4a72-883f-3b1c27ae0dc9"
                    }
                  }
                ]
              },
              {
                "id": "f2406f2d-5136-4be5-bc56-2cbcdb1df1b3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e688e1b-7eb1-44a1-9274-bcf3bc72eb9b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9b49ef1d-37f3-408d-aec6-eec3a8804bf5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf859194-18c3-4201-a2f7-19c62e3398d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "43ed39a5-5802-43a0-b92b-ec048a56f806"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "62015901-b9c7-4fcb-846a-d134d1fb255e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8224145c-b5e8-4ce7-98df-03f2d2ca0a36"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "80b0f423-37f1-48ba-a774-7c6c06294f95",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0f578bf1-1d8e-4fd8-9995-7afa2d2514c1"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01290663-82f1-4365-ba6e-cf9855ae475f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "72fa8719-d47a-4d49-bcd9-bda96cf15dd2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd88344f-f913-41cd-a69b-93478ee09284",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96312fe5-7cdc-4b95-96b9-e04586c4c753"
            }
          }
        ]
      },
      {
        "id": "ab27db56-0155-4fcf-a9fb-7321afd2628f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a284d186-05db-40b3-85d8-2b6af558449a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "70124229-be73-4ee5-a818-91a31a46e1e2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f098f2e6-1a87-4bab-9107-2d7df8ca5144",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c8eaaa-b279-4895-8012-eea1ed667168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f191604c-122b-4201-abb9-4aa8152a5714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a77e99-bf01-4792-b71f-613ff19d0621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1319d7e-1a13-490e-8362-7fc52b00491e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37fdf80f-4ac2-4698-ac18-3a6f77641a2e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28904bd-778e-48e9-b9de-69be895de008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c71a8914-7112-491b-a2ce-26b575fb333c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76357d2c-07a3-44f9-bf8e-c230650dd91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a5589ff-e5b5-4274-8490-48c411847e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f53cd42-26ac-4a1f-89be-d90d602bd05c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc91680f-57d8-454b-b1a7-8c2f247baf47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d74ed8-bdb4-425b-8aa0-182d0c82bd82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61cd3c59-550b-4d80-b1ea-5f7bf9df7210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9eae073b-e271-4ab5-9ae2-83b6885192d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857656d7-bc16-4fd5-80b8-c500a8c77f44",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac52a049-020c-44aa-a7a0-937358c00663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca60bf54-4ee5-4c44-843e-4d29663247b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62407edf-99e0-432e-8696-beccae61cca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92bb6a98-15d7-4cc7-b007-58fb32972cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b0c600-5174-4bfb-bdfb-dbf1d3915bed",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d877150-2b2a-4048-b3e7-a0badb6891ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb7e683-22c4-48b6-b128-637c37bc880d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e856f7f3-ae90-443b-94ce-8716b5ca73db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fb909b2-ec30-480b-8197-101c3dc0a75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d61a47-da7f-40f2-aab4-1f32577ab490",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb88de3-5430-4d6d-8285-978b9eb0db73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef6bb5b-00e0-487e-8a5b-afc679d028a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4eebcc6-6731-4b2f-904e-2916f9fb3f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3febdf12-a990-4d90-8f00-80c09d291090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703cfaaa-2c37-44d0-b909-b18b52d1bf05",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aebea10d-a196-4f90-b76b-f61130875375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "653360de-b42d-4671-8f43-a004817f9f10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6edad335-64d9-43d3-84a1-3c273cae1716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fed5d21-94d1-48c2-a0dc-04363154a75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c3ab90-db8d-469d-a11f-65c2b57e7bee",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502536cb-0604-4522-84cb-392ce7f297d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5e201d6-3bc3-47d4-9a92-4dc0cd6f8d62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9298f95-fbe4-4e10-98e7-6732d572e24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e3ed2de-244e-44d7-8573-bb06474d75bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3829eae5-f111-48ae-b90a-994116fc6029",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "469d7cc7-3917-4a61-bb04-327070fbc769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf9b27d0-442d-491e-8380-80f9a6e14d0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f464ba5d-79ce-4514-82bf-67ecddeac2ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0cbf33a-fd9a-43c1-b6b7-eb695857c782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d6013e-d623-402c-8fce-55d6e1ff6d58",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec1c6d8-ccc8-424f-aa56-1dcfa3b975f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3fdcf2d-0afc-4919-82d1-99024f02c171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12854ae-20c4-4e3f-af9d-dcb313b2ddbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f5f7132-dd02-44f6-aee6-c33152c4ea12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e029f3b-b197-4c7d-92d9-de5aca783bda",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59bc589-2dc2-408a-a8de-e53069a7c6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b081f6b-c2d7-45b8-bee5-1f9a5d000c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34e53b3-b06c-4380-87ab-789aa81985fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "de8a4f3f-8c3a-4e11-b79c-e1dd513fb983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57556042-a41a-4cd5-9fb4-5ba48fc36c64",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e40fe3-ad06-482b-ad37-b4e6aa94afb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bce682b-665b-466f-8602-93dcb806660b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e82418-96bc-4f35-be4d-a52685091b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d966f61e-bf90-4cf9-8803-3940dfd31e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8bc9d4-6f74-4c33-8006-6773880b799b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c5e79b-b384-409d-a15d-40e900dd4dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ebdac1e-b9c6-4e00-b962-906b3a2dc091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9396ac-7832-4cc2-a588-e4313ebcc6e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d3d612-1126-44ab-890b-f90e0be3ce91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3e0ec9-4899-433b-bef8-b6fc48e665cb",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33978989-4cda-4aa7-9e3e-16108dc66b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa2a447-7781-4e2c-8ab7-b5e4f57f855d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfbf7597-2cf1-4d4f-aaf9-b9a266b10f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cce7683-7f03-45c0-9490-e81efd425932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "accce5ff-cb00-4dae-8b70-34d5a26260fc",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6891e3b-27ac-495b-9acd-7259c492896d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e2db31c-e1c0-44cd-966e-8b0f5abe0538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0bb31f3-190f-4777-987b-648702dc4f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b211d0f7-e920-4448-8967-3d274670458d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f7b421-b555-487e-afbf-e7b05cbfbc3d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f049d04-c74d-41af-9165-730ba0f0d270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c0f75ec-9b73-48d0-935f-d62899cab4df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5082b6c3-e51f-4517-9a31-baf5cc6ac235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "107c92aa-981d-4a36-a4d5-9853d665e59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d4cfe5-4954-4edf-8101-156ee6d1182c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e70311-e294-4e1e-b3d6-9ba8b48e5df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2726ac57-ab87-4e0d-aaa2-705f9642616a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ee567e-f081-41b0-8455-4fc3513454cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bb53408-327f-4f21-84a5-efdeb3c9090f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c64ba1-fc6c-4722-8a12-f5ec8eb69b9a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca28a0ad-1221-4aa5-94ac-4f3f6db59fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80abb853-101f-4685-a5f3-10f705d6c488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa2e1d5-54e3-47ed-99db-27d673034ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7a0040b-b59b-46e2-add2-6e5bf76212a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d7a83c-1e00-431c-a28e-16dddac9d9f7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8b87b5-7be0-4de0-8151-be715d563bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef5f138-6040-4daa-a258-e77189c857b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0d3022-a5b2-4dac-819f-1df34aedd72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bc55f15-e36b-40cb-b58a-fdb1776a9e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e1c1c0-763c-454a-bb57-e64d38172677",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33230ca-3873-4a36-a986-378fd47ebc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db58f5b-2129-4d2f-b2bf-586889f8554c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23690987-ea3d-484e-8807-f4ba73261c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "452959cb-1c73-4e40-a1f1-d6acaf0c2940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e641875d-a912-41f9-8027-305bef52a10e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5f79ed-1f75-4b11-ac15-7ff398d1d62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b54f042f-dc10-41dc-b0f4-b24a565c457a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dbe1def-a887-4070-9e70-c9e88233ba84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06675ca3-3313-4498-bac9-9f732844dbe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf8d5d4-6a95-45c2-9fc5-6d5874ec959a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d96dd8-1b12-4842-9362-bdbd0b904976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a3194a9-1a2c-491d-888c-48182d926eae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be4deaf-15c2-4c46-bc74-0d8848dec1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1e6714e-60e1-435c-ad9f-08759994e9db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ae8194-5a9d-41b8-9ae3-5de2e042b32b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c0f613-21f1-4fd8-9c44-eb6c15e9e84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b66359f-360f-4603-b26f-6719b59cdf54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13be4256-ad59-4156-852d-94cc628c96d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a71667d-2841-4f19-8741-260be30f6e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7847930e-911c-485e-bdd9-85197fe65d0f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8637ee3-a0af-4d2b-84a7-b5c14e92bc9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7e9370b-379d-4726-a792-f9959e944cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89036305-d07d-42f8-a8a3-e1a0b290c21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b024ce8a-ac26-40fb-8631-3aace56f037d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580687dd-2f71-4431-ae54-d1703f512351",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f148edc4-e532-4d58-88b3-da381ec9dd4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e9a59d-1999-49af-97a0-2950e8b557e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7a56ec-3495-492e-b526-1ff5a51e67d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da39124b-437a-43d6-ace0-827cc3c07dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57804d5e-ada7-45cc-a852-eaf2ea40eac9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1997f21-a6cb-4db6-9020-e191d38256ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b692331d-7c28-4a34-8b1b-8593946a04b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538ffdcf-4563-4166-9746-45dba6c9a9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc1ad444-6ab3-46a7-bd34-08e5b33b03fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1fa388e-44fd-44e6-ad2e-9a92cfff9e32",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e07e3f6-363d-4c71-8268-a503d9dff536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a244ca12-42bd-4ab8-97be-c3f0df689cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ff8b53-45a1-4fa2-86ce-2c95a197ca08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8752a4a-5ef9-4446-936f-5c0492822575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eaea9c0-d2d3-4430-8a08-98c4659c23c7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89f53d75-8383-42e5-aded-2b88bfd42b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adf75dbb-67f1-422b-87a1-f07354de8fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df5c03a-10ad-47e4-8a97-677b1597c00d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fadccc69-3901-4776-86fe-510ed32af446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555a261d-89ee-4435-acfe-7a594224c35f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c028fe7-94b0-4afa-8d40-cee273d8e4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed85f863-ece9-49a1-91fc-4f4296990410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7300e56b-5a6b-471b-8f6c-cc4aab792195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c263ce6-17e5-4fb1-8fbc-93cde4d727f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6244c8f2-455d-4b00-adb1-210dbd14b664",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de37829-a4e3-4165-860b-a968b3940caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a67856-4d15-48b8-84ce-5e01d3737dfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a84731-1b1d-41a5-94d8-6bd2fe694a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc50bd65-7cc9-40f6-a997-f2c8877bace5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc6eb1f-9f00-4043-8d59-35934e89ca85",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7143f6f-f4e1-48ed-8389-c6ba75d76da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d936bd34-bb32-4e1a-a1e6-15087a5f0ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a21076-33a0-4f56-aad2-1d5b7ead609d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4829d6de-0e33-4d6a-a124-0014cd2f4be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08aea2ca-66df-4b9c-a410-e4302146e9c1",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa9d16c-e8f2-4603-8e3d-c2b0a92fdf3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a2e1fd-2556-4c14-8043-e2f961ad8ee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3b12f4-2274-4371-94b9-e9500ec7e461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abc36abe-c0b9-4ebb-ab4d-f19722f170e2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a4a6d619-abb7-42bf-90e8-aab8eed4f992",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d692ce2c-6eeb-4cfd-a989-995097b5e69b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2174a0d9-705b-4c21-b98a-9552b56b94af",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1ac8ca55-1aae-475a-994a-4b10c6721705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb109cb8-7e80-41b1-9301-6425b19b5c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bcfa8bb8-aeec-47e4-9a96-60524f4bf128"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b50cbfa6-956d-40e9-baf3-e348702a0ae9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b6c3651-24ea-40ec-a500-c941c2036280"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4cf89803-652e-470b-a038-c54902c5161d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94306376-89ee-4538-b6e9-762bb59fc12d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "846a2598-8bf9-4fb8-97fa-98195c373836",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d8262013-f38d-4d78-bc37-2588c7181140"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0247fc85-1ede-4692-9089-c28728584f11",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4635f018-2eef-4b43-9c3f-3019c4b157dd"
            }
          }
        ]
      },
      {
        "id": "8f74a380-a3cd-49da-a3af-7979b3561cad",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "bf6c9a42-80b6-4875-8d8b-935d33a8497f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec45cab4-1278-4eb4-99e4-3622711a5e8a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "edff5644-9eb0-4120-a221-aafbd0d8dc48",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb4733d-a2cc-4f82-822a-e797885f7669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4bc701f-3201-4862-92ca-d14b5841462f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24abf4a6-5191-4c58-afb0-1e195f4f4845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c81e373-7f22-45f1-87b4-e2e82fe1ca09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0b10ab-163b-48f6-8ed8-0cb28a476452",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7cf52c-34d2-4b43-b3dd-66572df848d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eb87ac6-de4f-4d0f-bf88-5cdd5d0dc4c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb476ee-f62a-4317-a869-f3e7d4e85a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2263bcfc-ec87-4ae6-b038-0581e27cfbf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2ab526-e0ea-445c-b212-94dc6117ce2b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2a02ab-6bb3-4c53-b684-74027dcf8682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbc59f4e-9f41-4e6e-aad2-2becc061a15e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61e44ee-9d8d-47e0-8fb1-6c362d2a07a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "632e5029-78ed-4c6d-8c00-610b602b0469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2341adad-a4f4-4697-8712-dff326d4b1f2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4221f4-02a8-4842-bd73-98d39e0852c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292bfb32-bbf0-4bd1-815f-3085ea0bdacd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea94f09-0bdc-4832-a8ad-0fcc2bdb8e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb88e479-f347-426a-a64a-e71842567da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bdca684-9611-42af-af52-1fefe3ab8b2a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc4539b-af29-4b5c-a319-f3dd49e01e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df8d06a2-45e9-46d6-a214-9eb41facfe09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e89c945-dc23-44de-aa70-f03e7872bf5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ae25648-cdc9-4012-bb79-d76afa814fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95dc2e4-03ca-4308-b366-3b627aea84fd",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb02ab77-6514-42b0-b190-01ac46ee7841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55e7385a-fd9d-4e7b-9e07-545c39069b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7125881-0591-4de9-a3fa-fb7ba3209c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "357d5228-cfed-425e-8b83-79e863fe4a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8d40ba-6a22-4358-b693-ad35f2bd7580",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55064f8e-1462-4ad7-945c-6712c50119b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60934754-1207-494d-b0fd-4cd8c308e22c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315864eb-aa9b-4b04-990d-c81b1ed25530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfea288d-20a8-4505-b433-0e2a914e8907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0915a54c-0b3f-46de-aeb3-27adf9ef7961",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97d2848-c6c3-40f3-a6c0-2d484653ca95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e164a59c-15f5-4947-9c54-0c295cb54caf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02965c24-6d23-45f5-98a0-2d35c11d292b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6322685b-e70e-4bbc-acaa-12822c29a772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2a63a2-e501-461d-b9cb-5ddbe6da619e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab4bb6e-785b-4964-8037-1fe2ea9bb61a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e7bed45-f819-4baa-8010-84b4060a04f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37de9040-a4c5-41e7-b2f7-59e496ec3a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76e27ea0-d644-4513-9356-f6c47e301d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0d2a60-f878-4454-b6c5-2993d43c0015",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7850d4-8ef0-4c94-9684-fcd56963577b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7cbadd4-b779-4dac-abb4-aa3a0e56be1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a355d12b-1e2d-4b88-8bd5-e51984a7a598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d9e8ce6-ee03-4a07-a9ba-9ac02313a8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a982d7ea-134d-4b05-a085-7ff9356921f8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d147cf3e-bce4-4ad8-8da8-785b6abdfeb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e687a29-6b4a-41be-8685-8c1490c16068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c36b43-9646-480f-b353-de1b10af4aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a2ba7e-32db-4369-901c-ebbfd9057669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4cdd79-725d-49fd-b1a7-2494a2220d36",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5df5eb-a7e8-4038-aedf-3bf2ca8dd873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "995f6c45-7d40-41b7-b84f-a3e63b543ea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a7daa5-6602-4441-a563-a093b267338e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ff0f2283-9e0a-4c2e-a99c-f92784a24acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0db38f-9679-4bfd-8372-940d68b7d7ff",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2917af5-6291-42bf-980b-eb77bb349a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb1e4ed-e19d-486e-b572-d5c10ef88015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc65e55-5a10-49b4-b03e-3ed0b4ec9713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfdd77ad-094b-4ab0-a236-93f20e140481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafb2b1a-1236-444b-b093-44dcff253a64",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b21287-0576-4223-bed0-ad719d192ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5030613-1f45-4107-ab16-44d244b971d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b11059-ed7f-4f70-9b86-d3daf2e2f244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3a1f619-c52a-40db-8869-0800517cddc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db37bc07-fdbe-49f3-b3bf-e9b63c3e2bd9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eadb165e-6e32-4eba-a000-1f8407a2dd99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e31d1c3-8813-4524-90aa-aeb666c1ed65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1900ffb-1059-400f-ba81-20b117add777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "abd786b7-5052-4cd0-a0da-c292e0d2faee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb470c7b-6266-41ad-ab1f-2b2f4b135fca",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8769aebb-299b-4661-af5c-0d1fd136edd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba9b2aea-823c-433d-8689-f34acea3a61d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3a8865-e4a8-448e-99b1-9a60996baefe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "32cbafa4-06b1-4692-bb97-1048c082b5b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5c47ef-2dc0-4c62-9e70-22e9035d3a64",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e769f1-e0e2-4f4a-9c3c-8a2b4bd2384c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb632e86-d3c3-4706-b046-b26433999612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6ca2b7-ff75-41eb-9b52-ccd9975822f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "08e87a0f-a213-42af-b783-2f21c566ef7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b7ae52-ecd1-41b8-affd-6a08e4f4f92e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d7121d-02f6-4538-829c-185da19b06d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9737d10-6a11-4be3-814e-d1a4fadf6682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df6217c-5593-4e46-9ab4-d0ebecc845ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0babb24-2428-4475-b12f-e1bc2f77058a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d996df-0794-4377-81ba-50bce063cb1f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90f465c-2e42-4455-a959-87ab9294f258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "084c2086-ba07-4e67-a83c-c3b5d47c4321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db63bda2-a707-44a8-a33a-4cfd87371ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa1d63c-a287-44e8-93b8-02c12657b6c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4141dd-a2ee-4cbd-ae04-7b5b5b614415",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c565d6c3-668d-4123-b4e7-5a261ecc855b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92fa6041-f914-445e-8e58-239f3b10ef9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f07ce3-9599-4386-8159-a91a4d002fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9dfb3f7-0c4e-481c-9c85-960793bbaca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d14778-ab6a-4eef-a0b7-49a4081d217d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ec3a6c-1ea4-4a79-bcd5-6f6e5321b4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f421f3e1-dde3-400c-8af3-6a8297a90677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29055058-d37f-4d59-bc5d-f34ac21e7f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea23019b-e366-4dbc-8615-994dcbbe701f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db870038-674e-4e57-9ed6-64ddcdbf0e82",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "919eab6c-d0f1-4597-8141-a8161668dc93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63403d81-de17-4200-b025-edfa6842957c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "470a9e8e-0ece-4962-907a-ea7ac3fdf312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2505066-b612-469c-9941-215cd542361b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360b312c-9f8c-47d9-aad1-85ece8f107a4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e71063-c5e1-4fa9-970f-bfda37a32736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63ba3f3d-1d7c-486a-a259-47319413a083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82780abf-d79b-4248-a137-51ac9cb4834d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d2819d2-2d4f-410b-8389-3f88b410d9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac52036-baa2-4f03-9627-1af0aa3271bd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a17e5a-8ab8-4f0e-98ae-6dd82fefbff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6df6de9f-0e05-4c45-9943-5b245c35d7fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6555ba85-da3e-4903-96e7-5ed4c587e0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76aaff70-85ca-4c2a-942f-ed83367836a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7880656d-e057-4038-a62e-33be6c035ecb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80f8ab3-8bd3-4170-a0e3-4b9213f0101a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f1799db-0a79-4350-a2ed-65d3f448647f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3cf94b-82eb-4ddc-bb5e-197f53c0c9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62fdbea9-a630-446b-ad55-b5dab1ca9194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "484493a8-ad05-41bd-88a7-e03e8e83b650",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f35efef-6094-41f5-b0f9-0510f1bdc109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd974333-a4b7-400b-aee4-947504d05a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132c6809-6e21-4917-8a7f-b32947486ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb87a47f-bcb3-47ce-a3f0-488cb05c2ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd8e60d-c08f-4f7d-91a9-839dbfb7bcd7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "263436c1-6d50-4b04-ab30-0f82e3edc540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c5811d-91c7-42f9-881f-ef90db808654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146a4d66-8226-4d26-87bb-87bd63642056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff6d48e8-a00b-4a6d-97b8-2ae574d8386d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "940527d4-cb8a-46cf-8465-fc7d3e9c4335",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d2bf0a-93d6-476c-9fb7-edb9769e0d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a283c335-4291-4bf4-b7d7-c31a210b8c0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de544d1-40b1-49ef-979c-8921941b9fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70d81451-69e6-4bb5-af68-9229da62dd8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26be694e-a929-4dc2-aae6-11384f656201",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49b9b53-23cd-4706-8ab3-e905da1903d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b64191ab-60dd-4f4b-bf1f-adbb58501563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e236b9e7-8904-451c-9e45-33e32ee5bca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da9b0030-5116-469f-a114-ee00dff2990c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fbb80f6-067f-409d-8867-b4808901f114",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01aecd4c-17d7-43dd-8ec5-66b053dd4f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0543a53-53fc-4a6e-9a8d-86bf60946e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2c979c-ad1f-4178-8f85-ac7ebef10cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "381daca0-a6a2-4094-9fd4-45803ddc5a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bdd6491-1e8c-481b-bc1f-9b89f7490985",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc077c5c-38c9-4dcb-8365-20ae258ed7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd8e0504-ec90-4f46-ac3a-d4385a6253f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79da47e1-b63a-4316-8b5d-5d00125b99ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25206377-6d65-463a-9e6d-a4a56970275d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d821bd90-51c5-4663-88df-8bbb47de29e0",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf7ea65-b9e2-444b-95ea-4681200b9048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e619ed8a-0606-40b0-b9d0-83494cf57a81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e629c156-5b81-4b82-8e09-160f9120cae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c685e3d-b54e-45de-bd58-3eb3eb9f8b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d08b037-0432-424e-b2d6-ecbc329c4490",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36721544-9f0b-46f2-b568-36b5edba0a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53aa7835-0015-4880-9e1a-d7709ada44f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54279d0e-77dc-497e-a879-37948327c141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c59a007-c0e9-4da9-a8c0-09c9e967364b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0828e964-1ac3-4ff5-8324-b7f2f732d2fe",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6784b67-0b86-4954-a815-457c1872f62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b46947-0a2e-4778-9dc2-8ef10046a904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00993fde-f9dc-491e-a407-a454fbde58fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45ebaf25-5fc1-438e-8a05-433ba040130e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331e132d-23bf-48a9-ba41-eeffd888fa12",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f011be-e4ec-41c1-8ef1-6d9cc8bf4733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9918fb2-ea61-4abc-b1c5-eb9ebd6b9c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1064d2f2-4d14-4ce0-87d1-c085b84e5810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fe7ec56-cea4-4754-96b2-9bf6513e04f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779ee4f6-ac85-4bb1-82b3-bac981516a80",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "974eec1c-ca48-48a9-ae37-188592b56fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57518067-bfb0-4151-a4c9-341e91ba4a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e574ff5f-aca0-4cd9-9de8-ac51d951a663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e41195cd-3fb2-42ce-b443-80904e88bb19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f46321f5-281d-4c42-851d-9237ef89d55d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1efd3306-0a86-4cb4-a19c-9c8c6c71c23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7453c99-88f9-40fe-85fc-825a508c7df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3bdd819-c0fc-45ae-b99c-53f27633d998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "deee5e2c-00e0-4b30-8426-4854c2e79e15"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0bfaadad-e1f5-4dba-8f1f-66e4a93502ad",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "02699ef2-de49-4d02-9105-33f6c83e8bf9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6855c2c9-e7ce-40e6-971a-6913564a4774",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9bfda3e5-549b-442e-a30a-d3feb55aabbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c127ed40-9064-42e3-8414-7724ddd74f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "143fae89-3bd3-4c0c-86ab-0878194dab97"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7804210a-76ce-4625-ac78-acd3e176637d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e5e72ae-be37-43d3-af40-61ffac85d2f3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c8fc3b3-02b9-4bec-8838-12a913422148",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d097c0f0-2c63-4b27-9ba6-a44c162d3ee5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90608cd7-210e-4433-ab6f-d5c118dbbc93",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6caf87be-aa78-4d18-a092-43cf4978bafe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4721391e-ad77-49b1-90bb-8ac858929dc6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e8d8dbfb-6ff0-46c8-94af-eb2fa54e63f1"
            }
          }
        ]
      },
      {
        "id": "fc513f9c-d5ea-4097-92a3-94888e889109",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3dcadf3e-65cc-4308-ae66-bc3ecffe2ebb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5841070c-081f-4d0a-b7ab-568593d150ac",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fdf2c346-50d0-4b67-a6e9-08ced0301649",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af5d098-bde4-4aa3-93e3-4efe64022aa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29997ab5-a042-430e-81e5-3fa84ba2d808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cea8e82-7fc2-4068-b3c2-5dd239ade615",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9510bd5a-62e0-4b74-a1a7-40b166d66e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d6f2db4-623c-4651-ad1c-07388abf2f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08dd5fb3-7766-43b5-a383-273f9e837c86",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae4cc12-d8e3-4552-8daa-38477863312d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df90ba89-1865-4728-adb3-ee830ece08b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0e46f7-eb01-4467-806f-1039683355b5",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4534a97c-c88f-4bd3-acdb-e3ec592470bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9969b888-82e2-4df5-994d-23449a8227fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4483080a-15b5-4264-8f50-75a9836656e3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69b1cc7-d67b-4019-bea2-3b0422a5ead9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d5eb590-ec86-49db-a3ff-895f68c53e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7def62e-de61-4d17-8177-583dabf5464f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79cdc5ac-ce1a-4da1-ab85-29c8bbb670e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d462b3d-7ca1-4f69-8e77-8386dd90e10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f767c374-3f40-462c-80c9-2716917b4c0f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6101a0ab-8b9e-4319-92a2-bd77cd7f6325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fe15062-aac5-42ac-be5d-016c3116376f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe35cb9c-d894-405c-9348-c84ee0c4782a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9897fb-b8e0-4231-a5b0-78a01833e64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10331537-989f-4521-813b-46d16c250cd1",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1deb2201-e9f5-4190-b194-7c56d83e28cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d168d592-0949-4609-aa6b-94f358f54ec4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4399b546-4ebc-4859-a13f-49e71735a22d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86388a3d-ff42-4565-8407-8d963942af89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe031dc-65a0-4e4b-9b8f-a88ed23ad7aa",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc694d9-6fb1-4852-a240-440c4f7d0220",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f71f84e6-08b1-4acb-90dd-a97ecd090ade"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fba751a-4df8-4809-82b6-6e98446a855b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ffa7c9-cb15-41e9-bbcf-00528f5c688d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66c62a2-4a55-4be2-9d8e-469fbe087586",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace35240-cd90-4fa6-b113-42c37b4b6811",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff4b8a8e-6d85-4edb-a1cc-63418439f563"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51acd65-9373-45da-b3c4-dbd198f7efeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "573a2b60-ced3-4d80-bffa-0e9c1b7ac063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f82abcc-10e7-4a0f-974e-4fd79b1d58c5",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4677e01b-6aa7-4fa9-89f2-b5b1be9442cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7e0a75c-cd75-4c07-a47a-5528e8c89d79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "158aac1d-da31-4272-9853-cdb974220f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89efedb6-d860-42f5-9d7d-1e20f750780a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b55c9f6-eba8-4f38-9f3c-22f1e374c504",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d2be03-f620-4ae9-a3a1-a983d4f1162f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac46c7fd-c94e-45d6-ad9a-7c6834fef345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6050ad-0601-48c3-8075-aab2a12db378",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e5e6d3-7e8b-4229-9033-ab1b681c2459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d078ec75-0592-4ab0-b737-216fd8a68a22",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab5a344-c56d-45ae-b935-08661fb41c99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6915c42-774a-4868-a887-a3d70475b7ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0eb9130-4a0a-4d41-8cd7-037472df3637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "239a7060-16a6-41d9-8ca7-5eb7c12619b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f00359-b335-477f-953e-b985212aea26",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98fe778c-6eff-44ab-a942-03211ef42aa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71de38f2-7d1a-4e41-885a-94a4f0868e7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "995521f8-59d4-41a4-ae7b-4d3550eb8a3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34db11c4-3fc0-4f46-8c0f-dd5f63053776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f191ff-cc7b-461c-813c-68619745734d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9fae4d-01af-4d6c-8f2e-2cdcc8c28269",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e1206c4-2595-4b1e-89b8-8325e6e555cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45045833-8217-4a84-a3cc-643e7e394a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25be5095-0f49-4661-84c1-840f2808ce5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e9d2b4-4feb-475b-a573-bdf8f78b3399",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881e9c47-d095-4273-a204-a6366e49b98b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e7e5d8f-dfcb-4428-b95f-08e44930380c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f0f62df-2560-48d9-9b90-447c1735228f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b2b286b-fed3-42a2-84c7-9c903fc21491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007d91f2-664d-411d-ab9b-3789c07ad5a4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10bbc233-3692-4532-9307-015c64b6393c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab14bf77-b429-49f0-b933-a051504b89a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "296753d9-d233-41d3-943f-96c47913f87f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cab6d6bf-f518-4dc9-8789-e6dac2db69a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f83776dc-95be-4f19-80b2-8383021ccb95",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972e5e7c-811f-46ab-8097-557ab2212b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed851f8b-d7cd-42db-aad0-91a1e35fd2f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e743631-9727-42d2-9a24-8f375c2b4524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a988360-2b14-494d-ba08-50440ddf713c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce46175f-deb7-495c-be24-4a038d1bf114",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c247e7-9f4b-421b-a77b-4cdc1c94821b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa2c6a63-1dad-41b4-b476-21270f6e7226"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08759bf-4da3-42d6-aa46-e11d36df54af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b2eac5e-5b9e-43a1-bdeb-85708c71229b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143ff412-683f-4569-b46c-f58a06186afe",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c95d897b-533c-4fe7-afcc-c001072fd695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bf1d115-bc83-4c2e-9826-689b7cbc0547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c661de-38d1-4d4e-8791-26cc32dadb61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e208a5e8-5c2c-44b6-a129-fc8aa8e43e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a274fdd-b815-4dfa-bda1-79f3ddf27883",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f0dc8e6-ae2f-4a2f-9782-0f01a10cd2f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15d71d4b-aced-4991-958f-99feb62e801f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24142019-2760-48ee-9175-f3b89325fd6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dfe1f34-5f00-4cff-815c-15433b49d88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c76c599-8e86-4ebe-a390-6c35a4eb3dad",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac8e59a-8229-4a7b-b209-12f904d696ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45361d82-97fd-4a91-a62c-306121d2ac6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac733f94-9db9-4979-a554-1e07d7b2f8a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e467775-f03c-42d0-8678-e78d7f1d5979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75f529e-b081-43b3-aec9-dc58aee765f6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf119b55-85eb-4198-ab0e-d93a1a713aaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5078673-53a5-4a6e-aee1-91f9dcca5dc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9c356e-a497-43f3-82ed-3b1b932055d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce589c29-4f6d-432e-99dd-e650afaf1974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213faeb7-2015-466e-8c54-1c50ae2874e9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742b0bb7-8814-42f4-80fb-636814ddcf7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03c776d9-4af1-40e3-9508-557a3b807f8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da6e5a3-edcc-4241-948a-72a45e3f7920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd7856a-08f8-452a-af6b-6c9de3fb6750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a9706d-dd1b-44d3-bc9f-c05ca61b9880",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b7e46d-7932-47f1-af4f-3dd7bed7629e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25f1354b-3a38-4ac1-bb7e-a538882a1dd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f0f00fc-fe11-406e-889e-c60e3f00af3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff65ea00-7cc7-4372-8b42-07579663b23c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904c8886-4acd-4903-880a-bbc0c22a648a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ca65d8-ec3b-4203-8fff-ae465f02abd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e805396-2cbd-4152-ab0a-3a8fa1a4509a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb5e7d5-32ab-48d1-afb5-9240c82b3926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d1cdcf-c9a1-40d1-8e31-16983f041d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a96b780-a1c0-4ade-8968-967e01121099",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662ef92a-ac1f-4a33-a8c9-aa8e5d197a94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99a1cd39-1d63-4901-ad6e-3abd079cee3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde22f23-e0e1-457b-84ca-d4590c71f02c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daf6ecef-aee6-455b-b0c2-c401b8bb8a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f207cd8-3d10-404b-aabf-0f203af22c8a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba35baa-ab05-429d-8526-5a4617c262d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de8dc83-094d-46d7-ae22-a6fc5b584f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddafc1b2-9c26-4e17-a9fc-c3cada4cec3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "232da2a5-db57-4b65-a923-537054b66683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de8ad38-6e96-45ad-8e40-7afc72ae9f3f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307d4c69-0567-4f85-b59d-0a3ccd03890f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b0c34e7-dff4-4981-bea0-f673e792bf87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "885a02bc-19d7-40fe-ab81-c002ab4f8810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcf7da60-70a0-4094-8854-e9926365d7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24e8bbb-72b3-4ccb-a89d-2bb51faf4f2f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924e7214-75b5-49e3-8776-bc603fa90e01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ca6a6c2-39fc-4ee3-9379-a0f05e52be4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c4c7b8-de42-4d1f-be77-902f44d7c6b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0e13319-0551-41f7-97bc-7023f6ba4f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "537e0676-d445-440f-8da6-0b43ae67eac5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4faae0ca-3263-4828-83a1-c41e2a05070b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "088f2edd-3962-4e57-9bfc-56eee1560ac3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef21799-1114-42f7-b70b-6b5df9af3897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e34685-d82d-480b-9ca5-5183d399b0dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "482aab62-6c5b-4fb5-a8f0-b51c1d2857ca",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e418c4-309b-4759-8dc6-5260de1f16bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fd93ae0-34d0-44cd-ad02-e853a06ba877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "265400d3-13bc-4152-a43d-56f50af1d68d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ab77c2-d06f-48e3-a1e5-852634bfe1a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09cbe3a6-0724-4c23-a47b-e40d14d3426d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6976c3bd-0499-46f5-8472-8c54c1926028",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc6fb84e-18ff-4e0e-ba97-46762a5f6ea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "049e9a69-0982-433a-978f-d2bc82a5f6f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76dd04be-d574-48fb-9068-4aede7c510a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131447fc-5fb0-4974-9225-c793cfa168ba",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55406853-0035-4cf4-a253-5668d6af5b77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11decf06-26de-488f-a3a8-ea1b32e39d28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93974e4-b091-4c2a-bf32-f6ca14183411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5151d69-2b90-419e-be48-16cd560440ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e910f8cf-ba27-4454-9033-ccfa75b124da",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e4051d-6869-4591-97c7-d5391ec55c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fed5c07-5d45-42ad-ba7a-e70ba174ef4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61bded4-8e12-482f-a4ed-5c012add9de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc777d2c-6a65-4535-81b3-ccfe590f634a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d05372f-19b3-414c-9abf-2b44421300ca",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e229547-8805-465c-bb30-e000e0425300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32fdba02-5eff-4abc-b3b6-532aeebbc97f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9210ec2-8972-4012-bd5b-13ed95c0f73a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "564001e2-59d8-43c2-b302-f30139baf462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867f8614-fcb8-4957-99e9-b186988b99c6",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263fe0d8-793a-491b-be1e-c8a1eb715021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2507ee5f-abdc-4e99-b581-1e86834b8add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c55b2d9-e462-4b33-9b09-31b16bfc44cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4e7a111-9278-43e4-b6e4-a7ad0ce61594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26dd15ae-8541-4819-8d89-ded0f1dc08e3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa5e8f9-abc4-40c4-98e1-bd67794b591e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8735c47-2227-4630-9ed5-adc231dee5c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8e5e2d-ca87-4652-ace4-f921c51fb8cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "407dcd2d-423a-4a71-91c4-b8ddb0587522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83639185-f01d-474d-80d2-d3864370a921",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd0ad8a-1077-4b9d-93f3-0435a1ad7638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f875316-c987-430a-9438-6dfb3d9f28ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4485e6a1-b10f-4e24-92fa-27f382083900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312652c4-9a2e-4052-9580-9b65a9d6bdc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d43874-2d50-47aa-829f-e1a4b3ab9faa",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc91610-380c-4443-b384-873f8fbe9e55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70821de5-2ac3-4b67-ad43-53e4693709ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a651331c-ac7d-4a8d-ae65-bc56433b1980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24169fe1-cf92-40c7-b726-9194345c7ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a4096e-4c6f-4cc1-a385-a0aed22900b0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea31ad2-1e17-4a8a-a681-a5ffea97258c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88522f68-f543-4fcc-bd60-78840b7cad82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc9cc5b-144c-4c13-b8ef-a1eed37c885e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eb47210-94ae-4133-a206-be975fab0938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675fe8ad-b89e-4b8c-8324-9c0e3f059d24",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb86278-1505-4d58-82fa-23135b80a955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1635da82-de7e-41c6-842f-5f6c65d5ecb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec47e895-1c79-4c72-a3e8-7cc51445dbed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e782013-568b-4ba9-8ae2-6c435bda587e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427b6ab8-7cf4-4206-8a46-8aa3c5d0150d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4d5d87-a4e7-4d08-bed5-e709e0546f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5e1114e-cbbd-4bc4-a32e-3ebffb12daae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2239a00-adb8-48cb-ad0a-e07f8dee4c8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7dab63f-3656-4a78-bad7-a5bc27da1be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009e5be5-f47f-47bb-88e0-d0c303f7a7ea",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1ff31e-3c6c-4952-8c35-ae726e783a8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4dada8a-fddf-42c8-98f1-91e701334d6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "077629cf-5baa-4d23-b2e1-2f77b2697b47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a49e6ee0-4dce-4b6f-84b8-62340cb8a3e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74fee101-d539-4df3-b086-408649e14510",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc65b7cb-75c4-4c19-9805-a4d7bf4de958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e89fc399-ead9-463d-9439-6901b495de79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92225eb-9003-46e8-b639-c10efbdfe34f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0f90ce8-5e8e-44df-8e22-ff70093089ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2041e475-d08d-47cd-8d4a-9e431c69f554",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5af2d3-0eb4-4cf0-9242-f89636e76ee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa00a85-8a49-4b42-81b6-79fb870fa0a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf77c78-6192-4bb3-87d3-82e048b8c531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e3d6a86-e6ba-4a6b-b394-79786d144859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fdc8b36-d4ec-4408-9ed5-4dde05e215c5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7c143d-62b8-4b19-80f8-7ee31b5791d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ba6e11-fee6-4288-871a-44ec367f2785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b989e30-170f-403c-a507-78ac6fd44ea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "063ddfd8-0fd6-420a-9b56-094eb4430e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf26de1a-bef6-483a-a101-b09b517e3655",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d428211-ec60-47fd-87d5-ec30c5c19e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61dcbff5-10c0-4170-afb5-be8f5f259cc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b135ed2-491a-4657-ad48-ce71ce44db9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84afd1f8-6cc2-47b7-8985-6483b71f80a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0326d1-b6fd-448c-80a8-b595cebace41",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b2f901-ce9f-4cb6-8218-10f18b60e9d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35f0a483-8aca-4f5a-892e-c965a292586d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68fbba7-db2d-4fdb-b1c6-26f6e5fb2b85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "746b755f-2b69-4370-9872-d25e320c04e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c3595a-dd58-4058-ae61-0c7c4bbfbe99",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44c9e1e-9e0d-4eac-b4ab-67653802bf9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "401ec73f-e2c9-475c-933d-decf67c1bf04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf7b83a-0836-4825-b572-90802ef792a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "035088e7-c7b4-443a-9fb6-6c6c49cc7e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9114bbd4-efe0-4fdf-ba82-e747e83e9356",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9afd90-bdf3-4607-8401-ce2f21110507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f745ca6-e6e8-407c-a441-d5a7e662a6e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8613d86-d83b-465d-91a0-7e4a94709483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01c4c2bc-e5a4-41b3-9267-115d8e5c641f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be50fc2a-c2b9-498f-8e2d-3b41a8038b83",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a37dda6-10c7-43fa-a4f7-8e0570290609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d426519a-456a-4374-a8dd-73449bbacafe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5eea763-5406-4dfc-ac90-f63fe687c06e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04ebf76d-c949-4331-8d2a-2af9cd3c5b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213356b2-3222-43c2-b1aa-2b7b496cb4d7",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25efcc90-e8de-4ecc-96c7-b942e6c278f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def681ad-fbd6-4fbf-941e-67b380687f87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea4b6502-1db5-4885-8bdc-53559b5b95f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47578686-0204-484e-8c4f-4c79a36a4e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a320196-471c-4b0c-bead-9f3837fce867",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1adeaf-a8c8-4e61-81ca-90190f7b3d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba394dc0-6697-49cc-9b3e-697cb51b658e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd840333-c0ba-4a3f-9987-c4f87ecfe14e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1729e99d-833f-4eb2-bd1b-ceeb2928e2d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d03fd7-6fc3-41de-b2d1-639b3df10e17",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9b2083-b469-43bf-9900-3c1cce75d1ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efc100c9-2369-4e0b-afb5-eb6b244f599a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55b1a90-4ca1-48dc-8c1b-ebc96a7e7955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "462e3b13-0ed7-4764-8348-ade9f650ddfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b23d428-e491-4568-a2fc-cbf45adb3c32",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d9a147-bfd3-498d-827d-dde7bde05dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e76b3551-0b94-477f-83dc-23e93649da79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55952c3f-dcb0-4bba-8330-a89a65149831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adfdca72-2288-444f-a280-841a9b39ffc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e57df5-0501-49e3-80fe-9d6cfb16fbb3",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fa7d96-cfba-4978-9dde-9ae8f124666a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d167578-22cc-4d63-9810-5ee6afd6a4bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee032b59-9ae0-45bf-a85d-dca3db552214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f099f965-144b-4ec4-bab9-ff4974b04648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8353b905-ed66-47a7-b224-feab876e0f32",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6fa5e2-9d51-47a4-aa6d-d084f860981e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fb5d19a-c36a-4128-9c54-68956da575e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35aa4bb1-25ac-4cea-b444-1f72956b36e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e3962d-4fd5-45c9-9601-ac1122941744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f59809a7-a99f-4900-aa11-d675fa6ca6f8",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbac2c11-69ca-45f0-90d7-c98da2f92885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d2f29b-aca5-4a60-858b-a6e7194aea94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b258fa2-8357-41e2-8843-0beaeec43821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa10f568-e641-42eb-958d-05b151c40e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f420162-f20e-4116-bd29-fb5a7f2baed5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a75eee8-bac5-4ef3-a3c9-f976c6d114c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62b706d8-40e3-4645-a382-41478cc74ac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f25ac9-0a0f-4811-86b8-fd446a91af31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb0f95d7-d26c-46f8-b631-a764fc004d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21fba84-cf79-425d-9e95-7e2ab56b91a1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c8ce1f-5b02-447b-a8ce-c6bf351c6baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ff17e87-53de-47d6-b95c-ce4181e07c32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da4c88cb-0b03-46bc-a7e6-45f858716b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4ada55a-1dc0-4a5d-9380-992e0316d0b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ffc116-c8ef-4ea9-b80c-29b9b24d2feb",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e457d66-0dd6-4cd8-972c-b484aba1179e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64695342-b8f7-4845-8f30-2d4fc09cbed2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d4e320-7af7-4133-b814-79b64d2b9a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae5d768-d884-4265-abfd-ea224e2e7d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b27b7e42-97a2-4eb9-b98b-db6dee793dc5",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcfc3c79-0b4d-436d-9299-fa6b2e226dbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86e012ed-f3ce-48e0-a4d7-74b47b294332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfa5fa5-6c8c-4c6b-a9b2-406863dc1d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a65f56d8-4145-492f-90cb-19d3a663a9b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a0fd4d-3a02-4000-ace7-b915539d8d65",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce521751-3e8a-4ee7-89c3-fb4486730bf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5b1a528-d8e2-4fa7-933d-2ac0d238ad4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b757fce-0259-4408-a038-e02c5d84bdcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0d98f67-6be7-4a2b-9db3-0ec364c652fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e6ae27-3670-4033-83b1-f4d80e96e6fc",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589c3d10-fe6e-451e-9730-a61f037e8db2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10a5e0a4-a59d-4af7-892f-c0f26a983d40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a97caf-8644-4633-9cea-2562de8d9a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee67320a-8881-4210-b2a9-0f1b84155435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81152eeb-816e-47a6-ad8c-b56b96c71634",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f1c5f56-abf8-4f3e-b728-fc6cb3cb69a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b634b1bd-05dd-44a7-9295-d161495bc59d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f87898-cf92-4290-b93a-3bead6c2b0bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ada5f00-6c84-4b48-9ddf-14c060ee736a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84fce3c-0378-42b2-876c-2ba731a3879c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e12503-7719-4694-9f04-337c47c6aa04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e87a7a83-20aa-4769-970b-cc1706c38125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "428a436c-572c-4214-b658-1db478c5c161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41a37bd8-d788-4221-8097-a92c13262b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a86ae6d-7133-4503-8637-5c822ff1e192",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f701a4-1f28-4fab-bbc4-fe8baa0e1638",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6871f472-93a0-47bc-a218-289d109a90ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ea4ea6-e015-47f7-9656-2f8d4b06bb68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "694eb0d7-b3fe-43c4-9deb-bd68f9e5bd46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c8ecf1-6f55-48ce-a717-03ab722a6b25",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50625871-5a6a-4ca1-8a6b-d020fd8d650f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47e264b8-0147-4ac9-a61f-095025ef9ef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e2ad5b3-81c2-4ed8-a080-23b4762d2a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eb22d0a-0ee0-4e92-9cbd-d81953a5cbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb6aa40-35dd-4f82-8621-e2118d31a3d7",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "699a65bd-270c-4ae3-a0f3-8b5c1710fee9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c759cee-20e5-4246-ab52-367e49675f15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "296c23e1-010b-4936-85e5-a255f023de1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94e51cf5-e0ab-4929-8cea-80249e156c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e6e48a-cfb8-43ee-a68a-7448bb9799ad",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10bac92b-e9ca-4bb8-9b18-6fb880559bf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4bb1ff0-6542-4346-b63d-666669e7ab7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ebd4438-a089-49b4-bb1a-0ea30c39e8cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9b75a3-8d6e-4bf9-89b9-f275235df8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98c2404-d697-4f66-a23b-4dc2a770dd02",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ee3f5c-7cc6-4eac-a4f9-5cfa0f55b45f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88283d91-72e9-4f43-b6bc-b91c0df5aea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1deb88-1d6a-4a2b-995a-64d4e6bd0c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5616bf40-acd1-4c41-bba5-efdaec9341db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0258e82c-6dc2-4df1-8eb5-2ab76924408d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4fda83-7ae8-4379-9374-b7e398622467",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32060f7d-2d36-4779-87b9-61d7efbe4512"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be9e4e3-ce8d-41a8-98db-aa859c9bfe9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd8fceb5-38e3-45a6-8f1b-af84508c7f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82748145-8c9d-4af6-b9d7-902389607e6c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30946f31-741c-48bc-b308-e7bd0c13d9ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc692955-b709-4ca8-bc65-e68dfc054973"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab2c71f-9979-48e2-a3e0-d448c031b828",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "defc9555-e528-46fe-8797-544a8d3fce94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3860dbe1-d332-4cf5-bf3a-c6880aa33959",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d53eba1-e8fb-40b7-9e4f-5d8535a0110a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5672807-e177-4229-b5be-7e5f644460c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44df3857-f121-4d15-94de-7e7210edc399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d9b631-bb16-460a-b5b3-17ed8d53eb75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dded20ae-50b2-4c18-bde6-427af7263423",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8557ea-80df-465c-b316-9375f3a205df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3071111-5619-4b01-ad76-7d7553466fe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a576036-89cb-42a2-a566-7863581e3fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "988ef555-561d-42e0-a03d-4430545caff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda5ffce-8c02-400f-9864-7cacc06220d7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe2b44c-2120-49a4-ad03-70f425e83174",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b251a4d7-efe8-4044-9a5b-b689a9eed898"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b756dc-24bd-4c8b-b48c-e380c706bfd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c76b2f-f1c2-4602-a066-d7f29706a393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8bae1ab-c536-401d-9526-a2ddcb741aee",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9129e4b-b734-4f20-bd30-00aeda7c7004",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eedcabe2-645e-4926-8fd5-458466247055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aba999a-cbc3-42a4-aa48-f22ece935397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ad039f-026f-40e2-9100-b85ea230ed1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7690d3c3-0f23-4bfe-b5aa-7a683776de84",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dfaa291-62ca-4bf6-9c55-08929eb19d84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "970a3fcc-6a54-4497-a461-7e4350259fb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc94d3cd-59c9-4f26-862b-dffed2cc1a95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4e51f2d-2e28-420e-b280-499744bdca1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa03b36-d6a4-493a-b6e5-597f86b34b45",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4abd686b-690d-4981-9e7e-95f1fe52f23a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30d6abb0-34a0-4d03-adb9-625ccb5aec70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "186db40e-1b81-4695-a786-1960e4b45acd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58070f2e-a7b2-46fc-bea9-b17905e10627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f204ad6e-8a51-4d6a-8c8e-92c287cdbda8",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9021c18-edc4-47ff-8016-3f7b8d466869",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "747bda70-bf0d-410f-8c1d-239b66a38c53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ee439d-17ad-4757-8658-83148d6d7807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ff1788-a41f-4d90-969c-b8bfc7f4f1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d292ad6-1141-4ef5-8504-27c61b1fd986",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735ea536-7438-4d69-b1c3-23d23f96cb31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fe2b82f-a5fd-40c4-a7f1-301b2be25c80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf30a93-27ff-4eda-825c-d3adad315a72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29a4f2f8-5db0-4cde-869e-594c59ef9861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "781d68b4-94f3-4d29-b7cd-e5d3c2b2ac16",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf4e60e-bd30-47d0-b376-7de75fb6137c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "847904b7-93ff-4cc2-976a-f1d5c3009022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db76d125-63e3-47d4-a0d5-8e972ab7c76e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5882df66-3b63-4533-8bf0-9e2c3f5f04fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c998a5fb-d05f-4010-816f-b98f1c52e337",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eece2f5-b4f6-47a4-9806-8abb480fb531",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e3b7e5e-788c-4cdf-a63e-185428c6bf96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "171dd549-d66e-45ee-9587-165ab0b90fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3577d802-d2ad-43b0-8e07-9c6567085d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "399fc6e6-47cb-47c6-a72f-0a8249cd582b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61499181-decd-47af-a40b-0413aaa25b81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac3edf4a-e938-4c72-98ef-a9fead2d676a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c09a9c4f-a056-43af-9ad6-f809aaa931e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55704d70-5325-4057-919c-6a0da313bdb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355c6bec-e754-4526-b10d-d96866e999fe",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b0b241-44fb-4e32-98b8-ad7951f1234f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a81e9f4-84e1-40d2-9f28-093a7a33f27e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a149b8-e45d-4d90-887a-688d9b472804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17fb08d5-d2fc-49bd-850d-7e675220ef2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c81d32-8faa-4a3d-ad2d-bb6d4c45c4f6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa3ff40-eaf5-40f6-9467-79cf81ef7652",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "983715c6-8f8b-45b2-929c-ad4322863747"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92cd1e94-5a58-4ff2-afd7-d4640c50ec60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b762186-3b89-494a-bc4e-547722d07fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed0d2f6-60bd-4f9c-b08d-b785e79818e9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d1b48b-f6ba-40b3-9b10-cba86ed9042b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b070a971-7462-45cf-961a-4bd949aabf14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73742a8-dbc5-4d07-b046-a1a8b2168a7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce90b888-39ac-4716-95fd-3c5c98fdabda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac197dd-b500-4d28-93ad-76c57a62aaea",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c4d895-f39b-4fa1-a3da-40ca802b14b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a281dec-a572-4513-b30f-09180701e65b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4869c6bc-74f8-494c-beb8-a8ffaf5f74cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "572fd9c0-19ef-43f8-a37b-508c626f75b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f75f89a-452f-4c78-a2aa-ffe4ec7e4d7c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a57894c3-0c18-494e-8a4d-b6c95b7744a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41ff0ee7-0ce0-4849-9797-728929721f2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b00a33-85ab-4a76-b9ce-5174562a48b5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a45f289-0c85-4b9c-8750-06d79f6a57aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb37ac0-9812-461d-8807-c452b1ea55f4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dfa48ff-e1bf-435e-a122-64b158c02145",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0285bf6d-d361-4ce8-8476-63f75964e4c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd432d4-5086-43ed-9fb1-6957cb91d109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a91197d4-5d3f-4187-884e-e7fcb66a9496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c74943-6124-434a-87fd-c4d5fb8b4234",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d17797ee-a5c3-4e05-ad73-088eedb9908c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f344dda3-f172-4bfb-9d09-1a7fac49a8fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74832f17-2cb4-4c57-bd1f-5b8716fbc2f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8a4bd71-77fd-46e3-815b-c67f42d110ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387fe10a-d901-49fd-ac6f-1148b4c748a6",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a51c82-a6f3-44ff-acd6-de9f765e33fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfe6744e-2e92-48a6-89d9-90ccded954e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77dfce9-ee1b-4712-9bf5-92682b0204b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbdb6724-704e-4a5e-b87e-228905328be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102f197a-4e03-42f1-b899-1126bc96f313",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816721ee-5da3-4547-8220-540745b8c336",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c49adbed-7668-450c-ba58-89253a9f012e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4039da8f-38a9-45a8-9e8f-0d48c5d5623e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4cea472-ee8c-410e-9e1f-1a3711ed3e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7befbf0c-fa90-4f41-bdcd-de3a442c94e8",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888a45aa-42d8-4df6-a88d-0e73cb615245",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbd80a89-3772-41a8-9556-5ac0be2debbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c35db24-3b9a-4328-b015-d465fce67019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abcb5072-b7c2-4268-b010-b678229cdddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8d33a1-4f0a-410c-8075-a4752dae311b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a5bd51-b1e2-41f5-ac01-bd839ea6d8e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98e4a967-e4e6-4d78-b709-364a9c1ca3c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b20649-32fe-4c10-ab76-bdd36262c149",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96517c73-3bd3-44d7-ae5a-bb6e7619092b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8002fd-2753-4158-b880-9c90532a8ed6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b47d0760-5d76-4b60-9ea3-c80820ef6ef2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ba5199b-9711-411f-a0a8-5827e5a0eba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c919c6d7-8fd5-44f0-8885-9d0f40ee29c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37451b0c-b5ba-44b4-8fc6-c7659b72e45a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55aed192-4606-44cd-9e25-07cf01f71a56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8965909-c03f-4b16-a12c-033be827e2c7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "29953429-f6be-46b5-85be-12ba84855f15",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f08ef828-735f-42d2-b3d5-6b4755ad2efc"
                    }
                  }
                ]
              },
              {
                "id": "7d003ea0-81cc-44d1-9806-bab4f522e5ed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d5feb012-8f52-49df-a973-a3b3ec587e0d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f987e4ba-5531-4fd6-8eb7-b94a5683f176",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "33339c1b-2376-406f-a384-6b9a6f3a3fbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d55eda1-7787-4e24-85b3-17f88fd3ed77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f91ee103-27b7-4b02-831e-40f2368d991c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2957f461-39de-4dab-8f46-18c3cb8c3ac4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b392fcd7-4588-485c-94ca-e17e3e9dc7cc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba12d241-1092-4795-8475-3ae439dee1b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7ba93f8-b2f4-42ca-b1be-cb83c88d40f7"
                    }
                  }
                ]
              },
              {
                "id": "313f7cfd-4d40-4aba-bfcf-425362911538",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "89750647-05c4-40e3-b987-799eb8cf641b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "310b20b5-917e-4701-8834-b94bb3ff3bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a467169c-758d-4a2f-a5f2-00ad6cd173a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af36f208-7ef6-42c3-87b7-ec7f56288b4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d8e2986-9d3a-40e6-b3a8-f546505443cf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4144194c-7c69-423d-b39d-e87d4e6ff54f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "774ed988-1e27-41d0-a0a1-aa51bb0528e0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1acad431-4fd2-493d-85ee-9e029e3f3657",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "90d2d29f-7f59-40d6-91d4-8b7a9df6158b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d49dfac-2b85-4382-820b-808395ba46fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19e37ce6-3ff6-4942-8531-817ba38cc85e"
                    }
                  }
                ]
              },
              {
                "id": "8e5307bc-30f2-404d-a900-166af41178e4",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db424a32-5234-48c1-b09c-7cd5dde26bc6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fc5951a1-1111-441e-8991-c4169726a856"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a39dbdd-c932-4c0d-8a84-3bac66a15d2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d67e6ab-08ff-420c-a558-f8f1ceb73c12"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45af65d1-3262-492f-8440-6b06a37f0fc9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "95741de9-efa2-4d62-8f17-8217b742a90d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b02564db-7edc-4345-aae3-87c07f13e700",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2344c5b9-34d5-4f58-8e42-e728f4d3ae61"
            }
          }
        ]
      },
      {
        "id": "f7d0b450-587a-4a8c-9248-d55cd68c0d74",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "423ab092-6122-4391-8c96-5b2dfcb1faf8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1d85944a-843d-46d4-812a-cd1aff02f631",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d9b3a3d4-ad7e-42a8-b181-3efebfb70e47",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f84c452-e362-49ce-8b4d-9cb45dc72464",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "10feda66-8c08-4997-9969-30bc75f2fc8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ffe794-b5f2-47ce-8ffd-0404da458c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0831187-5a56-4f05-af30-533d57812034"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "edc844b9-e19f-43e7-b4df-b7bd930778f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5da83cd9-4fb2-4792-84d8-915461770257"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4a1b70e-0bf7-404d-9f1f-fe829fd1148e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b3f98f9-d5fd-42ba-9af5-85c9c946d07b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93ec9af5-e145-471e-b6ad-54a2e8863aed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c12720b4-a574-4bf6-960a-7a52a5094cf1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9aa260f3-9f67-4704-ae0e-d3aefb2508c2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d75be43e-de5e-4407-8860-31354e2633bb"
            }
          }
        ]
      },
      {
        "id": "af832ea3-7a2c-4c6d-a563-0be768727952",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7fd8c051-f35d-4e49-9f75-9bcd8fda9ba4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "50c82831-9a06-4066-b9ee-44bb847b2cff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "114c5807-294c-475d-bb5c-194cc15c36d7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920e991d-9fec-4763-adf5-07e10a2cc28b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05e9a789-6def-48b3-b4c0-050e766f58a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae252421-c814-4c6d-8795-c8210b5fad41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69c7eddc-bddd-46a6-85ee-48283afedafe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54d8c794-bfae-4698-a2bc-90b59528797e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14d90815-7c5e-425a-bcf9-3806a7bbc1e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f64f839-c0d5-4d19-a2bd-4cf29073c217",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a69604fd-700f-458d-afed-b0980e14cc6e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d204b707-92ac-440d-89a2-6b38206539f9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "534181bf-3bdf-4bae-b448-bd43894a975f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7fc51e55-5293-418f-9525-eaa6c7d174d6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "18295193-817b-48e0-86c5-8760ed4614f9"
            }
          }
        ]
      },
      {
        "id": "35cbee84-2aad-4a40-8ed0-0b21442df20a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d9770233-41e9-4540-ba2b-c8741a476a1d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4c2ac4b3-0d80-4231-9914-4a468c0abcf5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47fad394-926b-469b-bdcd-0b0eea021fca",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9fb9004-7188-42e4-9abe-63d3b4bc60ab",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28016f4e-51a1-4f81-9b92-999089c2befc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb47642-16e9-4d51-938c-5bab1f29f038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7013b86-0b22-4943-bfc2-837e577f16a0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a5c371b-1354-49a4-a3f1-34fe5f7bcda4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee2e84ed-8f75-4d7d-98e9-a00af991cca7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "425363d2-3fdd-43f4-98d5-61cc3e9cb367",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c457dc9-9e91-4ec5-9f2f-f2e02768aa90"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5905854c-df23-4551-955f-9637b366a049",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8b3847d9-a04e-4ed7-8e4a-5838e3307aff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "25ffc9c1-cbc5-4037-8463-3ddbc958d407",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "72648aaf-ad4d-4070-a099-7bdda531f3e5"
            }
          }
        ]
      },
      {
        "id": "8e6d236a-d654-498e-bc56-29f6ab49bbbb",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "88003b60-416f-461b-be3e-0dba03626548",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f347263c-4360-49e8-bd1b-4b471340d6c5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "85eb2c7b-c073-4aa2-859e-93c0778612d2",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a2a156b-affe-44dd-b5aa-37557dd0da3b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7dd79ac-e699-458e-a22b-7709894a41c6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 61.76842105263158,
      "responseMin": 9,
      "responseMax": 574,
      "responseSd": 74.73482280444772,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1700440579479,
      "completed": 1700440606453
    },
    "executions": [
      {
        "id": "ab865dd2-bba6-487e-af0a-35aedb4d8152",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8deef7b0-9c46-4d41-878e-387ab46f3060",
          "httpRequestId": "a703ecac-593f-4a9e-a1d5-731cd8518eb3"
        },
        "item": {
          "id": "ab865dd2-bba6-487e-af0a-35aedb4d8152",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "06e62218-be74-4966-9ba9-48b3d7ba4925",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 0
        }
      },
      {
        "id": "460bd082-b3ab-4ec6-a67b-464483992ea5",
        "cursor": {
          "ref": "8f8c0c55-7395-4d94-b48d-c33422deef8a",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f1c57904-6181-4891-a9fc-428fdaf9d978"
        },
        "item": {
          "id": "460bd082-b3ab-4ec6-a67b-464483992ea5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9384ebbf-00a0-49e2-ac6d-ecaf01123816",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "d8e38157-74c4-4845-a341-bf405c7cce4b",
        "cursor": {
          "ref": "137621de-9430-447a-8088-2bbf07a30192",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6980c3cb-c9f5-428c-b23b-eac2e22f5501"
        },
        "item": {
          "id": "d8e38157-74c4-4845-a341-bf405c7cce4b",
          "name": "did_json"
        },
        "response": {
          "id": "949aa93c-f7a2-4bc4-9cad-dc92b3b76adf",
          "status": "OK",
          "code": 200,
          "responseTime": 174,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a84191-36af-408a-aaf1-8c073d1846a5",
        "cursor": {
          "ref": "017ab865-087b-4417-a78a-50f28c4fe847",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2909f7b5-3423-4c0c-8b6a-2b3b86894d69"
        },
        "item": {
          "id": "88a84191-36af-408a-aaf1-8c073d1846a5",
          "name": "did:invalid"
        },
        "response": {
          "id": "3580ce66-eb37-4616-b920-ac7953f9811f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a84191-36af-408a-aaf1-8c073d1846a5",
        "cursor": {
          "ref": "017ab865-087b-4417-a78a-50f28c4fe847",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2909f7b5-3423-4c0c-8b6a-2b3b86894d69"
        },
        "item": {
          "id": "88a84191-36af-408a-aaf1-8c073d1846a5",
          "name": "did:invalid"
        },
        "response": {
          "id": "3580ce66-eb37-4616-b920-ac7953f9811f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6554f633-1546-4001-b160-55ac955bf50b",
        "cursor": {
          "ref": "42b4b953-8a59-423f-bd01-285f77ab9e3a",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "02b11947-bb7d-40e1-ac18-7351b31d2cb1"
        },
        "item": {
          "id": "6554f633-1546-4001-b160-55ac955bf50b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d07aa813-e7f3-444c-ba62-69e6fcb751a7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 102,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5894d201-6438-4dd9-bb6d-57dd9faead30",
        "cursor": {
          "ref": "d8b2eec4-7df0-4b5e-8a91-447ec2aa951a",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5123c232-402b-49a8-9877-c596da2068c5"
        },
        "item": {
          "id": "5894d201-6438-4dd9-bb6d-57dd9faead30",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4958c771-f31b-4243-ad73-57ca7db41a4d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1609132-20df-45a8-82a8-ce7848c6ed6f",
        "cursor": {
          "ref": "b1e492c7-04ca-434c-a4fc-555c941b9d05",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "64a90cff-9f21-4a5a-aaa9-aeb827ecd420"
        },
        "item": {
          "id": "c1609132-20df-45a8-82a8-ce7848c6ed6f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ca4a17c7-1cde-4682-a9e4-2ea4be702905",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf545a5-836b-4730-ac1e-4e7356217857",
        "cursor": {
          "ref": "5580af91-fc95-452a-bb87-f23fc761a37e",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ac693147-4d7b-4038-85e3-b524d0f196cc"
        },
        "item": {
          "id": "9cf545a5-836b-4730-ac1e-4e7356217857",
          "name": "identifiers"
        },
        "response": {
          "id": "27e326d5-d090-4bf2-affb-f06cd1273700",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd2b837d-1dcf-4cc3-8ad6-db2cb0116e70",
        "cursor": {
          "ref": "d51c2c63-c943-44c1-b069-3575af89f10b",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6dfc2cb9-dd75-4b55-a835-d993288e5235"
        },
        "item": {
          "id": "bd2b837d-1dcf-4cc3-8ad6-db2cb0116e70",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c40fe10f-7478-4123-bc56-61c21da19457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f68f74-ac50-481d-94c3-3771e58fba83",
        "cursor": {
          "ref": "888e7fde-55ea-45fd-a191-c0869dfc4ada",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "015b9fa7-36ef-4496-bc43-fc5f1482390c"
        },
        "item": {
          "id": "78f68f74-ac50-481d-94c3-3771e58fba83",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "93b130b1-f725-41e0-a296-c35235adb9b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1a30a1-3d8c-41c1-9d9c-c4d5e45cc3ec",
        "cursor": {
          "ref": "c071c8db-95f6-4d54-a80e-55dab2f291a7",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d321c3c2-105a-4596-829b-e784a249843c"
        },
        "item": {
          "id": "ad1a30a1-3d8c-41c1-9d9c-c4d5e45cc3ec",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0575485b-fa1f-4c55-b636-cec986cd2cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bdaeff0-c72b-4c9a-bb67-394b81cfa73a",
        "cursor": {
          "ref": "2e1ada51-fe10-4a33-9064-d811e24c55ad",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "79273de7-72ab-4099-aad2-eebc6a7e18c5"
        },
        "item": {
          "id": "2bdaeff0-c72b-4c9a-bb67-394b81cfa73a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7fa94845-55f0-4fbc-81c3-4c9d16db7f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730863a0-b38e-485f-85e2-4f0c5d6a8923",
        "cursor": {
          "ref": "7604aa38-0f5a-407d-99a9-94b4c2adb72d",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6c39dd3e-77f7-4040-add7-da20809a9738"
        },
        "item": {
          "id": "730863a0-b38e-485f-85e2-4f0c5d6a8923",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b8fb2058-590a-4f73-8c21-47bbd46bae68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dd3a51c-d7c1-4a97-9e7d-5f7b50c66d45",
        "cursor": {
          "ref": "8ed1ca0a-217e-4ce0-b35d-3a601a84e6ad",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3a70f764-e3cb-47bf-afa8-8910835f775a"
        },
        "item": {
          "id": "7dd3a51c-d7c1-4a97-9e7d-5f7b50c66d45",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7cd5b743-9d81-4e98-835a-f8004d85e563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07db4029-659a-46e1-ae92-124c2f7e3dae",
        "cursor": {
          "ref": "c50a5df2-be63-4666-bae3-70e1076fed59",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7ffee22e-51dd-4fa6-975a-4516f5eee623"
        },
        "item": {
          "id": "07db4029-659a-46e1-ae92-124c2f7e3dae",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "1c6fe93c-4177-4376-bdde-b5a24c67db8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4654e5f-94f2-4cd2-a810-1b1e1675100e",
        "cursor": {
          "ref": "e245bc9d-2cbc-41f4-86c6-eeb5127afeda",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "21460b01-7589-4775-9e7b-3f16b5c1f369"
        },
        "item": {
          "id": "e4654e5f-94f2-4cd2-a810-1b1e1675100e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "54356741-fd70-45fc-93f8-c3a5c1cb94c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542e07f0-9e6f-4eab-aea9-3994a54762d9",
        "cursor": {
          "ref": "6d2d56b4-0b19-4e9b-8289-a302cb2c2949",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5dc931b7-e00a-4b1f-9631-32bf8d3448e5"
        },
        "item": {
          "id": "542e07f0-9e6f-4eab-aea9-3994a54762d9",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "418418fa-79ee-40e6-a145-683b32f8a1cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3860f66-4c9b-44d3-958b-333262609c28",
        "cursor": {
          "ref": "dc5de089-0dd1-4f3b-a22a-028104efb7a1",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9174f607-e869-4f56-9739-93a81fd2b9f4"
        },
        "item": {
          "id": "b3860f66-4c9b-44d3-958b-333262609c28",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "95a709b8-a059-4be2-a4de-760cf0e0a874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b8ec527-26cf-4120-b93d-34657d3d6517",
        "cursor": {
          "ref": "13261a78-06e3-4c05-a748-836490954036",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "47e81854-4f47-49a3-a55d-b181a643b739"
        },
        "item": {
          "id": "8b8ec527-26cf-4120-b93d-34657d3d6517",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d7441369-7491-4527-8773-4bcc7b5d008e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563d87e2-9615-40f6-bfa5-958abcf85424",
        "cursor": {
          "ref": "0a487976-387d-4379-9f16-ef7caf4e7726",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7252cfd6-8294-4502-b907-591b03895220"
        },
        "item": {
          "id": "563d87e2-9615-40f6-bfa5-958abcf85424",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f59759c2-364b-468b-ac46-bb452e049af9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22cb71fe-c10e-4915-938a-213d0b62d1d8",
        "cursor": {
          "ref": "f0b03cb7-b252-4f53-97c5-f312e2a14ccc",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2e34fb57-f7c9-445d-ad3b-6f7f649bed08"
        },
        "item": {
          "id": "22cb71fe-c10e-4915-938a-213d0b62d1d8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "de905b0e-15cc-436e-ac66-7afa1bbcf0a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfda8083-753b-4c8e-984c-7f6a38a64ccc",
        "cursor": {
          "ref": "396180f7-685f-488d-aded-218d6b9bb595",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8905cd98-2966-482a-b3cb-fc8832b84140"
        },
        "item": {
          "id": "cfda8083-753b-4c8e-984c-7f6a38a64ccc",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4726816e-8ce7-44b5-bbed-9c5f969a9ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9fc578-f7cb-4221-bd90-624bf4513c53",
        "cursor": {
          "ref": "a2684aa7-75fc-4e21-8b7b-278d186403b9",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a56e9acc-b74e-42f7-b9c7-bc57e00dc412"
        },
        "item": {
          "id": "6f9fc578-f7cb-4221-bd90-624bf4513c53",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f11162b2-2d93-4937-a854-637cfc2d135b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d769545-227e-485b-87b9-075b5c478ad8",
        "cursor": {
          "ref": "0203810a-88d9-4c9f-8ace-19c926933ae2",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "67248f73-cb5b-4957-a19f-6492e1da5c70"
        },
        "item": {
          "id": "8d769545-227e-485b-87b9-075b5c478ad8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f31596d3-9ef4-4709-b2bc-c6045aa94258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151f5927-4d19-42ef-9960-3dad68207daf",
        "cursor": {
          "ref": "8f511843-b83e-4712-b6c0-55faa19f19a1",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e98b21da-c9a3-4784-8214-2fffd4c95a19"
        },
        "item": {
          "id": "151f5927-4d19-42ef-9960-3dad68207daf",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2afb928e-62fc-4cbb-a805-f449b2c1de90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3183438e-565e-42f6-84cc-d488ff5d9e65",
        "cursor": {
          "ref": "dd71da56-d3d4-463f-9ed8-304b8a0a2685",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6bdebbf5-eeca-45e2-b566-89f692132732"
        },
        "item": {
          "id": "3183438e-565e-42f6-84cc-d488ff5d9e65",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9213cb3f-7287-42cb-9db0-d754e080b5d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd125c6-61ab-49e4-9d32-4f16b1a02d5d",
        "cursor": {
          "ref": "084f7744-1cc1-445e-9482-1c146782cc13",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f43b5ec5-6a55-40e0-987d-3c544bba002d"
        },
        "item": {
          "id": "efd125c6-61ab-49e4-9d32-4f16b1a02d5d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ff3df63a-a73b-450f-920e-6fe28484015d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "306a8746-1f49-49b7-bdc6-4d670747b9b0",
        "cursor": {
          "ref": "cce3ddff-20d4-4b38-83f3-27b1405cdd57",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c6d12a60-f14d-4556-a309-1e34cf758c92"
        },
        "item": {
          "id": "306a8746-1f49-49b7-bdc6-4d670747b9b0",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c32680ee-9d88-42a4-b3c5-c7cf313bc5fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46af052b-bd4a-491e-8d5d-a8bb8fde7432",
        "cursor": {
          "ref": "8d2025b7-d476-4753-bbda-bb5e17882cb5",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fcccaf6c-23d3-4706-b0f7-2da7370f4963"
        },
        "item": {
          "id": "46af052b-bd4a-491e-8d5d-a8bb8fde7432",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4c520596-9bf2-491c-91f1-c87151da4d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5724556-9e6c-461e-a5f5-d7951231fbaf",
        "cursor": {
          "ref": "52e9f7b8-28d9-4fd2-a508-2537cf6f5b0d",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "38019599-f3a5-4917-bcfe-5c1d5d010a71"
        },
        "item": {
          "id": "e5724556-9e6c-461e-a5f5-d7951231fbaf",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7a9c2315-07c2-4286-9f73-569d910345e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065d82a6-1d33-461a-91b7-dbe813012d8a",
        "cursor": {
          "ref": "3f9bc792-76d8-4571-8a1c-6542daa46de0",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1ba93d77-aaf4-4e23-b3fa-c9d8482040f5"
        },
        "item": {
          "id": "065d82a6-1d33-461a-91b7-dbe813012d8a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ad889b7c-995f-4461-af11-ef7a28bc4655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e46d1d-da33-4644-8ad3-921652f67449",
        "cursor": {
          "ref": "8c967f38-7d58-4201-aa65-853db2dc5ab6",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d306675b-e30d-4917-a995-c731893e76f3"
        },
        "item": {
          "id": "c3e46d1d-da33-4644-8ad3-921652f67449",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "51794db8-fa72-40e3-a806-e03a46569abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "983be79b-a7bc-4424-9e57-90db5c6c4224",
        "cursor": {
          "ref": "2f8e9faf-c9a8-4f65-b2e1-73d0a2f7786d",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5d79c15e-3756-4cad-bdb6-c295b8e51fd8"
        },
        "item": {
          "id": "983be79b-a7bc-4424-9e57-90db5c6c4224",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2753e314-8de0-4fa7-8327-7e324b4aa2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84335e72-e7c6-4d64-9e15-8c68622734bf",
        "cursor": {
          "ref": "b55c8826-b972-4c5d-b840-28a54fafcfe6",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a3e1c15a-419b-48b5-9d13-c7389c37c46f"
        },
        "item": {
          "id": "84335e72-e7c6-4d64-9e15-8c68622734bf",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "12dae3bd-1501-4aae-a976-5ae23601e3ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98315b64-773f-46fa-950f-8ab07e5ff2b1",
        "cursor": {
          "ref": "24fea043-bea5-413e-94d8-837e9b88254c",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7eb10407-f664-4672-97a3-5cdc9d5a1679"
        },
        "item": {
          "id": "98315b64-773f-46fa-950f-8ab07e5ff2b1",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "32926a47-9b71-4bb4-9d0d-f74c0ae8b1bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57d0de8-fc7a-487f-b214-69430ba44990",
        "cursor": {
          "ref": "211f648a-e287-40a2-8a7e-f8049caa6c9b",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e59da016-4f20-495b-9a48-98f19c218945"
        },
        "item": {
          "id": "f57d0de8-fc7a-487f-b214-69430ba44990",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "64495a2a-b3fb-4db0-80fe-398ffbd9c191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "423d479c-adbc-4fd0-b2f9-6e7b5930d662",
        "cursor": {
          "ref": "279a8afc-509a-4c4d-96e4-3774f6bd8e10",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ac7386f4-3f27-44ea-93d9-b78d3e3d7c32"
        },
        "item": {
          "id": "423d479c-adbc-4fd0-b2f9-6e7b5930d662",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1293f921-0fba-4291-8a8c-65caec5faa38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d967205-4678-474d-8dcb-7bebd7db1346",
        "cursor": {
          "ref": "1bd5e157-2500-49ad-b2a8-d064c22a2198",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7d8ba702-97f6-41c2-80e5-1c0cda7e1fdc"
        },
        "item": {
          "id": "1d967205-4678-474d-8dcb-7bebd7db1346",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "59346455-6460-46e3-a780-f92bdf1a630b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77cf34d-cc0e-4e07-b890-efe717867b8e",
        "cursor": {
          "ref": "b342abe2-fc65-4a6e-88c3-18118a9e5e1c",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9b3061cd-86e7-461d-b25a-335a459dfe4f"
        },
        "item": {
          "id": "b77cf34d-cc0e-4e07-b890-efe717867b8e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "77822c7b-51fd-4be8-b69d-f3746b3a801f",
          "status": "Created",
          "code": 201,
          "responseTime": 539,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "9b0fefd8-92f5-45df-92c0-edcb1249529c",
        "cursor": {
          "ref": "83809a9e-3b18-49bb-8eb7-6d61b16ec154",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e89beb09-253c-401f-a44e-6f8f0e73ec92"
        },
        "item": {
          "id": "9b0fefd8-92f5-45df-92c0-edcb1249529c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1c58331e-e5fa-4648-9026-01668f29a853",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "53758b8c-b05d-40b4-8008-e68b92c02ca1",
        "cursor": {
          "ref": "72d4e757-43de-4d65-b35b-6c56df976322",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "10fce2ca-cd39-4d38-8b1b-2b235c16c84b"
        },
        "item": {
          "id": "53758b8c-b05d-40b4-8008-e68b92c02ca1",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "72bfa85e-d3df-401e-8824-1d66b56b9fde",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "955d51cf-0317-4576-a937-2b94a624e7b8",
        "cursor": {
          "ref": "28a406de-2f16-4e0e-8081-d349c6223304",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d296586b-ee8c-4e82-be45-8f127812c1f1"
        },
        "item": {
          "id": "955d51cf-0317-4576-a937-2b94a624e7b8",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b390de9d-ea95-47e8-82ea-f5bddb5368bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85c8803-da3d-404c-8f0a-8fda6f0b47f7",
        "cursor": {
          "ref": "09bcb9a2-dd09-40b0-8ce2-2a0336d71ed5",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "812733b8-e7e6-4ff9-86c0-eca037244d08"
        },
        "item": {
          "id": "e85c8803-da3d-404c-8f0a-8fda6f0b47f7",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5044c1d6-7e35-494a-bc38-41151d264c2b",
          "status": "Created",
          "code": 201,
          "responseTime": 574,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2f808450-4077-4d16-ac18-d1b7e7798666",
        "cursor": {
          "ref": "6bf6816e-7384-449e-8663-e9eb21f43b86",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e1a81483-85a6-4d2b-93e1-aa5bb5858349"
        },
        "item": {
          "id": "2f808450-4077-4d16-ac18-d1b7e7798666",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "bd734c41-c30d-4f5f-b97c-b2d35cceeb4a",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c7a41772-3410-49f4-ab2d-b62b18fb1201",
        "cursor": {
          "ref": "d153db42-9c20-4248-8584-50460306e76b",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3759039b-0e82-4712-9882-0021d1317304"
        },
        "item": {
          "id": "c7a41772-3410-49f4-ab2d-b62b18fb1201",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0bffe8b8-c456-46dd-a9ec-c83820e532b3",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e51b9532-6318-4217-a4dd-a4cb8e74c41f",
        "cursor": {
          "ref": "f4a902d7-1ff6-485c-ba21-275a8fdf41f8",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b850c7ab-8476-43ad-bc8e-67c505cfb2bd"
        },
        "item": {
          "id": "e51b9532-6318-4217-a4dd-a4cb8e74c41f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a78e6ddc-2f3c-46f4-9609-0227b4bc28d7",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0cbf8bba-2c8c-4057-adf4-4700e4761d58",
        "cursor": {
          "ref": "a4312447-fc08-434a-a77f-645f467a018f",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b7539026-95b4-4c24-bfe4-22c238709129"
        },
        "item": {
          "id": "0cbf8bba-2c8c-4057-adf4-4700e4761d58",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f54b0dce-1a0e-4a43-b350-c8f6ce7a7ee3",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "98beaa7d-edb5-43b5-a66e-4e7d2a616c26",
        "cursor": {
          "ref": "157453fe-99db-419d-998e-f4bd9912ee20",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "888374d4-dc8a-4343-b778-ecb380c6ee12"
        },
        "item": {
          "id": "98beaa7d-edb5-43b5-a66e-4e7d2a616c26",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f3657096-e8a0-4748-a9c2-ba7338ceb38a",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "65a49fad-ce5a-442c-94f5-5b20aebca373",
        "cursor": {
          "ref": "f5854aac-5a63-429d-9484-5944e9ff5275",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e5bf4ea5-77b9-488c-b0d3-bfad6c6feaf6"
        },
        "item": {
          "id": "65a49fad-ce5a-442c-94f5-5b20aebca373",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2c3c94f4-5eb9-419b-b5d8-01cba0ee1062",
          "status": "Created",
          "code": 201,
          "responseTime": 211,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "9f493629-8ec3-4a8d-b645-e3f020548958",
        "cursor": {
          "ref": "780f808f-502b-463f-8310-eed91ea5b40a",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cdee807f-786c-40af-920c-a231627723fa"
        },
        "item": {
          "id": "9f493629-8ec3-4a8d-b645-e3f020548958",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "2c4caa2e-a0c1-4d11-b0d7-18984c4380a3",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "caec092e-614f-4f6f-8520-cc1bb0d51e87",
        "cursor": {
          "ref": "2dde4d10-c0cb-4679-a411-7b7264ab832f",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d7d0879d-82fb-4181-b4e7-e73280200852"
        },
        "item": {
          "id": "caec092e-614f-4f6f-8520-cc1bb0d51e87",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a519969f-4105-41a0-aafd-412d66954413",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5d2c6080-8de4-4a7b-a2ab-374bbbd2d908",
        "cursor": {
          "ref": "1f2b2d88-7600-4a7c-8f25-865455f3838e",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0a7cb776-3b86-415f-b28d-4e33ccbef6c4"
        },
        "item": {
          "id": "5d2c6080-8de4-4a7b-a2ab-374bbbd2d908",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3024473b-7df5-444f-95c8-a467a77cec13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b730abbc-a895-4ffd-b8a4-db75580cc324",
        "cursor": {
          "ref": "9c9e2cc6-1131-4f6a-bbf4-c24c78a790e7",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f637caca-776f-4862-b259-ed3ade1494b5"
        },
        "item": {
          "id": "b730abbc-a895-4ffd-b8a4-db75580cc324",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9fb8ba5e-0463-47af-a175-377e91b19145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa552b84-4ac2-406c-b2cc-cd4ff5cc2d92",
        "cursor": {
          "ref": "d0134110-1b49-4544-adc0-6db7a28a85ab",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "42931cd1-95a8-4e30-94d4-8b0d6f520fa8"
        },
        "item": {
          "id": "aa552b84-4ac2-406c-b2cc-cd4ff5cc2d92",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "30caabf6-9d31-4691-b7c8-94792c77e9c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d290ad73-2d45-42e9-a4ae-3f57467cd55e",
        "cursor": {
          "ref": "cd5206bf-8b97-48f3-bb7f-a67be6dd711a",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "511c8f93-0976-4ae8-b43f-55b8e8802071"
        },
        "item": {
          "id": "d290ad73-2d45-42e9-a4ae-3f57467cd55e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c677310d-9ac5-47b3-a478-c34cded6b691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dbcedfe-9111-4d58-89b8-1d25b7ce8578",
        "cursor": {
          "ref": "0058dd1d-dbca-4318-a1e5-2368b9bbbda7",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "75c40ce8-996d-4ec1-9f09-fb7846bb2599"
        },
        "item": {
          "id": "5dbcedfe-9111-4d58-89b8-1d25b7ce8578",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8af2a109-3815-462c-bbf1-374c0aacf307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc46ee30-dd46-4e07-a669-871c3766c2b2",
        "cursor": {
          "ref": "91573e13-b6c0-4292-b4e7-dbc999fac45a",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8847e658-33a6-4fe1-8fde-b2b954537234"
        },
        "item": {
          "id": "bc46ee30-dd46-4e07-a669-871c3766c2b2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "13142d26-1ba3-46d6-8815-349c11ab267b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "821fb468-d120-4f89-885b-5a64c18c982d",
        "cursor": {
          "ref": "ec60d24e-8fc4-46a6-b052-175c94e9b89a",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1b5dbd37-baf1-413a-912e-461000609d20"
        },
        "item": {
          "id": "821fb468-d120-4f89-885b-5a64c18c982d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f9068f72-eb50-4906-ada0-da9e9e2305cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93582dc0-116f-4e7b-95fb-d9c0619992a0",
        "cursor": {
          "ref": "4d4d85e5-5e9d-46b4-945d-849c4b6ccaa7",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2c17d3e9-f13b-41df-8b00-681132ae7d77"
        },
        "item": {
          "id": "93582dc0-116f-4e7b-95fb-d9c0619992a0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "20c0d295-9952-48cf-a625-111fea05a971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d84724-5a71-4117-beda-bbef162a3162",
        "cursor": {
          "ref": "e927fa71-ba56-4b15-8d74-4b61a3acdbd7",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "53449942-8ee5-4894-9b09-d1b207ba7fc6"
        },
        "item": {
          "id": "c7d84724-5a71-4117-beda-bbef162a3162",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "cc072b8a-68c6-46d3-9249-dc27ff6083d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce339838-3ec7-45f0-a4d9-514c24dd5743",
        "cursor": {
          "ref": "fff652dd-93fc-4ad2-9c0e-6f35945611a2",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f9d1a5d7-61fe-40be-a505-a6db87a0900a"
        },
        "item": {
          "id": "ce339838-3ec7-45f0-a4d9-514c24dd5743",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f1786dda-2662-415c-a458-3cab592859f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2592f83-97c6-4378-81de-196e380c16b6",
        "cursor": {
          "ref": "ea8c5e3c-a1f3-4664-b473-8cf0070b0c8e",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ea3ef440-00b8-4cd1-bf02-b66339d698be"
        },
        "item": {
          "id": "b2592f83-97c6-4378-81de-196e380c16b6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "24fcb912-0385-4bb7-bac4-fb580eeaf85b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cff4d22-a343-412d-bc67-288b72db09d9",
        "cursor": {
          "ref": "3a8a8e4a-5e95-42a0-be69-5d084974befc",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9596d010-8844-43f3-979e-7d9d5ff0df83"
        },
        "item": {
          "id": "6cff4d22-a343-412d-bc67-288b72db09d9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8e9a22f1-1d90-4838-bd9b-f2d7a44b9bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40605b5b-ad4f-43d2-83a0-0da07719be9a",
        "cursor": {
          "ref": "2931a278-67ba-42d5-8c32-ff132fa0c9b8",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f7150cda-a7e7-48a5-a7c3-2d11d57a7077"
        },
        "item": {
          "id": "40605b5b-ad4f-43d2-83a0-0da07719be9a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "76215bf2-588a-4f42-94a9-86cadd6eefcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95bb04bc-859f-4139-aaa5-0a98ddc0a88c",
        "cursor": {
          "ref": "d2bab53b-47e7-4933-ae1e-c3834cc088f1",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b0c0dd2a-b28c-4696-bf9d-f374171c2d7c"
        },
        "item": {
          "id": "95bb04bc-859f-4139-aaa5-0a98ddc0a88c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "433a368b-e039-48ee-830d-e53eac9f9b77",
          "status": "Created",
          "code": 201,
          "responseTime": 421,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "bbd22e9c-70be-41a2-81c5-4bff6fbd85ef",
        "cursor": {
          "ref": "858228eb-4255-4465-8a0e-8c084ef29eaf",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "80692f5b-fcd5-4660-92e2-93cb05e96d4e"
        },
        "item": {
          "id": "bbd22e9c-70be-41a2-81c5-4bff6fbd85ef",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1658c97b-8fb5-428e-a6cc-f0f8db876f6c",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "e8ee38da-ff68-4bb2-a178-b553a19260d4",
        "cursor": {
          "ref": "b3b5233f-ad6c-469b-9c7d-d1819bcabed1",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c672a80f-8775-4e9e-9801-efc26b01cd28"
        },
        "item": {
          "id": "e8ee38da-ff68-4bb2-a178-b553a19260d4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3f417e5d-95d0-418d-83c1-db947f540799",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "4f87c2b5-2649-4364-a08c-e170337ffe75",
        "cursor": {
          "ref": "3f478c8e-9d61-4149-b208-d4ddf8960ba1",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "845bb637-7b91-4100-a194-c6962483d967"
        },
        "item": {
          "id": "4f87c2b5-2649-4364-a08c-e170337ffe75",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a32090eb-f57c-4fd6-807b-dd46421d9e9d",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "56b8fff3-5c49-4297-ae9f-aceba4c16cd1",
        "cursor": {
          "ref": "7d85d2d7-9d6a-40f4-b8b2-02a3b5286f28",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c12086c8-9063-4a2e-adc1-e51760f01647"
        },
        "item": {
          "id": "56b8fff3-5c49-4297-ae9f-aceba4c16cd1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a8e2754e-c524-46ea-b36e-84d63717e70a",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7dc0f36d-684e-4bf0-aafd-a80933253fae",
        "cursor": {
          "ref": "2d5b00d7-75af-44e5-8155-87c9273342f7",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e904ebdc-eb9e-47af-b5f3-5d1cbb8fe727"
        },
        "item": {
          "id": "7dc0f36d-684e-4bf0-aafd-a80933253fae",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "036a85cc-9bda-4511-8eb4-24719335a9a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e4a5fb3-0114-4401-b66a-872012a1ff42",
        "cursor": {
          "ref": "658fdbc0-9ed8-4881-bae1-d44ad22edc02",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "72d92abf-bc3b-4771-8ad4-179811d8ed65"
        },
        "item": {
          "id": "9e4a5fb3-0114-4401-b66a-872012a1ff42",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1ff85f81-17e4-405c-ab18-49e6ae9ae956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba8261e-d378-4261-b9b4-830eda6400cc",
        "cursor": {
          "ref": "eeb16ed5-1e73-47bb-a7ba-d245df9cb064",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a54cd09a-9ff0-44d0-8175-ca6c6cfbdb49"
        },
        "item": {
          "id": "1ba8261e-d378-4261-b9b4-830eda6400cc",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "bf71d80f-09d9-4a36-8669-b828ab36cc33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec913e1f-8147-43d5-8beb-aa4cc264cdf0",
        "cursor": {
          "ref": "5330f55b-00bb-4ec3-8821-aaaef2cfa846",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d05b2c71-7da3-454c-8981-d00a24afdc1b"
        },
        "item": {
          "id": "ec913e1f-8147-43d5-8beb-aa4cc264cdf0",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "576059e8-d4ee-4fe9-b20a-7b7b476342e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b1b5e5-699a-4ab8-8513-1f488820cada",
        "cursor": {
          "ref": "5431b6d7-87a8-452e-95c8-3020f1eba689",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b8e5d104-6a30-4035-aa46-4e163b6de947"
        },
        "item": {
          "id": "75b1b5e5-699a-4ab8-8513-1f488820cada",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0e1952c8-ffde-4625-af3f-9e9e42368fb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "983cc690-12d6-41bc-9dad-8ff53558a576",
        "cursor": {
          "ref": "74160587-ba63-44a7-8129-179092ed3609",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3e2964eb-a670-4785-916f-9c0634150685"
        },
        "item": {
          "id": "983cc690-12d6-41bc-9dad-8ff53558a576",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3605030d-ffe5-4d5e-ade8-733f9489a353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9830420-a7fc-4c4b-8f10-6e7bb0cc69c2",
        "cursor": {
          "ref": "cf4caa66-375b-416e-bbc1-61a94dc97090",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6dbd5226-d8b9-45fa-8fa9-9a57aa8c246a"
        },
        "item": {
          "id": "d9830420-a7fc-4c4b-8f10-6e7bb0cc69c2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f983bfd0-be0c-4b85-9e2c-8bfc7a0cffd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30feb32c-cc05-47c3-8172-ef2bd4aa5382",
        "cursor": {
          "ref": "033acb33-e2d8-4f67-bc7e-c27eab33f460",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "39a016c1-d173-42ac-b8a6-76a9335528b1"
        },
        "item": {
          "id": "30feb32c-cc05-47c3-8172-ef2bd4aa5382",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c43c1989-185b-4f1b-a322-a8cd15b8d329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d766cb-9345-4dea-8500-519bca30efd8",
        "cursor": {
          "ref": "7dba5e1c-56cf-4d6f-89a1-aeb08e5d03cd",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "51d7aea3-b29e-43de-ab8b-ab8b1bf1f0d1"
        },
        "item": {
          "id": "42d766cb-9345-4dea-8500-519bca30efd8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5c2659b0-4512-41b5-9ec3-2528df28dd43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf8fbb6-64c7-43ec-9061-d66195ae3eba",
        "cursor": {
          "ref": "ac282145-ae39-4897-a1b6-e7b01d8e51bd",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d4dbd92a-5c78-463b-ac3b-3d890c6b2868"
        },
        "item": {
          "id": "ccf8fbb6-64c7-43ec-9061-d66195ae3eba",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "80d7ca6f-02dc-444e-90eb-89baa90f1474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454b0505-d925-4fdf-aec7-adc12dab2965",
        "cursor": {
          "ref": "69b791bc-0f37-4a91-9453-7b00265ca201",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "fbfbfd9e-97ba-4080-b4e8-aa65e10932a7"
        },
        "item": {
          "id": "454b0505-d925-4fdf-aec7-adc12dab2965",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6ba3bd72-a4ab-40e5-8010-51dcc922ed66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec0fa103-c759-44e1-b086-5b814e9a7893",
        "cursor": {
          "ref": "46b8c48a-de70-49e8-b0da-b86b3660e0a9",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "15590e6d-c50c-403b-90a1-9c5e85a93821"
        },
        "item": {
          "id": "ec0fa103-c759-44e1-b086-5b814e9a7893",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4552b0db-d060-4ad1-9626-713bbaa9469d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa29ba1-2253-47ce-9ee0-42dacc16fdc5",
        "cursor": {
          "ref": "55680428-9efe-4de8-809e-725390079f25",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d3121a0e-2a16-4b94-8352-4e7351622590"
        },
        "item": {
          "id": "dfa29ba1-2253-47ce-9ee0-42dacc16fdc5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "79e4ddba-45bb-4c77-bb8e-bcf9f7e77644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e39048-9d39-46ef-b8c8-6ab28b50e5f7",
        "cursor": {
          "ref": "c954c020-1b3c-44aa-bf1c-9fa00d3d1297",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "3f56fa94-80f3-48bf-bc23-edf3802aad15"
        },
        "item": {
          "id": "b6e39048-9d39-46ef-b8c8-6ab28b50e5f7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "5859a70d-bdf9-431b-a80b-188a463693eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3012eeed-8f7b-4000-8302-9c5e900a0bd1",
        "cursor": {
          "ref": "41469179-6d2f-4248-8d2a-c7c1792315ed",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d087f8a4-d58e-471d-be17-a5bb6217508f"
        },
        "item": {
          "id": "3012eeed-8f7b-4000-8302-9c5e900a0bd1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "52fb47e2-371a-42c0-bca6-446b61a9f6ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec2017d-1744-4f4a-81f8-f7c9d4edaa87",
        "cursor": {
          "ref": "5bbfc3fa-45fa-4b8e-b348-ac5802a9a0f1",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c0fd4ce3-4e08-4478-b28e-81f81ad90ce4"
        },
        "item": {
          "id": "bec2017d-1744-4f4a-81f8-f7c9d4edaa87",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "103efdb4-6262-417d-98de-e3286dd6543b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e616b969-084d-4dd4-9db2-09d7ca60471e",
        "cursor": {
          "ref": "bf0a769f-6c24-48d9-b223-6a62168db0b9",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "65e23541-0369-41d6-bfb6-242ec0d85da2"
        },
        "item": {
          "id": "e616b969-084d-4dd4-9db2-09d7ca60471e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a0c8a6ac-e311-4eb4-8110-a64cd5e0badc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9865cdf6-811f-4110-9924-d724a6264826",
        "cursor": {
          "ref": "bbbaa0c5-99c3-47bc-b89e-ec30c780e134",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f4878034-44d2-4481-b48c-b78ab5f00d0c"
        },
        "item": {
          "id": "9865cdf6-811f-4110-9924-d724a6264826",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "80ceb83b-6231-4f23-9c43-ac8ac5c8f465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ada8501-5236-4878-8d23-37ae45d000e7",
        "cursor": {
          "ref": "fc222230-750a-4dc9-83c3-beb7c8abb3d0",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ca6540e6-99a0-43d4-add1-b8dbda746ddb"
        },
        "item": {
          "id": "9ada8501-5236-4878-8d23-37ae45d000e7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4383fd64-52a3-4bc3-bd90-4a602d93db10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec1a798-785c-4770-91b5-bdcf847602df",
        "cursor": {
          "ref": "75cf347a-9948-4e13-b314-560ab8936665",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "39539eec-dce7-4ca0-9fd4-9a99458dfaf2"
        },
        "item": {
          "id": "5ec1a798-785c-4770-91b5-bdcf847602df",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0dc4391c-e258-48ac-9a94-2b38c850388c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e41a12-5b90-454b-bb5f-abcf3d0e7fbd",
        "cursor": {
          "ref": "c49e85ab-ffee-4473-add4-bf2d87ad0186",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b70d6a70-a3b4-4c1b-b2ad-6a8dba6df94b"
        },
        "item": {
          "id": "b8e41a12-5b90-454b-bb5f-abcf3d0e7fbd",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "50130de0-4a7d-4fa8-9152-38c3f763a1a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9f6a84-5cb4-4627-94fb-c53c2db8bd87",
        "cursor": {
          "ref": "da5b9355-94fd-42c2-81ca-465a9571075c",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "586ce9f4-4632-4c94-aa1e-130ddfe9e955"
        },
        "item": {
          "id": "de9f6a84-5cb4-4627-94fb-c53c2db8bd87",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6e76595a-58a6-4e9b-bb20-e4128e19a516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1261a8d0-efb1-48f7-b0db-56ac232f82bf",
        "cursor": {
          "ref": "826c786a-2631-44f2-b627-c72dd70913bd",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b5dd6953-a537-42d7-8747-dd70cd0daaaf"
        },
        "item": {
          "id": "1261a8d0-efb1-48f7-b0db-56ac232f82bf",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a76fc065-f913-4450-83fe-a0487be03700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c73c1f-6a85-4aed-80cf-80f31c4e49f9",
        "cursor": {
          "ref": "bfbbaa8a-12d2-4663-bfbe-0507339aed31",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "38ba83f0-50ef-441c-9341-a2b53da5da5c"
        },
        "item": {
          "id": "55c73c1f-6a85-4aed-80cf-80f31c4e49f9",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c7cf6fdc-90c4-483b-8b31-9ca49d6ca99b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d804497-93f5-4160-8fdb-029745bd5ded",
        "cursor": {
          "ref": "5cadb9f7-c1a8-454a-a6a2-4d0b86ab256d",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3b65dffa-1522-4718-a34f-859432ed1310"
        },
        "item": {
          "id": "5d804497-93f5-4160-8fdb-029745bd5ded",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ef825431-149b-4844-bf82-5954e5efa5fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e500c389-ff2e-42bf-a096-9912fe9e399a",
        "cursor": {
          "ref": "53f9f3fe-f480-42a4-8b85-5499fa82852c",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8f20744d-a0d5-4e98-ab42-81dc09d16cc8"
        },
        "item": {
          "id": "e500c389-ff2e-42bf-a096-9912fe9e399a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "431d48c6-8ae3-4b8e-9b25-528d4f41d24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ea8bd4-2241-48ba-8454-dcf761a9628d",
        "cursor": {
          "ref": "5635f526-0295-43f3-9c98-cfc3597d080d",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8720021c-f093-487d-9323-513b10b69281"
        },
        "item": {
          "id": "95ea8bd4-2241-48ba-8454-dcf761a9628d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5995c3a6-efbb-40ce-ac6d-3aa9c74c4220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fcb13f7-d2f7-4645-81b9-6e4e8708cad0",
        "cursor": {
          "ref": "35ab86a8-8a02-446d-a140-9ac322f4ffd3",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "eba7a35b-7e61-46a6-bab4-cb19b352849e"
        },
        "item": {
          "id": "0fcb13f7-d2f7-4645-81b9-6e4e8708cad0",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "96f6220b-2a26-49f4-adac-a21ea4426704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f099380f-2d85-469f-a5ba-bb6f9607581d",
        "cursor": {
          "ref": "73abe61c-707b-4656-ad4b-75c7e594d05e",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "cb144719-9422-4b1a-b3e1-d739b5bdc633"
        },
        "item": {
          "id": "f099380f-2d85-469f-a5ba-bb6f9607581d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3d7d7cf6-8833-47fd-873b-426d19dcffae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b77aae-c491-4ca1-b734-07d5ea52783f",
        "cursor": {
          "ref": "908005c2-0897-4493-a7ed-d357ca13eb56",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1868d8f7-364e-4459-9911-272c35230931"
        },
        "item": {
          "id": "14b77aae-c491-4ca1-b734-07d5ea52783f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7248941c-0f32-4369-af09-ae2bdb4f94d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d849eb6-2ccd-48a5-9ed7-6da83917895a",
        "cursor": {
          "ref": "f91dac39-b36c-43dd-a6fe-3e8abd990103",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "fc1d79f7-4d31-4a4f-bbfe-a0c8aa53b8d9"
        },
        "item": {
          "id": "5d849eb6-2ccd-48a5-9ed7-6da83917895a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2743a7df-e18b-4718-bdda-c9debf0eecf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66107be4-833c-4fd3-9553-3bdb927a17d1",
        "cursor": {
          "ref": "1894fcb8-0d72-4841-b057-5d38e988abae",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7ef24f17-abbc-492d-adbe-5d82586daf7e"
        },
        "item": {
          "id": "66107be4-833c-4fd3-9553-3bdb927a17d1",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "30e5a4ff-af3f-4c1a-b37d-a4bf6c83c0c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ad6175-1bfd-497f-954f-82a89a03a1e6",
        "cursor": {
          "ref": "fc39774e-a66a-4908-b7e2-3e9da6781a7b",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c5f85d72-4109-42ef-95f9-25300cc845e7"
        },
        "item": {
          "id": "f5ad6175-1bfd-497f-954f-82a89a03a1e6",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c10cbbfa-b35e-4050-bed2-523a869d50d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "1bdc6268-a5a3-4bcd-80fd-0f41a6a199e9",
        "cursor": {
          "ref": "c5b0f4fb-6b17-4319-b5e8-897a019cd927",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "be647882-e444-4ed3-b884-9928b5acc64e"
        },
        "item": {
          "id": "1bdc6268-a5a3-4bcd-80fd-0f41a6a199e9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8368e16a-fa8a-4d47-861f-442aabb779b8",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e699b2c2-b9df-4fbb-ac17-650ffe65aaae",
        "cursor": {
          "ref": "8234ab51-1c09-4caf-ab51-e7a06892d828",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5c3d7149-b73c-493b-98fd-1a15b9917635"
        },
        "item": {
          "id": "e699b2c2-b9df-4fbb-ac17-650ffe65aaae",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "1db93bd7-55f5-4625-a5d1-728567d96a0f",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "224e9d10-bd87-4aa4-8ed7-6081e5606839",
        "cursor": {
          "ref": "97504b23-3162-4940-a1a5-b070ce1b3a5e",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f034d18d-8948-4f70-9c4c-c40767f8777e"
        },
        "item": {
          "id": "224e9d10-bd87-4aa4-8ed7-6081e5606839",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f1a025d6-4374-47a3-b3a3-046730d4164f",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b14a62b-1cf3-4831-84f3-61c10cfef4c3",
        "cursor": {
          "ref": "1f5dc68f-b1ed-4566-bc6f-907f702473f4",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3ee54b78-cfa6-4f8f-a84d-33ec5a134d11"
        },
        "item": {
          "id": "1b14a62b-1cf3-4831-84f3-61c10cfef4c3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f612996d-a39d-4fdf-9027-d1b2df1113bb",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "61cf49fc-2540-4c0c-a046-7d82b97f2f95",
        "cursor": {
          "ref": "cbc9c8f0-75dd-4e79-9c95-258f25220617",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "aaecee7d-6f34-455b-8d4e-14ef3784fc74"
        },
        "item": {
          "id": "61cf49fc-2540-4c0c-a046-7d82b97f2f95",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f4972329-d0c3-4cef-9aac-6b6ff7996bd3",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-20T00:36:33.138Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-20T00:36:33.138Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "f2406f2d-5136-4be5-bc56-2cbcdb1df1b3",
        "cursor": {
          "ref": "b8b6ad54-2029-42c0-8ba4-418247ca0cb3",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a59fd80b-f761-44b0-97b2-fb40be9c4d93"
        },
        "item": {
          "id": "f2406f2d-5136-4be5-bc56-2cbcdb1df1b3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2a0ab6e9-bf60-4bfc-9fdb-aad4858b8b64",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f098f2e6-1a87-4bab-9107-2d7df8ca5144",
        "cursor": {
          "ref": "d81e935d-cf60-4e8a-8f16-1ef44f69ac77",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5002fa60-330d-4979-8297-cbfb4cadbe09"
        },
        "item": {
          "id": "f098f2e6-1a87-4bab-9107-2d7df8ca5144",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7701a975-4439-4094-8cd3-22d9ce3a3a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37fdf80f-4ac2-4698-ac18-3a6f77641a2e",
        "cursor": {
          "ref": "5e66bf45-ee92-4558-ba6f-45963db3856c",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6d76cd17-40d2-429f-b7e3-88db86df6ff5"
        },
        "item": {
          "id": "37fdf80f-4ac2-4698-ac18-3a6f77641a2e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "47f728c1-2a59-4eff-b8f7-0fcce7c65fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f53cd42-26ac-4a1f-89be-d90d602bd05c",
        "cursor": {
          "ref": "58b8a148-b7d7-4927-80a3-42207e182d5d",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7ab53be7-9e90-432a-b152-e5f420f17785"
        },
        "item": {
          "id": "3f53cd42-26ac-4a1f-89be-d90d602bd05c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "727ff107-47a5-46f0-ae35-c8b81d461556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "857656d7-bc16-4fd5-80b8-c500a8c77f44",
        "cursor": {
          "ref": "a82da133-9116-45b7-9610-97fc72309767",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2bff6f06-878f-400d-89c7-e97be63c187a"
        },
        "item": {
          "id": "857656d7-bc16-4fd5-80b8-c500a8c77f44",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1d1830ec-2441-439b-be74-2aa3ee24fdce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b0c600-5174-4bfb-bdfb-dbf1d3915bed",
        "cursor": {
          "ref": "ec03b021-7feb-44af-87ac-caac2a60665d",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "842c254f-a371-4f19-a9e7-e82e053daf3b"
        },
        "item": {
          "id": "b9b0c600-5174-4bfb-bdfb-dbf1d3915bed",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "390abbd1-cd8c-4066-a0fa-6a2997fa7bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d61a47-da7f-40f2-aab4-1f32577ab490",
        "cursor": {
          "ref": "1c2226a2-51c3-45e4-a730-9a08487388a2",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f0993c8a-cfcf-4a56-83aa-18436ad6b896"
        },
        "item": {
          "id": "00d61a47-da7f-40f2-aab4-1f32577ab490",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6f42b9bf-6ed6-460a-aad3-a2c51592e459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "703cfaaa-2c37-44d0-b909-b18b52d1bf05",
        "cursor": {
          "ref": "109e55d0-d9f7-448b-b7dd-0e33ab22f8b4",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "284ae9ac-080a-4e03-8f77-2b38b5eb0950"
        },
        "item": {
          "id": "703cfaaa-2c37-44d0-b909-b18b52d1bf05",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "33144b7e-7a97-4c5a-bed4-4a4b1a4368bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c3ab90-db8d-469d-a11f-65c2b57e7bee",
        "cursor": {
          "ref": "aa0f5eec-64bf-48ae-adcf-2bff07fce6a3",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ec005bfd-bb4a-40a9-861c-5af52f5418e6"
        },
        "item": {
          "id": "24c3ab90-db8d-469d-a11f-65c2b57e7bee",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "932c286e-cf7d-4820-895a-26286eeef537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3829eae5-f111-48ae-b90a-994116fc6029",
        "cursor": {
          "ref": "426fb65c-2d12-4e3d-804f-84b6a734e71b",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e60431bd-4239-4d89-9a53-bd61087b2cbd"
        },
        "item": {
          "id": "3829eae5-f111-48ae-b90a-994116fc6029",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "632128e3-24b5-4c04-b9e4-6f52008f4ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d6013e-d623-402c-8fce-55d6e1ff6d58",
        "cursor": {
          "ref": "a3d02491-b6ba-4c33-932d-4dacf17e90ac",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8b546244-1c8b-4348-8c00-d3da3d10c727"
        },
        "item": {
          "id": "c0d6013e-d623-402c-8fce-55d6e1ff6d58",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f266e5e6-8997-43d0-a26d-9605d6b275b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e029f3b-b197-4c7d-92d9-de5aca783bda",
        "cursor": {
          "ref": "711bac8c-159a-4950-9f52-981236528221",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "54b7613b-9e69-4ef3-ba39-69cfb9a3a4ac"
        },
        "item": {
          "id": "3e029f3b-b197-4c7d-92d9-de5aca783bda",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1bcab582-257f-4b7a-89b5-56eb937eba06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57556042-a41a-4cd5-9fb4-5ba48fc36c64",
        "cursor": {
          "ref": "0b86adc2-4f3d-4c2d-9238-4843fa9e2dac",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "598e72c9-f97d-4850-b0f0-c4792af6cd10"
        },
        "item": {
          "id": "57556042-a41a-4cd5-9fb4-5ba48fc36c64",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e0deb2d9-3f44-4b33-83a9-e887d05a2f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8bc9d4-6f74-4c33-8006-6773880b799b",
        "cursor": {
          "ref": "7cd7f72a-5fc9-43b1-ac57-0ac4762278f2",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f4680d14-dfa0-4a12-aea1-20033ef46d46"
        },
        "item": {
          "id": "7c8bc9d4-6f74-4c33-8006-6773880b799b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "64af4fb4-5c52-4f48-b025-5bb9f2dac692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd3e0ec9-4899-433b-bef8-b6fc48e665cb",
        "cursor": {
          "ref": "b6658b88-07ad-4427-84b4-6d153a6455a2",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b7435f77-49ab-42e1-bc98-a0c929719824"
        },
        "item": {
          "id": "cd3e0ec9-4899-433b-bef8-b6fc48e665cb",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "68e0e74a-19a8-4150-bb7f-058753108286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "accce5ff-cb00-4dae-8b70-34d5a26260fc",
        "cursor": {
          "ref": "ce5f0785-b253-458c-9f47-11a1b439aab7",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "194a3665-4ad8-4bbd-b5cb-91445c9148e0"
        },
        "item": {
          "id": "accce5ff-cb00-4dae-8b70-34d5a26260fc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "94a17bce-f10e-4a1e-b6c6-26b948fd72b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f7b421-b555-487e-afbf-e7b05cbfbc3d",
        "cursor": {
          "ref": "63593182-ff9f-4f66-baaf-9d70904782d1",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c41ba405-8609-40b1-bac2-2dcaf5554d6b"
        },
        "item": {
          "id": "39f7b421-b555-487e-afbf-e7b05cbfbc3d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6958778e-4c29-4f2e-b800-51e56e19952e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d4cfe5-4954-4edf-8101-156ee6d1182c",
        "cursor": {
          "ref": "6e7269b9-075f-49e2-9acd-a0715d58f9f6",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ec93ad1a-f551-45dc-bebc-2b3d12ab7f73"
        },
        "item": {
          "id": "66d4cfe5-4954-4edf-8101-156ee6d1182c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "dab0c0b6-853a-4207-b8dd-fd56784ef432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c64ba1-fc6c-4722-8a12-f5ec8eb69b9a",
        "cursor": {
          "ref": "f2ee6412-3b0c-465d-85ab-6d2bd7101f60",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0de3ce36-1f5e-4ebc-826e-975e45db1053"
        },
        "item": {
          "id": "63c64ba1-fc6c-4722-8a12-f5ec8eb69b9a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3c56aad1-196e-4574-ac36-e52238a65d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d7a83c-1e00-431c-a28e-16dddac9d9f7",
        "cursor": {
          "ref": "e9ad6af2-5785-4981-8d8a-a5f69c1ea313",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7bbdd9d9-90b7-4d0b-a239-f4e84282a3c9"
        },
        "item": {
          "id": "d9d7a83c-1e00-431c-a28e-16dddac9d9f7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0641a32e-900c-4168-b964-6e22de5d6b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e1c1c0-763c-454a-bb57-e64d38172677",
        "cursor": {
          "ref": "7a3c5123-a5c8-4b33-8b1f-e235141b6170",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "18280023-84f4-4796-8bd2-6b7171a324b9"
        },
        "item": {
          "id": "71e1c1c0-763c-454a-bb57-e64d38172677",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f1a28b19-04f8-4253-a518-61901bbaa298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e641875d-a912-41f9-8027-305bef52a10e",
        "cursor": {
          "ref": "306d0a52-e251-42cd-8f7b-8ecdc9b475d5",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c782e17b-3f72-4729-beb1-f66a6ad859f3"
        },
        "item": {
          "id": "e641875d-a912-41f9-8027-305bef52a10e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "90afad99-07aa-4cdd-8c3a-a473c53ee1f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf8d5d4-6a95-45c2-9fc5-6d5874ec959a",
        "cursor": {
          "ref": "cd2d0c1e-6abe-4374-90f2-798c2aab120f",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4bbd6b6c-1c85-4e27-8d86-f73df4592b13"
        },
        "item": {
          "id": "fcf8d5d4-6a95-45c2-9fc5-6d5874ec959a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c6a90f10-2675-4fb1-a6e1-0c52ee90a5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ae8194-5a9d-41b8-9ae3-5de2e042b32b",
        "cursor": {
          "ref": "d4d80446-f49e-4b24-a96c-c5b6b314b499",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "64745fd1-d6b2-486d-876d-d11dcb4eb932"
        },
        "item": {
          "id": "a6ae8194-5a9d-41b8-9ae3-5de2e042b32b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "67ab71be-0fe1-436e-8b77-abcd5ba18ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7847930e-911c-485e-bdd9-85197fe65d0f",
        "cursor": {
          "ref": "e3e18ce8-0778-4e56-a2da-0087289c3058",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ccab77f0-d374-47b0-8617-1dc2854f5aea"
        },
        "item": {
          "id": "7847930e-911c-485e-bdd9-85197fe65d0f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7f9b234b-46a7-4449-9ff8-8369fe5df173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580687dd-2f71-4431-ae54-d1703f512351",
        "cursor": {
          "ref": "b1d3b742-2994-4b6a-b4b4-062b617c0988",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a6d5e654-1e08-4217-ae4a-55f1be1d4e1c"
        },
        "item": {
          "id": "580687dd-2f71-4431-ae54-d1703f512351",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "42b9186e-bb55-4b85-a8b4-bbf4bcf9994e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57804d5e-ada7-45cc-a852-eaf2ea40eac9",
        "cursor": {
          "ref": "921894d5-3922-447b-ad64-9c67b5ee41a0",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "da6f7c6a-9b7f-47ff-ba9c-da24f3127256"
        },
        "item": {
          "id": "57804d5e-ada7-45cc-a852-eaf2ea40eac9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4692cde6-c83b-40fe-ab23-63090ef1928c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1fa388e-44fd-44e6-ad2e-9a92cfff9e32",
        "cursor": {
          "ref": "f77e1661-07b9-4544-ab61-2ffab08c9c49",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "21248ad6-c826-4972-8c5b-fc367741f8ba"
        },
        "item": {
          "id": "d1fa388e-44fd-44e6-ad2e-9a92cfff9e32",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9b3cc049-f8c2-44a9-8782-352772c28cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eaea9c0-d2d3-4430-8a08-98c4659c23c7",
        "cursor": {
          "ref": "13b1f70f-c220-48db-bc2e-913c21e2ee35",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "432d4406-fa34-42df-a401-7f8ff5eb58f6"
        },
        "item": {
          "id": "7eaea9c0-d2d3-4430-8a08-98c4659c23c7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2fbd331e-f31c-4ebd-ae5d-a7a83f3abfee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555a261d-89ee-4435-acfe-7a594224c35f",
        "cursor": {
          "ref": "414e6457-fe61-471e-8a63-241975cfe340",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6c0d10ca-cd67-4375-b9ba-dba546015296"
        },
        "item": {
          "id": "555a261d-89ee-4435-acfe-7a594224c35f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2e60c040-2f1c-4eb7-8f14-d84003692e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6244c8f2-455d-4b00-adb1-210dbd14b664",
        "cursor": {
          "ref": "b90331a8-7195-43de-8cfa-3342591ebd8f",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7c8bd42f-7d0a-47f7-ae7f-3deaea6d2125"
        },
        "item": {
          "id": "6244c8f2-455d-4b00-adb1-210dbd14b664",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "111c54d7-a5c9-4098-8d3c-1b73e3c3412b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc6eb1f-9f00-4043-8d59-35934e89ca85",
        "cursor": {
          "ref": "2f78a9a6-c474-493b-b7fb-0a122ce09b63",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a605b085-aef1-46c0-92f7-10330c6bd850"
        },
        "item": {
          "id": "4fc6eb1f-9f00-4043-8d59-35934e89ca85",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "33a06267-dca5-4e89-9058-76f64a532d75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08aea2ca-66df-4b9c-a410-e4302146e9c1",
        "cursor": {
          "ref": "ca189c25-5112-433b-9b25-269aa984b062",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "66e45fff-0447-40aa-b0ed-99c4836fde5e"
        },
        "item": {
          "id": "08aea2ca-66df-4b9c-a410-e4302146e9c1",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ed9b2d32-1e14-4d67-bb42-6b2f73e0a7e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d692ce2c-6eeb-4cfd-a989-995097b5e69b",
        "cursor": {
          "ref": "6717ba08-b02e-4964-94e2-e20a21af6dfa",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b847b079-c8e2-42ff-bca3-0a2a5cbae2a9"
        },
        "item": {
          "id": "d692ce2c-6eeb-4cfd-a989-995097b5e69b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a60ec143-ef8f-4a49-b2fd-c41022cb323b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edff5644-9eb0-4120-a221-aafbd0d8dc48",
        "cursor": {
          "ref": "d662b3b9-48a2-4175-9465-8e1f4444978c",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "66f1a9a1-85bd-47e2-b726-54f9aa649ff7"
        },
        "item": {
          "id": "edff5644-9eb0-4120-a221-aafbd0d8dc48",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9ddfec23-4b63-438a-acb7-819ca10f8d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0b10ab-163b-48f6-8ed8-0cb28a476452",
        "cursor": {
          "ref": "0b6933c1-7d30-429d-8702-1028a5035da4",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0d4a2a42-1ef9-4599-9bd8-b824a448cb41"
        },
        "item": {
          "id": "6c0b10ab-163b-48f6-8ed8-0cb28a476452",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b42d0718-3c5c-4b1c-bd3a-51fcacab8c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2ab526-e0ea-445c-b212-94dc6117ce2b",
        "cursor": {
          "ref": "73665208-3536-4ccb-9d1e-7adbac191a8c",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f323d73c-0cdc-4e4c-8f85-024de9ab5b0d"
        },
        "item": {
          "id": "5b2ab526-e0ea-445c-b212-94dc6117ce2b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "966323a6-dba9-47e5-b9b9-abe438f4e51d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2341adad-a4f4-4697-8712-dff326d4b1f2",
        "cursor": {
          "ref": "bb320553-9830-4d26-9de5-77902f5b5156",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9df86577-abf5-474b-9fca-e77999df92ed"
        },
        "item": {
          "id": "2341adad-a4f4-4697-8712-dff326d4b1f2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8a3dd65a-a047-41b7-9f78-2e7956510dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bdca684-9611-42af-af52-1fefe3ab8b2a",
        "cursor": {
          "ref": "f9d155e4-8174-4ca4-9f0b-ed082fb66429",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7da780b5-6115-472b-b270-51f0502bc820"
        },
        "item": {
          "id": "1bdca684-9611-42af-af52-1fefe3ab8b2a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4f6460e8-e376-44af-b888-2b0f9fbe1c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95dc2e4-03ca-4308-b366-3b627aea84fd",
        "cursor": {
          "ref": "89987666-614e-4b41-9ac5-6dbe3974afe5",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ad4709a7-8c82-4b20-be50-7abdb5a0798e"
        },
        "item": {
          "id": "a95dc2e4-03ca-4308-b366-3b627aea84fd",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "91e272e4-c535-4930-9069-35404fe59998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8d40ba-6a22-4358-b693-ad35f2bd7580",
        "cursor": {
          "ref": "6c35c16a-6762-4d47-a618-bce4e318c46b",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3ef8a8b8-d598-4782-a489-095dc9cb61da"
        },
        "item": {
          "id": "1f8d40ba-6a22-4358-b693-ad35f2bd7580",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "eb9673e8-75e1-430b-bef9-96cbf8479165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0915a54c-0b3f-46de-aeb3-27adf9ef7961",
        "cursor": {
          "ref": "a0f38aef-8a4a-4e4b-8db5-febce02cf7b8",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "32e81ebb-9acf-49be-ab42-1b66573062b4"
        },
        "item": {
          "id": "0915a54c-0b3f-46de-aeb3-27adf9ef7961",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fcfc28c4-0ab4-4c05-9373-8d54c555fb15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2a63a2-e501-461d-b9cb-5ddbe6da619e",
        "cursor": {
          "ref": "25826e65-f5ce-4872-99a6-208b7c38efb8",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7596e27b-8692-46c1-9c05-11fa21d7ab13"
        },
        "item": {
          "id": "9f2a63a2-e501-461d-b9cb-5ddbe6da619e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e7b4f7b9-4f2d-454c-851a-b7e9fdf668cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0d2a60-f878-4454-b6c5-2993d43c0015",
        "cursor": {
          "ref": "174a7712-ba39-4829-b180-5476f554b54f",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "41e1f3c3-7798-4869-ab47-3aa725016ec4"
        },
        "item": {
          "id": "0f0d2a60-f878-4454-b6c5-2993d43c0015",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "35ef2201-1eaf-4ca3-ad37-106ce119ad6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a982d7ea-134d-4b05-a085-7ff9356921f8",
        "cursor": {
          "ref": "a614599f-408e-4a9a-a00d-fc5d1ee549f3",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0611a480-9112-487a-98e8-82df83d99f17"
        },
        "item": {
          "id": "a982d7ea-134d-4b05-a085-7ff9356921f8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "bf6e8ae1-1b37-4f6a-a942-f88d19fbc561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a4cdd79-725d-49fd-b1a7-2494a2220d36",
        "cursor": {
          "ref": "d45737fa-27bf-444e-9311-ea306b5b34ba",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "91b3d9ae-a54c-4803-9ff6-a35b04a93307"
        },
        "item": {
          "id": "2a4cdd79-725d-49fd-b1a7-2494a2220d36",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "862515a0-7bcc-4f74-a0d5-16526fa58814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a0db38f-9679-4bfd-8372-940d68b7d7ff",
        "cursor": {
          "ref": "2c8fee4d-44f5-4d3a-93c7-fdf896a417ab",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3e0521fd-54e2-4626-8780-903cf608052f"
        },
        "item": {
          "id": "7a0db38f-9679-4bfd-8372-940d68b7d7ff",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2c35d156-fbcb-4185-b80d-2f896b9cc202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafb2b1a-1236-444b-b093-44dcff253a64",
        "cursor": {
          "ref": "161c1834-0a7e-4e40-b952-06439b29f313",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7fd42c08-926d-4603-a619-5d058e150812"
        },
        "item": {
          "id": "eafb2b1a-1236-444b-b093-44dcff253a64",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3c695226-3134-4a7e-b7ea-a01ca8787bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db37bc07-fdbe-49f3-b3bf-e9b63c3e2bd9",
        "cursor": {
          "ref": "0e65789b-740a-4059-b3db-0e967c520f6d",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "da3c9b03-d640-4022-ab9a-708e86463b2a"
        },
        "item": {
          "id": "db37bc07-fdbe-49f3-b3bf-e9b63c3e2bd9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "21f9622d-1408-40c8-9498-01e97d61aeee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb470c7b-6266-41ad-ab1f-2b2f4b135fca",
        "cursor": {
          "ref": "476580b1-574a-4764-abc5-0389870d7b79",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "aa848b82-02a7-4d3d-85bc-13ab2d953c29"
        },
        "item": {
          "id": "bb470c7b-6266-41ad-ab1f-2b2f4b135fca",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0ffedcb1-89bb-4164-bb3a-0979fc61a676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe5c47ef-2dc0-4c62-9e70-22e9035d3a64",
        "cursor": {
          "ref": "a7ec5593-8d02-47ca-8c09-9ad51770c98f",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0e7e0e62-51c8-4c1b-a715-db0e4c000773"
        },
        "item": {
          "id": "fe5c47ef-2dc0-4c62-9e70-22e9035d3a64",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1c403cea-f5fa-4b3e-97b0-3efa6d4a1787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b7ae52-ecd1-41b8-affd-6a08e4f4f92e",
        "cursor": {
          "ref": "65647e12-1ebb-48d2-af4b-b964ef4ac289",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "71770129-a74c-4d2b-9c77-4b730533ef24"
        },
        "item": {
          "id": "04b7ae52-ecd1-41b8-affd-6a08e4f4f92e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "10179344-5304-4f79-b99d-6c9376fb9bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d996df-0794-4377-81ba-50bce063cb1f",
        "cursor": {
          "ref": "57d97002-5f8c-4047-a465-514731d93ee0",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b15eefdf-853f-46f1-ba7a-08dd1d02573a"
        },
        "item": {
          "id": "f3d996df-0794-4377-81ba-50bce063cb1f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "904582c4-220d-4fee-9690-5cd4e741120e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4141dd-a2ee-4cbd-ae04-7b5b5b614415",
        "cursor": {
          "ref": "acf746e1-94fb-4b7b-aa53-ca8a86d5f169",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "cba42683-9caa-4a91-881e-09a32cbfa62a"
        },
        "item": {
          "id": "da4141dd-a2ee-4cbd-ae04-7b5b5b614415",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "46d78bee-3acd-406f-aa6d-e140708355f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d14778-ab6a-4eef-a0b7-49a4081d217d",
        "cursor": {
          "ref": "b7fc0530-2827-4668-949c-e289fcb42e67",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1472a608-2865-4edc-8fc4-7c7cb8cc9cff"
        },
        "item": {
          "id": "39d14778-ab6a-4eef-a0b7-49a4081d217d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9493ed51-18a6-47fc-b8ee-1097ec2f2e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db870038-674e-4e57-9ed6-64ddcdbf0e82",
        "cursor": {
          "ref": "edeb5546-40b4-4baf-b7ca-33c53ad702d6",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b0eba191-e4ba-4cd9-9320-a5f84bfef7d8"
        },
        "item": {
          "id": "db870038-674e-4e57-9ed6-64ddcdbf0e82",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "88e0b250-2933-45be-9f79-767c56ed3d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "360b312c-9f8c-47d9-aad1-85ece8f107a4",
        "cursor": {
          "ref": "fa78d080-b03b-4a00-9f48-e01fb041d6ba",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "504e267a-a7e6-4292-a649-5ebd55d414d8"
        },
        "item": {
          "id": "360b312c-9f8c-47d9-aad1-85ece8f107a4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "90671ebe-145c-40c3-8037-456e4cd45922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac52036-baa2-4f03-9627-1af0aa3271bd",
        "cursor": {
          "ref": "27f8ba4d-1538-4d1b-8b3f-1a77eee1b729",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "105d3fde-ad9b-4e11-aa8c-f5279f5439ae"
        },
        "item": {
          "id": "4ac52036-baa2-4f03-9627-1af0aa3271bd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7b30d38e-1ca4-4009-8ad6-e9303285cad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7880656d-e057-4038-a62e-33be6c035ecb",
        "cursor": {
          "ref": "58b4f6b2-564e-4702-96bb-f75c4de8a93e",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8f21f004-0ca1-43c3-8326-65f7a395156e"
        },
        "item": {
          "id": "7880656d-e057-4038-a62e-33be6c035ecb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "412dfd99-9001-4ef4-872a-98905cf2df50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "484493a8-ad05-41bd-88a7-e03e8e83b650",
        "cursor": {
          "ref": "3142bb01-c682-4316-b206-a197daa054ec",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "78009761-a432-4d7b-890c-e03fd6cdf4b8"
        },
        "item": {
          "id": "484493a8-ad05-41bd-88a7-e03e8e83b650",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "eab11466-e505-4638-ac99-f2f87c188896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd8e60d-c08f-4f7d-91a9-839dbfb7bcd7",
        "cursor": {
          "ref": "74199210-7481-44d2-b3a1-240b70257fe6",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "dbd31282-d7c7-4990-be66-9350b9c49e49"
        },
        "item": {
          "id": "edd8e60d-c08f-4f7d-91a9-839dbfb7bcd7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9d8ecd95-2feb-47a4-91c9-4e399a422704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "940527d4-cb8a-46cf-8465-fc7d3e9c4335",
        "cursor": {
          "ref": "86ef3e3d-09a2-4ce9-956a-1de3360af11e",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4ccb2b2f-b8f9-402a-89df-b48c4b8846e5"
        },
        "item": {
          "id": "940527d4-cb8a-46cf-8465-fc7d3e9c4335",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3fdd61e4-92d8-4754-8d7c-24df4fa1c4f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26be694e-a929-4dc2-aae6-11384f656201",
        "cursor": {
          "ref": "e0e0404a-7f59-4b9b-8183-d6a2084439b8",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e9529879-a705-43e1-b1eb-f73c8a857ebe"
        },
        "item": {
          "id": "26be694e-a929-4dc2-aae6-11384f656201",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "72b12bfe-e97b-4ef4-a9d7-589e92b252d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fbb80f6-067f-409d-8867-b4808901f114",
        "cursor": {
          "ref": "38bcb539-73aa-4d26-91a7-74de19c72051",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "455804c1-e601-4b98-9be6-17a75628eeee"
        },
        "item": {
          "id": "5fbb80f6-067f-409d-8867-b4808901f114",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "33ad301f-b565-4b82-a361-6bf54eb94253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bdd6491-1e8c-481b-bc1f-9b89f7490985",
        "cursor": {
          "ref": "7fa874b0-5051-4b3b-affb-ca043073ffc6",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7ea19636-5388-4a13-a82b-a622b065bcba"
        },
        "item": {
          "id": "4bdd6491-1e8c-481b-bc1f-9b89f7490985",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2a085725-ac13-4ed3-aef6-a3f33156d34a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d821bd90-51c5-4663-88df-8bbb47de29e0",
        "cursor": {
          "ref": "77a4c440-82b3-4679-bba8-9c3d105e5f73",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4b44ceea-3929-4321-a534-d4b67ce3cb7c"
        },
        "item": {
          "id": "d821bd90-51c5-4663-88df-8bbb47de29e0",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "113c09d8-4815-4e9a-932d-30ef2be23227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d08b037-0432-424e-b2d6-ecbc329c4490",
        "cursor": {
          "ref": "7b463c8a-8836-4502-a01a-3c9bbc1a9170",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1288220b-cf78-42bd-b430-b1af787a8596"
        },
        "item": {
          "id": "1d08b037-0432-424e-b2d6-ecbc329c4490",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "0abfe100-9cea-49e6-92f9-43f900bcc6ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0828e964-1ac3-4ff5-8324-b7f2f732d2fe",
        "cursor": {
          "ref": "fd6ed32a-249b-4f8f-8db8-997afc9cab2c",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "21bb4d7a-3c3a-45f2-bc7a-e377ed9e5e90"
        },
        "item": {
          "id": "0828e964-1ac3-4ff5-8324-b7f2f732d2fe",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "05191d7b-8d31-4c5a-a941-ba1f10c6eb87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331e132d-23bf-48a9-ba41-eeffd888fa12",
        "cursor": {
          "ref": "dc50d021-609c-466b-9002-1ea4198428c1",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b732047b-5f2a-4b6f-8162-0f10ffc76267"
        },
        "item": {
          "id": "331e132d-23bf-48a9-ba41-eeffd888fa12",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "bc82a6ed-4812-416f-a014-2d61375fb9d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779ee4f6-ac85-4bb1-82b3-bac981516a80",
        "cursor": {
          "ref": "b6fcb0aa-1dcb-4ec8-af25-9e147c4507ff",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "bd250d03-a737-4273-b6ce-cc8fd483f961"
        },
        "item": {
          "id": "779ee4f6-ac85-4bb1-82b3-bac981516a80",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "4c195ec2-8b18-4f87-a47e-4323c9c7ec81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46321f5-281d-4c42-851d-9237ef89d55d",
        "cursor": {
          "ref": "2e319835-cbe0-4964-8036-a5f8cb6eda3e",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "36c00ef3-18e1-4a60-a122-2b35d69b42e9"
        },
        "item": {
          "id": "f46321f5-281d-4c42-851d-9237ef89d55d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "6b8ebda4-3de5-4e66-8c28-ae993591d060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02699ef2-de49-4d02-9105-33f6c83e8bf9",
        "cursor": {
          "ref": "a7d9d39d-76df-42b5-ad69-78e3314be011",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4030a7e2-e1a8-4393-9a64-e4d4681facf7"
        },
        "item": {
          "id": "02699ef2-de49-4d02-9105-33f6c83e8bf9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "62499a06-40ed-47ce-b98e-07b8ba1d193b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf2c346-50d0-4b67-a6e9-08ced0301649",
        "cursor": {
          "ref": "9bac55bd-626d-46d9-90b8-cc2fb06f944b",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "29953328-a82f-4705-8d92-af34487cf285"
        },
        "item": {
          "id": "fdf2c346-50d0-4b67-a6e9-08ced0301649",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b6a73dc5-61e1-49b0-b307-69ebaee01f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cea8e82-7fc2-4068-b3c2-5dd239ade615",
        "cursor": {
          "ref": "c565c2e0-b146-4df8-b9ed-ec88ad7c38c2",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e707bb65-a4da-45eb-8034-f5fe1cc2c1fb"
        },
        "item": {
          "id": "2cea8e82-7fc2-4068-b3c2-5dd239ade615",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "8cc94798-07a9-49cf-ab79-e5acf187a984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08dd5fb3-7766-43b5-a383-273f9e837c86",
        "cursor": {
          "ref": "cac121b4-b069-40a2-91b3-f0f6310d73d3",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "24234c12-c796-4db8-bdf1-30455daf0e69"
        },
        "item": {
          "id": "08dd5fb3-7766-43b5-a383-273f9e837c86",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "029382a7-b5c9-489b-b369-ec68562b9023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0e46f7-eb01-4467-806f-1039683355b5",
        "cursor": {
          "ref": "623ae767-a965-4d51-8496-0fd5a9e15e84",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "fe94de69-6b78-4ec0-b307-9e197073f3ca"
        },
        "item": {
          "id": "1a0e46f7-eb01-4467-806f-1039683355b5",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ca1763aa-e5c4-4dc2-a501-97eef4132ea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4483080a-15b5-4264-8f50-75a9836656e3",
        "cursor": {
          "ref": "0490e8b2-5f02-4504-ae24-466287edc64a",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "967f279f-e2cf-44d1-9e3e-31f96b7ce264"
        },
        "item": {
          "id": "4483080a-15b5-4264-8f50-75a9836656e3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5eed4a1c-b12e-4f52-839d-3e2a657f2e51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7def62e-de61-4d17-8177-583dabf5464f",
        "cursor": {
          "ref": "1a1d9fb4-0b42-4ae0-a66c-0e1ce46d88a0",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ea9f26cc-f161-43e7-8ee4-d5b0a71cb5f7"
        },
        "item": {
          "id": "b7def62e-de61-4d17-8177-583dabf5464f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "59881e70-51fb-4286-8e0b-e71e040c4e8d",
          "status": "OK",
          "code": 200,
          "responseTime": 241,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "f767c374-3f40-462c-80c9-2716917b4c0f",
        "cursor": {
          "ref": "8a29f6cc-36ce-4a0f-90a7-8ae9963793c5",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "aae2f133-a41b-4a60-8228-86d6fbeb1b08"
        },
        "item": {
          "id": "f767c374-3f40-462c-80c9-2716917b4c0f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "67aed3b2-76e0-4461-90d7-9adede35c840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10331537-989f-4521-813b-46d16c250cd1",
        "cursor": {
          "ref": "f085bd6d-3342-445e-ab47-e99129252ed7",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "cef9cf93-63a4-4cc4-94d3-873ba805f08c"
        },
        "item": {
          "id": "10331537-989f-4521-813b-46d16c250cd1",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a3cfad6f-b0d2-40c4-beac-055a1e2e3cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe031dc-65a0-4e4b-9b8f-a88ed23ad7aa",
        "cursor": {
          "ref": "5a8a0051-0d3d-4196-8297-427537272957",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d0a0ad05-a152-435f-b45d-a6f4903069f5"
        },
        "item": {
          "id": "afe031dc-65a0-4e4b-9b8f-a88ed23ad7aa",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8ef991b7-a75f-4549-b7b3-5874321dc1ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66c62a2-4a55-4be2-9d8e-469fbe087586",
        "cursor": {
          "ref": "5d697de7-213e-4203-9092-809e67c9b255",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c4a1cbda-265c-4cf5-b805-69a7e8aca8f8"
        },
        "item": {
          "id": "f66c62a2-4a55-4be2-9d8e-469fbe087586",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f5676b9c-2746-427a-804f-44914deee38f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f82abcc-10e7-4a0f-974e-4fd79b1d58c5",
        "cursor": {
          "ref": "35b5f173-a41f-48c1-9923-25be4de3271c",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a0b96782-6865-463e-a573-6c00576278ea"
        },
        "item": {
          "id": "3f82abcc-10e7-4a0f-974e-4fd79b1d58c5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "4c391e19-e86c-463c-8630-b42e91dd16cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b55c9f6-eba8-4f38-9f3c-22f1e374c504",
        "cursor": {
          "ref": "5423cbd0-157c-491d-9258-4e1e52686154",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c1f24591-212d-4dde-925b-2c96a220f736"
        },
        "item": {
          "id": "0b55c9f6-eba8-4f38-9f3c-22f1e374c504",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ac18033c-f9d9-4ce6-9b2c-fa63f8895d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d078ec75-0592-4ab0-b737-216fd8a68a22",
        "cursor": {
          "ref": "2bbb6397-f0da-4b02-a0e7-c49da72167b0",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "1f386b89-2c6a-4ff9-a04d-1367dcfeaccb"
        },
        "item": {
          "id": "d078ec75-0592-4ab0-b737-216fd8a68a22",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cbde08b4-d57a-45c7-9039-9e7fc96d7cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f00359-b335-477f-953e-b985212aea26",
        "cursor": {
          "ref": "4824af25-c1ab-4f15-a88d-eb4b065275e8",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "798ca8b2-8768-4ad7-b1d3-449d34a83c69"
        },
        "item": {
          "id": "76f00359-b335-477f-953e-b985212aea26",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5a22df85-2e11-461e-aac7-f9e2cc047175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f191ff-cc7b-461c-813c-68619745734d",
        "cursor": {
          "ref": "ac9c5776-bd04-4c13-8ce1-534d48c5b215",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ba6da39f-781a-4b44-af41-40de470343f5"
        },
        "item": {
          "id": "b8f191ff-cc7b-461c-813c-68619745734d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0c7964dd-b2e5-4b10-8fbe-b81290d0fcca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e9d2b4-4feb-475b-a573-bdf8f78b3399",
        "cursor": {
          "ref": "983ac7ed-bef0-4658-a8a2-22b0e3bd34f5",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1539a0c0-2916-43c3-bdec-0488dcce30b1"
        },
        "item": {
          "id": "a0e9d2b4-4feb-475b-a573-bdf8f78b3399",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d4405bb5-266b-4aed-93e0-0284376c88c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "007d91f2-664d-411d-ab9b-3789c07ad5a4",
        "cursor": {
          "ref": "aae944e1-255f-497f-8c49-ed61a3fd2cb2",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d0fbbf22-2d15-4dff-a461-52273ab28d3d"
        },
        "item": {
          "id": "007d91f2-664d-411d-ab9b-3789c07ad5a4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5db5deef-6363-4a97-88e7-f209a5c6e572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f83776dc-95be-4f19-80b2-8383021ccb95",
        "cursor": {
          "ref": "b081f99f-4363-41b6-a6d0-57d475fe6f26",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8ed6b843-47d4-40f7-93bc-a41d022d3f7d"
        },
        "item": {
          "id": "f83776dc-95be-4f19-80b2-8383021ccb95",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1e1ea3ce-26e4-4f19-a47a-08c83ed582ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce46175f-deb7-495c-be24-4a038d1bf114",
        "cursor": {
          "ref": "7e36d8e3-779e-4c9e-9393-45f143d52642",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f9522e3c-da8a-4b6d-a640-4da2954604c5"
        },
        "item": {
          "id": "ce46175f-deb7-495c-be24-4a038d1bf114",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "040cf00a-6b5c-4d0b-9e7b-3f0583b0d4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143ff412-683f-4569-b46c-f58a06186afe",
        "cursor": {
          "ref": "a317931a-fefd-432f-9ee1-ca66dcb87a36",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "65d8e87a-6fac-4946-8209-b2a86ece33fd"
        },
        "item": {
          "id": "143ff412-683f-4569-b46c-f58a06186afe",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9b612daf-25bc-4a44-bb56-b170411f1d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a274fdd-b815-4dfa-bda1-79f3ddf27883",
        "cursor": {
          "ref": "24c2abdf-81ac-40d0-ac0e-6079de0ed8dd",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "539b00b6-6b85-46f3-89fd-d272d3ab0c28"
        },
        "item": {
          "id": "9a274fdd-b815-4dfa-bda1-79f3ddf27883",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3abb2771-8f43-4b1b-a4fe-e987ba4f324d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c76c599-8e86-4ebe-a390-6c35a4eb3dad",
        "cursor": {
          "ref": "7a5e2a82-2e7a-4a6b-8447-52337568da6b",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "813c2c87-76a7-4941-a6fe-fe351b8b3aa7"
        },
        "item": {
          "id": "1c76c599-8e86-4ebe-a390-6c35a4eb3dad",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "dcbfa34b-8019-4d36-9dbf-df18d79e30d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75f529e-b081-43b3-aec9-dc58aee765f6",
        "cursor": {
          "ref": "b25b0722-bb72-405e-952f-eb393ed75d23",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1fe78ebc-19ab-4d22-a1f8-438272ad2b89"
        },
        "item": {
          "id": "a75f529e-b081-43b3-aec9-dc58aee765f6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a344c819-9599-4e6b-910e-b22d6ed6f268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213faeb7-2015-466e-8c54-1c50ae2874e9",
        "cursor": {
          "ref": "27ca27c2-7271-41fb-a0f8-b4e93a943c63",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0daaf292-5c41-40af-9079-f340582cd853"
        },
        "item": {
          "id": "213faeb7-2015-466e-8c54-1c50ae2874e9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "61c07a0c-f722-4845-8938-5da9f5c0b023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a9706d-dd1b-44d3-bc9f-c05ca61b9880",
        "cursor": {
          "ref": "6acbe18a-e70e-4b55-b0a4-78ea13162d14",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4b6de209-82c2-4123-b9a2-deb146fc6cbd"
        },
        "item": {
          "id": "63a9706d-dd1b-44d3-bc9f-c05ca61b9880",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3bf9ee1f-e6b6-4d58-84cc-1f4236c98b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904c8886-4acd-4903-880a-bbc0c22a648a",
        "cursor": {
          "ref": "443203af-a792-4504-9b81-e862978a999d",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "38878e17-76fc-42aa-bac0-2c44a08f236a"
        },
        "item": {
          "id": "904c8886-4acd-4903-880a-bbc0c22a648a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "725c28c3-9a8c-4a9e-aa3b-36957b382c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a96b780-a1c0-4ade-8968-967e01121099",
        "cursor": {
          "ref": "ee040948-8542-4a3a-b7bc-cf025365cc85",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0cd8ab8c-497e-4eb7-89b9-bdd66c8d64cb"
        },
        "item": {
          "id": "7a96b780-a1c0-4ade-8968-967e01121099",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "938a8175-85fe-447e-b9f0-4c64510177eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f207cd8-3d10-404b-aabf-0f203af22c8a",
        "cursor": {
          "ref": "78f8860a-1465-4344-8836-c8438bbbc54c",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7f206261-d4de-420b-9f91-bbf766a8b60f"
        },
        "item": {
          "id": "2f207cd8-3d10-404b-aabf-0f203af22c8a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "426a7578-92b6-4140-8712-6d90099edc27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de8ad38-6e96-45ad-8e40-7afc72ae9f3f",
        "cursor": {
          "ref": "8721b5c5-fbf5-44b9-92b7-43a29b62a345",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5e14ac8f-e124-4678-8451-7fca4fbde0c8"
        },
        "item": {
          "id": "4de8ad38-6e96-45ad-8e40-7afc72ae9f3f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4667b516-0fab-4968-8bab-102161b8cb8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24e8bbb-72b3-4ccb-a89d-2bb51faf4f2f",
        "cursor": {
          "ref": "d35a7e9d-4233-4de6-a774-933ee53cf9ad",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "867f7b42-771d-44e2-bfa6-c8bd3d92d660"
        },
        "item": {
          "id": "e24e8bbb-72b3-4ccb-a89d-2bb51faf4f2f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8fda00f4-19f7-4d70-ae25-4abf4505bd0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "537e0676-d445-440f-8da6-0b43ae67eac5",
        "cursor": {
          "ref": "a8267af4-4be8-441e-b584-56f7d3165fc0",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0d444249-4880-4feb-b076-a66ab7999778"
        },
        "item": {
          "id": "537e0676-d445-440f-8da6-0b43ae67eac5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "445ed7a8-f987-4b9e-b204-76d0814982c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "482aab62-6c5b-4fb5-a8f0-b51c1d2857ca",
        "cursor": {
          "ref": "e84c35a9-fdf5-4918-ba3c-e448c0c83b3d",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "85c24171-cd54-4bc6-93a8-f3067eddc292"
        },
        "item": {
          "id": "482aab62-6c5b-4fb5-a8f0-b51c1d2857ca",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "28cc6aca-5466-4bba-b657-962c0eed83db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09cbe3a6-0724-4c23-a47b-e40d14d3426d",
        "cursor": {
          "ref": "372a85ef-8a01-443a-bd41-b09ed7f0197b",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b1671edd-9124-4077-8a31-5d58c630476e"
        },
        "item": {
          "id": "09cbe3a6-0724-4c23-a47b-e40d14d3426d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c4f73bdb-4c37-4dc0-be94-203f081ee4cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131447fc-5fb0-4974-9225-c793cfa168ba",
        "cursor": {
          "ref": "083e64f4-bc1b-4ee3-b64c-40f527bb43b5",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6842bf57-1a45-4d08-bdd0-64288516cea9"
        },
        "item": {
          "id": "131447fc-5fb0-4974-9225-c793cfa168ba",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c615e227-034e-4ea5-b7bb-71ac815daf76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e910f8cf-ba27-4454-9033-ccfa75b124da",
        "cursor": {
          "ref": "a88c2b11-c4f2-413c-99b0-4d32720f648f",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "34d615b5-eddb-40dd-95d0-59bb07fd1fff"
        },
        "item": {
          "id": "e910f8cf-ba27-4454-9033-ccfa75b124da",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "df958a68-4dfd-453c-9ecb-d432e4cff8c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d05372f-19b3-414c-9abf-2b44421300ca",
        "cursor": {
          "ref": "52ccbbdf-9ad9-4843-b993-c72443518655",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "27d92230-3e28-4b03-9c36-ad840d931a48"
        },
        "item": {
          "id": "9d05372f-19b3-414c-9abf-2b44421300ca",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1050102f-1a47-403c-9fa5-4586946e08ef",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "867f8614-fcb8-4957-99e9-b186988b99c6",
        "cursor": {
          "ref": "c5dd2f45-3be4-4741-b016-8f89e59960bd",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9039493c-04d4-43cd-a7f4-a90f3b86fc8f"
        },
        "item": {
          "id": "867f8614-fcb8-4957-99e9-b186988b99c6",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1ecb7ea1-16a8-42c3-8a91-5d9b0b213126",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "26dd15ae-8541-4819-8d89-ded0f1dc08e3",
        "cursor": {
          "ref": "43228f45-aae9-4878-8eee-305dbfcafe7f",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "91e63952-4f34-4e35-bdc4-3379baaf9f63"
        },
        "item": {
          "id": "26dd15ae-8541-4819-8d89-ded0f1dc08e3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "cabd8a3b-fed7-4216-9258-67ae58f62c0d",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "83639185-f01d-474d-80d2-d3864370a921",
        "cursor": {
          "ref": "417be32f-a618-40b4-84e4-81ea4b8e80ae",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "26398b51-1ef6-4f7d-9372-afe67f2d5518"
        },
        "item": {
          "id": "83639185-f01d-474d-80d2-d3864370a921",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "06ce288c-0796-4411-92a7-601369a82e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d43874-2d50-47aa-829f-e1a4b3ab9faa",
        "cursor": {
          "ref": "49e1c963-6402-4ac0-950f-58a6ce83ba73",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "77bd479c-8b52-45df-bb5d-d511faa49838"
        },
        "item": {
          "id": "99d43874-2d50-47aa-829f-e1a4b3ab9faa",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "77644260-8302-49bb-9dc9-4d24fbf09e20",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "97a4096e-4c6f-4cc1-a385-a0aed22900b0",
        "cursor": {
          "ref": "61cbb42c-fcea-43f8-afa6-1a98bbad6b57",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "62e3c9ea-fc20-4b55-800b-07cdc8f7d2c0"
        },
        "item": {
          "id": "97a4096e-4c6f-4cc1-a385-a0aed22900b0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "767da165-de11-4a23-9f01-aab0af339ee9",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "675fe8ad-b89e-4b8c-8324-9c0e3f059d24",
        "cursor": {
          "ref": "e5430fde-1b66-4286-be35-294d7c2d8923",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0c1ae816-d224-4c54-8200-77937e916af8"
        },
        "item": {
          "id": "675fe8ad-b89e-4b8c-8324-9c0e3f059d24",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b0b1c9d5-9c65-4c87-8dac-f2a02cd58bde",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "427b6ab8-7cf4-4206-8a46-8aa3c5d0150d",
        "cursor": {
          "ref": "4b18663a-3679-41d0-8519-07b1e46b656f",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ddda7357-64ac-47c2-832e-1dac139afbfb"
        },
        "item": {
          "id": "427b6ab8-7cf4-4206-8a46-8aa3c5d0150d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d1d8aab9-2fbd-44db-8c3b-9ec8b1d6346d",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "009e5be5-f47f-47bb-88e0-d0c303f7a7ea",
        "cursor": {
          "ref": "788cb70a-e250-4b1b-9774-e846081d2ad9",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f56308cb-6ec4-46ec-900e-f94645b7ddfc"
        },
        "item": {
          "id": "009e5be5-f47f-47bb-88e0-d0c303f7a7ea",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ab49c701-bb6c-4010-af90-6ebfe56300c0",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "74fee101-d539-4df3-b086-408649e14510",
        "cursor": {
          "ref": "acdd398f-597c-4fc2-bb1d-3212110d8cca",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ad2bb7c1-d482-4a9c-bdcd-4813fe2548e8"
        },
        "item": {
          "id": "74fee101-d539-4df3-b086-408649e14510",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2ed2e66f-abed-41b6-ba8b-459f13269454",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "2041e475-d08d-47cd-8d4a-9e431c69f554",
        "cursor": {
          "ref": "6a3b24cf-9b22-4963-9abc-d666cc6a9e1a",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "06132ced-11f9-4c62-9213-84d712565253"
        },
        "item": {
          "id": "2041e475-d08d-47cd-8d4a-9e431c69f554",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6ee31e9a-3eb3-41ec-bbff-fc36ab2f3032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fdc8b36-d4ec-4408-9ed5-4dde05e215c5",
        "cursor": {
          "ref": "16c7a539-a029-447e-ad29-02fe5f0efc76",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6fd83229-bebd-441c-ba79-b7611629e407"
        },
        "item": {
          "id": "5fdc8b36-d4ec-4408-9ed5-4dde05e215c5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3b483e9a-3376-4d5d-957d-2572dd66974e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf26de1a-bef6-483a-a101-b09b517e3655",
        "cursor": {
          "ref": "20e9cf13-2698-49f9-ba47-6c19c592df66",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "7adf7800-732d-4faf-9a8b-36b0a1a645fd"
        },
        "item": {
          "id": "bf26de1a-bef6-483a-a101-b09b517e3655",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0dd80d46-ad87-4be8-b16d-ca25f9a5d4df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0326d1-b6fd-448c-80a8-b595cebace41",
        "cursor": {
          "ref": "ace28212-503e-48d0-a974-681266cdfae0",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "19edb596-38d0-46b8-a609-26cc90f31f75"
        },
        "item": {
          "id": "df0326d1-b6fd-448c-80a8-b595cebace41",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0c7a8c3c-0d04-449b-a937-c35f7001f9d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c3595a-dd58-4058-ae61-0c7c4bbfbe99",
        "cursor": {
          "ref": "ec53d3eb-4afb-483b-af98-21ece7ec4b7b",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3ebc422c-ff2b-4103-9f12-5ebfdfd07b41"
        },
        "item": {
          "id": "94c3595a-dd58-4058-ae61-0c7c4bbfbe99",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a9d8de1c-a9f0-4563-a857-5bf2ce5e0a4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9114bbd4-efe0-4fdf-ba82-e747e83e9356",
        "cursor": {
          "ref": "9e176c3d-ce8c-4b1f-b3a9-2b0c0a23a7dc",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0fd21785-c5e7-4fb8-ba5d-b56d05bb99ca"
        },
        "item": {
          "id": "9114bbd4-efe0-4fdf-ba82-e747e83e9356",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "23407be1-8ce3-474f-8877-ea76e764befc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be50fc2a-c2b9-498f-8e2d-3b41a8038b83",
        "cursor": {
          "ref": "1005fe73-1b34-45ef-a721-b8ad3d872324",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "660264fb-252b-4b23-ab2a-d1922edc4629"
        },
        "item": {
          "id": "be50fc2a-c2b9-498f-8e2d-3b41a8038b83",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b720595d-a1c3-4355-bb83-93cd20743bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213356b2-3222-43c2-b1aa-2b7b496cb4d7",
        "cursor": {
          "ref": "ac0f6f55-62df-44d9-83ff-8cb08dbc94ea",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "96af748a-df46-48dc-88ea-116ce4232aeb"
        },
        "item": {
          "id": "213356b2-3222-43c2-b1aa-2b7b496cb4d7",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a6e2c3bf-6051-4d1e-a2d4-6954adcc425b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a320196-471c-4b0c-bead-9f3837fce867",
        "cursor": {
          "ref": "cc0e8c21-c0eb-4ed5-9aa4-6ce3ddaaef4c",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "fa776514-6751-4d64-8525-bf949d6e6908"
        },
        "item": {
          "id": "4a320196-471c-4b0c-bead-9f3837fce867",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8889471f-6919-42b5-b8da-364b99860b56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d03fd7-6fc3-41de-b2d1-639b3df10e17",
        "cursor": {
          "ref": "d06e7736-7c84-402d-8ab7-635d65b29da7",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8641eda6-f4b3-4e0b-b341-149c2e5820fc"
        },
        "item": {
          "id": "41d03fd7-6fc3-41de-b2d1-639b3df10e17",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "600ee72c-c9ca-40e4-ac8e-d7dffface88b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b23d428-e491-4568-a2fc-cbf45adb3c32",
        "cursor": {
          "ref": "cfbd5d46-4783-4bc9-9e58-f78dfc967309",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "edb12f0c-e3f7-466e-a7a7-6e5a90cc9675"
        },
        "item": {
          "id": "5b23d428-e491-4568-a2fc-cbf45adb3c32",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4fdc3c48-30f6-4dba-a6fb-053171d7c46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e57df5-0501-49e3-80fe-9d6cfb16fbb3",
        "cursor": {
          "ref": "c49dc490-64ca-4263-8eef-42bc92a66c57",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "dddd72cf-9f75-4546-a39a-eedacd2f93c5"
        },
        "item": {
          "id": "91e57df5-0501-49e3-80fe-9d6cfb16fbb3",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c86d5925-0386-4770-beef-31e5e354905f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8353b905-ed66-47a7-b224-feab876e0f32",
        "cursor": {
          "ref": "6d7f7b19-a5ae-4d06-b6fc-b97c1ba688ca",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "78941eec-9ff1-463b-81e8-0cd083bae69e"
        },
        "item": {
          "id": "8353b905-ed66-47a7-b224-feab876e0f32",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "761cd950-a6de-4a56-98a7-8e76d9d29de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f59809a7-a99f-4900-aa11-d675fa6ca6f8",
        "cursor": {
          "ref": "30cb85d0-a09f-4da0-8717-886d47c882b7",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "587ee795-5002-4626-b6d3-fecf70daf99b"
        },
        "item": {
          "id": "f59809a7-a99f-4900-aa11-d675fa6ca6f8",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7f9f04fb-8d38-4d0b-af1e-4e795a489247",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "0f420162-f20e-4116-bd29-fb5a7f2baed5",
        "cursor": {
          "ref": "5a17ab60-dfb0-41cb-bddc-6cf8cdc15295",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3f6bd9f2-0b2f-437e-a46c-3af2f8731ce3"
        },
        "item": {
          "id": "0f420162-f20e-4116-bd29-fb5a7f2baed5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d626e609-01bc-46e7-94fc-00a62442062f",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "e21fba84-cf79-425d-9e95-7e2ab56b91a1",
        "cursor": {
          "ref": "d90e424e-402d-486e-a2fe-0e2dcd489791",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "634b6fa7-3fce-41fd-b02a-f931f3b74c4d"
        },
        "item": {
          "id": "e21fba84-cf79-425d-9e95-7e2ab56b91a1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2246f49b-1955-45d8-a2a9-137a40ea7db8",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "13ffc116-c8ef-4ea9-b80c-29b9b24d2feb",
        "cursor": {
          "ref": "40cdbb5b-2632-4a42-a48b-5276448cd762",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f98af05e-c3a7-4a8e-9712-763c5910eeb9"
        },
        "item": {
          "id": "13ffc116-c8ef-4ea9-b80c-29b9b24d2feb",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "75359b12-5d35-4850-b22c-2a292e49c4ea",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "b27b7e42-97a2-4eb9-b98b-db6dee793dc5",
        "cursor": {
          "ref": "0ac23200-179e-427e-bc60-14cadf2180bd",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f948adba-83e0-451a-9f13-8be8d4670c1c"
        },
        "item": {
          "id": "b27b7e42-97a2-4eb9-b98b-db6dee793dc5",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "53974772-b1a4-4bdd-8eef-9d325c094780",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "83a0fd4d-3a02-4000-ace7-b915539d8d65",
        "cursor": {
          "ref": "fad206a8-5f0b-44c5-a333-bc056a531e96",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "377d607e-1980-4c8a-b8b2-5dc7bdbeb356"
        },
        "item": {
          "id": "83a0fd4d-3a02-4000-ace7-b915539d8d65",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e47b4d78-8f4d-4522-b22e-abada5de6b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e6ae27-3670-4033-83b1-f4d80e96e6fc",
        "cursor": {
          "ref": "1b57e23e-bd0f-490f-ad87-37d7db11527d",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "18412f7d-7f6a-4bd8-8350-d891cffbf2f5"
        },
        "item": {
          "id": "33e6ae27-3670-4033-83b1-f4d80e96e6fc",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "568267fb-2590-4164-9543-879c91c9fa87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81152eeb-816e-47a6-ad8c-b56b96c71634",
        "cursor": {
          "ref": "ec79d319-eb6b-4b29-870c-0b96aa1f0cf1",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3aebab7e-910e-4648-a790-183d83989dde"
        },
        "item": {
          "id": "81152eeb-816e-47a6-ad8c-b56b96c71634",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "2f7c2b92-01a5-4dcf-a101-b870afeb778a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f84fce3c-0378-42b2-876c-2ba731a3879c",
        "cursor": {
          "ref": "b0a098a5-589e-4ce2-a4db-ea189640dda7",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fa498a02-71ac-4189-9f89-d08e5abd81e7"
        },
        "item": {
          "id": "f84fce3c-0378-42b2-876c-2ba731a3879c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8b97ce67-9980-4c29-84a5-91294b089720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a86ae6d-7133-4503-8637-5c822ff1e192",
        "cursor": {
          "ref": "94e3a028-4d06-430d-b0b6-99d9c75d34ad",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c92bddb8-ccb0-44ed-abca-f897fae7886a"
        },
        "item": {
          "id": "9a86ae6d-7133-4503-8637-5c822ff1e192",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1167bf3e-5c68-4044-a835-89940e6443c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c8ecf1-6f55-48ce-a717-03ab722a6b25",
        "cursor": {
          "ref": "593df11e-c891-48a4-9a2b-166b1d7c807f",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "66e79eea-2a47-477c-bbdb-a07fb434d820"
        },
        "item": {
          "id": "95c8ecf1-6f55-48ce-a717-03ab722a6b25",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1dbf4c51-d34c-4e9c-9e10-2a0f289d5ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb6aa40-35dd-4f82-8621-e2118d31a3d7",
        "cursor": {
          "ref": "11c24421-8667-4a85-ae96-9505f477f464",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "95d28060-fa34-4a6b-80f1-31a51abb6cae"
        },
        "item": {
          "id": "0cb6aa40-35dd-4f82-8621-e2118d31a3d7",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "99513f12-fb71-429e-8f5e-113ec7a4cc3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e6e48a-cfb8-43ee-a68a-7448bb9799ad",
        "cursor": {
          "ref": "2bcaf7ec-51f1-4b10-9149-e948fc0e5130",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4fd524a8-9787-4e1b-9e8c-77f9570c327b"
        },
        "item": {
          "id": "e9e6e48a-cfb8-43ee-a68a-7448bb9799ad",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9843c16a-39d6-4535-8190-3e024edf725b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98c2404-d697-4f66-a23b-4dc2a770dd02",
        "cursor": {
          "ref": "4c04dd35-f0d5-42b1-8a22-1e585741d9b2",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "1dd4e746-a543-47ce-8dc8-81c91fd68289"
        },
        "item": {
          "id": "d98c2404-d697-4f66-a23b-4dc2a770dd02",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8866afbd-1290-47cb-bd8c-60105988f435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0258e82c-6dc2-4df1-8eb5-2ab76924408d",
        "cursor": {
          "ref": "082a3782-298d-4ad0-a5d9-da8a8adb39f4",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "bd60073e-a535-4fd8-8b6a-5866979a33cd"
        },
        "item": {
          "id": "0258e82c-6dc2-4df1-8eb5-2ab76924408d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "559420ec-7a32-40fd-8e44-481391432ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82748145-8c9d-4af6-b9d7-902389607e6c",
        "cursor": {
          "ref": "29ce1675-68aa-4c6f-a069-e5aac306a818",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "971643b0-6c31-4fa1-8e88-188f72765230"
        },
        "item": {
          "id": "82748145-8c9d-4af6-b9d7-902389607e6c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a6ac6f1d-ffee-42c6-b40d-6768a68647f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3860dbe1-d332-4cf5-bf3a-c6880aa33959",
        "cursor": {
          "ref": "2cfa4d1e-8713-4ead-9b9f-f23f36886b00",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "119aacb6-7272-43a5-bb8a-21cc93d2c321"
        },
        "item": {
          "id": "3860dbe1-d332-4cf5-bf3a-c6880aa33959",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1e86914e-b2e9-4844-b52b-76bf8003356e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dded20ae-50b2-4c18-bde6-427af7263423",
        "cursor": {
          "ref": "7cebb677-e104-4876-9ec7-23bda3bfcd60",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "27e7f79b-f958-436b-a937-278aa58ed20e"
        },
        "item": {
          "id": "dded20ae-50b2-4c18-bde6-427af7263423",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "14f08519-93b5-481a-ace1-8fe6dafbe530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda5ffce-8c02-400f-9864-7cacc06220d7",
        "cursor": {
          "ref": "466e1f15-9def-4441-998b-5c5ec45f1f5d",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "48b2ad50-37b3-4bfb-a776-5cc66c1e1327"
        },
        "item": {
          "id": "fda5ffce-8c02-400f-9864-7cacc06220d7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0de96f90-ee2b-4eb0-aabc-cb05de32defe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8bae1ab-c536-401d-9526-a2ddcb741aee",
        "cursor": {
          "ref": "38fad3da-ed20-4dc8-b09e-c31c16d3805e",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "a6bea1a0-5981-4f47-b137-7abbb3409fd6"
        },
        "item": {
          "id": "d8bae1ab-c536-401d-9526-a2ddcb741aee",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "85214697-e8f4-4fcf-a980-8fa4de630501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7690d3c3-0f23-4bfe-b5aa-7a683776de84",
        "cursor": {
          "ref": "a21ac242-7c51-458a-9b50-c2a942b747ec",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "33ffadc4-d559-484b-aecb-dc959604ff24"
        },
        "item": {
          "id": "7690d3c3-0f23-4bfe-b5aa-7a683776de84",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9dc3657d-c658-49bd-80a6-ba068554b2a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa03b36-d6a4-493a-b6e5-597f86b34b45",
        "cursor": {
          "ref": "bb1d6a95-e777-4485-a5fc-dac6679720b7",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "c0cd17a3-dd14-4832-9cab-ea821624c081"
        },
        "item": {
          "id": "1fa03b36-d6a4-493a-b6e5-597f86b34b45",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "df2db830-0a5a-4c71-9efa-19b6c889a042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f204ad6e-8a51-4d6a-8c8e-92c287cdbda8",
        "cursor": {
          "ref": "77d14011-62f7-49a2-a835-59aeb7acf51b",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "88559772-5db0-4232-883b-7ff03c32ea43"
        },
        "item": {
          "id": "f204ad6e-8a51-4d6a-8c8e-92c287cdbda8",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "80e92053-8c94-4d2d-b09e-920e76f20f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d292ad6-1141-4ef5-8504-27c61b1fd986",
        "cursor": {
          "ref": "4095d8c9-3b36-4766-9df7-e8cc4b8fb7d6",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "6a0940d4-86d5-4baa-86c1-92167c614050"
        },
        "item": {
          "id": "3d292ad6-1141-4ef5-8504-27c61b1fd986",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "20a048c0-79c1-49a7-85dd-85717221d1b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "781d68b4-94f3-4d29-b7cd-e5d3c2b2ac16",
        "cursor": {
          "ref": "1b6bdff2-9b35-4180-9f95-b61b6aa3aff0",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "3dc0523f-8a02-402a-a1ab-21006490041f"
        },
        "item": {
          "id": "781d68b4-94f3-4d29-b7cd-e5d3c2b2ac16",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "47e4f4d5-f6bb-495f-94ef-d1c85bd1c0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c998a5fb-d05f-4010-816f-b98f1c52e337",
        "cursor": {
          "ref": "d65bcc14-6a14-417a-a149-7ff5d372a046",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "54420eb6-009b-44c8-9b53-5ad8e86efad4"
        },
        "item": {
          "id": "c998a5fb-d05f-4010-816f-b98f1c52e337",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f5829555-7100-4364-a3ff-24c0f8afad80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "399fc6e6-47cb-47c6-a72f-0a8249cd582b",
        "cursor": {
          "ref": "85e01cc7-e76b-403e-b35e-bfd3b5d06ee7",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "dc8ae560-4bf1-4783-9051-3627bc6e005a"
        },
        "item": {
          "id": "399fc6e6-47cb-47c6-a72f-0a8249cd582b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1bebbdce-9a61-4165-ab13-952d5f82b220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355c6bec-e754-4526-b10d-d96866e999fe",
        "cursor": {
          "ref": "cd1f8399-7ffb-462d-9a88-cab7d3a89ff0",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "6f3a36d2-b90f-4c8a-ac5f-dcaaa3e3e7ad"
        },
        "item": {
          "id": "355c6bec-e754-4526-b10d-d96866e999fe",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ddbac434-83e9-405e-a9d5-cdad665e7c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c81d32-8faa-4a3d-ad2d-bb6d4c45c4f6",
        "cursor": {
          "ref": "577369cb-c28a-4057-8c34-0a1ef8fec1f9",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "2a47889a-6a66-4394-8c0a-9bf585440845"
        },
        "item": {
          "id": "18c81d32-8faa-4a3d-ad2d-bb6d4c45c4f6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9a2e7fa7-9f41-4bdd-9939-f7a864605e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed0d2f6-60bd-4f9c-b08d-b785e79818e9",
        "cursor": {
          "ref": "07a81432-4a60-4dda-b45f-94b1f8613f48",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "3ab9d58a-4c60-4d57-9d32-f4978b1c66e3"
        },
        "item": {
          "id": "0ed0d2f6-60bd-4f9c-b08d-b785e79818e9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1c526779-e384-4567-8713-5c2e20fc1e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac197dd-b500-4d28-93ad-76c57a62aaea",
        "cursor": {
          "ref": "66233b48-8364-435e-ae14-d218ba727bf1",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "4127ea1f-25f8-4436-bcb4-26983a7a3474"
        },
        "item": {
          "id": "fac197dd-b500-4d28-93ad-76c57a62aaea",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e4ef5067-4503-4576-b3ea-2abd49efdcc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f75f89a-452f-4c78-a2aa-ffe4ec7e4d7c",
        "cursor": {
          "ref": "618b53a5-10a9-459d-bc6e-dc8117214c63",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "92c70d12-1778-441d-baab-30d41031f0f7"
        },
        "item": {
          "id": "7f75f89a-452f-4c78-a2aa-ffe4ec7e4d7c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2a4df118-5b92-43fd-8fc5-37291a404f12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb37ac0-9812-461d-8807-c452b1ea55f4",
        "cursor": {
          "ref": "07ff62ff-21df-4739-b6af-164284e4d49f",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "81d62026-16ab-4706-8087-19de657be507"
        },
        "item": {
          "id": "ddb37ac0-9812-461d-8807-c452b1ea55f4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c6e1092b-9356-492c-a9cc-978d91bf8703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28c74943-6124-434a-87fd-c4d5fb8b4234",
        "cursor": {
          "ref": "ac9ec5cd-c8cb-4263-995a-33bdcc040952",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "6afac43d-dd1a-4428-b05a-3973416066ee"
        },
        "item": {
          "id": "28c74943-6124-434a-87fd-c4d5fb8b4234",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "55ed2afc-ed0a-428d-aebb-c9007d71b53e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387fe10a-d901-49fd-ac6f-1148b4c748a6",
        "cursor": {
          "ref": "94b16314-f539-4236-9a2a-046ba391b42d",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "477c11ad-da2d-4ea2-83df-bfc3aab72f89"
        },
        "item": {
          "id": "387fe10a-d901-49fd-ac6f-1148b4c748a6",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f38a5c3b-bc17-4170-8de9-675653303166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102f197a-4e03-42f1-b899-1126bc96f313",
        "cursor": {
          "ref": "3b9dc7bd-9150-4bd4-983f-09a2974c65dc",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "ed0eca36-e336-4342-a862-1648eae68ba1"
        },
        "item": {
          "id": "102f197a-4e03-42f1-b899-1126bc96f313",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "85313c8a-f53d-4c37-a767-33a3834f7634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7befbf0c-fa90-4f41-bdcd-de3a442c94e8",
        "cursor": {
          "ref": "54478a6e-d523-444a-9234-f0d55c45268f",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "a6fc625d-3ee7-4827-b073-6df28e0c884a"
        },
        "item": {
          "id": "7befbf0c-fa90-4f41-bdcd-de3a442c94e8",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "483f367f-0c6b-444b-8ce0-70fd1ae31664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8d33a1-4f0a-410c-8075-a4752dae311b",
        "cursor": {
          "ref": "3451c821-1e7f-4056-9dd4-32e03c4f31cd",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "c534c0b5-c224-4332-9e8d-c698b3f7f3d1"
        },
        "item": {
          "id": "ed8d33a1-4f0a-410c-8075-a4752dae311b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ef08233f-15ea-4700-99df-4f90e9704cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8002fd-2753-4158-b880-9c90532a8ed6",
        "cursor": {
          "ref": "5e7561cd-2e94-4a69-9c7d-b012e31e76fd",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "d0673b93-571d-4b8a-9793-ec0778de54f1"
        },
        "item": {
          "id": "4c8002fd-2753-4158-b880-9c90532a8ed6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "37c08d15-3944-4e92-b3f0-c75d2435fbd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5feb012-8f52-49df-a973-a3b3ec587e0d",
        "cursor": {
          "ref": "e16b8ecb-cec8-46f6-98c3-c34ee8472b59",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "c901a03b-df8f-49b5-85f9-190dd5e24a2b"
        },
        "item": {
          "id": "d5feb012-8f52-49df-a973-a3b3ec587e0d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4e720c7e-1d4f-4631-a994-f4594460d3f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89750647-05c4-40e3-b987-799eb8cf641b",
        "cursor": {
          "ref": "007a70f2-c44d-448f-bc70-bfb076e3f43b",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "a38f7275-55ce-4473-8758-f157ea988953"
        },
        "item": {
          "id": "89750647-05c4-40e3-b987-799eb8cf641b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1021ea05-a884-459b-8472-4dfff8f6aaf5",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "774ed988-1e27-41d0-a0a1-aa51bb0528e0",
        "cursor": {
          "ref": "f164f82f-4d47-4666-b72e-70e6d7037d0c",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "b1a7186b-f389-46aa-90c8-dfd63c205267"
        },
        "item": {
          "id": "774ed988-1e27-41d0-a0a1-aa51bb0528e0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d8fbc115-2820-43a1-ad11-a375e232691b",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5307bc-30f2-404d-a900-166af41178e4",
        "cursor": {
          "ref": "cb07f369-ad7d-48fc-8cf3-08007897a5d1",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "fb1bd131-a072-4b1b-a663-4caafc362ef2"
        },
        "item": {
          "id": "8e5307bc-30f2-404d-a900-166af41178e4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "49a3b3ff-7395-453a-8bd7-109f24e4aa9b",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b3a3d4-ad7e-42a8-b181-3efebfb70e47",
        "cursor": {
          "ref": "ced86ef1-69d4-471d-ae1c-21824ff99d0b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "9a68f889-5df5-4d6f-a4cf-0b6abf45c156"
        },
        "item": {
          "id": "d9b3a3d4-ad7e-42a8-b181-3efebfb70e47",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "23274ea4-2ee4-4de0-ae2e-04fa1247edc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b3a3d4-ad7e-42a8-b181-3efebfb70e47",
        "cursor": {
          "ref": "ced86ef1-69d4-471d-ae1c-21824ff99d0b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "9a68f889-5df5-4d6f-a4cf-0b6abf45c156"
        },
        "item": {
          "id": "d9b3a3d4-ad7e-42a8-b181-3efebfb70e47",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "23274ea4-2ee4-4de0-ae2e-04fa1247edc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "114c5807-294c-475d-bb5c-194cc15c36d7",
        "cursor": {
          "ref": "5d4f8144-2197-4748-b4ff-bcf6ebda00d9",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "31992ec2-8b23-4457-a8b8-a7440354f405"
        },
        "item": {
          "id": "114c5807-294c-475d-bb5c-194cc15c36d7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b5120ff4-969d-44eb-8b42-d10b041cf7da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47fad394-926b-469b-bdcd-0b0eea021fca",
        "cursor": {
          "ref": "ea7bdc8d-a993-4c9f-9c67-8703234caf94",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "5ddf2090-be54-4f9d-b476-d3bf3b67adf4"
        },
        "item": {
          "id": "47fad394-926b-469b-bdcd-0b0eea021fca",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c73ae4fc-add2-4257-8df1-05003ad04202",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}