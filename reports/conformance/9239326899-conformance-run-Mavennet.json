{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "64bf0561-0628-4a55-9058-c17ad538ebde",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f1860755-a5ba-454f-ba44-a339304dc5ea",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5aef0a70-689a-4133-95a5-d73df8051f8d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "02c8a128-2b63-47a8-92cb-bddb17fa632e"
                }
              }
            ]
          },
          {
            "id": "5653fd1e-94b3-4bb2-abde-3b3230431a5c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c1382170-66bc-4d2f-a297-03e4971514d6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c458e75c-afdc-4e95-b82e-1ffa599227ac"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b67f8148-b88f-4590-9623-6fd80a38809f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "666c6e42-7fc8-4a96-a723-bbad231a9633",
            "name": "Positive Testing",
            "item": [
              {
                "id": "24be3877-bb79-4646-961d-ea88d11f4f16",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b44b98c-abc5-4e7f-9a29-beb7ee19587b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "26538073-6b21-44c7-9602-8050aaf2932a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b4ca5bd2-b51c-42b5-8375-fcd3710447ed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e4973997-9090-49d3-abfa-00eed1a6c563"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5b1948c9-b9a7-47e7-99b6-f7486e39df54",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2e8465c3-a51b-41dd-90ac-5ae83f4f6088"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bad8c0c2-953d-4de7-854d-8530264a0a8f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a6d04a0b-8089-4f37-92bd-43cb829eac15"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0fb475b7-78e0-46f1-9e33-8362d0602857",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "924e873d-5452-4ead-96ae-f018823c3456"
            }
          }
        ]
      },
      {
        "id": "487edeab-a332-41d7-9ad8-a1fdc10efb75",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "67b3c9fd-00e6-4ede-960a-0c0e8177694f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f81b92fb-2d8a-4ff9-8a8a-b3239ef17577",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b8883f6d-a12d-44c8-9d2c-aa9e4cbde565",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f774abf-a9c8-42cd-aca2-f1e0ace75aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "320e7924-a8bd-41de-b551-0e41ea7ef774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf5475b-f821-4b61-922f-bfbb5d11d0f5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50890c66-d1cb-4f01-a80c-d3f65ced696f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9def222c-a07c-4921-8714-c7b387886e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2f8122-c729-4b7f-b4f9-4cc7fb886e0d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20af0670-7606-446e-9deb-289a8d8d326d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "beb4c9d9-600a-4759-bf01-3641bf897d8c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4f6543b2-aad2-45c9-a6f4-45cc90682b0f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5c0af778-74d7-4d66-bbf3-52ea0451841c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7ab499-3f2d-4d2d-8d12-111206d03361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f13d3f7-6098-47a0-9805-7f7e2db131ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0158b4b-69e6-44b7-a299-4feb8efafec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3417d8da-0bf2-4e4b-a942-2373cb64855e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5f86e665-b0bd-4444-8dc8-96f0b07f2fb3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bba5937d-66c2-4ac5-9c00-fd6e588bc98c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ceddb4e-ba84-45b7-a7a4-69a569e9678b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5d46fe62-7166-47b0-b76a-0347d45259ca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c311482-f7e2-4114-913f-39b482719b47",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "0f8b178a-a2d6-4b07-93de-b0b446e7749a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "47ec00d7-18d7-42f7-8846-8d05eef372ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "afe76205-9bcd-4cf7-8303-5af07a7be945"
            }
          }
        ]
      },
      {
        "id": "a548a19b-ddfb-441f-92f3-582c95c34b2e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "50308c32-aaef-4653-ba3d-f9937a5bd0ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "220a7ea9-5f26-42ae-bf9c-34e4d18a7f8f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "920b1c3c-38e3-491b-8d91-8a9ea27fabda",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c2f93e-fc78-443d-9b37-af4ecd7bce84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7164d8c-e3e4-46c8-8959-e313f043300e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4910db-8865-479e-b8cc-13e67b1a6062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab27cc39-b817-49d9-ab34-6ab9c2e994a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090b8262-dd5a-4ccc-8240-360142eeae84",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66de7a5e-a671-4753-9d66-7ed78a393606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77c3db77-3fbf-4c13-b69d-293bc1990156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f259d2-0377-42fc-bb1c-f72ca8267961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "272c0b03-4160-4005-927d-3cc65495a352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660d7f4e-9319-442f-8fcd-114bca79d1cd",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98276745-43d4-4822-9305-b79b26206d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb4b5b8d-679c-4ee0-957d-470145acfbc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df80144e-4cca-4598-ac29-80c548f380c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7494d983-2f2b-4fb2-b0ee-0e7b0ba9a406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c4db2e-e832-4085-bbb0-3f3d5dcfb145",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0860456e-56a4-4794-9005-c52c6342c722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce2814c-b5fe-4420-936e-34a40edbe0b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186ab81e-bf3f-49ca-a5e2-07c42148e8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "adf6eed6-b0f7-45e5-ad8f-e7fca97e7e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6af5ef-ae00-4cda-8508-69104424fcdb",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b6445c-6614-41f2-af03-b4b666a017b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d22cb0-adaf-40d9-96aa-0befe3f5bbd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b88b477-6bf7-4b3f-84b3-5e8fe4c6fa3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2be5566-f91d-49b3-9f46-b891e92fdd4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "094c39ac-527b-4dea-8773-68bd1ceec96c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "968fbd7b-ba7b-478f-bc07-63ebc7d3be31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fa0afb4-b2f0-43cc-bc9c-2491b02d38f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9e25b1-55b9-4f02-ad76-7123d708df47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f26fa04c-0e42-4cad-8df7-c0d9395d64ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0d8227-cd26-42fa-a225-443435b181f1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5fae7e7-3266-438e-b200-8b00fc3adf9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0fec88-c1a9-454c-b6da-0f9cf49e7126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91550edc-0b3a-4f3a-bb70-bb6f7af3047f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7127d599-be0c-4398-b1b3-be0988cf0903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae037a63-1ac7-47e8-8959-718986512ecc",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5489c27-04b6-4021-8475-888ecc2954ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d44a0c25-eb95-46dd-82ac-f8c9f89e2f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f485106a-601b-4e6b-9812-c62f92e2f947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "808595f8-b593-4697-8a74-425606bce165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70940fca-fa1b-40a8-8842-c9fb77de1e4b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44dde975-c376-4104-bfb3-beff1d9d5dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d47c7499-643c-4bcb-98eb-7fe67d2cf908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d532a28c-0f20-427f-b1fe-a91750758a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f76db2c4-4a38-41b9-9c43-959182735e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "785d10fe-5268-4038-9c9c-f4edf703c441",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6dfa3cb-1c48-4e77-927d-e6d83b4016ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea0bbf9-336f-4e6f-8f33-89c83b5437e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ecbda25-26c9-4ec9-9256-725435988c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ecaf831-f864-4db8-b7a7-902cff25d168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879f7340-aa99-4f81-8066-fa3ef8024c86",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9755093a-3ecf-4c8d-a00e-b715f225fbff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db92747a-6dba-4818-9f2f-fe28472737de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a04b8dec-60fc-47a8-b002-95ed99b4f795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66e40b89-0b2c-485a-a2aa-d6218f4315d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01a9d36-8556-4375-a4a7-341c55d7ec84",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5082f03a-755b-4efd-8fe0-b8097034ac9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e64dba0-7e19-4cb0-9e2c-53665e58da5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01742e7d-5324-48af-a882-fa4460747d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d4a9282-3e63-4c7d-b8c0-1fb903fba224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c5521f-3166-42f8-b30d-cf5db514cf59",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d57b8cd-9847-4019-bd6f-166ae8ff3f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc676ae-e21d-444b-815b-424f043df863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe5358f-5ab3-4b56-864d-d1f4d8c93bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0563b1f-7acd-4d7b-8541-4d648f728a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbbe20e7-a079-4f21-babd-36f56ec2b27f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46846384-f3ee-4091-ac8c-4c7221035dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b83b918a-bcb3-43b3-bd73-d0adc1bb5f6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6b0581-2006-487e-9af8-16719bd8b7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "991190ba-a5ae-4fb7-b66a-304f6075eb56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e371b4-e406-4d23-a6b1-9fe8ed72f884",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74623b95-261a-483d-8df6-93fc4ae4c1eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8538ebf0-bd65-4272-8aed-b838630e29c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e50b30-2f2f-4f17-89b5-2ec99e1621b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c44acd3-e9a9-44b7-b442-545728a9a06f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437f503c-52c9-409d-b56e-0dd8fad2cc9a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "956a2ab2-10b3-4e99-b48b-9ef7c70b2be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c487ce26-3971-4cb6-9d03-2fc163e5b058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60dfbbcc-c51f-4c03-8527-2d82fbb7e0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a09fd832-dffd-4e72-a0d8-25c89b9ea486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d9551e-4853-4ebd-b2d0-cc070c48028e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63955c3a-924e-4a8e-b654-87d97675c79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "064279c9-71f8-4517-ab84-26b0c225095c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eada610f-bc0a-4506-9289-52948dc800d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56fd7bca-3bbe-482c-8753-7f2425eac2a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89288995-f942-4941-ac79-5c24fc7bb78c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2575a0-90cb-4d4b-889c-f916400e52b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "463f4b80-58c5-4ffe-b355-45dd7b97e9f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad8d9f6-a830-4218-bc6d-8afeb595b288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca22060-5a96-4135-88d9-bdcdba36b1c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd87f63b-7b04-4a5e-b15f-b4cb379a4c8f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7062a9d2-462f-4474-bd7a-f42001ffdc0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb2ef9ab-a181-486d-9a16-bf57d33145c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94826cd1-a204-4496-8ca4-e2a28495d7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2021993-8f65-4c11-8989-b84b58c95c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612aa12a-65ae-43cf-9e0b-eb1cf5eb5d61",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "630ab2e5-228b-434d-a0c3-78d17c7be3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff249dec-8c7f-42e5-bd00-d128aa896e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3cf307-fa8d-441b-a715-efc2c44a3e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb9f12a5-01d2-4b0f-b0a7-7bdd8c42ef67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a32f74b-84c9-4a4b-8c54-135f818d6304",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "202a20f5-e834-4de8-9444-be6271b93dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891f6532-0d27-44e8-a991-1965818024a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8478ac7-0e4d-450d-8fd1-91addd6bdac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c0fe075-0ad8-44d7-b658-716937b49421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47517d04-2c89-47d6-9bde-a168bf2fa8ea",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe64665d-fbd9-4461-99be-83474d62a47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5f615da-30dd-4be5-8b66-42042b90739a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297ff472-63a4-47cb-ad49-34669730aaab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d10c1d2-300a-40aa-9192-1d0f581b583f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f058abd0-7adb-4722-9d6f-ca38300f65c8",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f841df-9956-4556-87ce-f7ab7c3610a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af519cf8-9ee1-43ac-9979-4f3b249d2864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0334fca8-ed32-460c-89b0-f8831315e032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5ff055a5-d0eb-49a4-912e-fd92290a8ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1585b646-8b35-49b4-ac72-7387bf64a59a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdab4c5c-3272-4b1a-82a2-cf995088cc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c00af9fc-bb1b-456b-9e90-2540faeaeca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0e8bf4-b13c-4dac-a33c-5e4aa57f08c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b822bfd9-b634-4c63-846e-fee8977c64d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d3b1e3-a56f-4425-babc-17b0887a5513",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ff111f0-609c-4902-ae5d-6e7f91c323fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "414f02da-1ce4-4cdc-aa9d-1cddba1d6e4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209a226d-874d-408a-b68b-74c32681dc7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dbfed52-e131-42da-b0e7-ea61c6445c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2f2c56-60cd-4f82-87b7-f1793ad756f6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bb4cbc-856c-49b1-8a31-6cf33a0cb12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d15a50c6-68d5-406a-ac98-e9c2828fb645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00e522f-a907-46e5-852f-975efc9a78f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf0ed82-c557-41f0-a8a0-0e25e634d8f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f9acb7-cdbe-4b49-836e-baf6dfb3ee5d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc77c3b1-90ec-4c28-8273-ff94ed386e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9eb79d7-cf43-4163-964b-714ab6e32973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caba56d6-88c8-44f4-b492-230425a02ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "016011bc-9a47-4ccf-9190-d50f2d133f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4292ba51-b7a8-43e6-8cd1-43e2011db070",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a134e40-5616-4b49-a889-6a861332a1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "576dbd38-1df1-4bd6-a489-7435d1079a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ceacbca-7d06-45d7-aee0-2888f21d5f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "24cedb24-c5f0-4338-9af7-785d73ed7ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c01af8c-bc79-4bf1-909a-fb185701f71d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0c617f-bfad-4e55-b274-a228fd3411d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf495845-cfff-4727-9039-f597ab13ad20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ed06c9-36d7-41a7-bcf5-d8bd06bcc825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1222ea05-0e9d-40d7-825b-7e6bac398f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd1595a-01de-4a51-addd-6e16e2362d1b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18345cb-6d23-4f27-8f30-724a8243a3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfd5583c-29c8-4f79-83d1-3110f9cfd1dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4787bbf-9750-4210-9794-23552cc59225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d0f2a1-7ea2-43f4-b111-779c00a84140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd7d24d3-c246-4e56-b7e6-751825a4bed8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fad032b-8282-4ce9-ab85-604dc82ebda5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b031804-21aa-4ac6-ad50-30fd1f1792c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88262c1f-e8d9-4911-b3ea-e89d27c79150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ba01f91-72dc-4f3d-bb61-facf5fb2599f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab8ff76-fea7-44a7-b947-2af08cb686fc",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54705f98-07d7-4be8-934f-158161f4cbb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76f5cfbe-0ea6-48d3-9ca2-269ff63eec39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75cbf2e3-aa4f-4608-8299-5a5d9d469fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c27c9102-3059-4a51-9b70-a499a34b39be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7de720-3ca1-43ff-b27b-a2ed4ee4b1ba",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4bf09d-aa11-43dd-a552-5e1f5c8dc7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1285cc12-05d3-43e4-a672-c91d33ca6525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd91d018-348e-4113-a07d-c1e0c6b24b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "652d6cdc-cb6b-425c-9d09-e631f262d5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47af650b-46ac-4e8e-bb66-1a140b61198a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69dcb73d-b22a-4166-917b-e5198a81e462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f978c48-5132-4e9a-872a-67ed75718f0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28d979f-4bce-4361-9ff1-6c7709658e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "78d1d6b3-ac6d-48b9-a5d9-0fad6b08f7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80143ea1-9a27-4222-a87b-59c316d81195",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01fa84e5-b4c3-46dd-a246-1acf395b9d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b68bc318-e222-4351-9432-188e1f19f639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d93516-db61-41c1-ad29-27f12f755c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4a55d798-bd6e-4f00-bdd0-0838afb77433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9866776a-a33c-46da-bd82-04de87be7478",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7813e3ad-d7f3-4d35-a322-83f18d130853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0c18e55-2ebc-4e76-b8b2-89edd0e427a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc82a58-1878-4b47-90cd-5869c0159f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9d3f139d-26c7-4ef2-9531-bc0b0fcf2441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de4ab454-5e9a-4f0e-bc0e-28ff025ddc64",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43f7e2b-af6d-4be7-8ffa-db04a63e5828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b4a7f6-d784-4126-92af-10b3346942a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca383846-a85b-4650-a59a-46f90cab19b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed4ac394-1ae7-47b5-8565-f427e363a275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d93bc22-76e3-4e32-afda-0df3d52d3982",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86108eb-1166-44db-b17d-163c3a21038f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2a01fb6-7554-4ca9-b5ef-ec647301ec46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3422e291-aa78-44e5-b79e-bf8e33142afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a3ad3bf-90d9-45b7-ac95-bbc21c26db95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1254c8f1-baab-45bb-a575-6932ac405b73",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a90b30-0580-45f7-bf67-979fea0efcc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c429129e-abbe-455c-8b99-9ea4bb3021a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5391e16-25dd-4f1e-9427-42c849cd664f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "59230a5f-ac71-428a-b981-3fed46b30756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04fc962-9d67-4bab-a784-5053632834a1",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb3a85c-3449-4970-be9c-4f203c3c5777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2de65379-9ca5-4e31-bf7a-6b5c88969ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581a42ca-67c8-46b4-800f-d3c1b7d879b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "381038be-5c5a-4971-a2d5-180453bcbd75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681da725-8001-4d98-81bb-c669a9615c37",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df483887-a08b-4f32-bd00-112503127d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5bf6293-6e83-4baa-a949-96f32897f353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9fff766-fcfa-4560-9c64-ec989f6d9849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f66db754-0126-4caf-88a0-1b5bb954d684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355760c1-04a3-4b81-8fe4-c7e9f69e0a3d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e1a1fb-3106-4664-b3ee-e82bd207ef4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9dfb4f3-5ca5-423d-acc3-b24f6fa14a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c4a3945-cfb9-461c-844a-5b06201040b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "17d0d240-3fb8-4acf-a2ec-691a65b5a128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a48f86b-ff1a-4ca7-a52a-afe94c339825",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b994f88-32b2-4304-8cae-56549627df7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d79c24c0-83de-40c7-80cd-33a266c765be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f92d19-079a-4bb1-a6db-f7fdfd784bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "74167348-ae0a-44e0-896d-3cd7cd9e0de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7832247c-4ed3-4cd3-a1b2-2b8604854c4d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3156a010-2f47-4ebc-b08a-fa35680e1f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b96833f9-a278-4407-a54a-d61b3409941f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67afe98-2a9b-43cd-8063-6db6d52be758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c064bd3d-ee51-421a-8e42-cde861c63220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce3f777-bfbc-484e-9c39-e50304b48381",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5559c4d7-eb95-4d7f-9a29-768277438f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3488c4ae-a61b-4a1c-87a3-88433ffced5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368df5c4-57d3-4a7d-8fc3-95e322fb1d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "79b3bf33-e5c2-49a3-9792-6a0c3d783108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1acf9d9a-3257-4ae9-b59e-ae9289dc0d2d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5701b80a-1a54-4172-a345-9d92679de7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "000781a5-706b-4bfb-9d85-57462391dc86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa44f00-db5a-4fb3-9ac7-26b39ce9765d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6855206d-e36f-4e1a-8b0e-1c63f56c37e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5d5b3a-4517-4ce0-b51d-03d2d24b35db",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9e30df-60fa-439f-aa98-60aea97d1931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dae063e-b047-47d6-b3d7-29533fa3db63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a03cbf-0dc6-4440-a6f9-fcfe99c72776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5c7ca0d-af93-403d-9847-88e9a4db3bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e65a53f-6b92-4808-9dbe-4a55b1cf0a90",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f132b435-2700-48d1-bdef-3638318f0614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3645622c-2f1a-4dc9-bf53-534b7402c10d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f04dbb-46c5-4f9f-befa-c915b46bb1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab52f0c4-80c5-48f1-b014-b4a07ea4cac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee4e977-9841-485f-adef-9c01a4bcdc0f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "067d591a-4b2f-4b36-a48c-d910c8b920c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d6ee976-62a5-428c-b9fc-666c3628a615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb4a859-bda2-4f8c-9bc9-2a4ba5bc382b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc411306-544f-4bee-a50c-0e24b3821088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e880b58b-0903-4a35-bfb8-d3bb6c2a4e97",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769e5119-4d4e-43eb-805e-a1b7d3197c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f7bbcf3-4cf7-4215-88a6-c66123098ed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e7eb7f-b722-4a9a-aeb0-26aedf3f171b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1ea513dd-6693-47ed-9056-1fcabdc47851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3e67d7-648a-4182-8262-a7df448ad1bc",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "632b05da-a06c-4833-a8d9-df4ea793c870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b8b6fa-d314-4622-a353-cd68c3bd8ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d8f4ae-f4b3-41d8-9299-50c541814951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4d15b0a-b979-4d46-9bd1-db2a89a5bb59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d236d900-2172-4789-a582-5671b3919db0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f1c051-46ad-49fc-b673-6cd123685738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a49e7950-f638-4057-bb86-77c0006ae59c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1403501a-696e-4cf3-9330-48421572a0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "821d2d67-1208-4fbd-8dd9-3d8e674bc93e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8a7201-19c3-4bc2-b2de-ece26b82cb90",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43edb0a-8f23-41d2-8fdc-724ef76654a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a3ec7b-4212-4f3c-bb61-d1683a04444f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071e3ec7-9777-4968-944c-fb922c7935b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "08086447-ae3e-48a1-89f1-994dfd816118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aeaf41c-6a5a-4363-afcb-e472f75f6d14",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80634833-a97f-4b58-b69c-d7468069aafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c41ed082-91a0-4123-8449-3c7782623696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f5b299-0bc4-4922-a0ef-b5aec2940955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61511947-5e13-42bd-8ba9-0a514269325b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6c7719-3ce0-44cc-b0b9-2039b99811b7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5a0850-44dc-4cb6-b2ba-faff08188650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2c24f6d-7ea5-49d9-b609-a9fdb57413fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aab17e9-4e07-44ff-b650-68f6246b2102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bced0ce2-5f1d-4bba-ab7c-3c668b26c267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a3dff7-d289-4000-ae78-4cd906333184",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb2f387-1e4e-4f44-a877-f4e825ba5118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad0b75eb-52dd-4da4-939e-a159d1aea6db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e292047f-4783-4dc7-9929-9416709b8b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c2404fe8-51db-4fdd-a17e-ad4a70dde0f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0209e9fd-e933-4b37-a8ec-2eba72e29cc5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb7ebf7-1540-44b3-a418-9e3b5311b9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be5f9dd-8c90-456e-a4a8-d7cff5bf3140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f5b43b-7d82-4168-a9fe-d3669f31768e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "58f73a62-0dee-4a16-b56e-d83e843c3ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f0db2c-302a-4ddd-8b70-4283f1de676d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df505ea3-1a8d-4eee-8a3d-6f7e2f4f3154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1cf3a03-f785-4054-bd26-e72d91daf49f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae54f855-9feb-48fb-a72a-b8170a448af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "79c7e175-294f-44f7-ad1c-82cc9b2a5df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213712e1-6ffb-4668-85e4-801875e680f5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "120eefc0-5f9e-4a10-b89d-9ff204dc869b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b777ce2-c665-4e1d-ae8d-c49d8285d9e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8668e4bc-e45c-4e6a-b344-97b898dd00e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d8365ab-eece-4669-bd06-a9dac1964753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe26dd7-bfb6-4394-814a-a7fb8ec8370d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caaa484a-0e05-433a-9936-6109ad581db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d91e771c-ec69-40d9-a51c-d8c07bbd08f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14944e12-5dc9-43e2-8aaf-e472f6c6b9a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "261383f5-ca3e-459c-849b-a085e81b15e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16ce2d4-ceb4-4b7c-a613-20939e8b65e2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82899345-a13d-462a-b849-3b14916ba67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f4f21c-41b3-450e-94d8-442a5f861abd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00b301b-f2fe-4684-92af-216ca2173b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "91cf8ae0-5bf4-4f9a-a987-11cd865743ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b21e9ed7-ffe6-4227-bd36-3ea5ef819a8c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d45997-487c-4192-a426-c13b8d274c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baa41665-1805-406e-aa34-44fa77a81259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65403df9-643c-4464-93e4-d4b8fcb1608a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "dab74432-8610-452a-bad7-56d6d853bdbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdcfe3a4-6b34-4ab2-84a4-51ab2ce857fc",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9501416-4f7b-4a75-906d-d5f6882af87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f0a3db6-69ec-4b43-87d9-f4adb5c844ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356ccfac-8552-4c89-b4a8-2934234bc5e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac3f9335-8c53-4e33-bc42-39080af0e2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1718bd24-227d-44e1-90ea-c03972822c5c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "880f89b1-1eba-4472-8feb-7dd9653a37e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab3912b7-c484-472c-ad54-769d84500773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2f7a6a-4878-4acc-bbd4-b66a8a63f3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9b72ce1-357f-4e23-a154-ae51f518db0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce840c4c-1d1e-4a6d-b379-8bf512329657",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3692883-7682-4aef-94a0-a2c6cd19129a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d103150-1ef4-4b56-a467-74bea35011ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b1ecb8-37d8-4f7a-8c98-232ef98df029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6a3c268-cf54-43f7-b33d-626a36a913b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c171f1-9d2b-40e6-bc1e-ac4c5b8692a7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cb6b72-f139-4bd5-abfc-53d4d1c67602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccbd7c57-cd45-416e-b95b-3d98bf41d67e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa9e199-b506-44be-8e3c-4c29de62c8d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a115f960-aa90-4ad0-b7b4-7ca83f86943e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c2672a-1ed4-4b7c-b025-0062e6943497",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e637d4-0445-404e-892a-0e1f63108477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "016c31cc-3e22-48c6-adcc-acc51ba95ef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae48256-f95a-4bd6-b584-018799d965f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6191d48d-4e76-4802-af8f-f35702fba1c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df04918-d256-4b56-8ca2-18590498cccc",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5157ad58-bba5-423f-ac04-261d83e47687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26bff4a8-577a-466a-96fd-4e97c8383aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6285530e-fcab-4eb0-a5e4-0578b433a439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e97c510-cd7a-4bb5-80c3-d3a686d7150c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ddad79-8393-4808-a7a4-3ae5a69dc692",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28ccba4-f7c5-4321-a9b9-25e96e264099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c93e1d7d-7695-40f9-9b36-82efbcd6e2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f26905a-6bab-49e2-9473-1eb893fd9446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8717fa94-9531-4071-b804-e037aa4059cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c06cd1-f0ff-4290-88a8-ae8f4b2483f0",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcce10b9-8e8f-4708-9e50-2a19423df32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bcf2c3e-a585-4856-a8b8-0282f3f4d301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0bf2ecf-76b5-446a-8238-fc107f2c3fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "173acac5-3195-471c-bf7c-9825589c451d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c308bf3e-c9e3-4d39-916d-63d3511445cc",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09bc1c25-089a-4d1a-aa6c-f3306f7891cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be4a2e0-e016-427c-a7e1-a837101d1ff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bffd382d-36ef-427e-9f0e-b42631443408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d5bbf0f-c432-49f3-8e6f-b1e462f453d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3fc0f39-3796-40fb-85a4-d36de70ec7af",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "049aaca2-0d1f-46eb-b6e4-8b8539f6646b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "986b87eb-5b02-46b5-9b2e-74ec80a62e11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a98ca4-384b-40dd-b592-8e6b57cc5847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e0a3f01-adf2-421c-a5e8-403c5fe46267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4989a88f-c29d-4498-8326-20e7d3f86720",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b12375-00be-4577-bc61-7aa692d91b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c92c35df-5123-4cf8-9163-89624460e6a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c3031b-a919-4f1b-a3c1-10793b9cdd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1103c19b-c8c4-4125-9f5f-7b4b1b5634ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cda233a-dde9-4db5-bcaf-6959c767ba11",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0e9b3a-b0b8-4d65-a736-d41f002d5967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94484347-a352-403f-a99a-95e44515caf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5217aa-4679-46fa-adc6-6a896cb124e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c5d9377-9082-4db0-93fc-680453274317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff39b8b-3e19-43a9-84d2-3fb1506083b7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3beaed-1055-4248-a285-5bd414327bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "420329a4-9e34-4115-9869-145248b76224"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd2810c-5549-4b09-a5a5-327b87c98073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3307674-d126-4e52-87ee-13948d9df9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583c4d5c-172b-433a-8cf9-583af16de446",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a8c3c8-f662-42fc-9816-a757ad279265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6995b2dc-0a42-487c-833b-c54617d5d603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c0f465b-027c-4516-a9de-8080b7b3e8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "14fe1b56-f7c9-43a2-88b7-44d975d3861a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f298444-130c-461c-8ccc-0bb3d68867a9",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2180c60a-a1f7-4366-bded-174a72a4381d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f64b69-6e24-4bd8-898b-28239f36de90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca320d7-9b66-4c34-a679-34a9de012ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "883b4759-a80d-456f-9373-585a23ca34b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4d2038-0eff-4341-9529-2ee5c9af1694",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0555da6c-e731-49c4-914e-1771a8b71c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95dcd13b-3f69-4ad0-af7f-c1d4e0a1168d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6e83f1-bd32-4290-b073-fb6931f5b723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cdff52c-4a4a-452f-92bf-c9d6f0b96dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f1a391-bca5-41ef-96c5-dd5ab3ff2757",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd1e9a3-8940-4b24-a114-d8d88320c802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6130fa3f-2840-4858-a580-448f0779f576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc8e76f-6e13-4534-b9b7-6cdb5090f5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d1c41e-764a-49a1-ae8a-b16596e9d918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7532532-26c3-49a2-bc78-1c287ffb6cbd",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59cb585-4919-4a9e-a7bf-6477e5db0bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c42e6b7-c8db-4641-a81b-03c1c0558b01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f80a94-0b18-47c0-90fa-f02e507c939a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a71c2f2c-8c5c-49ee-a06b-b686bc45ae97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee53a1f0-d4af-4f86-b8df-e126fe238f45",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3be27a-3edf-4619-aecd-aa1d17a9a3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8bdc5c6-aed8-444d-895e-e0fa2d0f4f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed41f51-8d44-4d0b-9296-a4d113644213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a559dbb-7662-4180-b134-f064461b5e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d618c9c7-3422-4d69-8d7f-c1597b55d2d7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c9700b-d913-4b83-aeeb-5789ee48ee15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ff571e-37ef-436d-ae18-5afd86a5370b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a343948-643d-47b6-b1ef-d92f80187ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a86a55b1-04fd-4c4a-ad38-fc1f636f6ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be220f1-f8a6-46ac-a367-d8fdeeb611ed",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30c400b-a633-4575-b5af-a5ea5c723d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56f608f6-f8b1-4f36-8110-4e8dee278331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a0974e1-fc5d-4604-9f40-0d6d6017efd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08b077e4-8e12-4e55-b45d-9dfa9f17334f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7b80782-5556-486c-88b4-e59947074288",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9ba890-91e6-4802-a14f-b8345a5efdf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03bfccdb-e990-42b0-b7f3-2eb73e566c3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84284c12-b6b5-45c3-9f3f-1978ec744cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9098ae32-18f6-4322-b3ae-e67dba8f31ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929f844f-f354-44a6-b39b-504fdab3f045",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfa1d91-1549-4cca-8e48-885724214cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f3afe9-d08a-4da3-a98c-9b1b24fd5497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8db9451-64fa-437c-a5bf-808c9b563ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4c816022-9439-492c-950d-ceffc7bf6631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776bd291-9709-4523-a47b-d212c562f100",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a79cc44-fbc5-4b55-852e-180f46028c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1470e897-42bf-4d46-807f-4bf5d421c9b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5828aaa-8297-485d-85d9-63da847f4554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c780a374-635a-432a-9706-57966a94fb5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76129e33-72f9-4aa8-a152-1ce36007c645",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5c0a52-0f9d-47ed-8fa7-18d9566206e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1b7092c-9faf-436d-9499-9f77181f27d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1edf0cba-fc79-497e-890b-c0271a345439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e18bd74-199a-48eb-9660-c2b930c47677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3179a85-6da2-4193-a113-3081e085bfd0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c48a8e7-2c5b-4346-af23-e3566392ec12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7342a591-78f9-480b-b2ff-c6d540d527b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b52389d4-ac42-41f4-adc6-7060742485e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d5db357-5db5-4d2d-8396-934418da7cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c61e720-e98a-458c-8e88-f90e41ca4e51",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed614f8-e3cc-454e-b9cc-2f6ed34062fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bcf4528-18c2-479f-9e59-09280e8ad618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1627b7-a38f-4910-b568-8201d6940b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "62acd00d-57e4-492d-a797-0ed6f6391c6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f07c040-551e-485c-800f-90e2f66dff90",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba3721e-ecc6-4dce-8a41-94d2002c2e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e9029ac-ec13-4225-89b4-1a85d2a4f629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f974d84-b888-4de0-8f62-49fc71542145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f423aba3-c273-495a-bba0-baa1ad676b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e867a5ca-ac2a-4764-a2c8-ef1846bbf3fd",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45a7525-2dba-4915-a277-cc57586ac2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3342b05e-6aed-4c36-88a1-32aceb6b0226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b3cfc1-5414-4992-9f1f-f9938d20d8e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "78546f26-a477-4748-8f15-46da4b2bdcdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaaabad4-dc4a-43ae-af6d-4535afad84e8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09eafe9-3eba-4287-90c7-fdeb843c9922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2cb49f97-3650-4802-ae14-d6438a88d7de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2e7856-d7a5-4198-94cb-df9e1b41dc56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e3fbd81-7eb0-492b-b2ad-d967cdc0511a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1daef852-47df-4c55-b0a9-b5b1a3dd9482",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4fd9d272-e24b-41a3-b2d3-77a15471c7a9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1223311f-d656-4648-8df7-6e52b5d75866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46f98703-5d67-4909-9412-e43bf91c682c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7200b753-4e5d-41f2-99e4-f22351d28d98",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6bd81aec-137a-4f82-932c-245cdf748f62"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b666f5e4-a9d5-404d-ae13-d4a11f76f85a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "202b40d9-ab29-4b73-a505-ea4a4f9e53e5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "528c4575-b6a1-4904-b946-12e63a841c8b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6430e019-939f-496f-82f4-c665a1a57678"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6cabd966-bb94-4577-ad57-22ebf0c4f652",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b1be99a0-d964-4715-9834-ec95bcf57d0c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c6ca2d02-d055-4dec-a493-f740311a2df3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "06c56527-4221-4686-8435-1bbbd45691b3"
                }
              }
            ]
          },
          {
            "id": "af2b988f-b559-4f4e-913b-d563dff39dd1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "96bc7a87-cdc8-4cf6-bd26-853f2e708a49",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "21292687-b663-4a3b-b9ba-2827c3ccf1f5",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8af3ff-1116-40a5-b59f-b5bb9ca18975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c0748ac8-6859-4487-9d93-8f93670f8583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa269696-6137-4b83-8f5d-6b64cd74d550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20fbed5c-0571-48c3-9f0e-c58994e986d2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6e637786-20f2-4412-a5d0-417ca50b92be",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d4e1b45-bb60-4697-9125-919c0ecc190a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8e50cf42-1813-4f58-a668-29899aa90f98"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a952b9e-32c1-4d72-ad13-a8b97efa9b6b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "26780fdd-d67f-4516-bcdc-df9b48ae20e2"
                    }
                  }
                ]
              },
              {
                "id": "28a73fe4-ccc1-4a8e-acec-5594da6a1c06",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "784fc71a-36bc-4217-af96-3798e2147563",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4573c6b5-f05c-423c-b844-b32dc4410f06"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be9d1ffd-ff6d-4350-8073-a49ca2da8029",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e0ba1cdb-9c77-4f3e-aeff-030c6e89b22b"
                    }
                  }
                ]
              },
              {
                "id": "5d6d1886-aec0-4c3b-80f3-4debda85dad3",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00d2ebc7-4d60-43e6-8b66-3396abee9d56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8eb6e767-f86a-4dca-90cb-c5b3616b4275"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3615e09-0dde-42d9-b12a-21701f12d819",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f580be15-540a-4173-8647-eec56ddd3ea7"
                    }
                  }
                ]
              },
              {
                "id": "9e639e9a-36f4-40d3-b117-942bff3020ff",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9230fa74-7b11-4b3c-9e36-340a5a197496",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "05c9c138-4800-45cc-9d39-cbeb21e9e6ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26056ef4-4b45-4253-9225-ac9b725baa89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "94d60cb7-144e-4e1c-b312-f7c069723394"
                    }
                  }
                ]
              },
              {
                "id": "3f22acaa-a07f-4efc-97c2-e958ddb286f1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "720ea459-3656-4ae4-ab56-9eeacdcb4ae8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d992285-1e0a-4b3c-8448-07a3219a67b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1305ba90-f890-48b7-8016-15d1b0b43acc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "65e34b86-8418-40f0-a39a-b09393983bd9"
                    }
                  }
                ]
              },
              {
                "id": "fcdfd13f-e139-4d1e-b081-6c438b7bc2a7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cedfa03a-b1f9-4499-91ca-2078b81d9813",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "83efc50a-08bb-4af6-906e-652817e6fe43"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5160186e-9a3b-4a45-9a00-c8198b9856fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "41633638-febf-4949-97f9-f615506c0735"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "75b0aebe-b8cd-4b1e-9af9-6070c9ca92b6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b6b51ee7-dbc4-45ab-914e-c3480d82919a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0ff669ec-bd5d-4c40-b2a3-63971dfa9c34",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a9a2db29-033b-47a9-8ab4-9714615be3e3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "03b87846-2794-43f1-ab4c-58bd8f68db3c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8968dd43-ed55-42ba-94f2-f56f35b588a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c6a9c124-783f-4c00-8399-4f0ab9bdc3f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8723a775-c63f-4cd6-ac93-cd4359ad327f"
            }
          }
        ]
      },
      {
        "id": "2e370627-49d6-4cc1-a6ab-9b5476876ae1",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d7595438-ecc4-41f1-9f65-da49258ac160",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7a22b9df-7fcb-40e5-bfa3-708509fe367e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8216c2d8-a2c1-46af-8e5a-05d568567bd3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a9cc68-ed56-480f-bdfe-7abd96b17801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a4f1cee-0060-4405-955f-1fe08fcedcba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729402b6-5cd7-426f-bf20-9ad6571cfb8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc4e9a9-8a00-4866-a336-d7dd83dc8ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f356487-e11b-45ab-912e-3a7f9d0bd3c5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32ce7f7-8e2b-49be-8081-b7f50bb048a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "219b866c-62a3-41a8-a1af-66cc3b2f05ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b541539-0ed8-4eb8-9b53-592ae368d295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "21f7d6ca-b480-4c56-96e7-430d1922e6e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d4b34c-9baa-4a0a-8fe4-96cb83ce8c4c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b978fa19-f261-4ce4-90e1-e3657ec0b55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "defdbaff-6017-4805-950c-2c0fabf7a684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fbc141e-c3db-49d9-9c50-6cab7e1ff08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d443c8-2f8f-4bda-b8a1-813c82f4ac0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87844de6-ab13-484d-823a-4c36d06809be",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13da1e2b-3073-4066-836a-b743d9b4085d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "640e5d48-b8bd-4352-8ca5-60f569cb5a6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ac4d48-786a-44fd-aead-03cf7d61be92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9f29d20-051a-4623-8685-0b5f1d264cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8044d033-a16a-4402-a952-c297fdd182a2",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e77283-fdb3-44fa-aba7-9b87405291a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a583c544-1f15-4f68-a181-45a0d04e4247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb693b7-8bb0-457f-95b4-3a4c7f606f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33aa6dfb-bf52-4a13-b02f-8ca6da8b2e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3792bf81-076a-45d3-9eae-0264aac68a30",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e9fb204-5e62-4906-86d5-2407dd8cb1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e5ad76a-e186-4483-8b28-44bf8f369fb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7b7be2-e50f-4785-a4eb-c32efc67066e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "447bdfa0-bdc0-4cf2-aaa9-66cb67439579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ee1257-799d-4e71-97d3-130b66c95aa1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2db5349-90c1-4e06-8f49-2e8da757d05f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "567ed891-d767-4a57-9cc3-bcf4b1824c05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32213ad-f6f9-4abf-ac20-b63e7d05237a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec4a911-6701-44d3-b7ca-4a66a88560a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e756de-d30c-43d7-9dc0-329b4b82410e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d7b9cb-d283-4a40-aa99-c7fdbb3bfee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5513d0d1-118d-4666-8d55-e66519336c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781a7084-40a7-466e-9c78-5efed6f3b8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "16a1d1f5-4b77-451b-b5b2-a00f2c63a629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab21cba2-7e14-49cc-b1cc-78e61ded1921",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3128cc39-15c3-4885-8c73-409aa7045d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "235be70b-dae0-43ad-8d9b-a3aaee789d2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f38da4-fe73-424a-b477-4e49df403ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "657310a8-2e2a-4e25-93c3-4044d2fff14a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b56c4e-b866-4611-add0-d18e69630968",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b25006-2d2d-4f05-a512-b89b4e2c45bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "927b493c-7670-44a7-a958-0d09dd02685f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4c558e-d567-444c-ae5b-2b42963d2f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9e2ec15-b203-4667-828f-5ed3ba07d7b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1274756-8c59-40c0-b4c1-530fdd22c26c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7055bbe-4a96-4ae1-a815-47f95d486387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eab4bcef-efef-4c8b-8227-19cfee7fc543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b20c976-36b6-4b37-9519-1d4a8714e068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "60729aca-0e2e-4107-a301-0d8d3b9d6741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d4b0d6-f571-4a65-a769-a11a35237e0b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb9ef51-adb3-49a7-8a13-414b73f1b36f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "524ce24a-3492-4d71-a814-bb1927579014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03eb430-b495-4933-a97b-e7ca40347253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb64932-d671-4acd-a23b-955d82c0850e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c991468-7cb5-45f5-b993-e3818fb0e060",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ae79df-1234-4ead-8bf6-7b8915b8fcc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8245e463-46ab-4a66-aa4d-21d36b197947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba48bab2-a6c5-4105-be0d-a4ffdc9882a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dca6e71-163d-4400-9b1e-c8e67082c69e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f6b3be-c2e0-4d97-9dc3-c3692e8d8d52",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3201f8-5a40-4ad3-9463-35dcd915a72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0b969ee-2894-4b0b-9564-2fbd2db1c108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9348253f-4e33-4ae5-8dff-6378d7ea0158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4db07c01-ac8a-4d2c-ae29-4c5923bbbe43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c3c007d-3331-42c3-8633-7f05547cc366",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b1f1ef-138a-4fe3-af51-2978079d4e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "094eb034-de6a-43d2-bbac-f1a24f84c561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbef311d-348a-4a5d-bb7b-6c0ef5053700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bba1d37-ec0d-460a-8b15-b93505df3a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3eebeb6-b6a7-46a1-98a4-ca85fcd32c16",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "261ede1b-04d3-4657-97a1-8e4f9416c616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2f838d5-4247-43ee-a776-fe7b13c56e48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8602a8b9-3498-445b-8df1-5de6a449db27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f21bbce-2c03-4be0-b06a-ff26797fc9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80126fcc-5940-4599-a30f-367d4e3ae123",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d54c57a-b84d-460d-85c0-52c517f2617f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0ac92d9-557b-44fc-ba55-450c53866b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12522ff5-9e2a-4391-8450-9d41d340c491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd2a487f-a52f-40c6-973a-bc3c49e97d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78340466-3696-4206-8f9e-c3c163ada0c1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07ac6af-1584-4ea8-88ed-7106f2367ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d7b103c-761d-49e4-aaf0-1ad7e7c6957c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d5aa2c-c22e-49af-b158-444a13be1ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d23ea14-a8d1-4059-9fa6-a57fe1155294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5083381-74e1-4e75-8d90-3ae77b968134",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb81af3-bc90-459a-86ce-2924987be661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab93148-d5ff-4d33-9ea1-9502db4baabe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ffc70b-1171-4e0d-a951-fd9b65019f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60a11cbf-7a89-4017-a02d-8138ba05b9c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "221ea600-0c27-4943-b149-3db31975fae3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5d8518-a9d7-4750-9441-e1983192ad01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8b2d433-fd7f-4dfd-99c6-88881d9213f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e761e717-bfa9-4199-a993-e7c43320ce63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e565e83f-a9e3-402b-8951-bc6a8e8fc74f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746daddd-427b-4018-be90-b503b7fb0292",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecaec59-310f-48f7-80eb-762a01351a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc040fe2-4a0a-4284-8e62-abaecf66af61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b74126-a64d-4a0e-b228-1d3aff427f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc71c03d-4a5b-4617-af20-bad41e95be24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b7b2bc4-4032-4e83-9a43-646a6de9f614",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "449cbc22-f7f3-40fe-bd3d-95294ccea2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a5718e7-aa55-42cf-8f29-2b41f14d08c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de7bc19-eafb-49dd-a7d7-1e5bcac75f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c01daae-bea2-433f-8d59-73542e1bf1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98bfe10-f07e-4569-ba9a-87e7fa3bc90f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2bb9f92-2c6e-4550-8bda-d2ff80ee6db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d129fb6-9748-4ebc-9f70-8543f2b35f7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49125819-d8c8-4db9-aec1-67783ccff46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd168137-b36b-4823-9d2c-7b03677c08b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88deb60-2b48-40bf-a4fa-4e888786a07f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4fa4d9-47c8-4360-acc5-5633fb9fcc48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d94a202-f246-4650-ac98-8e4be29ccdb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f34c8899-ba18-4278-a367-ae3a8b8957ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0897c1e-3c48-4a37-adb5-e3f7ee354a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ceb2ac-c7af-4d6b-8e1a-8e037e50dd90",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8b11be-3b4c-4573-9d3a-a56ed369705b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1013255-6872-4886-877c-0656e9fa9978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ab1b58-911d-427f-9723-36afcc9ddd2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e7813c0-3097-4434-bcba-01648c37d44b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e70de4-8d7c-443f-bcfa-f34029e7bed1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447d1bc0-2dc8-432e-9473-c2f3c4aca426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62af8700-9bce-42ea-9bf0-3357a3238416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ebb82f8-a1a5-40fc-a193-744578445965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6954691-cf07-4c21-991c-27a49a432849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846e69db-bc51-43a2-8b76-52ff9b50f809",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3eea122-104b-453a-acff-9cd16c7ece61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b4d4ba1-2338-4147-b031-085a5b707ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76983852-f007-4baf-849c-4f92442e082c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d084c03-ec94-4487-9abc-69b05417eeab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bad89f0-96d6-4b33-a177-f34827c54d53",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f843b937-2ebd-43d7-92f1-1ad794020467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "343e9a36-32fa-44bb-b942-076ad1d10e9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00bc4a37-cbe5-4372-bfa9-db4105d8b60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ba667db-70b6-42a2-977d-a07b6b893804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a6b664-b294-4464-9dff-9fba6f3874dc",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30b1fe9-5745-4462-ae1d-d1a90e19bea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f663ef9-c6dc-4d2e-a13c-3b0e29c1eca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475cac9b-18d3-4b27-a075-40085ab0a2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4df50f5-78b4-49ff-a9d0-e88c91cb7e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8458aaed-dbc1-4dd7-b2b1-cdcd2b9cc22f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b6315c-6eb2-4564-ad40-1bdc2997d1d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c3492b-7fde-44c3-89e0-7eead4f63921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c468bc-5fae-4635-b281-3213816c0f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "122bf40d-2cb2-4f7a-8675-8479bcc2cc5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c07ec0e-806b-4ae3-96f7-93f7dd743dee",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5084b953-fe18-446a-a893-a106e2b12848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50354aaf-d3cf-4c17-ba40-c108cad91807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a70c9bf-3562-42ce-b846-7d623ae72f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a46c3712-fdf2-4541-8e28-de7d2ca0e459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd5f8cf-42bd-4c3f-bf8e-78026662eb94",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e14e509-a9df-40fb-8fc9-a1e0559eff81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6ebbf9d-abc1-4622-bc83-78c77266fdbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a329329c-f220-49bd-8a30-63ea59917e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "153d2079-de53-459e-9ad5-c761dc65b9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "036a5c43-d50c-48c7-8731-6e73e60f8a7a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e9ce29-61c8-44f7-b8d6-948072cd51a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a989af30-0189-4f7e-af5f-f25b8f2d9d01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9321cb6-b747-4160-80b2-54295370225e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36bf11bc-1373-400a-9275-7f8b07bd4f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8033f3-c64e-464d-9f22-2fcdbd47afdd",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e07d1dd-48a4-4655-ae6c-83729cd794b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4ed614c-d36c-4e1d-8246-d078a0768a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df1e838-7719-431d-8368-8ab67fd70288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca2dd85e-075c-4470-a811-9f79eb14a4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361e106e-0130-454a-a000-5251919a6e8a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d3023d-0b06-49ca-83e8-ced243bbcf51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2146c58-7b05-4576-8b33-6ca620bbaca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f39f3d1-231d-4269-b03b-4454b585f89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a210bc1b-48ff-44df-95c2-7e3b2d2b5848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580377ed-f34a-4b54-ad6c-e28f7614e753",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95a53dd-d233-4289-9f29-ffb05394b851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "733b9c65-3b31-49b2-84af-aacaf558ec0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d12838-0612-429f-ac69-21af68d7f016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f08be7d2-13b5-42cf-9236-b0ef845a4910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebf0d95-1bcc-473d-9763-6bf84ae4aadf",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49ff507-a9f8-4e03-b7f1-32438c07e539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "471e5232-069a-4c68-b90b-743b341ae302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d5d3d7-a6f2-4e84-a490-92a1c0df8852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13a173e5-51d6-4735-9cf9-ef2381391d5e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7089cd08-e144-44f2-9e0c-c505eede74a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b05daa2b-74eb-4a68-b1ff-f0b8f3f9e249",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a73f0d6-e571-4c0a-a1c2-b165108bc91c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9b72a05f-25d2-4b7e-8fda-44bb204f04c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf23e89-194d-4172-af85-db4840fba4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8588401-733a-4d35-8ca4-b72ef37a9411"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c849b5b1-b7c0-4a3f-a14a-08d463a736bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a04d1c6-dce8-4989-8a96-60107d868786"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1dd41d98-e685-400f-8edc-a5181865d992",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04ee8cdd-9030-4f3e-bf22-d6c69d4546da"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48f682d7-cf8f-4723-8c4a-d1c6d6b96e8a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2bc71f46-4e0b-4fc8-a4bb-e7d6ec40244c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a9e3b94a-fe47-4fad-8a30-1a9d090d427a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd4bdb32-d4c9-42f5-bbe5-284c47d91edb"
            }
          }
        ]
      },
      {
        "id": "9f1084e4-f1d3-4bf9-b9d8-c8f87f08796d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3b7e9924-16a4-4257-bf4a-746336ec0085",
            "name": "Negative Testing",
            "item": [
              {
                "id": "301de9b6-994f-4c2e-bcbf-da01e6e88292",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eb9fd91d-8fe3-4410-93ad-5799fea919ec",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f390dd9-43a0-4fed-900f-a847d1ad625a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1596a6d1-9fd7-407a-b6ec-f5633646efae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10430b60-bdbf-484c-9fd5-12d56defd52c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a6b408-3fd5-4eaa-b262-2a7763285635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b5289fe-f4c6-483c-b128-1143bb3572c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666307fd-b847-4a3a-ab6a-52e18fcf4600",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58920e63-487c-482a-80d5-97ff2df36d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8413482-4516-4a94-b239-26473022da7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02479948-226c-406e-b6c6-985800c532b8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4755c7-8fb5-4919-a685-f68651a05738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "086f5e5d-4e70-49a4-a740-441df3d1babf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f69a5bd-d167-43bc-9460-4e8770fad1e0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98447ce3-a1c6-4670-a3ce-ecd205decc3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b7f0ee1-93f1-4a34-82df-dcc812273382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b015e845-121c-4423-91c8-4ec5244d162b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "812cbdfa-09d7-4cfe-886b-d7372ea0abc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f117e24-5da1-4926-9237-78e5416b857c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a43ae9-3905-41ea-9ec9-474c9077a9ba",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9730422-2449-4e4f-b717-ae2eaf0d07f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b706cdc1-05e3-4fa6-a1ac-01338f9b6c56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "621bc97d-ebf8-4cac-ac04-c84419056ae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85e82625-7f09-4b22-96fb-3b0c8b2abfe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e7c2c6-6317-4081-a55a-1fc45fc6539a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47321cb4-35b3-4a97-8a30-5f18cf08b516",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "474a884d-6419-487c-a1c2-c78b72e6b1b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba97522-d2d7-4580-a039-8e716ea78031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac613a31-4cdc-4f5f-8ce2-24932d103719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8590f8-48bd-4a63-a8ea-5769cc08d97f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4070081a-aa1d-49f5-8aa6-40e3bb81316b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cda1ef42-d41d-4f02-b7f7-6ee7b788bef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8966ab0a-4111-4c68-bee3-b47f0efd5d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "413cd7a5-e4fb-4bb2-a3a6-7c2097edadc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c40e775-3a6b-4757-9b65-3742681c7bfd",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434ea94b-be14-4ff0-8f55-0d98bdd13f6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6820bd93-6446-4255-9857-0a53c7f5d3d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b2955b0-c02b-4e48-a686-b36077f7c4e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dab7eba-1249-4a0b-867a-429724a152f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1797b3a-1ea1-4827-a814-42b33bf76c29",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8437c4a6-bade-42a1-8f6f-2c9e41731222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4764b18-8a2b-4069-bc88-4d3666c92d6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b155058d-7371-4865-be62-98c4d6047897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e035453f-7d4f-4fbc-8c31-535b18036c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1f9f55-3b07-454f-82bf-3480090f007c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c152d6-b379-4ead-8f5d-1f4853c155ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f80ba4a0-54f9-482e-a963-cf5fe51d1ce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4969dc27-c5a3-4360-a59d-d3b80539b646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c092a7-bd2b-4909-bef8-9ae3db2b794b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca03ade-e231-463c-bbaf-27976f10822a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ae89c1-7908-424e-8576-5961c3adc862",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67ec2a78-c9d5-47cc-99c6-09d1e61205d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ccb046e-b929-4cb5-a629-297294196fb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b53e51d3-2704-4096-ada0-9cf6606a6bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425cc0fd-8c01-4612-8cbb-e9833bd4dde1",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f8fea5-7a75-4ff0-a6d0-5f952984c026",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fa64738-0722-427a-9184-fcabbf34a608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98581c5c-45a4-41c8-a3bf-24931852463d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ebb766a-34d3-4c9b-953b-b8069fcb1e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c47ff19-7a84-493d-bec9-a2a8ed9021c5",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "091c8b12-4853-4fd4-bbc9-179cd8a83f34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e42b4bc-24cf-4469-8d71-c8a6fbab5e42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a87e197-5e63-4ec2-b0d7-b61bd2805795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dafd3b06-ae34-47c2-91a9-3e1be97ab663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d8558d-8e56-42bf-b61d-858e258dfd91",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d75273-dce7-4a4e-98d5-dba7d66f077d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "480b45e7-6905-465b-8cad-2b753f678706"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95693b4d-72db-4ad1-b88c-93d2581162af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da7ccc8a-1b98-4aec-a603-c81b4f0ba004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af89e45-36f8-4da3-8604-eb2b80729f72",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a7e01b-9eac-4df9-bc80-f98666cc1f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a593184-afe8-4595-a412-488208d9d5d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f83dd79-1a56-4162-bff1-762dd396f028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c27cc3bb-4ab8-4f99-98d7-d6598d5cb256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d31db2a-60f5-4068-8325-07dfb36569ae",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add05e8f-bf4d-45c7-ab52-805691dd11c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8db9b3a1-9c2d-49fb-8cf8-f18c11be3ecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb75b4c-0fa8-4c48-83d1-1e2472da2d01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62a735ef-939d-4ec3-b29d-e923618a6584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e2d96f-a2bb-4f69-8456-0a3a8e11312b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d67b10-e07a-4cfe-b7c0-4b0b2b735173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2798bada-dfab-4fbe-8936-628a4c69aecb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aff82e7-01a7-4a40-a88b-c6f156b99b3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a5ff395-d8a1-4efc-9409-f520137cab5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4602f5dc-10a4-4be6-be0c-42d475bf849e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e905a47-6bd8-4e97-865b-73ccf0d715f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c7b4f71-f883-40e8-8ec1-efcabf858959"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa3852c-c72c-4ded-9dbf-8cfb7cfb7eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b745e808-7767-4918-ad0c-af421ad81144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e647cd-f129-4090-8379-8d160dcf9c4c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98cb171c-904a-4d45-8501-46ef04326cc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21664bdf-9c2c-46ff-908b-f6dc156ede5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da77b30-780c-46e1-9c74-a1c139913ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5780a7ff-ee99-4ede-a391-92871a7194b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8768b8-878f-4de3-980e-ddea5ea6edb6",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ae2c15-c79d-47fd-b0dd-410bdbd68bf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ad75e2c-bce3-4158-839e-bb326d7b9798"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3edd69ec-8372-4d75-9f8b-139ba8c4078d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffa2f2d0-b762-4508-997d-3d24e88a2ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176a2c76-6b66-4050-9c01-468c15949f8c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa9b712-dab0-4ba0-a8fb-c4d374159b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "160f93f2-0510-4121-8bd6-07471a43fd39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "878bd741-0a6a-4d42-a364-d2379bc6b7ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b930c505-2afc-4c17-bc75-8e4a98427cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1850e03d-9628-4df1-a507-29c045226638",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc01c95-4bae-4eed-8ce3-6c434ee48816",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e759836-367e-4cc4-838f-4839ef7876c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98df3538-77c3-4bfb-aed9-343fdebbfc06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec2aa1c1-bb64-4df8-b60a-352c06c2a81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e40d117f-d0fe-4a0c-bb97-60cd58c77e01",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfdf104-bd8f-4d85-baa5-e0cb18079a9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0368a91-e167-4646-acf3-22f36b52ced5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5649b8a-f804-48b7-8824-d00ed42c73ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac9a431e-96dd-4293-96b2-7de007cf4274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1cdd6f-cadd-4cdf-a6fb-2332789d7fe0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6156cb8b-b909-4bfb-843a-f403e3d0531c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcd84d9f-ef49-40cf-8aa2-b30d7ad70c95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16405371-2ca6-45e3-ba6a-9cf61fe40896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3556f4e0-74ad-42da-a54b-5fca6b4cc632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6daed1-149f-479d-98a3-b5906d3dd791",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312ced25-862a-4333-a4dc-f52b294ff923",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f4416d2-b4e6-41bc-b80d-49b5675362d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2353f3-cff9-4441-bffb-3d600c215228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0ba51c-12d7-4985-b37f-057e155252c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c6402c-22c2-42a6-bc7e-44ee5061b4db",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bced068-b5ce-42a3-82b0-0ed6260280fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e746e37b-0ea4-49df-abc0-91310aff0796"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04d294b-7746-4159-b821-68c901f4fd5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70740108-2f90-4c55-a1b4-8bead2e46034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307e4137-d1d5-490b-a973-c8bab9257528",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a6dd73-84b5-46d1-b434-5ea8b12251a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21556aae-f041-4b46-9386-4d2b1d3a0337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b02812d-2e47-49a8-887c-8b7429a3340c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce14fec9-404e-44c9-8143-8f4512a5eea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6418e5-a9b0-4a19-8aa7-25fa418c8b59",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d27afb-86e2-4507-b905-b0139ccf131b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "361561c7-f8c3-42cc-85b0-d8ad48d259b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1df17e-a1f5-4dcc-b3d8-9f6898d3789d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da428b0b-dd5c-4af1-942e-075d185a4695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5b892f-44ec-4705-b6b6-b239188ff61b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "513e2de3-4841-4df2-bfe5-d1ec6ecd0484",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b6b4340-b477-41e6-9160-a17ffe2d5581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e93a85-cb80-49f5-acfc-47d1b1677c9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3c9d3b4-e1a8-4a22-933d-e020908e7e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896e1bb9-268f-46a5-812b-27a5e4adefd2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbeb7352-ad90-4012-a352-4a85eb259f1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "139f89ac-3c54-4bc9-9ea6-ab58c5fc8e9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e7cc95-a795-4f22-b011-13f1dd4c2ff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3063d41-c3d6-4e57-8ae5-9c61c689026e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1830af81-11ad-4d56-87cd-e58e591bc77a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83043a6-cff7-4a38-ac27-17dc539b1af7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "586f88ae-3928-4434-ab00-72024cc863bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39586142-73bc-4798-9063-72b6620a5998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06261f66-5972-4451-8cc5-7c3bcec84880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a67955-449b-4d73-b4f0-8ea1d86ab50c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dabcfa8-6e2f-43b3-ad72-64bdc5f4d00e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfab5784-e9f7-4099-ae3b-bf71e8ec922b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4717e8a-8c4f-442a-85b9-022b3d1daabd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5218bbec-8253-42f1-9e8d-d23c6dc772de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011b804d-9e1c-4894-80e0-9c6c61b94abe",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de06dd62-f435-4336-971c-157ad0a689ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1899180-b8aa-4c3e-a2bc-89746af84ec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c98935-aa63-4a48-9a38-f5b64d849f04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06550495-dc92-4910-84be-1bd6484bcd3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c405fd-1b24-45e7-a7b0-eab184944db4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9cb7fb-ef6e-4349-bfa7-cb83788d70f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8886413c-852c-42e6-9bd1-ea9003a7f437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c14ccce-4d64-4aff-9391-08a29d97cda0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a27b0dcb-df37-4983-a0d3-752d40383c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa9c2ee-266e-4a88-878c-f5fbf4430c70",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a630b5f-a215-4161-b6b3-84c1e88ffa49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8d7c02-3cbc-4fe3-a193-dadc0e0431c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd8d476-4192-4173-a0fc-247b418d9c9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67fcee4d-e112-4e37-89a3-512e7c9377f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea229e3-519a-4754-b8d2-043ed8830c45",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "419e4b37-657e-4956-ab05-ffa18d0a9fd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3032ed59-cb45-4563-b949-d25d60232027"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02136794-acdb-45c6-a184-c5e9664305b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "365bc047-a271-4f6e-8461-099c8ebe392b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b114ef2-b963-4d7e-b73a-9a6e51ca7a38",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0854460b-e0d0-40ec-81ff-a44527e9e311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53bfe54a-6675-403b-b36f-02a736a52b5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9451ee93-3d48-42c4-b36c-4a6123e6bf74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a484115e-88ce-4d6b-9ccf-904ac81df8a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8401c15a-fba0-47f5-a91a-4d0b3ef03f9b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29861806-b90e-4f29-8300-6f7087ccaa55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b3420f-3bfb-4574-8158-b6e3cd518a0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde797a0-70ee-4f72-b363-049c277cd60b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4968f4bb-b40c-4e2e-8b19-08805d6dee75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100870f0-cdeb-47c0-820e-a2f92e83b9b2",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1cd0594-8e40-40ad-ab5f-0fd115474f35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db722e0c-1867-45e7-bb1c-b87fd5493e51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c41cd4-ff6d-4ca2-9138-0b4f756eb617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e03374c1-0ee2-4902-9e92-4c083ec87ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34aaf30c-6993-4c4f-be76-d4fe0121f563",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05852dc1-21fa-490d-8e15-8c72fd775e52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ff71e75-d815-4dca-b6b0-0a82289ec884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a968e18-a0d4-49e5-adb6-52ad022b02ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "743f0cda-71eb-4d22-b0a9-a05d23e515b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d84fcb9-7710-4c2f-80a5-b54aca766868",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5826d2a6-8cbe-4e7c-a46c-3d617fe3e54a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69cc0991-06a2-4ae6-a8e9-5c72c193dd6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7361e9-f158-473d-8434-66b3a604eb9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e44aca46-962f-4038-b8ac-7530260c75ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4727bf-74ae-4e23-b03c-9e8a09ce53e3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4007d74e-cbe5-4abb-bb3d-f0d434284536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a9e4ed-876b-4951-b91f-fb4b58e4dc4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cedcfe0b-b61f-4df6-96fb-6685bd7ebdc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0b1372-eaef-479f-a901-04710f724848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffedf7ee-807a-4de0-bb39-a3cf0bc44a8b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91040c1-d321-428b-9d72-62836b80ac86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb1d799-00df-424b-9b7b-179f2dcc735b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7c3332-baf5-4a1f-a2b0-60e5cc2e8c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c500288-7f26-4808-bd36-3d571f5997a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ac2f64-409a-43f3-8192-48dd0f3e1d92",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a44ffa3d-8bcc-41e1-87af-e45feb2ae67a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af3a1994-6da1-4a83-9405-372bdc7f22b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb64642-4e71-468f-99be-fc46d937c3b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fe44b46-4ff7-41c6-a033-2abeef18215f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb00094a-44bb-4587-8e5b-def7d51d3696",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d42466b-ca23-448f-9d19-98f3a7ea76a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8997e772-b691-4a34-a3e4-28780cb64dde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "052b25cc-0f6e-4b26-951c-8c7e7ef9a339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e6c1248-5dfd-4089-bbaf-3062fd6b258a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c90f7e-83fb-4d00-a243-6f1687454b9e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51fdd26d-d454-47f2-8987-182cac610423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f4015d-9e01-4e72-9a0f-af59d5251f8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ab61dd-39e4-495c-848e-ce9aca24cd0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7245bc0c-d090-4ed2-947e-91f8a7b77337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1362bf1f-0456-402a-8c68-d236e9e94cdf",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711ecb78-0d91-4f26-b615-afe2e10731b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3479117-211b-49e4-b735-496947d57144"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e326a418-3815-4ff2-aa73-721891e87bb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a98c66d7-939c-4d03-bdbd-d4668f27042c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255aedc5-4f2e-4bb7-abce-6010071504e3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ba9281-427b-4d6a-8b7e-f4e4eb6b1c0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "373c4548-4fd4-42e5-ab9a-a1eacbe9cc17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cd81015-d4cf-48ac-9508-ae4faaca195d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af95b54a-dd1d-4cfa-a6ff-d4415a6e37a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90680f8-c9f2-4712-bd1b-075cb625151d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3bc2234-a103-4195-b549-6f3a7b6d09d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ce8daf-e613-444b-8d7b-2c2db2d8fcc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a347efe8-2f65-4435-a98f-04ee842e0d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fba1b3c-9f01-4a55-a3fd-eb8e2dbe9e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f63981-6c8f-4d90-b23a-19e9b60cfd79",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c340ae-3d02-46f0-a150-99ba485d88e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49f5b3e3-ad47-4f7c-a851-08106f095117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "994c7974-ce2f-4dfa-9538-1769699d9b85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d87b63f-b96e-406e-afcf-8f378f8d9dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88e2d797-5171-41b1-a4dd-123bb49b3e74",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "285a1a7f-c53b-4955-a8d7-0dde5ff2c4b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df2390bc-a84a-4829-9b43-024bce67c13d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3bd7a9-a4a2-4ca3-a516-474771813b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e3ca60e-270c-4865-ba91-4232fca39683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d8418c-1515-441c-b24c-4a124bff24db",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389b8678-b714-4b8b-ab73-919ebec95fe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa41bc84-ac57-4a72-9942-3461b78aa8c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d452b38-53c5-4dd0-90f1-de7d29fa3493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc942e83-86b6-49a7-bb04-42f0e13cead2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca47790c-fbb2-4185-bc8b-274d72042978",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e90799-9b3f-498f-9c74-a9437519c60f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c119931-7918-4dfc-a248-abc2eb489a85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c094c8-df9c-46df-ad98-ca79344b248a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d899865b-fd6e-4548-adf1-0e68ca0a3f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275a0f69-244e-4344-bf23-7363b61c80a9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f27b08-b7f1-4b2a-93b5-760c6cd7ae30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f196c79c-9372-4393-8023-b4762766879c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "173ebd7a-ef65-497b-9114-8e9f734a4e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a6b9840-86d3-4fb9-b1d5-b3d0a6050b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e007e2-2f14-4707-bb41-f811fefc7483",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa17424-d152-4bd9-aab9-2ae0343896ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de0c136-5041-4a9f-b1ef-af40753e7cf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4f2c32-b2e5-4af8-b69f-cf4e56ee1eb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d228cb2e-1bd5-4109-906b-4112e0e30633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29ff17a-0d42-4229-942b-cfbad4692e09",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4118ef3-82ac-4648-9a19-e3cc18729973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3084641d-73bf-4229-8984-ee83c9698269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9773ca6d-2b8a-40ff-b7f2-3bbfedc50124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17edb781-1646-40cd-b5a1-107e8bfa88a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f487c079-1e0c-4988-bf65-5d86ebd2f3ed",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3600c6d5-a254-48a6-9a51-b6d0a6038926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b2a4240-b9bf-44ce-aaa8-c20021f5ba2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "865eb97c-5834-4d08-972e-87f493ef39a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96eed668-a353-4e1d-a7aa-b7eb2266c644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7d0d23-654a-4cdb-8cb3-3077cda070d7",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd362c6d-4856-4e73-9d4f-fa1f5e49b5fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76340e04-ecd6-4b7f-b2fd-ee523b7ed12d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f885a130-b80b-4839-9b09-10fdce7bb0f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6334c80-6044-4001-aff7-0bac80dc6174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183a8090-3578-4226-baaf-ba0d4d5a2b2a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e7125e-e591-4716-b7eb-d9d99e4a59b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2024321c-1d49-44c9-98bc-1f06d9cee989"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8990c87-2a13-408c-9ebf-d1b213553731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56f5e17a-eb4d-42c1-9553-1d837835a22c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49abd94-296b-4a56-a55d-c7a878e47bda",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b637f3-76d6-49b0-afd9-55422f7e0853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c57171e7-797d-4621-b77d-22a08ed7b60e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0299c99e-6c67-4c04-8a74-caba4eb67098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3259f1a1-8f06-4922-9ca6-ec736ec7d6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a5a221-061d-4a64-b8ad-a195de73f812",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0dc63dc-6358-4ac1-988b-6ccd4c2b9e75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "636a157d-f933-4370-bbb5-16ce60219409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e4cb84-b4a1-4f3e-98f6-4d30e7673e45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9643014c-3e9f-47a9-82d4-a098f5597b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35f5886-1604-43a2-97e9-8da2abe98105",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d7e9ef-fd8e-4888-8bd3-41eed46236f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adac3381-0d49-4957-a149-9f05bfd21587"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac173928-ba3d-4555-b65a-884a0d06074c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1db93dc-2a25-416f-928e-4917cd338527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a809ab4-f71f-4fa7-9527-2b8dd5c9dab3",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97bffa2-c143-4def-b607-9c32016e5d1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17561404-372d-494e-95e6-9e860fb07590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30254f43-fb50-47a0-a60d-e3956916f7c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6642180-02fc-409f-b126-4dc04ed5eca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b1a5a6-9b38-489d-bf0b-a831027eaa4a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64abde6d-b8b4-4c87-9d3e-c0d6fba52f54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7425dbc8-dd0a-45c3-9899-84e14baa73d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ef5b75-806b-4e69-924a-93f5cc943372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac25b5b-3d3d-4dd9-b79d-cb4047dc86af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f4b5d1-7390-420f-9d63-e1404d3bcaa5",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0ef417-a7d7-45f3-9984-7fc8549c34be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86b226b0-a230-43e1-ae0d-e3d3af29fc04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8071f172-ee20-4313-ace3-cb7ccedb2aa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb4e6af2-1d08-4f06-b359-2d53210b088a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81074f1-4133-49b9-b1ce-e385479fe79f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d3771d-24e4-4a8f-a301-c53eb53c41ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52ef3e39-5bd8-4c98-bfca-70b54b616cd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "939ce59a-93d0-4128-b46f-94f5c5c40381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "282b9103-2a24-4b1d-ac7a-0e5d32fdf438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dab1205-14fd-4a6c-ac5f-b0bf9020bd17",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb08efa-2ecc-4fc2-8787-bfe969579f2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30343748-a207-41c3-89c6-8bc33575a688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d240ab57-03ad-444d-9cb9-3e9066356f04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e219a93-aa04-4e40-b01b-375ed0c6967f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0040a47-cbc3-4401-ab45-1196ce4bdd11",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05db69e5-69b6-4dbf-a227-eb87c4a75ee1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af0ac284-89a9-4a5a-a440-03ebd26db6c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c70aa7e-d5b7-4e52-ad05-dbe621d529ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6db858b0-0cb7-4c62-bb3b-9f931f86459c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b58f698-e9e0-4394-b42e-52faa4d8cb5a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb52c129-4f75-4a12-b33c-ac628b70411e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20d301cd-c95e-492d-8aef-e49e7da214ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea51571-26a2-4a54-8f54-ea6827556ef3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd3c8ca-6b16-4a8d-acc9-dc5157f8b127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9ce451-347a-4771-9ab1-3fcd8e8d6941",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ca90f3-134a-4e25-9db3-00264e67ce65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d79624c9-6ae1-4b2e-beae-7456d3ce3f65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "811ac251-dfec-4f68-9a02-d92d02f8eb7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54860ee5-f7cb-4c39-9b96-47b091cee845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d2cf6a-23b9-4093-a7e0-905f57440fd9",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f7d1b9-8224-4990-b4c7-bb43df9a2af2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "375c426c-41d8-44d2-a498-cb082cf1fdb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a1f979-6962-49cb-9501-449fba4e363c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "664b96e0-2087-4d55-91d8-19f37eff1276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "432244cc-76b1-4eeb-8584-d29a436c1a0e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be663b70-b384-43da-9df1-bd68db4c1978",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fec60b3-a65b-485f-bd5d-d35065cdbb63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3841b96c-377c-4df5-b923-c8a7d9594050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6d0d312-9350-4c0e-98eb-dbb7dfae34fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba02d88f-138c-4cca-9894-86e595a7ea56",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f960abe9-444d-42fc-9bc0-4354d01d4e3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0423b57a-ff5a-4bdc-83e3-d77c1a79a0ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c245bb1-920b-4750-9505-24dd8c929f71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bdd017b-6f45-48a4-aeb1-cfc1211d6891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410b673b-c8c3-4b4c-9c6a-4db10ff52e59",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ed827a-5372-4e10-91ee-7db5fa7032f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "541a9362-7ee6-433f-9a28-6935506992de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c80786-f8c8-430c-90da-1dc2ac5bd1a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b49c7a8a-65f8-4312-8f3e-3cece91760e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9baa30b7-b71b-48ab-bb96-4814e9890924",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42f4c2b-d46c-4542-845b-6f5cca697555",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5bd33f5-32bb-4909-a2ef-f3d62d0fd17c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c22d58-78ae-40fe-a80f-a9fa5f4ef92d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07450bde-6758-48f9-9613-19827f8483a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e90174b-508f-4f95-966c-20292f8a0ba4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df5e972-3aeb-462b-b5e3-4d2f42e777c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33b7c4e9-ae66-4306-bfb1-9395ad205508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e141e66-a578-49c0-bce1-3c012e805c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a551b79-5cc9-4409-be71-be1bf0fd05d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9786a9ce-89a5-439f-9d61-d5932c48ec38",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d398405-fc12-4a1e-bb2f-6589772056ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6992e505-f867-4b48-950e-26e54eb4eeb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b53ebb6-041c-4350-aa98-194c91635757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ae45c4-2af7-49be-8d64-4e3010550e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2705174-742c-431c-8533-d0fc605d9d42",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a362be-2fc4-41d3-a28f-356af57abb87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dc72748-b7e7-4469-bdc9-25685209d5a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb68e00-c1f1-4194-9a00-924161daf37b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eeff54d-0724-4526-bf21-83e8f060ff6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12c9e4c-94f1-43ff-ba8c-ede415e41523",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "535f8127-5143-4643-8d2a-b1fa0d63dc03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "483fe25b-7c0e-4dfc-943b-d37673f2edd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23798e51-6a58-4a01-8fec-e89bf1c888c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6421aa7-cc36-4e94-b06d-a7ac3f1d76a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873076bb-f55a-479d-90a2-f7a3800bcdcf",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b1a4c0-783f-4e71-a6ea-bed96be2f709",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14e56684-aca0-411f-929b-b587347c814a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45efa4a-aa26-49f3-aaaf-bdd5430fc39f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11159995-291b-42fd-90ff-5a9d91a6f19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1d2918-b797-4cb9-9605-e214a2c01d4a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2b36e3-f739-4402-a4fb-39d4a9292124",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d9536e9-70e6-4756-8cef-90d5514b16a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d74bbd-0d88-48af-bc01-84b2c0014a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c094d0c-bed4-4a9d-8aad-24002b9ac918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7a426e-c98a-4fc1-a9df-2056d187e3ce",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0f2f78-96f5-43e7-a688-67edb1c2f5d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ae2baca-f619-4df9-b081-00130c4e0091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6adf6346-f7cc-4d8c-9ab6-21bd0e01b008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c3b698d-2bff-4f84-9be8-c96b1c94a9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25df0295-23c5-4db8-9942-2edde733f34d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc8c72d-f65e-4839-aa5f-70993c0e15d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "573473ff-4447-4379-9ffb-11d2d286720e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee73f199-9127-4f1a-b46a-faec8af4fead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f8ff2cd-8c34-48f4-9591-3be4be468523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aaed0c7-1140-4033-9420-7c0b5627e1ef",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cfe3265-6be3-480a-80b3-61a0c979b103",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37e9e9ea-b805-48c1-a8e7-aea96f2ba377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed68867-0cb0-4808-a4fb-f610b5cdc1a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1ae367c-3030-42b7-9d69-8f12b6deda28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f36d292c-4a00-4326-923f-a921f08f0866",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c63fb2-d9a0-4643-a7cc-d833d3560cdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "629ba1b8-37ee-4bdb-88dc-da0be7f5b66b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d66d8b32-a5e9-431e-b978-dd6b190ebab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0dc5389-2b35-4d87-bf59-73fad7504373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e1c8f5-72a8-4a81-a171-81db850e59a5",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3b9209-d431-4522-a221-edef125fc616",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f8d5768-817d-4931-8e1c-85478bd62a97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ba1459-5f03-484c-8c36-30d3bcd7e077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6fba786-5d43-4649-af11-e76bc30ca7d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479dc232-8545-4d16-97e3-29543e0f75a5",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28df874e-032c-4d0a-83f5-94551166868e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1b37bc7-f72c-4d29-bbe1-82b05367f19e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b162baa-1c5f-4848-a994-6faf37e43900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8833258b-eb4a-4867-aa89-4eaeebabf88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b468bef9-ffd4-4a60-b35d-d2fbf2502a30",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6722d481-71b0-46b5-a7e7-1d1fa80dd309",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "134c72a5-7275-432b-9850-ad28dc68ad75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8733c47b-6821-46ae-90d5-d750ff97370c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06150aec-2fe7-40ef-88fb-b67a4b87a182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654224f5-a65c-4eb0-a2ec-9d3ae1dd2191",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0d9f5a-f4fc-4e49-a9c4-034ce4274e63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff3705ae-1bbc-4ffc-b485-d6008cd9346a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4781723-c76c-45ee-810f-3a33d58e2bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49aa32ee-ec9b-4e56-b2ae-9737d75dcf7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "862d2fe8-cbea-4693-8058-0836507e6945",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510f58fe-d890-40bd-828b-ea8287e7cf4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d12b63f2-9789-4640-8efd-8d6c470d77b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd8699e-68df-4f4f-9701-a0dd44c5a9ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c730ea5-721b-4468-ab4e-968283823152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d239b0b-bbc4-45a7-8e43-97bb6ee93adb",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8735fdc3-1a3a-4778-93e2-81c6b3ec0bc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da52411f-4929-493d-b687-85aa2b30cd2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63a6f87-ab61-4ab2-9202-26c80bcc2010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "756e16f6-7056-4364-ac48-12b6ca1044c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30ce181-6ab6-4f13-ad17-b7c7007fefa2",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa43e58-7984-404e-95e6-d7d87403bb2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceb5f4d1-668c-4ee3-8c1b-1730fc1a9eac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ab6e05-2f62-442c-88cc-78ace78a323f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "526a513d-48c2-4e96-9f5c-e113cade7ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc48783-1b48-402b-b9a3-331d614f3d74",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5be931-1a81-48a9-a03b-388059dbe0bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e64d3db-07d5-4210-85dd-86ef1e25f156"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e7dd418-b366-40dd-974b-1ec4d02a8ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6cb71c5-ed0a-4a9e-94b7-12cacba59694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f0a972-8222-47e9-ae55-88a6c9ec45f9",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f6e8fa-672e-4ddf-9db2-e1c365b60b6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8c22d02-48a9-4543-a35a-1a44e13fa1ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a743603-de45-4563-bb3c-0e1a9ef2d7bb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d494746-3f6b-4aa6-8b5e-1e3692f2991f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f62639-0af4-41ea-9486-efa9c7a10a78",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d961401-c5ac-4737-bd6d-9f972e570c67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fdb8f5d-3983-4f13-886f-c276822b7626"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3362595c-3b46-4646-81a2-816f34f21b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fbf150c-cc1b-4291-9090-3f54e929aedc"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff7635ae-d9fb-451d-8667-41cdeafb18dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e2d4ff3-818b-46f0-8781-c51ee6992174"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b0bc0ee-21aa-4dd2-9a3d-791db9637fe4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ff205c1-69d4-40d6-beee-501c6b6079ea"
                    }
                  }
                ]
              },
              {
                "id": "5f074679-a1d7-4df0-a711-48823c48b411",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b29969f-5b06-4ff0-8879-c3c2e96dbdce",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881baf43-d95f-46fd-a335-a752c273a1e1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c8e9f63b-3acf-4e94-ad6a-619c1da4dc49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7569c2-adb3-4e90-a7bb-75f5ab95413d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93a57b79-b2f2-404e-9477-f0d9dc0f601d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dbc58871-d093-4c07-9ba9-8209be50207a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87ceb9fb-16ed-4e2e-ade8-93ea1358bd4c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b5de209-5e1c-45ff-a039-3e31fbdeb569",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e096e13-13d2-477a-a990-d58362caf015"
                    }
                  }
                ]
              },
              {
                "id": "39bf4711-a97a-44d5-b800-4907e0730c27",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "89b92ec7-87c0-4e77-8f17-4347132ad96e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "604b2d34-bf43-4dcd-9517-43144158007c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d3a31a16-a804-47be-9f48-8c6471c53c1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16033e9c-4a07-48e2-aa92-332465281277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3dea146-3d2b-43b2-9c93-8bb13c1ef291"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "78e814a1-165f-420b-a10f-82d68c015658",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b6e2fdd5-b1f8-4c31-8834-b5d56c49ca10",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ab08685-bc79-4579-bf57-41dbd4b69657",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "655c20b5-26c9-495c-8c67-9c56162510d5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ce0307e-ab17-4865-bc55-a1ae456ae54c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4e65a82-c040-42de-b906-b414fe2ec004"
                    }
                  }
                ]
              },
              {
                "id": "297c4301-f2f1-488b-b98c-ceefc6277e7e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a142f1d4-5dad-42a0-9975-07b12aa34c5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5623b6c8-1ee2-4f2b-9e22-736ee9810dcd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "260a2e53-4db9-4b7b-b441-d7c05bf81511",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a254eaa5-b743-43aa-afd3-f66a5d404527"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "add48a53-4e0a-4696-96bb-18442b694d35",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "065721f9-3428-42fd-9dcb-f13cdbba8184"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a146c380-24d0-4aed-83bc-ee1c5047480f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8eaac519-1b37-4c50-9fa6-1a27047aa420"
            }
          }
        ]
      },
      {
        "id": "6113e4f7-f796-4d6d-94d2-ed5e70149993",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7c0b80ec-b522-4da0-8251-c4ad524b2888",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ba5ba7f7-e474-4da2-90fd-628a95579786",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "248a94ca-eacc-4da9-9ec1-0a36fac07b9c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5d5949-5018-40e8-ba46-1c46b6cb7781",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b24ec512-79ed-4681-990b-6d829ef5986a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca4e565-7aa4-4c4f-aefd-5f3aa7e3be70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88c22439-1fce-4538-a0c2-8f31e37e5535"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b53e921-6d5c-448c-8a55-dddd84e5ad8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2edfb938-7269-4f78-b320-d93283630b48"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8e09b54-703f-40bd-81aa-a6f09868e352",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ee89ece-019b-4d40-a76a-451654b7c2b1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7191fd83-b51f-4f0d-9695-7845d39b5687",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f48ba132-48cd-4281-a7cc-3aaa90b92220"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "300102ff-65a0-4aef-9c44-0bd2fbc162a0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "688e08b3-3911-44b1-9d09-77bb5053374e"
            }
          }
        ]
      },
      {
        "id": "f8f1b3c5-c51f-4b28-9e8b-e5e97c7de630",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8975a587-ffd7-47c8-a571-c431cbd9b4a5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "027f8581-9643-4def-a5f3-2b7bf5816f2f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e70ffc84-4f9b-4ef8-96ec-aed66ffa453b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d075720d-0ac3-4244-a6fa-3b0e08651d3a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f84a6637-0f0f-41a5-87b7-6ee095a986e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df745205-d4d2-4e9c-b0b2-7eb4b03a5554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c02d28e-63f1-4f10-bd6a-c262fecdeba2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa5b48dc-e0ed-4bcf-8486-fe576639f382",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "190c1a4a-13e3-4d16-bf87-6a86fab1a26c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e16bce1-d85a-44f2-9643-b3a06aef4467",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9944484c-6e88-4c01-98c7-b24864add014"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b301e4ea-76bc-437d-bc97-48fed1f10bed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "71505379-434a-4bf6-8dbd-e3fd68fd336e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01887f11-81cd-4a7f-9773-76fa7374d907",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ed12ee6d-8c3d-4839-a56b-4a98593352e3"
            }
          }
        ]
      },
      {
        "id": "d2cfd23a-406f-47b3-a878-ad747b144d65",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2de61621-7478-4ae1-b0ec-285b6376cb57",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b1574046-4f5f-42a4-ac00-e5d314a7a012",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "710e64ad-c14f-4ecd-9650-623ac9274e81",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6ad974-5cd9-4b3f-b56a-cb3a0fdc3de7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e5e551a-f484-40a2-8e03-09aa522909d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24db375-d8e6-4016-a353-9edbe4145bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a550b81-bec7-434a-ac30-1e2aa6462fef"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7e10c28-f381-4d3a-a179-dc7321067dd7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de03b797-c975-4646-baae-95387d2526b8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d099b05c-a0b0-4bc7-9065-155cbbe597e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f81da69-4a9e-471a-9783-10058cab79df"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "76ea66ea-f6e6-4364-90f9-70b31fce236a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5f06a143-d0b9-4a9a-857e-45858568c384"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d31ce893-fc13-4783-b514-ea295ec3d0fc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2cb9b7ab-936b-4ab9-bd59-871aa76db8d3"
            }
          }
        ]
      },
      {
        "id": "115b84b9-07cf-498c-923e-e2c400832974",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "269e79dd-8741-4445-97d4-8982b56e90c0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df974154-8313-4850-bafe-e8edad1f5f74",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "fcf3bb6b-f6a4-4258-a9fc-60c911a0238b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e197db4b-394d-4e45-8748-72745be52526",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31d66d4f-8e06-450b-bece-45271e0eaea0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 119.48809523809526,
      "responseMin": 9,
      "responseMax": 791,
      "responseSd": 85.61020383770722,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1716684015365,
      "completed": 1716684053960
    },
    "executions": [
      {
        "id": "f1860755-a5ba-454f-ba44-a339304dc5ea",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c40693eb-00e3-4cf6-8eab-5a081f22c8d7",
          "httpRequestId": "fad2394b-7ddc-4dae-a28c-a4b83387c720"
        },
        "item": {
          "id": "f1860755-a5ba-454f-ba44-a339304dc5ea",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f914d770-7e2a-453c-9250-ea1a5b5347c5",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 0
        }
      },
      {
        "id": "5653fd1e-94b3-4bb2-abde-3b3230431a5c",
        "cursor": {
          "ref": "2b7a9c47-a8b7-4162-a621-5a285ff74e7a",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "685dddaa-a038-42c8-b114-b02adbcea790"
        },
        "item": {
          "id": "5653fd1e-94b3-4bb2-abde-3b3230431a5c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7571acf7-657e-48e7-a142-3be4d29e5d38",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "24be3877-bb79-4646-961d-ea88d11f4f16",
        "cursor": {
          "ref": "00d19b7d-4414-4104-87ce-58d8528acec7",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bfe31683-2cb9-4160-9197-ed28a27eebcd"
        },
        "item": {
          "id": "24be3877-bb79-4646-961d-ea88d11f4f16",
          "name": "did_json"
        },
        "response": {
          "id": "e78bff3d-7d96-48fd-8b8c-5c2228589a1f",
          "status": "OK",
          "code": 200,
          "responseTime": 395,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8883f6d-a12d-44c8-9d2c-aa9e4cbde565",
        "cursor": {
          "ref": "0f8b920a-9274-45b3-8b5b-512addbf2941",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b28c4219-5de3-4c2b-8bf5-ca6df3ca8179"
        },
        "item": {
          "id": "b8883f6d-a12d-44c8-9d2c-aa9e4cbde565",
          "name": "did:invalid"
        },
        "response": {
          "id": "aae82637-f886-41c6-a36e-42b5ef9319db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8883f6d-a12d-44c8-9d2c-aa9e4cbde565",
        "cursor": {
          "ref": "0f8b920a-9274-45b3-8b5b-512addbf2941",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b28c4219-5de3-4c2b-8bf5-ca6df3ca8179"
        },
        "item": {
          "id": "b8883f6d-a12d-44c8-9d2c-aa9e4cbde565",
          "name": "did:invalid"
        },
        "response": {
          "id": "aae82637-f886-41c6-a36e-42b5ef9319db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf5475b-f821-4b61-922f-bfbb5d11d0f5",
        "cursor": {
          "ref": "cc6d98bd-c773-4ab2-b45f-49ab07349971",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3995c0c4-3c8f-45e4-a74c-5d5bf49d1f7b"
        },
        "item": {
          "id": "3cf5475b-f821-4b61-922f-bfbb5d11d0f5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a35480ec-eba5-4818-828c-7a98f0b0d410",
          "status": "Not Found",
          "code": 404,
          "responseTime": 226,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2f8122-c729-4b7f-b4f9-4cc7fb886e0d",
        "cursor": {
          "ref": "995c9b2c-a269-4216-8181-31eea2f4caec",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7796f6dd-1166-421e-9ad9-c12bfc0b5d53"
        },
        "item": {
          "id": "6d2f8122-c729-4b7f-b4f9-4cc7fb886e0d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "fe721dec-7ff4-49d5-b07e-420f0ec10728",
          "status": "Not Found",
          "code": 404,
          "responseTime": 85,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0af778-74d7-4d66-bbf3-52ea0451841c",
        "cursor": {
          "ref": "396d19a4-cf8a-4d1b-b5ff-ff6e23a61a29",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c8a67108-0b90-43d9-81fe-2121e59e3535"
        },
        "item": {
          "id": "5c0af778-74d7-4d66-bbf3-52ea0451841c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "385b65f3-e20b-4872-9e23-150be67b857e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba5937d-66c2-4ac5-9c00-fd6e588bc98c",
        "cursor": {
          "ref": "6f699876-7225-46e6-9882-1319203254aa",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5f03ad26-132d-411d-8c8b-82460206ddd4"
        },
        "item": {
          "id": "bba5937d-66c2-4ac5-9c00-fd6e588bc98c",
          "name": "identifiers"
        },
        "response": {
          "id": "d506cc67-e3e6-4430-89d2-89b0faecfe5b",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920b1c3c-38e3-491b-8d91-8a9ea27fabda",
        "cursor": {
          "ref": "6e505de6-a7df-4031-ae9b-4d7b2610e7d1",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "cfad6433-c55e-46b7-a7b4-77ef39c3686c"
        },
        "item": {
          "id": "920b1c3c-38e3-491b-8d91-8a9ea27fabda",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "05905dc4-1293-4d5e-a652-5d556c454950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090b8262-dd5a-4ccc-8240-360142eeae84",
        "cursor": {
          "ref": "7ff4fa3e-5c7b-438d-9db8-9bb28d9687a6",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c8d23186-3117-448e-a006-b4faf52199b3"
        },
        "item": {
          "id": "090b8262-dd5a-4ccc-8240-360142eeae84",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d6cab67a-fc2d-4af9-b656-6a90ff3db71a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660d7f4e-9319-442f-8fcd-114bca79d1cd",
        "cursor": {
          "ref": "69b4b0a3-5926-42bb-b335-efa781e7e35c",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "34ebc088-eeac-4385-b22e-feff99590673"
        },
        "item": {
          "id": "660d7f4e-9319-442f-8fcd-114bca79d1cd",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "5237f568-4811-41e1-8be9-0ec9706c9caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92c4db2e-e832-4085-bbb0-3f3d5dcfb145",
        "cursor": {
          "ref": "51726a9a-e4c6-42e8-b3fb-5d9e848e1e7a",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "38732292-a5c1-405f-962d-4536fccb82ae"
        },
        "item": {
          "id": "92c4db2e-e832-4085-bbb0-3f3d5dcfb145",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5eb90f01-6bf8-4419-be7a-5080035039d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6af5ef-ae00-4cda-8508-69104424fcdb",
        "cursor": {
          "ref": "c2b73c3f-55ef-4695-a164-97238e29759c",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "bc122c4d-ea94-4a4b-b535-a3429a623cb6"
        },
        "item": {
          "id": "1a6af5ef-ae00-4cda-8508-69104424fcdb",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6bc10203-faa2-4030-b5bb-4a3f50f41ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "094c39ac-527b-4dea-8773-68bd1ceec96c",
        "cursor": {
          "ref": "aac0021c-c0aa-4f29-814e-84b37b3e3049",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "60655930-3fdd-4ea4-9e4c-39c35d788cec"
        },
        "item": {
          "id": "094c39ac-527b-4dea-8773-68bd1ceec96c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3b63efc7-ddaa-4ffb-92cc-17f47ccc8324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0d8227-cd26-42fa-a225-443435b181f1",
        "cursor": {
          "ref": "b76260dd-be14-4db1-9096-1d92457136e7",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "db570c41-0105-4d10-bbad-3e4e5e048beb"
        },
        "item": {
          "id": "cc0d8227-cd26-42fa-a225-443435b181f1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "aed1ab4f-109d-4090-b32c-613be203e3aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae037a63-1ac7-47e8-8959-718986512ecc",
        "cursor": {
          "ref": "f5008e37-a7c4-49d9-958f-3c15179b8bbd",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b74a05e1-dfac-4098-9746-b202d375aac2"
        },
        "item": {
          "id": "ae037a63-1ac7-47e8-8959-718986512ecc",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "22e7ebe1-8018-4c9a-8d1a-bc3e139da7ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70940fca-fa1b-40a8-8842-c9fb77de1e4b",
        "cursor": {
          "ref": "bc33bfda-77f7-4a70-934a-2f1b9243be5f",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a28f33e7-3d4a-4e01-846a-c510b8de83ec"
        },
        "item": {
          "id": "70940fca-fa1b-40a8-8842-c9fb77de1e4b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "17c53fcb-6d74-4803-99cb-0f0950119064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "785d10fe-5268-4038-9c9c-f4edf703c441",
        "cursor": {
          "ref": "3431ab56-6a62-4aaf-a10c-5ee250aba930",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3c6eb44d-542d-4cc8-8f0f-e5820c2fd5ad"
        },
        "item": {
          "id": "785d10fe-5268-4038-9c9c-f4edf703c441",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "33df14da-93f5-49ad-9347-e6428e9b72d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "879f7340-aa99-4f81-8066-fa3ef8024c86",
        "cursor": {
          "ref": "f4f2dc7a-6fa2-46ce-aed5-b3b020680130",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4d73c6cb-06f5-4216-9b1a-5afe5fae7916"
        },
        "item": {
          "id": "879f7340-aa99-4f81-8066-fa3ef8024c86",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "3fbb7488-4fd9-4b6f-8e00-b8335ecab762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01a9d36-8556-4375-a4a7-341c55d7ec84",
        "cursor": {
          "ref": "b41f98d7-d5d0-442d-bedb-e5bce9238477",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "44851970-756b-42df-ac1a-df547e346229"
        },
        "item": {
          "id": "c01a9d36-8556-4375-a4a7-341c55d7ec84",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "03cf218d-c928-4746-89bd-05913ced8b21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c5521f-3166-42f8-b30d-cf5db514cf59",
        "cursor": {
          "ref": "1894f505-b286-40fc-8059-85c8921477df",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d5ceecb1-9c1b-4039-a569-32b2dd987267"
        },
        "item": {
          "id": "a5c5521f-3166-42f8-b30d-cf5db514cf59",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1a382b38-470f-47c7-ae38-2b97643c6d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbbe20e7-a079-4f21-babd-36f56ec2b27f",
        "cursor": {
          "ref": "4c0f3799-671a-42ad-ac65-570d79201e6a",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "96431079-6a52-489a-94ef-17f5e36400ba"
        },
        "item": {
          "id": "dbbe20e7-a079-4f21-babd-36f56ec2b27f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0e326fd4-d3bc-4da7-8aa0-3ce35c89da4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e371b4-e406-4d23-a6b1-9fe8ed72f884",
        "cursor": {
          "ref": "a9ad6337-c3d8-40e1-b939-2134f46ebb02",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "158a558f-a538-4882-b984-371f12ee30a3"
        },
        "item": {
          "id": "77e371b4-e406-4d23-a6b1-9fe8ed72f884",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4a16b90d-025b-4ada-88ba-1561027b97e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437f503c-52c9-409d-b56e-0dd8fad2cc9a",
        "cursor": {
          "ref": "c70935ea-137d-4612-8aaa-e61036aab234",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a9230d8e-623a-4d78-a39c-eb73e39fc7dd"
        },
        "item": {
          "id": "437f503c-52c9-409d-b56e-0dd8fad2cc9a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7800c81b-c42f-4604-bdc5-d0904077c56b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d9551e-4853-4ebd-b2d0-cc070c48028e",
        "cursor": {
          "ref": "9be5e696-21e4-4ee6-9abb-5c7452bf6591",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e88962c6-14c0-4ea4-8570-0eb14cc8678f"
        },
        "item": {
          "id": "b3d9551e-4853-4ebd-b2d0-cc070c48028e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d0124bdf-5eb7-4857-9903-4027309691ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89288995-f942-4941-ac79-5c24fc7bb78c",
        "cursor": {
          "ref": "f6ec0857-25c4-420f-add6-e2fbd77b9985",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "beadb137-7299-4bce-92b6-cb68efc7b753"
        },
        "item": {
          "id": "89288995-f942-4941-ac79-5c24fc7bb78c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8da02326-1bbd-4217-92b3-eb7624e776f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd87f63b-7b04-4a5e-b15f-b4cb379a4c8f",
        "cursor": {
          "ref": "a8886f16-6094-4f12-be3a-aefc94660f0e",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9fb98f15-cf06-42a5-9c9a-f90f6c127418"
        },
        "item": {
          "id": "fd87f63b-7b04-4a5e-b15f-b4cb379a4c8f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "fa30fbdd-9aa4-43dd-bd01-5f665d5e6ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612aa12a-65ae-43cf-9e0b-eb1cf5eb5d61",
        "cursor": {
          "ref": "3580ea1f-fffb-4f48-94cd-71b5c5978452",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "258ab6d7-104e-46d3-960d-fadf9510d324"
        },
        "item": {
          "id": "612aa12a-65ae-43cf-9e0b-eb1cf5eb5d61",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "77081162-6bbb-463c-8536-3404de759b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a32f74b-84c9-4a4b-8c54-135f818d6304",
        "cursor": {
          "ref": "56f34557-c8a4-4087-815b-31e290c16168",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f6120e8f-9956-4b17-a071-34813783521a"
        },
        "item": {
          "id": "9a32f74b-84c9-4a4b-8c54-135f818d6304",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1d99313c-65a9-4dd5-947a-9cdabc3c3ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47517d04-2c89-47d6-9bde-a168bf2fa8ea",
        "cursor": {
          "ref": "32d42762-8e33-4999-8119-758b3313b008",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5109072a-1dc1-4733-8c1c-9b707e4c713a"
        },
        "item": {
          "id": "47517d04-2c89-47d6-9bde-a168bf2fa8ea",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "60fa60c5-feb3-4ea4-9889-1f68307f2b88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f058abd0-7adb-4722-9d6f-ca38300f65c8",
        "cursor": {
          "ref": "8a062b4f-9aad-4f29-ae31-9cbebc72f7ec",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9e85e7d3-5629-4c04-9b31-8589ee76f07c"
        },
        "item": {
          "id": "f058abd0-7adb-4722-9d6f-ca38300f65c8",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "28f1dd08-c207-417c-95b2-ad503596a7f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1585b646-8b35-49b4-ac72-7387bf64a59a",
        "cursor": {
          "ref": "0d87b29c-be5b-4659-8b2e-3c20d0ff2d9b",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e70a9a04-998b-4c1d-a68d-79a7655bdd56"
        },
        "item": {
          "id": "1585b646-8b35-49b4-ac72-7387bf64a59a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5296aebd-c021-44b4-9888-14390b463806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d3b1e3-a56f-4425-babc-17b0887a5513",
        "cursor": {
          "ref": "76b862b4-3ec3-4069-9c5c-eb1c6437b3a2",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "06a46d47-830e-4e52-b47d-cf4ee8fa9dcb"
        },
        "item": {
          "id": "42d3b1e3-a56f-4425-babc-17b0887a5513",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "03acfde2-95b0-4cb3-9d38-cc442c46a803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2f2c56-60cd-4f82-87b7-f1793ad756f6",
        "cursor": {
          "ref": "ce639cb9-51e3-4d48-bbd3-b445e46ee22f",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "812f2b79-996e-4a09-8f84-55d66dcbc261"
        },
        "item": {
          "id": "7d2f2c56-60cd-4f82-87b7-f1793ad756f6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "bd9460ce-1de4-4fde-a7a9-e6f525ef4d1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f9acb7-cdbe-4b49-836e-baf6dfb3ee5d",
        "cursor": {
          "ref": "3909cd32-aaa0-42f8-9842-fb0c57075a4f",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "414a97ce-e7a3-4e82-957c-6cc782d4daa8"
        },
        "item": {
          "id": "66f9acb7-cdbe-4b49-836e-baf6dfb3ee5d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "404b9035-0918-4a1a-bcef-6d75a2af0588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4292ba51-b7a8-43e6-8cd1-43e2011db070",
        "cursor": {
          "ref": "b4cb2bdd-9ce0-4577-8012-a25f455eec2c",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "88d90e37-6207-4b4e-901c-4178d511efee"
        },
        "item": {
          "id": "4292ba51-b7a8-43e6-8cd1-43e2011db070",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ae633755-0a6b-49f9-9f90-013fd02c78c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c01af8c-bc79-4bf1-909a-fb185701f71d",
        "cursor": {
          "ref": "d0650109-65d2-48a0-909d-9b60fd457161",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9a932f97-77ee-4981-b130-4684fcccdcf6"
        },
        "item": {
          "id": "5c01af8c-bc79-4bf1-909a-fb185701f71d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c66054ab-43f7-4a42-a238-83c9e6c6ed3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd1595a-01de-4a51-addd-6e16e2362d1b",
        "cursor": {
          "ref": "ba3675e9-5415-4bb2-95d9-6fd22481e6bd",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "94f13acc-29ce-4663-8819-c02ac2fb77ec"
        },
        "item": {
          "id": "8cd1595a-01de-4a51-addd-6e16e2362d1b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ad13c640-4339-42bc-af66-44910bf38ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd7d24d3-c246-4e56-b7e6-751825a4bed8",
        "cursor": {
          "ref": "b18c0184-6bac-4c26-998e-4f71a4b030db",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "aa13c7ec-5eae-4ce8-a360-483b1dcf11d1"
        },
        "item": {
          "id": "cd7d24d3-c246-4e56-b7e6-751825a4bed8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3a4b7307-8f80-4c95-b5ae-7a8a9ae5a4ac",
          "status": "Created",
          "code": 201,
          "responseTime": 791,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "7ab8ff76-fea7-44a7-b947-2af08cb686fc",
        "cursor": {
          "ref": "3d844ae1-a0e2-4125-9d7b-5c01127ae010",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "77cb2fb1-1ba6-47cb-884e-a2dd5d02239f"
        },
        "item": {
          "id": "7ab8ff76-fea7-44a7-b947-2af08cb686fc",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b5695377-3b2d-412d-b7dc-4a115c7257f6",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "cb7de720-3ca1-43ff-b27b-a2ed4ee4b1ba",
        "cursor": {
          "ref": "ad70bfa8-b83c-4c69-8f8e-2b79485dba0b",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "fd42bb8e-cc73-4d68-95d2-e3f49ee21826"
        },
        "item": {
          "id": "cb7de720-3ca1-43ff-b27b-a2ed4ee4b1ba",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d495c474-5f16-4c9b-9f73-ced62f1e3fea",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "47af650b-46ac-4e8e-bb66-1a140b61198a",
        "cursor": {
          "ref": "aeda940b-c9cd-4e4b-a692-998dda323127",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "67b857ed-1c2f-45ef-a7c5-28dcca06fa8c"
        },
        "item": {
          "id": "47af650b-46ac-4e8e-bb66-1a140b61198a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9f49fad5-001c-4d19-8918-da6f9d2dbca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80143ea1-9a27-4222-a87b-59c316d81195",
        "cursor": {
          "ref": "2252bd3e-d6bd-48bd-9110-eb95c328cdd9",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "12d3e429-eaee-45fe-9731-1a5002ef37a8"
        },
        "item": {
          "id": "80143ea1-9a27-4222-a87b-59c316d81195",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "043a6d19-0c33-4428-bb66-224960cc0f2d",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9866776a-a33c-46da-bd82-04de87be7478",
        "cursor": {
          "ref": "883699ec-2a4c-4f63-a46b-72f169b2c91d",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a152c9fb-ba8c-4f50-918b-4bdd89659de3"
        },
        "item": {
          "id": "9866776a-a33c-46da-bd82-04de87be7478",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "cfd0f148-c16a-40d6-81bb-d655a17c0e08",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "de4ab454-5e9a-4f0e-bc0e-28ff025ddc64",
        "cursor": {
          "ref": "9b06e5c1-f541-48f9-9204-bd265ac2c54f",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a79522ff-2889-46f6-af59-37752c8e5b3a"
        },
        "item": {
          "id": "de4ab454-5e9a-4f0e-bc0e-28ff025ddc64",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "403576b7-a231-4fd6-adff-665ed5aaaa5d",
          "status": "Created",
          "code": 201,
          "responseTime": 480,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8d93bc22-76e3-4e32-afda-0df3d52d3982",
        "cursor": {
          "ref": "92d21f5a-e9c4-455a-8a93-213793ca9fcb",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "38081ceb-422f-4ff1-80bc-12f735563ccf"
        },
        "item": {
          "id": "8d93bc22-76e3-4e32-afda-0df3d52d3982",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "305bd477-666b-4562-95c4-cbc1154419f3",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1254c8f1-baab-45bb-a575-6932ac405b73",
        "cursor": {
          "ref": "9d3b40d8-edc9-48da-9067-4695cee9459e",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "51f74f85-bd06-472d-8627-feffd5e569ae"
        },
        "item": {
          "id": "1254c8f1-baab-45bb-a575-6932ac405b73",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "95dafed3-1ad3-4470-85a5-60c63c330e11",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b04fc962-9d67-4bab-a784-5053632834a1",
        "cursor": {
          "ref": "72558672-697b-4abe-bcbe-c1f1af9b8c0f",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b2ea2778-9a7e-47ef-a69a-6f1177d33ef4"
        },
        "item": {
          "id": "b04fc962-9d67-4bab-a784-5053632834a1",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bb28b008-6227-4956-a10b-7fdfeb24b705",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "681da725-8001-4d98-81bb-c669a9615c37",
        "cursor": {
          "ref": "48fd8c4c-1feb-43b8-986a-2e534d8d3761",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9f5f91ff-a418-48dd-b10c-a909486d944f"
        },
        "item": {
          "id": "681da725-8001-4d98-81bb-c669a9615c37",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2b508e57-4f3d-4dc9-a6e3-990a90a94c37",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "355760c1-04a3-4b81-8fe4-c7e9f69e0a3d",
        "cursor": {
          "ref": "719d5542-def4-448e-98c0-252b3d849d62",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8944dd98-183e-4fcc-b44c-1d9ca48f6a34"
        },
        "item": {
          "id": "355760c1-04a3-4b81-8fe4-c7e9f69e0a3d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7aa8fc38-55c8-43f5-b55f-18e19171c815",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "7a48f86b-ff1a-4ca7-a52a-afe94c339825",
        "cursor": {
          "ref": "769bf1a7-b331-40b4-add0-224d1875c2ed",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d448a033-6a0e-4396-a50e-c54c00aa6af1"
        },
        "item": {
          "id": "7a48f86b-ff1a-4ca7-a52a-afe94c339825",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c9d16e7b-cf7f-4c79-950a-14f2a961e27b",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "7832247c-4ed3-4cd3-a1b2-2b8604854c4d",
        "cursor": {
          "ref": "8a6ded42-5b4c-4f73-b154-1a5d0be44962",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "83fb3d5d-2b86-483f-b428-fdc73b8a338f"
        },
        "item": {
          "id": "7832247c-4ed3-4cd3-a1b2-2b8604854c4d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7a639e3c-20f7-4e23-a366-c60db5b7eab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce3f777-bfbc-484e-9c39-e50304b48381",
        "cursor": {
          "ref": "16404a81-d271-4215-92fc-6e1a6da39717",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5a157e70-6771-4bdf-bbee-20992ea6a46c"
        },
        "item": {
          "id": "4ce3f777-bfbc-484e-9c39-e50304b48381",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a023cae5-f213-4d37-b6a4-22b3a7090ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1acf9d9a-3257-4ae9-b59e-ae9289dc0d2d",
        "cursor": {
          "ref": "a11acf6b-c111-4561-bf7e-5acc631b6a80",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "53dfcaf9-0fa0-4554-bd4d-e91b7cb0e283"
        },
        "item": {
          "id": "1acf9d9a-3257-4ae9-b59e-ae9289dc0d2d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9f2a7626-f89b-428f-ae93-7e28ba4bc354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5d5b3a-4517-4ce0-b51d-03d2d24b35db",
        "cursor": {
          "ref": "d3d81f85-170a-4303-952f-10a519460ca5",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "70c39c6d-0e99-4876-aea2-f7cc41d98e99"
        },
        "item": {
          "id": "8f5d5b3a-4517-4ce0-b51d-03d2d24b35db",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a8efd049-78a6-4e43-b703-afddbf777e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e65a53f-6b92-4808-9dbe-4a55b1cf0a90",
        "cursor": {
          "ref": "bfa8d59c-b1ae-42e0-895f-f5fa057072f1",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8b3449c1-062f-4606-ac4b-7695dd4eda11"
        },
        "item": {
          "id": "9e65a53f-6b92-4808-9dbe-4a55b1cf0a90",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "844deb56-ee6d-4a45-8653-03821276c1c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee4e977-9841-485f-adef-9c01a4bcdc0f",
        "cursor": {
          "ref": "6da5dc44-327f-4deb-9082-145f294c1339",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f692c7a8-d633-4968-84c5-5d39e3c63788"
        },
        "item": {
          "id": "0ee4e977-9841-485f-adef-9c01a4bcdc0f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "31237b8b-242c-43ea-92b8-f269ccb0448c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e880b58b-0903-4a35-bfb8-d3bb6c2a4e97",
        "cursor": {
          "ref": "483d315f-8eac-4b19-bffc-b43cd7f337f2",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "293dd05d-b84c-44ab-9ff2-bdc498c667c5"
        },
        "item": {
          "id": "e880b58b-0903-4a35-bfb8-d3bb6c2a4e97",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4c4aabbe-0bb6-4eb6-8158-6751e73c7349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a3e67d7-648a-4182-8262-a7df448ad1bc",
        "cursor": {
          "ref": "c0f6f424-477b-426a-a2fb-2572a387b012",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3a677936-ff25-45ce-96e7-b672764bcd4a"
        },
        "item": {
          "id": "0a3e67d7-648a-4182-8262-a7df448ad1bc",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e4e537b1-5cd0-4e2c-a1a8-d0b8af03ace0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d236d900-2172-4789-a582-5671b3919db0",
        "cursor": {
          "ref": "d34c833e-81de-4301-a760-799ce8d43928",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "79c84c9f-1207-466c-a88a-904b716548f0"
        },
        "item": {
          "id": "d236d900-2172-4789-a582-5671b3919db0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9d464216-a1f8-4007-8c30-d71bb7a6dca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8a7201-19c3-4bc2-b2de-ece26b82cb90",
        "cursor": {
          "ref": "778de752-4e8a-4f5d-9cfd-517b4e8c7021",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "90e1b070-ca9d-44db-8883-5e492b968c4e"
        },
        "item": {
          "id": "ec8a7201-19c3-4bc2-b2de-ece26b82cb90",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1c61aef8-a75d-4a58-9f0a-0bd822e1f58d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aeaf41c-6a5a-4363-afcb-e472f75f6d14",
        "cursor": {
          "ref": "45824480-03a5-4834-90a5-d009ef33af26",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "da4f1c77-addf-4b53-83a0-9412117d8e06"
        },
        "item": {
          "id": "3aeaf41c-6a5a-4363-afcb-e472f75f6d14",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "719ba74e-18e8-4194-8200-36bd6a9c9a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6c7719-3ce0-44cc-b0b9-2039b99811b7",
        "cursor": {
          "ref": "6d6a22c2-b253-4782-b927-7882552b689b",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f42f9e3d-75bf-4e79-99ec-78726ab79767"
        },
        "item": {
          "id": "4b6c7719-3ce0-44cc-b0b9-2039b99811b7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f1fcea21-6b62-467f-a47d-1f14f001e4e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a3dff7-d289-4000-ae78-4cd906333184",
        "cursor": {
          "ref": "864c0386-d1a2-405a-afeb-084ed80cbffa",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "45ec7ee4-9347-4172-a172-53b23532ae3b"
        },
        "item": {
          "id": "b3a3dff7-d289-4000-ae78-4cd906333184",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3109f055-1669-4551-85be-46d4ed4bf8e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0209e9fd-e933-4b37-a8ec-2eba72e29cc5",
        "cursor": {
          "ref": "98cfea14-61b1-4c29-bd5d-91de157287ba",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "09d6ceb1-bbb6-4c90-a6dc-fe13dcf292eb"
        },
        "item": {
          "id": "0209e9fd-e933-4b37-a8ec-2eba72e29cc5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7f996e15-7cc0-48b9-98b6-91925b00132d",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d8f0db2c-302a-4ddd-8b70-4283f1de676d",
        "cursor": {
          "ref": "feebf0db-8637-4664-8255-028d0e0482c8",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b3fe0819-f3d5-4ace-b0ec-1b0c2b8ab47d"
        },
        "item": {
          "id": "d8f0db2c-302a-4ddd-8b70-4283f1de676d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "59c5fbe4-eb04-4378-8f71-eede6e4b7472",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "213712e1-6ffb-4668-85e4-801875e680f5",
        "cursor": {
          "ref": "8379119d-3c88-4328-92ff-f12e62a67568",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "cc90824c-ffee-48a6-9223-a1be1616cd4c"
        },
        "item": {
          "id": "213712e1-6ffb-4668-85e4-801875e680f5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "612d2169-1f05-44fa-a804-b44f101db483",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "3fe26dd7-bfb6-4394-814a-a7fb8ec8370d",
        "cursor": {
          "ref": "648d66e7-5a77-4293-bc7d-181951801fe8",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "de708403-c437-494b-8283-bedd303d4089"
        },
        "item": {
          "id": "3fe26dd7-bfb6-4394-814a-a7fb8ec8370d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c8b725c4-1b96-4466-833a-66703907a193",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "c16ce2d4-ceb4-4b7c-a613-20939e8b65e2",
        "cursor": {
          "ref": "498d4f7e-2493-4983-85dc-322775e521b3",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d86557b3-3cf0-4eb4-9f36-2b64a00de30c"
        },
        "item": {
          "id": "c16ce2d4-ceb4-4b7c-a613-20939e8b65e2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "43550877-9f23-47e3-ae66-f45472eaf9d1",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b21e9ed7-ffe6-4227-bd36-3ea5ef819a8c",
        "cursor": {
          "ref": "c650990c-6263-47ce-adc1-c3996b02c7a9",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1f496231-9e7a-4614-ba5f-37fbd759955d"
        },
        "item": {
          "id": "b21e9ed7-ffe6-4227-bd36-3ea5ef819a8c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "cd95086a-d395-4355-853a-6d17c0b74858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdcfe3a4-6b34-4ab2-84a4-51ab2ce857fc",
        "cursor": {
          "ref": "5b1327ed-f6d0-41ea-a459-93ca3646b2d1",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ad83c56a-f0b6-4006-88fd-bdc3c0ba34fd"
        },
        "item": {
          "id": "bdcfe3a4-6b34-4ab2-84a4-51ab2ce857fc",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0e729541-8509-4999-9962-f12810fa94ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1718bd24-227d-44e1-90ea-c03972822c5c",
        "cursor": {
          "ref": "4ec07a4d-35b3-4d38-bd99-1f7709265d7c",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1694848e-cd4c-48d9-a256-1e095fa41560"
        },
        "item": {
          "id": "1718bd24-227d-44e1-90ea-c03972822c5c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "78a9e85e-983f-40a1-87a7-90bcd516164f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce840c4c-1d1e-4a6d-b379-8bf512329657",
        "cursor": {
          "ref": "f659611b-998a-4f0f-9b83-2366b5751449",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0bbe8b2b-6de8-49cf-b1ea-b493d706b92c"
        },
        "item": {
          "id": "ce840c4c-1d1e-4a6d-b379-8bf512329657",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f3835273-0bf6-4822-8a93-3b9f6463ba8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c171f1-9d2b-40e6-bc1e-ac4c5b8692a7",
        "cursor": {
          "ref": "87df8f43-93f3-42d8-87d1-af35ef8c8f5f",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e3a2a993-dd20-422b-9bc6-4aee8c5aac0d"
        },
        "item": {
          "id": "81c171f1-9d2b-40e6-bc1e-ac4c5b8692a7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ecbddf60-54b9-4d6e-b6fc-af045a1d7633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c2672a-1ed4-4b7c-b025-0062e6943497",
        "cursor": {
          "ref": "48ccaae9-32a1-4819-b64c-1155e91ad3ac",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a07e50a5-93d5-4a53-ae8c-ca7fd5945d7b"
        },
        "item": {
          "id": "14c2672a-1ed4-4b7c-b025-0062e6943497",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "085a16d2-a38a-4263-941a-7ba0668ff663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df04918-d256-4b56-8ca2-18590498cccc",
        "cursor": {
          "ref": "5b7eeece-472e-4419-81d6-2c4fade93377",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "47ce4975-f9c1-4b0a-8c98-f830db16e462"
        },
        "item": {
          "id": "2df04918-d256-4b56-8ca2-18590498cccc",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "99b860ff-3ac9-4f42-81aa-2f661edeb53f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ddad79-8393-4808-a7a4-3ae5a69dc692",
        "cursor": {
          "ref": "e028edca-2f60-4b92-9a68-881cb9ced595",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1a43fffa-69a3-4df8-b29f-6932e83fbb53"
        },
        "item": {
          "id": "81ddad79-8393-4808-a7a4-3ae5a69dc692",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "52ecf0e0-e06a-4643-a004-9c3b5d47b329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c06cd1-f0ff-4290-88a8-ae8f4b2483f0",
        "cursor": {
          "ref": "37ee4880-da0b-4698-a51f-8afce43e7805",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1eaefd7f-d879-4430-ae8a-f64eb9773bac"
        },
        "item": {
          "id": "b9c06cd1-f0ff-4290-88a8-ae8f4b2483f0",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "da0a2f18-9fbc-4e88-8046-dee05ec9fd40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c308bf3e-c9e3-4d39-916d-63d3511445cc",
        "cursor": {
          "ref": "4be4de4c-a9af-46c3-8f72-6a9a850dd91d",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3702d3bd-a607-43fa-85bf-1bdcda989792"
        },
        "item": {
          "id": "c308bf3e-c9e3-4d39-916d-63d3511445cc",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "55537f08-6ac7-429d-9b04-c667cea2b379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3fc0f39-3796-40fb-85a4-d36de70ec7af",
        "cursor": {
          "ref": "296fe36b-1113-4448-9f30-cf15bdf3808d",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "cf1a30b7-6138-4e9c-a5e1-e420f26998bf"
        },
        "item": {
          "id": "e3fc0f39-3796-40fb-85a4-d36de70ec7af",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "383008f2-d38a-44ad-927f-fdf582e7c2c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4989a88f-c29d-4498-8326-20e7d3f86720",
        "cursor": {
          "ref": "4b7ea3e8-298f-419e-8d5d-4cea1226859e",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a7523081-d3b1-4e19-93b7-a4d349106583"
        },
        "item": {
          "id": "4989a88f-c29d-4498-8326-20e7d3f86720",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2fd8fdca-1f94-41c3-92ad-1110509df44c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cda233a-dde9-4db5-bcaf-6959c767ba11",
        "cursor": {
          "ref": "f3ff5e49-2908-4e58-abf6-859b1f8ae7be",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c8f176c7-0be5-4f75-b530-594a1a595006"
        },
        "item": {
          "id": "9cda233a-dde9-4db5-bcaf-6959c767ba11",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9ea33f9d-36ad-4d66-b892-d423aec3f0bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff39b8b-3e19-43a9-84d2-3fb1506083b7",
        "cursor": {
          "ref": "e400efd6-fc36-459d-8735-e3be6122ae2b",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c09610e7-d1e5-4d71-b921-2af42ac2f867"
        },
        "item": {
          "id": "dff39b8b-3e19-43a9-84d2-3fb1506083b7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c4e026dd-ebc7-4d24-90a2-a5944617da5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583c4d5c-172b-433a-8cf9-583af16de446",
        "cursor": {
          "ref": "ddad8e26-646d-4867-a685-9f37fa000896",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "201aef7a-81a1-48ba-a461-895d10601f03"
        },
        "item": {
          "id": "583c4d5c-172b-433a-8cf9-583af16de446",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e27009a6-f33c-4d09-bfde-9f4912697bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f298444-130c-461c-8ccc-0bb3d68867a9",
        "cursor": {
          "ref": "efcb7df5-7658-4e7b-9fc1-6b06155e049f",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f37f1ae7-da17-406d-bb54-067ade57cdda"
        },
        "item": {
          "id": "5f298444-130c-461c-8ccc-0bb3d68867a9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "588d134f-57ef-4dac-9c16-bf3684e9d4be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4d2038-0eff-4341-9529-2ee5c9af1694",
        "cursor": {
          "ref": "7815ecc6-c910-4601-b513-d681b128f53e",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9519bc6a-ee3b-42b4-b4a0-e904944a2c8c"
        },
        "item": {
          "id": "3e4d2038-0eff-4341-9529-2ee5c9af1694",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8723642e-b1f7-4e50-acc5-7ead4bc9c2b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f1a391-bca5-41ef-96c5-dd5ab3ff2757",
        "cursor": {
          "ref": "d7579ec1-68e6-4856-9a6a-3f37ac800452",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a0f89e70-5052-4233-bae2-71c7ad01c32a"
        },
        "item": {
          "id": "76f1a391-bca5-41ef-96c5-dd5ab3ff2757",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "853d63f8-d821-4f14-a588-c0dd5cc5c949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7532532-26c3-49a2-bc78-1c287ffb6cbd",
        "cursor": {
          "ref": "467cbe18-5404-405f-b3e1-2383df1d2edf",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c359f0fe-3aa2-49bf-ad51-9d243f87ef92"
        },
        "item": {
          "id": "b7532532-26c3-49a2-bc78-1c287ffb6cbd",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d89377b9-30cc-479a-8f59-caa70071a92b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee53a1f0-d4af-4f86-b8df-e126fe238f45",
        "cursor": {
          "ref": "333b04a1-091e-4062-9bcd-0d3ab1a7689a",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "97f16a40-00ba-46d6-a7ad-886b0233c8ae"
        },
        "item": {
          "id": "ee53a1f0-d4af-4f86-b8df-e126fe238f45",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e9e5ea2f-0dd3-4136-a419-5e30f81c4bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d618c9c7-3422-4d69-8d7f-c1597b55d2d7",
        "cursor": {
          "ref": "fff16bfb-7499-47a1-a2c9-0f1db38675a0",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1be36fdd-a608-4383-bc05-ae15a5c5f3ab"
        },
        "item": {
          "id": "d618c9c7-3422-4d69-8d7f-c1597b55d2d7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "276bb5b5-079f-4db8-8f98-0aee7f0eac5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be220f1-f8a6-46ac-a367-d8fdeeb611ed",
        "cursor": {
          "ref": "dda148fc-eb79-4416-a18c-80cc3384036e",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "40ab5b97-60a5-41ce-b5a3-9e51a46832e6"
        },
        "item": {
          "id": "5be220f1-f8a6-46ac-a367-d8fdeeb611ed",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "100bc116-31cf-41f3-a178-d90557d90887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7b80782-5556-486c-88b4-e59947074288",
        "cursor": {
          "ref": "8351105d-2fdc-4207-b7ce-5c4f02c4d0ef",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "db6c2d94-2cfa-4d87-a54d-84b1aedf0f8c"
        },
        "item": {
          "id": "b7b80782-5556-486c-88b4-e59947074288",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b724aa2d-c5e0-49a3-97a4-df866efae72c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929f844f-f354-44a6-b39b-504fdab3f045",
        "cursor": {
          "ref": "909655b0-5633-490c-a56f-f9affac22bf9",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d21ba13a-26ce-4041-9a06-a12e7204d407"
        },
        "item": {
          "id": "929f844f-f354-44a6-b39b-504fdab3f045",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8ea8eb88-e39c-4551-89c1-d56dd822a139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776bd291-9709-4523-a47b-d212c562f100",
        "cursor": {
          "ref": "e9b23f97-e027-48b0-aea2-55807e6621ce",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "fd68582b-a207-4d39-9dec-589533af6b43"
        },
        "item": {
          "id": "776bd291-9709-4523-a47b-d212c562f100",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8df6d060-48f7-4507-86e6-205f36898301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76129e33-72f9-4aa8-a152-1ce36007c645",
        "cursor": {
          "ref": "449fa2e7-e602-44b5-92e9-eab98f966e43",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1ab6c321-232c-4f44-a578-33cd065a67bd"
        },
        "item": {
          "id": "76129e33-72f9-4aa8-a152-1ce36007c645",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d74052e8-1773-497f-a159-f5c7de2a3fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3179a85-6da2-4193-a113-3081e085bfd0",
        "cursor": {
          "ref": "55a14b24-e18b-4ce2-93f1-ab7381e5c4f9",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0bb2c0f4-9078-4183-ab22-f89b4a781f11"
        },
        "item": {
          "id": "b3179a85-6da2-4193-a113-3081e085bfd0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9d8620c9-1afd-46bf-a01c-15d69e4b60b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c61e720-e98a-458c-8e88-f90e41ca4e51",
        "cursor": {
          "ref": "2299b870-6f9c-47b1-97b6-b1b9c6759725",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "775e9918-041f-4f53-b915-e684b44d9ba6"
        },
        "item": {
          "id": "8c61e720-e98a-458c-8e88-f90e41ca4e51",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0ad72c27-76f1-4984-a9c7-ecbea0454457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f07c040-551e-485c-800f-90e2f66dff90",
        "cursor": {
          "ref": "1dd6ee84-3716-4710-bb18-bbf197e1132d",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "23f15432-02be-47c4-b827-923ea47b5606"
        },
        "item": {
          "id": "5f07c040-551e-485c-800f-90e2f66dff90",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d1ce39c9-0e2f-4351-97a2-d8a48962867e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e867a5ca-ac2a-4764-a2c8-ef1846bbf3fd",
        "cursor": {
          "ref": "0f432f76-5067-40fd-a3da-a1c50e5ec41e",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "733b40c0-2dbd-4ddf-9f9a-ed19c681b6d5"
        },
        "item": {
          "id": "e867a5ca-ac2a-4764-a2c8-ef1846bbf3fd",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6902a496-848e-4d1b-a613-d47a3190ed5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaaabad4-dc4a-43ae-af6d-4535afad84e8",
        "cursor": {
          "ref": "e158dd53-2cfa-456e-86b4-d3a51c2a36ed",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "cc99d0f2-a5c2-4e8c-b8bb-002c81d25eb0"
        },
        "item": {
          "id": "aaaabad4-dc4a-43ae-af6d-4535afad84e8",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "10f046c1-1e50-4419-aa36-c16ffb43eb73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd9d272-e24b-41a3-b2d3-77a15471c7a9",
        "cursor": {
          "ref": "59481f74-067c-40e7-a655-e1ae5d2d0485",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e7c321b6-ae6a-452e-a425-875f8d1e27fd"
        },
        "item": {
          "id": "4fd9d272-e24b-41a3-b2d3-77a15471c7a9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5cc1abe3-ae80-4783-9a6b-bbfdeba6a510",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21292687-b663-4a3b-b9ba-2827c3ccf1f5",
        "cursor": {
          "ref": "88fa6353-aa4d-4b1f-b838-5c7c37cc5114",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6b7bc7ae-54cb-46f8-8d80-c95e45adfea2"
        },
        "item": {
          "id": "21292687-b663-4a3b-b9ba-2827c3ccf1f5",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "210c7ea6-6683-4a73-87f7-361ff62c36a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "6e637786-20f2-4412-a5d0-417ca50b92be",
        "cursor": {
          "ref": "8b1d08da-c7f4-4b3e-9216-0de664497190",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b2206c60-8cff-41e3-bb86-010e043bddb5"
        },
        "item": {
          "id": "6e637786-20f2-4412-a5d0-417ca50b92be",
          "name": "credentials_issue"
        },
        "response": {
          "id": "fcd94b61-cc76-4da1-ab51-0b287050a8a7",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a73fe4-ccc1-4a8e-acec-5594da6a1c06",
        "cursor": {
          "ref": "d11d941f-5e07-439b-a3b7-5c35535e895b",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "120bb734-93ba-4aea-9589-e70c77950ce1"
        },
        "item": {
          "id": "28a73fe4-ccc1-4a8e-acec-5594da6a1c06",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "c4675d36-8c8a-4c39-b343-a9f103f850b9",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d6d1886-aec0-4c3b-80f3-4debda85dad3",
        "cursor": {
          "ref": "c3bdfd30-4f16-43aa-9bfe-462580a3f06d",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b16df199-270c-4463-9a47-b325ae87d717"
        },
        "item": {
          "id": "5d6d1886-aec0-4c3b-80f3-4debda85dad3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "87555627-ee00-4f5a-9f88-7838260fe3e4",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e639e9a-36f4-40d3-b117-942bff3020ff",
        "cursor": {
          "ref": "447cb423-6e0b-4a5d-995b-6af575536a11",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b2a7d469-c2bd-462e-ba30-33ea410aa5aa"
        },
        "item": {
          "id": "9e639e9a-36f4-40d3-b117-942bff3020ff",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "59142cc2-766b-424e-a96d-541ddaac4295",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f22acaa-a07f-4efc-97c2-e958ddb286f1",
        "cursor": {
          "ref": "dee95c33-b207-4b00-8d02-918d164b85c4",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4c31c2d4-5280-4d17-be8e-62618a5d4e13"
        },
        "item": {
          "id": "3f22acaa-a07f-4efc-97c2-e958ddb286f1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1eb448dd-12a8-4ee5-bd3b-efc4f796bfdd",
          "status": "Created",
          "code": 201,
          "responseTime": 402,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-26T00:40:35.143Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-26T00:40:35.143Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "fcdfd13f-e139-4d1e-b081-6c438b7bc2a7",
        "cursor": {
          "ref": "8e7960b5-e4d1-4a03-93e7-d3ffa52a8210",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "cf9c0754-d59c-4ab8-a31e-861cb345b797"
        },
        "item": {
          "id": "fcdfd13f-e139-4d1e-b081-6c438b7bc2a7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "50306cf1-4698-4205-b73c-703dfcfad350",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8216c2d8-a2c1-46af-8e5a-05d568567bd3",
        "cursor": {
          "ref": "9d13ac78-114e-4227-af32-9837a4a455c2",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5497e2b4-add0-4a74-ac0e-52a93897812f"
        },
        "item": {
          "id": "8216c2d8-a2c1-46af-8e5a-05d568567bd3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6e151a92-0bb4-4c9d-9fa4-70d8d2ed3ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f356487-e11b-45ab-912e-3a7f9d0bd3c5",
        "cursor": {
          "ref": "8eec3f33-c8f0-4be2-9020-588bfcfa237f",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fe96ca49-c1cf-4061-afd5-a3d88f43e938"
        },
        "item": {
          "id": "6f356487-e11b-45ab-912e-3a7f9d0bd3c5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fd0a0648-92e2-4f08-a257-75afc5231226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84d4b34c-9baa-4a0a-8fe4-96cb83ce8c4c",
        "cursor": {
          "ref": "42c90b78-4a03-4967-a898-78b9006fe011",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "16725b89-ea62-410a-9f6d-ad2a377bce56"
        },
        "item": {
          "id": "84d4b34c-9baa-4a0a-8fe4-96cb83ce8c4c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "03b3b977-4557-4f3c-ad32-216d45f208a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87844de6-ab13-484d-823a-4c36d06809be",
        "cursor": {
          "ref": "0d27aa23-8db0-4724-abd8-fb25c961b44a",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ec19d6a0-4175-409f-95c2-c8179ce7280d"
        },
        "item": {
          "id": "87844de6-ab13-484d-823a-4c36d06809be",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ba1a6db1-18ac-4c7d-a63e-ce92771daea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8044d033-a16a-4402-a952-c297fdd182a2",
        "cursor": {
          "ref": "83420da0-c18f-4ab5-bf3f-31c5fbf3bd98",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1c0f3601-aa6b-46e9-a24c-30091f0e4f5c"
        },
        "item": {
          "id": "8044d033-a16a-4402-a952-c297fdd182a2",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8d5649ae-ca1b-4713-8112-fe4d47371d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3792bf81-076a-45d3-9eae-0264aac68a30",
        "cursor": {
          "ref": "15b56cfe-d3a4-4148-ba4b-aab81ed9e9fb",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2f9e0af2-d53f-4ef3-b503-2de87ebf067d"
        },
        "item": {
          "id": "3792bf81-076a-45d3-9eae-0264aac68a30",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "19d31d85-8a08-4082-a7a7-f2c491214e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ee1257-799d-4e71-97d3-130b66c95aa1",
        "cursor": {
          "ref": "bbf1a010-426f-44e4-a63a-c0e1ab95b34a",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1d4067b8-e265-4532-9667-bceab9525ae7"
        },
        "item": {
          "id": "d6ee1257-799d-4e71-97d3-130b66c95aa1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "967d1836-8755-4e96-ad39-5a039d3b3631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e756de-d30c-43d7-9dc0-329b4b82410e",
        "cursor": {
          "ref": "dc36c8ce-f92a-48ac-aba4-a4ba18a95e70",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8cb8bcb3-e13c-4643-972c-149139502d1f"
        },
        "item": {
          "id": "e8e756de-d30c-43d7-9dc0-329b4b82410e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "720692b7-7e13-400e-ba01-cb5d37ccb6dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab21cba2-7e14-49cc-b1cc-78e61ded1921",
        "cursor": {
          "ref": "970cca04-1e6c-49a3-ba4a-63e5dd2c80bb",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3c9f9e13-98f9-4fc1-9b26-c906e434dc7d"
        },
        "item": {
          "id": "ab21cba2-7e14-49cc-b1cc-78e61ded1921",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3f1e8dae-9e20-4158-b303-5902aec3841e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b56c4e-b866-4611-add0-d18e69630968",
        "cursor": {
          "ref": "782b0dc1-011b-49c1-a266-a676b1014f5c",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3cc91987-1088-42e5-9f39-d7470a8b4d84"
        },
        "item": {
          "id": "c4b56c4e-b866-4611-add0-d18e69630968",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "72b74064-fd4b-4f63-ad5a-09a48e864db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1274756-8c59-40c0-b4c1-530fdd22c26c",
        "cursor": {
          "ref": "71062310-3e09-4675-9309-71a2402b1a19",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9bf9acad-9c1d-42b6-88bc-d69abc2c6520"
        },
        "item": {
          "id": "b1274756-8c59-40c0-b4c1-530fdd22c26c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "cc292fdf-cd2b-4fae-9ae0-65f2da31861f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d4b0d6-f571-4a65-a769-a11a35237e0b",
        "cursor": {
          "ref": "1c0dbd02-e283-48f9-b296-55c155ecee83",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4b2c6c96-dd6e-4d3b-9cec-845e33ae0109"
        },
        "item": {
          "id": "b6d4b0d6-f571-4a65-a769-a11a35237e0b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a81a1ded-2ec4-4f8a-8715-ce5c226d5538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c991468-7cb5-45f5-b993-e3818fb0e060",
        "cursor": {
          "ref": "08cddd59-93a8-4559-ba0c-6bb955a0d98e",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1ad44d2c-dbe4-4f45-8ad1-aadc1981a1a5"
        },
        "item": {
          "id": "0c991468-7cb5-45f5-b993-e3818fb0e060",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "70784f0f-ed57-4941-89b7-c5e44cf791da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f6b3be-c2e0-4d97-9dc3-c3692e8d8d52",
        "cursor": {
          "ref": "af20ee72-f6f9-4154-bb86-14e3ddb913be",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7643bc79-38dd-43a0-9096-64a004719810"
        },
        "item": {
          "id": "47f6b3be-c2e0-4d97-9dc3-c3692e8d8d52",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f8245164-e819-4aea-90b4-cb3497f1fd01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 108,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "6c3c007d-3331-42c3-8633-7f05547cc366",
        "cursor": {
          "ref": "11f6dce2-c827-4126-87fc-685b973f028d",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "83624473-3c03-4135-947c-ce85cc740b6f"
        },
        "item": {
          "id": "6c3c007d-3331-42c3-8633-7f05547cc366",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "35f2c15f-e507-40b3-9c72-05b7d3364b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3eebeb6-b6a7-46a1-98a4-ca85fcd32c16",
        "cursor": {
          "ref": "58d19a11-5c07-492c-b260-ebd974dd8b0e",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "381f5ed7-c400-4ead-86b2-74eb90cdb458"
        },
        "item": {
          "id": "c3eebeb6-b6a7-46a1-98a4-ca85fcd32c16",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "19db9505-23bc-43db-bdda-44ce9a8abc44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80126fcc-5940-4599-a30f-367d4e3ae123",
        "cursor": {
          "ref": "f861567f-20c4-4346-90f6-e9bc91407776",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e103f3d5-2d49-41db-9973-0ae6cdb32a26"
        },
        "item": {
          "id": "80126fcc-5940-4599-a30f-367d4e3ae123",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "602ca5a0-fb78-4bc4-8fbc-51801d4aee53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78340466-3696-4206-8f9e-c3c163ada0c1",
        "cursor": {
          "ref": "fb407c9f-0859-4277-ab32-4448bb4428e0",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2d9a015c-e9f4-4cb5-a7ef-8bec346c8134"
        },
        "item": {
          "id": "78340466-3696-4206-8f9e-c3c163ada0c1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8cc10222-c8e9-457a-83a3-7691eb14e17b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5083381-74e1-4e75-8d90-3ae77b968134",
        "cursor": {
          "ref": "a1d9d296-11a7-442a-aec5-df49d87a0a9a",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ddef5979-689e-413b-a266-870381b0103d"
        },
        "item": {
          "id": "d5083381-74e1-4e75-8d90-3ae77b968134",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fc34f6c3-bc93-4351-a22b-8e51ac3ec369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "221ea600-0c27-4943-b149-3db31975fae3",
        "cursor": {
          "ref": "ec33579c-c4c9-4861-bd1e-aa2e7c54384d",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a08f276a-8d26-487c-8e7a-e54e2dbf7b54"
        },
        "item": {
          "id": "221ea600-0c27-4943-b149-3db31975fae3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "40bbec3f-cfa1-44fc-90e7-e90e224ae7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746daddd-427b-4018-be90-b503b7fb0292",
        "cursor": {
          "ref": "7baddbdb-0c7c-45bd-8425-e82fe05ed5ce",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "fe9bc559-3e89-4ac7-a7f7-1b380f904fc2"
        },
        "item": {
          "id": "746daddd-427b-4018-be90-b503b7fb0292",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2327b58c-25f2-43c1-97d6-b56ea7d7432b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b7b2bc4-4032-4e83-9a43-646a6de9f614",
        "cursor": {
          "ref": "9192b734-e4a3-48bb-b84a-9ac87eefee17",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d7fcb30f-fa02-498c-9a42-4457c12df008"
        },
        "item": {
          "id": "8b7b2bc4-4032-4e83-9a43-646a6de9f614",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9d06295a-fbab-4258-bf78-437620bdeb97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98bfe10-f07e-4569-ba9a-87e7fa3bc90f",
        "cursor": {
          "ref": "93b736ff-8951-469f-8160-c7b7d86dda8a",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "337cc5a6-c03f-462c-88a3-76d4991a46a9"
        },
        "item": {
          "id": "b98bfe10-f07e-4569-ba9a-87e7fa3bc90f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "88cfab38-75d9-44c5-a94b-35944aeb99eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88deb60-2b48-40bf-a4fa-4e888786a07f",
        "cursor": {
          "ref": "59b54ebd-bfa6-4bb1-bca2-8005c13c8d12",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "bc2fb932-6d49-412e-8645-f9f500f43336"
        },
        "item": {
          "id": "c88deb60-2b48-40bf-a4fa-4e888786a07f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c0125a29-ce5d-4d21-b786-52777f8abdf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ceb2ac-c7af-4d6b-8e1a-8e037e50dd90",
        "cursor": {
          "ref": "b614b2aa-80dc-4b85-a180-53a3fa14084c",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fc75029b-4ef5-4bdf-9b92-cef96011ba95"
        },
        "item": {
          "id": "23ceb2ac-c7af-4d6b-8e1a-8e037e50dd90",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b1f7e540-a77e-4146-8a79-ed6d5e6a4126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e70de4-8d7c-443f-bcfa-f34029e7bed1",
        "cursor": {
          "ref": "de829a77-f34c-425c-a3cd-f87d5a79d751",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f10ea49d-450c-453c-892e-32ba2b749aba"
        },
        "item": {
          "id": "27e70de4-8d7c-443f-bcfa-f34029e7bed1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6c25026f-9110-4e83-8c7c-6ce197274b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846e69db-bc51-43a2-8b76-52ff9b50f809",
        "cursor": {
          "ref": "a97abc10-29d5-4344-aa4d-ebe8849d32f2",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "09ee7caf-102c-405b-bef9-5a9feb768d57"
        },
        "item": {
          "id": "846e69db-bc51-43a2-8b76-52ff9b50f809",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "eb956b50-2397-4231-95db-4e0dcbf963ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bad89f0-96d6-4b33-a177-f34827c54d53",
        "cursor": {
          "ref": "4125b47a-cdcf-486b-a870-0cf905e368e1",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e9282913-b394-4c0a-97a6-8fd252d4c3b6"
        },
        "item": {
          "id": "2bad89f0-96d6-4b33-a177-f34827c54d53",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7e7adaaa-702c-47c2-b2f3-4564f364c940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a6b664-b294-4464-9dff-9fba6f3874dc",
        "cursor": {
          "ref": "bebfc8d5-9f2d-48e5-8d50-dc149c2ff0f1",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "456e7e26-9274-48c8-9c2b-26705b831c42"
        },
        "item": {
          "id": "03a6b664-b294-4464-9dff-9fba6f3874dc",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "dd18efcd-bace-4f0b-8ce3-f649f48d19e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8458aaed-dbc1-4dd7-b2b1-cdcd2b9cc22f",
        "cursor": {
          "ref": "022b094e-93db-4d15-9714-39808d2f5db6",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2068b5e5-7695-4796-8c89-dbca6429132b"
        },
        "item": {
          "id": "8458aaed-dbc1-4dd7-b2b1-cdcd2b9cc22f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fa704d6d-917d-4428-a05c-684495a4e62e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c07ec0e-806b-4ae3-96f7-93f7dd743dee",
        "cursor": {
          "ref": "c629c5da-f6de-41b3-a8b6-9eb02b56aaa5",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b97829a7-7223-4e41-b03c-aafd154716bb"
        },
        "item": {
          "id": "1c07ec0e-806b-4ae3-96f7-93f7dd743dee",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "08fe5ba3-528e-4849-90dc-2664386e03d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd5f8cf-42bd-4c3f-bf8e-78026662eb94",
        "cursor": {
          "ref": "aa0e2e06-31a7-448c-b3b8-35a2fff10a64",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c55004c2-e948-4c1d-b6c8-c11bf4904b8a"
        },
        "item": {
          "id": "ebd5f8cf-42bd-4c3f-bf8e-78026662eb94",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "601cc2e8-911b-4271-b020-b87979ebaef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "036a5c43-d50c-48c7-8731-6e73e60f8a7a",
        "cursor": {
          "ref": "67d15551-e2eb-4bb8-a116-b98c0a450889",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "9bad629b-8460-4bde-a5f2-7996f13cfb94"
        },
        "item": {
          "id": "036a5c43-d50c-48c7-8731-6e73e60f8a7a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "127cfe5c-e4b5-4f24-a5db-9a005517b24e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce8033f3-c64e-464d-9f22-2fcdbd47afdd",
        "cursor": {
          "ref": "629636f5-57f0-4050-ad5d-05de0cc2a1ce",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4ec10eed-9aa1-4b34-b717-7dea128f318b"
        },
        "item": {
          "id": "ce8033f3-c64e-464d-9f22-2fcdbd47afdd",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "9aac5e0a-34c7-457a-a93d-50589ec4c53c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361e106e-0130-454a-a000-5251919a6e8a",
        "cursor": {
          "ref": "64cbbf98-05f3-4662-8933-4117821db2a8",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3c3d0ada-4d41-493b-a0a5-fc0c1c232c13"
        },
        "item": {
          "id": "361e106e-0130-454a-a000-5251919a6e8a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "c50f7ec1-cf1b-407b-86da-b58172dd3931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580377ed-f34a-4b54-ad6c-e28f7614e753",
        "cursor": {
          "ref": "b7678d7a-b620-490e-bc0b-db9297c3d468",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a7f03559-fba4-4f69-8e11-34cbd4b2410c"
        },
        "item": {
          "id": "580377ed-f34a-4b54-ad6c-e28f7614e753",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "d0d4bb01-edaf-48fb-b68f-f748470c882b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebf0d95-1bcc-473d-9763-6bf84ae4aadf",
        "cursor": {
          "ref": "df19e4ee-ac61-425d-8a45-8e21b3cd7325",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "75409987-e14a-4a23-b898-4fbde4c1b98b"
        },
        "item": {
          "id": "5ebf0d95-1bcc-473d-9763-6bf84ae4aadf",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "6cd5f0f7-48b4-4129-808a-3980d9ae0ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05daa2b-74eb-4a68-b1ff-f0b8f3f9e249",
        "cursor": {
          "ref": "c6471e08-c17c-449a-af55-cfd1ab952960",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ba96b06e-20e7-40c3-aaa4-3046215a8a19"
        },
        "item": {
          "id": "b05daa2b-74eb-4a68-b1ff-f0b8f3f9e249",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "396baa88-2cf1-4f77-a42d-4148a255b580",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9fd91d-8fe3-4410-93ad-5799fea919ec",
        "cursor": {
          "ref": "3688847a-531d-48fa-9c1f-0bb6aa5a15e5",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f399e463-c378-4b7f-9910-1a5592a7d718"
        },
        "item": {
          "id": "eb9fd91d-8fe3-4410-93ad-5799fea919ec",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c096ba6e-eb3d-4920-9e82-606656d67d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10430b60-bdbf-484c-9fd5-12d56defd52c",
        "cursor": {
          "ref": "8dd70995-9300-4ac4-b602-b2fab6589997",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "50900e68-babe-4d6c-a7b5-0dca40e8db76"
        },
        "item": {
          "id": "10430b60-bdbf-484c-9fd5-12d56defd52c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "50e2c23b-34cc-4c4c-9547-1e6e16536e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666307fd-b847-4a3a-ab6a-52e18fcf4600",
        "cursor": {
          "ref": "96fa9439-5add-4f54-bbb8-5e0239ccd5e6",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "06c7c85c-f67a-49f1-b220-20fc6a87f8d8"
        },
        "item": {
          "id": "666307fd-b847-4a3a-ab6a-52e18fcf4600",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "01ef0698-b60a-4ab6-8580-fe5f4227a716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02479948-226c-406e-b6c6-985800c532b8",
        "cursor": {
          "ref": "d1e4a66d-5638-4eaf-b596-14616ea9f3f7",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "34cab7b3-e5f7-4fa2-8ac5-8c8a751861d8"
        },
        "item": {
          "id": "02479948-226c-406e-b6c6-985800c532b8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a5873211-46db-4823-b0c8-6d735d4e83e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f69a5bd-d167-43bc-9460-4e8770fad1e0",
        "cursor": {
          "ref": "2aa8997a-1bbd-49f2-af04-9c2ff6c3f08e",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "73130535-59d4-421e-b817-05ea59bb0382"
        },
        "item": {
          "id": "1f69a5bd-d167-43bc-9460-4e8770fad1e0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b3ae851d-4cb0-4c86-8fb7-b46243075b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b015e845-121c-4423-91c8-4ec5244d162b",
        "cursor": {
          "ref": "62daa0a9-c185-45f3-af46-bb0adc32ece2",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "51a5ee7d-2eb1-4d20-a871-86a30d4c8f49"
        },
        "item": {
          "id": "b015e845-121c-4423-91c8-4ec5244d162b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "677c9227-f6a8-4f31-b0f6-179030275211",
          "status": "OK",
          "code": 200,
          "responseTime": 167,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "a8a43ae9-3905-41ea-9ec9-474c9077a9ba",
        "cursor": {
          "ref": "b5659937-71e1-429b-99fc-e3bfdce85fe9",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "3bdf87af-9cc6-42e6-84ed-16e2e88e9b26"
        },
        "item": {
          "id": "a8a43ae9-3905-41ea-9ec9-474c9077a9ba",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6b68e901-4ab3-403a-99e2-32eaa10d9dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70e7c2c6-6317-4081-a55a-1fc45fc6539a",
        "cursor": {
          "ref": "5987c4f9-1160-43ed-b4c6-a892956c1faf",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6b7bbc6f-0fbf-41be-b4a6-1ccdd6a31ba1"
        },
        "item": {
          "id": "70e7c2c6-6317-4081-a55a-1fc45fc6539a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9f5c3dce-c3e6-4baa-9237-a99d1101e365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8590f8-48bd-4a63-a8ea-5769cc08d97f",
        "cursor": {
          "ref": "0174fb57-a26b-49e7-80b0-1a6b51880ade",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6313baa9-7884-420e-8285-9fce30b0651b"
        },
        "item": {
          "id": "ec8590f8-48bd-4a63-a8ea-5769cc08d97f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "abd982d2-0b5b-4cc3-8bb2-f28813f92ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c40e775-3a6b-4757-9b65-3742681c7bfd",
        "cursor": {
          "ref": "85d40f59-4759-4318-bc6e-04ba6e92a1e4",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "82ba7fcd-d644-44ce-bd4f-ac7935dc5a19"
        },
        "item": {
          "id": "7c40e775-3a6b-4757-9b65-3742681c7bfd",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4da17819-6f16-47db-8f6d-cc98db803ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1797b3a-1ea1-4827-a814-42b33bf76c29",
        "cursor": {
          "ref": "7665ed70-66cd-480b-a423-4205f19b9f24",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1f5d84e1-6fb6-4f66-bb1d-d17795ee3914"
        },
        "item": {
          "id": "b1797b3a-1ea1-4827-a814-42b33bf76c29",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "40210fa6-6bd8-4e10-b140-8707513ce454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d1f9f55-3b07-454f-82bf-3480090f007c",
        "cursor": {
          "ref": "f56f8b6f-7572-4713-9c2d-1f1910920667",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "5a9757af-8ede-47c2-b845-cfe8a083e219"
        },
        "item": {
          "id": "2d1f9f55-3b07-454f-82bf-3480090f007c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "629017c2-cc34-4ed7-81b4-aad0fd1b938e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca03ade-e231-463c-bbaf-27976f10822a",
        "cursor": {
          "ref": "1b6a971c-5695-4a56-b5b7-12448be990c0",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "31a76435-b178-40d1-8d81-cb4c5899a214"
        },
        "item": {
          "id": "6ca03ade-e231-463c-bbaf-27976f10822a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9bd84e91-c3aa-42b0-a7c3-ed27d6e23517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425cc0fd-8c01-4612-8cbb-e9833bd4dde1",
        "cursor": {
          "ref": "3df96c24-759b-4464-b1e2-152ede8e4271",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "04dc0b79-1b20-496b-8c7a-c17309fc1e43"
        },
        "item": {
          "id": "425cc0fd-8c01-4612-8cbb-e9833bd4dde1",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3b460fb1-2620-4d83-a3e8-1478c7c41e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c47ff19-7a84-493d-bec9-a2a8ed9021c5",
        "cursor": {
          "ref": "c0d42b2b-d832-460e-a5bb-b26decb1d054",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d9d51f06-1674-42f8-9d04-65f494b93790"
        },
        "item": {
          "id": "3c47ff19-7a84-493d-bec9-a2a8ed9021c5",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f6c78163-08cc-47a9-98d6-baa91dff7e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d8558d-8e56-42bf-b61d-858e258dfd91",
        "cursor": {
          "ref": "61f9a537-3983-4eea-ab3c-b9f5c6644927",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "86a838a6-7958-45e7-879e-f2e923b4c387"
        },
        "item": {
          "id": "75d8558d-8e56-42bf-b61d-858e258dfd91",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3460576d-b2aa-46b2-81df-711a47333954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af89e45-36f8-4da3-8604-eb2b80729f72",
        "cursor": {
          "ref": "651d9a30-3baf-4b1d-b5a6-d66dc53f6603",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "75a88ba0-4135-4119-80c4-92903c383996"
        },
        "item": {
          "id": "6af89e45-36f8-4da3-8604-eb2b80729f72",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a105a5b3-44b1-430e-ae4e-736d59a368c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d31db2a-60f5-4068-8325-07dfb36569ae",
        "cursor": {
          "ref": "f7491bff-bd5c-4c7c-8962-52832232b6e6",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "88c69f85-d9cd-4587-b778-f7871e0946f0"
        },
        "item": {
          "id": "7d31db2a-60f5-4068-8325-07dfb36569ae",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "20e3ecad-a8e1-4c9a-b5dc-7bf4bb7e2ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e2d96f-a2bb-4f69-8456-0a3a8e11312b",
        "cursor": {
          "ref": "0dc904c0-0a20-472f-a5d5-e5f2404faf22",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e127e109-de0f-4235-8458-1804ffe063a6"
        },
        "item": {
          "id": "53e2d96f-a2bb-4f69-8456-0a3a8e11312b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "04ad672f-00a4-44c4-8fc1-2b2948203a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4602f5dc-10a4-4be6-be0c-42d475bf849e",
        "cursor": {
          "ref": "c8bd9398-1a75-4673-a68e-588b832bed20",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f2764233-c447-44a2-9f67-33c603208da0"
        },
        "item": {
          "id": "4602f5dc-10a4-4be6-be0c-42d475bf849e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8542295e-02ef-4c0a-b62d-ac018c66007b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e647cd-f129-4090-8379-8d160dcf9c4c",
        "cursor": {
          "ref": "116febc5-c4dc-485e-a919-64ba9a187e48",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "894a7eb7-4195-49c5-a05f-9e0692be2a05"
        },
        "item": {
          "id": "a9e647cd-f129-4090-8379-8d160dcf9c4c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6a577e42-21de-4abe-84fb-c21a584e5066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8768b8-878f-4de3-980e-ddea5ea6edb6",
        "cursor": {
          "ref": "394045ac-ae56-4273-870e-881a004175e4",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9610cb31-f30d-4584-9cf0-420cf8152f6e"
        },
        "item": {
          "id": "7c8768b8-878f-4de3-980e-ddea5ea6edb6",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0cecaa8a-57bd-44fa-87e0-ca348d2dfeaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176a2c76-6b66-4050-9c01-468c15949f8c",
        "cursor": {
          "ref": "35baa2a5-e58b-4629-9d6d-1ee5a647e891",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3d4e5690-096a-4362-b964-c224d466dc0f"
        },
        "item": {
          "id": "176a2c76-6b66-4050-9c01-468c15949f8c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "46220d4f-0ea6-4103-9f46-1bca7a70d7e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1850e03d-9628-4df1-a507-29c045226638",
        "cursor": {
          "ref": "fec6cd30-c2e0-48d8-80cd-69d1d1a8177c",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f4b6084d-b545-4add-b753-2ce71e5b230d"
        },
        "item": {
          "id": "1850e03d-9628-4df1-a507-29c045226638",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f5039d40-0259-429f-95ef-f78a1fb374b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e40d117f-d0fe-4a0c-bb97-60cd58c77e01",
        "cursor": {
          "ref": "1086c429-eec6-4e18-8541-c5838cac93ad",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4f168fd4-3fe6-48aa-b911-ccfeaa4b5e60"
        },
        "item": {
          "id": "e40d117f-d0fe-4a0c-bb97-60cd58c77e01",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "72b55a32-4af0-4103-bb39-f0782b2066c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea1cdd6f-cadd-4cdf-a6fb-2332789d7fe0",
        "cursor": {
          "ref": "32aff784-f55c-46bb-a350-ec28f5376473",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1889a447-8b79-445b-b012-60708ef6f4d7"
        },
        "item": {
          "id": "ea1cdd6f-cadd-4cdf-a6fb-2332789d7fe0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "710bd698-c462-4055-9ca0-56d468f418b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de6daed1-149f-479d-98a3-b5906d3dd791",
        "cursor": {
          "ref": "52f70be8-94a8-4327-9cd9-023179eb2d2c",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1c19620c-ef77-4ed9-8a8a-cd80d2af8e53"
        },
        "item": {
          "id": "de6daed1-149f-479d-98a3-b5906d3dd791",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5b4f5c47-9eba-4f5c-9d2f-027ea021e78d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c6402c-22c2-42a6-bc7e-44ee5061b4db",
        "cursor": {
          "ref": "a2cd2afa-3382-49a0-bc3e-4815a61c00df",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "639e14a8-acc5-4f5b-a245-00d8ad15916f"
        },
        "item": {
          "id": "40c6402c-22c2-42a6-bc7e-44ee5061b4db",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "bba2da2a-acc0-4e75-b0b8-b5f23d0f2952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307e4137-d1d5-490b-a973-c8bab9257528",
        "cursor": {
          "ref": "8d1c7077-55f3-4a71-89c3-e34c48c09565",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ab974797-6ea2-4032-b4a4-3928a77b696a"
        },
        "item": {
          "id": "307e4137-d1d5-490b-a973-c8bab9257528",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "108156fd-5368-4922-ae77-3773400abd34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6418e5-a9b0-4a19-8aa7-25fa418c8b59",
        "cursor": {
          "ref": "995a7757-8e54-4974-be20-a50f6fe023e0",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "60f84a13-a253-451e-8dcf-1344df48320e"
        },
        "item": {
          "id": "8b6418e5-a9b0-4a19-8aa7-25fa418c8b59",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7d58ed68-9cc7-4680-b60f-716a4663e5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe5b892f-44ec-4705-b6b6-b239188ff61b",
        "cursor": {
          "ref": "4bfe30ff-9a06-459a-a70e-97e8d9c3ffda",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5024ffeb-25ed-4600-aae9-2cc96a22be7a"
        },
        "item": {
          "id": "fe5b892f-44ec-4705-b6b6-b239188ff61b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1658d5b0-84cc-4d0c-9fe7-5e574257899f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896e1bb9-268f-46a5-812b-27a5e4adefd2",
        "cursor": {
          "ref": "5ab5a219-c7cb-4c94-85ca-e8d7b8a1337f",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "fd311e5e-5c12-4cd6-a859-0c107b035eee"
        },
        "item": {
          "id": "896e1bb9-268f-46a5-812b-27a5e4adefd2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4e43a88f-9d0e-42e0-b06c-aa12c094875b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1830af81-11ad-4d56-87cd-e58e591bc77a",
        "cursor": {
          "ref": "17216f26-2ab7-4ee6-a040-0dde80a402e3",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3fc42df6-b9de-4b07-98bc-de855d8eb8d0"
        },
        "item": {
          "id": "1830af81-11ad-4d56-87cd-e58e591bc77a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f59558bf-4d86-4184-8536-a02b2a41ddf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a67955-449b-4d73-b4f0-8ea1d86ab50c",
        "cursor": {
          "ref": "1839932c-1978-4f59-b36b-66a28a3efc29",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "cc2b7026-942d-431e-b549-abbea30dc322"
        },
        "item": {
          "id": "f7a67955-449b-4d73-b4f0-8ea1d86ab50c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9b2af14b-f4af-441d-9e90-d2910e14d7dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011b804d-9e1c-4894-80e0-9c6c61b94abe",
        "cursor": {
          "ref": "6f9f1e95-009b-4d5f-a08c-97c78551a9b0",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6f97cec6-3de3-4557-80b3-7aa772a934a7"
        },
        "item": {
          "id": "011b804d-9e1c-4894-80e0-9c6c61b94abe",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e5e38f31-75f5-4eeb-a574-deb80f9e3a8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c405fd-1b24-45e7-a7b0-eab184944db4",
        "cursor": {
          "ref": "fa53119f-0305-4f9d-b59a-470ace868a73",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ff42af26-cdbf-4f3d-a1d0-7b65008f8f5d"
        },
        "item": {
          "id": "a5c405fd-1b24-45e7-a7b0-eab184944db4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d593e399-532a-40aa-aa4f-2be6e226d54b",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "4aa9c2ee-266e-4a88-878c-f5fbf4430c70",
        "cursor": {
          "ref": "9c27e4b5-1429-4dd7-ba0d-3463fd78b0fd",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ee2461d2-8d3d-494d-b951-d6b2b71639a3"
        },
        "item": {
          "id": "4aa9c2ee-266e-4a88-878c-f5fbf4430c70",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1bdc211c-751e-45f9-8346-84b77c0af739",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "1ea229e3-519a-4754-b8d2-043ed8830c45",
        "cursor": {
          "ref": "8521c44a-3272-4316-9241-65d2c9faf18e",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "de794e85-62dd-45c7-b467-f8ee15e6313b"
        },
        "item": {
          "id": "1ea229e3-519a-4754-b8d2-043ed8830c45",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "911b6487-316a-4ab9-bc43-6b3c4785fcc8",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "7b114ef2-b963-4d7e-b73a-9a6e51ca7a38",
        "cursor": {
          "ref": "f2db942b-2401-406c-940c-8c60231d2258",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "9b25ddcf-9617-47d2-842a-58be1135e0c5"
        },
        "item": {
          "id": "7b114ef2-b963-4d7e-b73a-9a6e51ca7a38",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b8c2bbef-bb1b-46f2-bb56-320b278d1bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8401c15a-fba0-47f5-a91a-4d0b3ef03f9b",
        "cursor": {
          "ref": "473fbb0e-6e1d-4410-a174-e5a03cc99c26",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c16b7ce2-cff8-492c-8205-f027eea38e48"
        },
        "item": {
          "id": "8401c15a-fba0-47f5-a91a-4d0b3ef03f9b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "2bd65963-1c1d-4466-b120-11eaf4185af0",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "100870f0-cdeb-47c0-820e-a2f92e83b9b2",
        "cursor": {
          "ref": "8067319d-3f7d-4de6-ab98-111e66e79e96",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c3508b35-06ef-44b6-b5b9-90add7b97cac"
        },
        "item": {
          "id": "100870f0-cdeb-47c0-820e-a2f92e83b9b2",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "344ffc6c-864b-4754-a7e2-4c30e5c69278",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "34aaf30c-6993-4c4f-be76-d4fe0121f563",
        "cursor": {
          "ref": "f06522a0-2158-4e68-91c6-510083155ef1",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b1b81896-8a36-476f-a6ad-fbb66c23ecb1"
        },
        "item": {
          "id": "34aaf30c-6993-4c4f-be76-d4fe0121f563",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e1986f6f-0c73-49b7-bb3a-0a9d80a3b209",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "5d84fcb9-7710-4c2f-80a5-b54aca766868",
        "cursor": {
          "ref": "2c385c29-5ba2-4cda-a2e1-a5e4a4138a03",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a83ba9a2-337c-4f56-ba46-3e92bf9aaaf9"
        },
        "item": {
          "id": "5d84fcb9-7710-4c2f-80a5-b54aca766868",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c88ae93f-22e2-4bf3-85cc-0def69ebc0d5",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "fa4727bf-74ae-4e23-b03c-9e8a09ce53e3",
        "cursor": {
          "ref": "8eabb7b9-3b0c-4c17-8785-947407c76be3",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "fd93deff-6c44-4034-b532-245f36c59774"
        },
        "item": {
          "id": "fa4727bf-74ae-4e23-b03c-9e8a09ce53e3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5ac09bda-d13a-4e99-9d3c-42a19f3a6f00",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "ffedf7ee-807a-4de0-bb39-a3cf0bc44a8b",
        "cursor": {
          "ref": "49be9a6e-b886-4eb0-9af2-59a63c8032d7",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c427fed8-cf4a-4892-8dd0-9d05c3c06644"
        },
        "item": {
          "id": "ffedf7ee-807a-4de0-bb39-a3cf0bc44a8b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "07baeade-c97a-4f9c-ab3c-0b629d9d6773",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "97ac2f64-409a-43f3-8192-48dd0f3e1d92",
        "cursor": {
          "ref": "54025854-eda2-4363-be70-adc62a28b798",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "570faabc-b1f9-40e0-af6f-c398a8b9b3f2"
        },
        "item": {
          "id": "97ac2f64-409a-43f3-8192-48dd0f3e1d92",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "11674d4d-7aee-4005-9e44-e54eb58fdd90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb00094a-44bb-4587-8e5b-def7d51d3696",
        "cursor": {
          "ref": "44340216-fb30-4745-9fe4-6b42a049d6cb",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f7c7e1f6-dff8-42aa-923e-bfc7270c1ded"
        },
        "item": {
          "id": "bb00094a-44bb-4587-8e5b-def7d51d3696",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "154e8d0b-3f8a-452e-b44f-cd85a2e7a209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c90f7e-83fb-4d00-a243-6f1687454b9e",
        "cursor": {
          "ref": "85298b4a-ddc5-47f9-9f8a-77f196913fa2",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "37690abb-db23-45ab-80fc-e93542b1bd6d"
        },
        "item": {
          "id": "27c90f7e-83fb-4d00-a243-6f1687454b9e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "67961764-f7d9-41b4-8f37-9664408e3e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1362bf1f-0456-402a-8c68-d236e9e94cdf",
        "cursor": {
          "ref": "6c414452-20e5-4e4f-84c2-0cbad2ac615d",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8425fb42-1ebc-4754-8ce7-ba51a0d7dfe3"
        },
        "item": {
          "id": "1362bf1f-0456-402a-8c68-d236e9e94cdf",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f450c67c-7af0-405d-a048-729cc34af832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255aedc5-4f2e-4bb7-abce-6010071504e3",
        "cursor": {
          "ref": "a1a17c2c-53cc-44f3-af5a-979342b75ef8",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "05961a3c-2caa-4a01-85ad-302afe447b4c"
        },
        "item": {
          "id": "255aedc5-4f2e-4bb7-abce-6010071504e3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "cc9b7163-632f-4b2e-af67-f91fc1a55072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90680f8-c9f2-4712-bd1b-075cb625151d",
        "cursor": {
          "ref": "424316df-8a2c-4089-a15a-c833f0105ab5",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "268aa7b6-7c8a-4bd8-bb71-28864fd3fee6"
        },
        "item": {
          "id": "f90680f8-c9f2-4712-bd1b-075cb625151d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9afb26c4-e300-4c76-b372-3767086e9ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f63981-6c8f-4d90-b23a-19e9b60cfd79",
        "cursor": {
          "ref": "0603e1b3-01de-4d48-bd46-469f60197d20",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "77586825-4018-43f7-a75c-9d8a5f226b66"
        },
        "item": {
          "id": "81f63981-6c8f-4d90-b23a-19e9b60cfd79",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "55db93e2-7987-424d-bad3-8ab09ddf9175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88e2d797-5171-41b1-a4dd-123bb49b3e74",
        "cursor": {
          "ref": "0c6368b5-3f27-4ac9-bbd8-2b1deb258244",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4f749997-a648-40fe-9af6-ba400dd33746"
        },
        "item": {
          "id": "88e2d797-5171-41b1-a4dd-123bb49b3e74",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "3e536b69-7245-412b-be48-1df9d257d51e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d8418c-1515-441c-b24c-4a124bff24db",
        "cursor": {
          "ref": "7f458968-d744-49db-b16b-f676fa9a0a47",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "efb777bb-e82c-45f1-bfef-5bcb9b32c578"
        },
        "item": {
          "id": "d1d8418c-1515-441c-b24c-4a124bff24db",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "474f5d44-3590-46e9-909a-a04352e10fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca47790c-fbb2-4185-bc8b-274d72042978",
        "cursor": {
          "ref": "7baa99cb-7996-4d65-965f-744096cd8c1c",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2bb3a09a-aa98-487e-9b70-de5807512cc2"
        },
        "item": {
          "id": "ca47790c-fbb2-4185-bc8b-274d72042978",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1ee54f60-7bfd-4811-89e8-9ce57d2674df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "275a0f69-244e-4344-bf23-7363b61c80a9",
        "cursor": {
          "ref": "3f19be5d-c312-4674-bdb0-6d3e8fd4e478",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b48940cb-6d36-4ece-9bc6-d825c44641ef"
        },
        "item": {
          "id": "275a0f69-244e-4344-bf23-7363b61c80a9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7e873b2e-d40d-4c70-bd2d-baa6b835f2cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e007e2-2f14-4707-bb41-f811fefc7483",
        "cursor": {
          "ref": "887c5576-68c6-4320-9ccb-30aa26dc17fa",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "37747237-1a76-4927-a6af-3c944c1f7c58"
        },
        "item": {
          "id": "f3e007e2-2f14-4707-bb41-f811fefc7483",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ff679c0f-aa3c-49d2-a121-87f7ed752bf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d29ff17a-0d42-4229-942b-cfbad4692e09",
        "cursor": {
          "ref": "a952c6a2-856a-4f8d-ad91-f552161078fa",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "80f1ed96-a5c2-4964-bc82-0840665f84df"
        },
        "item": {
          "id": "d29ff17a-0d42-4229-942b-cfbad4692e09",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3d0d62a9-afd8-4bc3-a90b-bf47c762feed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f487c079-1e0c-4988-bf65-5d86ebd2f3ed",
        "cursor": {
          "ref": "825c1bc7-6e29-4c57-87c2-57aad5173ab7",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a14bb96d-7bb7-416c-9526-39066e1a56a5"
        },
        "item": {
          "id": "f487c079-1e0c-4988-bf65-5d86ebd2f3ed",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d0cee1d1-db30-49fa-ae77-a0b90085e402",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "6b7d0d23-654a-4cdb-8cb3-3077cda070d7",
        "cursor": {
          "ref": "1e19430e-0c53-4173-9fc9-09a58a9e7e98",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a2bff415-622b-4985-b00a-4b95e8ad0aa4"
        },
        "item": {
          "id": "6b7d0d23-654a-4cdb-8cb3-3077cda070d7",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "fc1ef39a-471a-4235-9cd2-8249a7657e17",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "183a8090-3578-4226-baaf-ba0d4d5a2b2a",
        "cursor": {
          "ref": "64947924-2f07-48f7-9c50-eabb6b613925",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a9c4dbe1-12c5-4c56-887a-9c00ee1f69b0"
        },
        "item": {
          "id": "183a8090-3578-4226-baaf-ba0d4d5a2b2a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "44c2fe36-968d-4f0d-90e0-5764d9afab47",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "c49abd94-296b-4a56-a55d-c7a878e47bda",
        "cursor": {
          "ref": "604288e1-060c-4c12-a024-bb7f34cc48ec",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "11efec90-9e4f-4e47-a860-8a57b8aa5218"
        },
        "item": {
          "id": "c49abd94-296b-4a56-a55d-c7a878e47bda",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f868d482-c2bd-4b56-8fb2-ad03610ff146",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "10a5a221-061d-4a64-b8ad-a195de73f812",
        "cursor": {
          "ref": "4bfffcc0-caa3-4002-9bbe-ac5c2c956a99",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8468b839-1f8f-4aee-9b70-a0c0ba271502"
        },
        "item": {
          "id": "10a5a221-061d-4a64-b8ad-a195de73f812",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ead8e4ea-37e0-4d2a-a961-a76f5d8a7900",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "e35f5886-1604-43a2-97e9-8da2abe98105",
        "cursor": {
          "ref": "9bfbe61f-bfb4-491b-b5e9-e2893a6e7ca9",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d8e0efc0-0859-4e4e-9dfe-b36cf79c912f"
        },
        "item": {
          "id": "e35f5886-1604-43a2-97e9-8da2abe98105",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0990cedb-b6bd-4090-9634-52be99d83ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a809ab4-f71f-4fa7-9527-2b8dd5c9dab3",
        "cursor": {
          "ref": "54dd0ada-e4cb-461b-ac30-d7b28123706f",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0ff62650-7209-47a9-8c7a-94befcedd821"
        },
        "item": {
          "id": "5a809ab4-f71f-4fa7-9527-2b8dd5c9dab3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7363f6d4-37a5-49f3-a30e-ee6a6a35389f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b1a5a6-9b38-489d-bf0b-a831027eaa4a",
        "cursor": {
          "ref": "d4a9de81-e2d9-41ee-9078-ff1853cfeedc",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "592d7f50-0e82-4e50-b2d3-d6d438b5ceae"
        },
        "item": {
          "id": "78b1a5a6-9b38-489d-bf0b-a831027eaa4a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7fb0b54b-cbdf-498f-b51c-f22e68f7b9d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f4b5d1-7390-420f-9d63-e1404d3bcaa5",
        "cursor": {
          "ref": "a58faf8f-9204-4cf7-89a6-b79826cb462f",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "722d428d-84aa-4e87-afc8-42e817913b76"
        },
        "item": {
          "id": "c3f4b5d1-7390-420f-9d63-e1404d3bcaa5",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "189323cf-ce76-4075-bb1a-fd62c7e9b04e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81074f1-4133-49b9-b1ce-e385479fe79f",
        "cursor": {
          "ref": "5e191c4e-f215-4af8-88bf-05ff859b0a37",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "87cf4c89-333c-4032-8700-0b044e873100"
        },
        "item": {
          "id": "a81074f1-4133-49b9-b1ce-e385479fe79f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "50af8e67-c865-4648-8980-dd0206287b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dab1205-14fd-4a6c-ac5f-b0bf9020bd17",
        "cursor": {
          "ref": "8588867f-df89-427c-9346-84dd79587cbb",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5f2782de-954a-4a34-9955-62330c9aeae8"
        },
        "item": {
          "id": "7dab1205-14fd-4a6c-ac5f-b0bf9020bd17",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b7c8973a-60ec-41ab-998c-46073a42c8ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0040a47-cbc3-4401-ab45-1196ce4bdd11",
        "cursor": {
          "ref": "4f2ca8db-1b19-4396-85f7-cdefd93c537b",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "952500a3-36cd-497c-90fd-53193f9e176c"
        },
        "item": {
          "id": "c0040a47-cbc3-4401-ab45-1196ce4bdd11",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9b211d92-94e7-49e4-bc91-8e641c989d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b58f698-e9e0-4394-b42e-52faa4d8cb5a",
        "cursor": {
          "ref": "c26e487d-265e-4377-b620-830d49228a32",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7286a95e-7f6b-4cec-9222-709274e44cad"
        },
        "item": {
          "id": "5b58f698-e9e0-4394-b42e-52faa4d8cb5a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "063de827-2e85-4ffe-83a3-e3a068bb48bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a9ce451-347a-4771-9ab1-3fcd8e8d6941",
        "cursor": {
          "ref": "759287f9-2a1f-4da1-883f-fc96d3627544",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "758d1801-3045-44e5-9486-1cb15c21c5c1"
        },
        "item": {
          "id": "7a9ce451-347a-4771-9ab1-3fcd8e8d6941",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "15c2a6ad-adf1-43e6-998e-abea351d1344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d2cf6a-23b9-4093-a7e0-905f57440fd9",
        "cursor": {
          "ref": "b1a39fea-d4da-42e4-bed5-a6eff8595771",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "00c73d31-37da-4400-aec9-5f19de515386"
        },
        "item": {
          "id": "32d2cf6a-23b9-4093-a7e0-905f57440fd9",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c6c8b3af-d0fb-43cd-bb87-97bd53569145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "432244cc-76b1-4eeb-8584-d29a436c1a0e",
        "cursor": {
          "ref": "c6b34b08-87dc-45b2-925d-2ebcd6c407e6",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d96e978c-5a39-4794-b2d9-737a9635e329"
        },
        "item": {
          "id": "432244cc-76b1-4eeb-8584-d29a436c1a0e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "879da4a6-48b1-40b0-961d-9e1280e50330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba02d88f-138c-4cca-9894-86e595a7ea56",
        "cursor": {
          "ref": "4cc8370d-1789-4921-b371-44dcb1d17201",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5c9fead3-dd82-4518-99c4-b3a5c127b831"
        },
        "item": {
          "id": "ba02d88f-138c-4cca-9894-86e595a7ea56",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "db7082ec-9942-4b16-9a04-070bf9166f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410b673b-c8c3-4b4c-9c6a-4db10ff52e59",
        "cursor": {
          "ref": "e7cb32c3-2b3f-4116-9220-87a818480a17",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "73024b93-6be2-4a50-9f55-72709c795dca"
        },
        "item": {
          "id": "410b673b-c8c3-4b4c-9c6a-4db10ff52e59",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "09883f06-f730-442a-aa39-4d12a988888e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9baa30b7-b71b-48ab-bb96-4814e9890924",
        "cursor": {
          "ref": "c809e95c-a970-49ed-9b0b-482665779f78",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b781c725-5873-4647-a029-f8f9982bb6fd"
        },
        "item": {
          "id": "9baa30b7-b71b-48ab-bb96-4814e9890924",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c067bec9-9080-4958-97d2-1b3ec798c5d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e90174b-508f-4f95-966c-20292f8a0ba4",
        "cursor": {
          "ref": "e7a1a43d-1db1-42d2-8d40-3564118d399d",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ce5c6df8-b314-407d-806e-abcbd028892c"
        },
        "item": {
          "id": "2e90174b-508f-4f95-966c-20292f8a0ba4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f09c3463-7a85-4520-9eb5-eb75ae108b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9786a9ce-89a5-439f-9d61-d5932c48ec38",
        "cursor": {
          "ref": "e4d06353-9438-4827-a218-f5328700fea1",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "fbd4796f-c3e3-4160-a44f-8fed19208caf"
        },
        "item": {
          "id": "9786a9ce-89a5-439f-9d61-d5932c48ec38",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "386458e3-f2bf-4356-9f63-e49fab43e4ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2705174-742c-431c-8533-d0fc605d9d42",
        "cursor": {
          "ref": "5d820963-3c1c-4de3-bca4-259b18b23969",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "500d2db3-ef7c-4411-a35e-26bca4fc1b87"
        },
        "item": {
          "id": "f2705174-742c-431c-8533-d0fc605d9d42",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "29cb07ca-c8be-4484-bef2-c54b691b6c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12c9e4c-94f1-43ff-ba8c-ede415e41523",
        "cursor": {
          "ref": "11ba395b-a98e-4fad-ae24-d071a91e8510",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "edc14890-f575-47ea-8e81-1da1a1a918e5"
        },
        "item": {
          "id": "b12c9e4c-94f1-43ff-ba8c-ede415e41523",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5d921417-5dc5-4476-bd74-21fb79d1d423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873076bb-f55a-479d-90a2-f7a3800bcdcf",
        "cursor": {
          "ref": "ab6ecf9f-d858-492b-acaa-b2f1ab0e2936",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7b883083-c948-4911-b6ba-2699f0fbc20d"
        },
        "item": {
          "id": "873076bb-f55a-479d-90a2-f7a3800bcdcf",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "748d4535-40ed-4483-ac20-d132cd89f418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a1d2918-b797-4cb9-9605-e214a2c01d4a",
        "cursor": {
          "ref": "54d32be7-0180-44a9-a5dc-b04ad2a99425",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8e79843a-de6f-486f-88ce-f6e3d61c5c41"
        },
        "item": {
          "id": "9a1d2918-b797-4cb9-9605-e214a2c01d4a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b23943f3-c08d-4c09-9607-18152360e6aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7a426e-c98a-4fc1-a9df-2056d187e3ce",
        "cursor": {
          "ref": "08308e53-3913-4fc2-bbe4-7ff441bd1303",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "97ccbd48-0905-485f-8020-b517d5a6acd9"
        },
        "item": {
          "id": "2f7a426e-c98a-4fc1-a9df-2056d187e3ce",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "58d4fbb7-e62d-48a5-9b50-713d3f3bffad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25df0295-23c5-4db8-9942-2edde733f34d",
        "cursor": {
          "ref": "6b8b0daa-8873-4062-8eea-8c57f099b839",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "95b84d57-0ddf-4477-a151-72d411b27e11"
        },
        "item": {
          "id": "25df0295-23c5-4db8-9942-2edde733f34d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "aeff4104-4d5a-4a25-a4a8-9b4049668dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aaed0c7-1140-4033-9420-7c0b5627e1ef",
        "cursor": {
          "ref": "0d11c2ea-bb68-4fd1-a43d-811eb219ddbd",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "678121e2-6466-48a8-b0c4-fcdc2c57368c"
        },
        "item": {
          "id": "9aaed0c7-1140-4033-9420-7c0b5627e1ef",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "816ae07a-87b8-4e5e-ab76-df90c960a41d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f36d292c-4a00-4326-923f-a921f08f0866",
        "cursor": {
          "ref": "9f4d7c56-3213-490d-ab05-1a94f3aa81b2",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "cb2d4582-59ce-4cee-a8a2-558bf82e7425"
        },
        "item": {
          "id": "f36d292c-4a00-4326-923f-a921f08f0866",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "3008403c-b571-4ec9-8b02-9198077961c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e1c8f5-72a8-4a81-a171-81db850e59a5",
        "cursor": {
          "ref": "b4eb51d3-02f3-42ab-9790-362268447e15",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "aa6fd23c-f0a6-47e5-a934-80738adb203e"
        },
        "item": {
          "id": "59e1c8f5-72a8-4a81-a171-81db850e59a5",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1e4b6155-c08d-4de8-948c-f013937b5a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479dc232-8545-4d16-97e3-29543e0f75a5",
        "cursor": {
          "ref": "6a9e69cc-3bba-47ad-8cf0-9bf02ceb1fd4",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "eb246769-e634-4182-bafd-8cbe74afe1a4"
        },
        "item": {
          "id": "479dc232-8545-4d16-97e3-29543e0f75a5",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9bc4ccd3-e530-4141-9f6f-07514252d0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b468bef9-ffd4-4a60-b35d-d2fbf2502a30",
        "cursor": {
          "ref": "81c11088-543c-4c29-8cf4-c7c57baa8f88",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e8d64381-83a8-4dbb-a5aa-df73e7d17f1e"
        },
        "item": {
          "id": "b468bef9-ffd4-4a60-b35d-d2fbf2502a30",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "11117454-1de2-4369-81c5-269ec0c1c064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654224f5-a65c-4eb0-a2ec-9d3ae1dd2191",
        "cursor": {
          "ref": "5b186f5e-23cb-4fd6-88dc-4f14896772c8",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c8979ae6-da27-4cfa-97db-b600ba9e65eb"
        },
        "item": {
          "id": "654224f5-a65c-4eb0-a2ec-9d3ae1dd2191",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a4eecf87-f80d-49bb-adb7-056a6dfc4fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "862d2fe8-cbea-4693-8058-0836507e6945",
        "cursor": {
          "ref": "96d63fe0-3ef4-4135-8bd5-50f001a5fea3",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3da4ae4e-8726-46f0-a951-36e2cadc0c1e"
        },
        "item": {
          "id": "862d2fe8-cbea-4693-8058-0836507e6945",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "fd1a7f1b-e5ee-47e9-9363-7ae6ca802354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d239b0b-bbc4-45a7-8e43-97bb6ee93adb",
        "cursor": {
          "ref": "bbab6bdd-2daf-402b-90f6-14ee6f6d23a2",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b66a5801-9028-4b2e-bdd8-d3ccf7adecb3"
        },
        "item": {
          "id": "6d239b0b-bbc4-45a7-8e43-97bb6ee93adb",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6b5ebf4d-6ef2-44d7-9ba9-95deeec50e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30ce181-6ab6-4f13-ad17-b7c7007fefa2",
        "cursor": {
          "ref": "1a7ffdd9-401d-411d-be77-5b011fb52c6c",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5f261005-701d-4273-bc36-002ed5ce687d"
        },
        "item": {
          "id": "d30ce181-6ab6-4f13-ad17-b7c7007fefa2",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ed6ab603-e7fc-46c3-804a-f4864df37bdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc48783-1b48-402b-b9a3-331d614f3d74",
        "cursor": {
          "ref": "f78b5ca8-d66a-420a-842b-61938674acf1",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a59f3273-e3e0-4629-884d-7429cbb91cdd"
        },
        "item": {
          "id": "afc48783-1b48-402b-b9a3-331d614f3d74",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7f6a083b-3299-46d2-8d5c-9b4c539b7259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f0a972-8222-47e9-ae55-88a6c9ec45f9",
        "cursor": {
          "ref": "dfc31afa-eb4f-4dfe-96b5-57d6ea158e34",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "65a333ca-4384-4ba4-a9fd-2245db7594b8"
        },
        "item": {
          "id": "d0f0a972-8222-47e9-ae55-88a6c9ec45f9",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7012af2c-b762-4b90-a258-61ad4ebbd1b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f62639-0af4-41ea-9486-efa9c7a10a78",
        "cursor": {
          "ref": "b82df262-572d-4628-8d8f-46169f64f229",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "45434423-d09f-4ab5-879f-d638f148a362"
        },
        "item": {
          "id": "74f62639-0af4-41ea-9486-efa9c7a10a78",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d3b973fc-87d5-4f96-b948-87cf607c583a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b29969f-5b06-4ff0-8879-c3c2e96dbdce",
        "cursor": {
          "ref": "68700b8e-add0-4eb2-85e0-3658e2597ca9",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6f001ff3-8e53-4276-a82f-20d49325dc2f"
        },
        "item": {
          "id": "6b29969f-5b06-4ff0-8879-c3c2e96dbdce",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5fc8511a-835d-4c25-99b5-2dd18898a1f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b92ec7-87c0-4e77-8f17-4347132ad96e",
        "cursor": {
          "ref": "6ce3159d-5238-4af5-829e-f1f107c3206a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5fdc7610-0e8d-40a2-ba4b-6a19635d70b6"
        },
        "item": {
          "id": "89b92ec7-87c0-4e77-8f17-4347132ad96e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ddced4aa-2051-4d54-aa6f-15adfab5dc9f",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "b6e2fdd5-b1f8-4c31-8834-b5d56c49ca10",
        "cursor": {
          "ref": "469a34a3-facc-467d-8515-da632bfc91b7",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c164b554-60e9-4217-be9c-7a62842ecda3"
        },
        "item": {
          "id": "b6e2fdd5-b1f8-4c31-8834-b5d56c49ca10",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8ef8f58f-35b3-416e-9aa1-d899b76deb89",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "297c4301-f2f1-488b-b98c-ceefc6277e7e",
        "cursor": {
          "ref": "746c2ff4-2af4-4cef-9117-d0c30ed62686",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "be0d76be-6822-4a07-939e-e8ea292775b6"
        },
        "item": {
          "id": "297c4301-f2f1-488b-b98c-ceefc6277e7e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "141cc050-ab07-4da4-a012-3c264a52e506",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "248a94ca-eacc-4da9-9ec1-0a36fac07b9c",
        "cursor": {
          "ref": "64c980ab-b9ff-49a9-8ee1-35bb9ba2d1f8",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4561ed7e-0162-4fa4-84f9-f3d9abf383ed"
        },
        "item": {
          "id": "248a94ca-eacc-4da9-9ec1-0a36fac07b9c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e40bb968-670a-4e4e-8be4-f3cb0c65ae54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "248a94ca-eacc-4da9-9ec1-0a36fac07b9c",
        "cursor": {
          "ref": "64c980ab-b9ff-49a9-8ee1-35bb9ba2d1f8",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4561ed7e-0162-4fa4-84f9-f3d9abf383ed"
        },
        "item": {
          "id": "248a94ca-eacc-4da9-9ec1-0a36fac07b9c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e40bb968-670a-4e4e-8be4-f3cb0c65ae54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70ffc84-4f9b-4ef8-96ec-aed66ffa453b",
        "cursor": {
          "ref": "289f763c-1710-4c2e-b506-1bf3d90af94b",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4d618243-c845-4d41-ae11-84850b0c4188"
        },
        "item": {
          "id": "e70ffc84-4f9b-4ef8-96ec-aed66ffa453b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "59f3ed5b-fb48-44cc-8835-2b784704b334",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "710e64ad-c14f-4ecd-9650-623ac9274e81",
        "cursor": {
          "ref": "6afc9ac6-170d-474f-8b35-ee2284477790",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8745aefd-82d9-457b-b99c-6a70f6979e8a"
        },
        "item": {
          "id": "710e64ad-c14f-4ecd-9650-623ac9274e81",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "33ef7edd-5feb-41b1-987e-bb8e25bf9750",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}