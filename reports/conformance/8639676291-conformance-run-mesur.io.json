{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5bbc8c79-a371-4dc4-af59-4c517c8032da",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2a6f3832-d7c8-4c9e-827c-6da4dcd8cb40",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fb7347fc-e7df-4593-8c61-4a09b8b16f5b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "688cd6b4-b3d3-4b3e-a4ac-ba85c04a07b6"
                }
              }
            ]
          },
          {
            "id": "547ef62d-cb9b-4ed9-8033-622fabca6ab8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "50fbed56-30e9-4de3-9ca5-e72c46372754",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7f692dc1-7491-4c23-b293-8a2867afa393"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f9a8d462-17fa-4484-a45e-5406c23dbabc",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5412aa8d-f96a-4f39-82d6-7b1b2c1bdb19",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d2f5c3a0-536d-4334-8a52-795f44f42d23",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "06efb487-671f-41ba-ab54-a1196a0a1453",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "57a50e84-9534-4d28-9137-bcbacad84d8b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eac4255f-bd5b-4df4-9c56-af98a2769d76",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e0f95e90-5a56-4a67-8291-6aa9daadbd3b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a9e25ee9-002a-419a-abd5-9f4a8c2313a7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "00cf8cf3-f2cc-4ba4-adc5-2da6d056ab88"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d056d00-6a44-4d1c-b438-85ca9fa7aaa9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "52989253-b400-483c-a7bd-faa54d140f82"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c452af1e-6b55-4553-907c-5fce712989b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "55352cb1-22b9-40fd-a72c-3799670f5c21"
            }
          }
        ]
      },
      {
        "id": "52bc4a87-4892-4228-aa41-939eb4ca1c24",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d962bcb5-3860-4706-b316-6915cf9517fb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a2e0406f-d866-4652-8a39-721a88347001",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e83ccc29-ddf4-4a9a-8867-275fa77d37fb",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30df8ca6-6542-4f0c-bdee-c34c39a8465c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c63bdab-3201-4ee4-a75c-23326e91a2b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d53217-0fb1-4baf-af47-ca6dcd6f220e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71e43c5-a624-4ee3-a0c4-5daee422a12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f8c6473-a67c-4b8b-8707-291bf4fcf844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159f16d1-4854-4bcf-94dc-b5024a0d8ad4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94879221-7e6e-4c3b-a1ca-f5861bd6ac73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7392b097-5583-4b1a-92a8-c32996be3689"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "27b05db3-40c3-4b4a-9606-fb846ae6ab91",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "53baa6f1-ef2e-4da9-926c-c82280fe26f9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adec4d2d-4ba4-4f2d-b7eb-36ce217ee528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a429a6dc-e840-4518-a2f3-48191e344f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "790069a1-2361-480e-a9cb-27773d9474ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b407abd1-124a-446e-ad7d-49afde196fd6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "03e7e1d8-307f-4e90-bff6-df3d02111d3e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d62f82c4-d1e4-45fb-abd9-33bdbda836e0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a9e5b4d-279a-4fc4-a1db-47e754235531",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7b6a4ec3-389c-4938-8c0d-c8ffde90566a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5acd03ef-36ff-4e99-9c6b-8919ca1e69c3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "f566fbb1-b7b2-4dc3-aaef-aa8b8c5ffeda"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83ced266-0598-4efd-aea4-d276073d77fd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "79b067b5-d5f5-490b-949a-bcc29727aa2c"
            }
          }
        ]
      },
      {
        "id": "34c7a938-083a-4d2c-8f93-bd1b63527ff2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "15ad6239-e8be-4cbe-b0a6-d6c01483e4e1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a7a2a20c-978c-46b6-b729-b7a713fa0543",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "bcafd56f-4d7e-4fcb-9b36-d598b648810e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84cc6962-feb9-47f0-ac64-4cc863c70e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3097d253-a11f-45c4-9345-a0b4c26cd642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fe2b38-79a9-41ef-b56b-e7ca414e796d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d60e9c1-6a17-4f37-9e4e-488e574f2eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd7dbf6-224a-4224-95a7-962ccd9b022d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1377cb9-20a6-46c8-83d7-2f48c3f8dff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d13e72f-2ed6-4c08-9886-54090d4b7a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc669eb1-0622-4910-ab82-d67d6a25dea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c15e29e-e885-4d47-858e-c3d3683a6e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b39c283-a590-4e92-a3cc-64374a6529e3",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e125c7e5-971f-4841-a517-60fdcc4dfbfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9861fbf2-1820-4941-be49-6ef446d59c40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928a28a0-665d-4964-be89-438f39f492af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5b347f3-0926-4f29-a210-a47896680ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1974d4-4507-4b5d-b1eb-3c2fa14f5bb6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ef1090-229a-49f8-99ad-8c9d56bf46fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c39c80b8-1df1-4eea-bafc-4bd8ffbbf22f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e354e8-995d-4560-afe9-a5c6f10001be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "150031cd-14e7-45a3-bd4d-80ad7f9f2724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e0c35b-d673-40bb-96e1-8d83fd04d932",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8665243e-52af-4a18-86ae-ae452dcb58cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e40156-046e-481b-87bd-99a3a9766fc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9916e917-03c5-4eeb-8116-eaa629f93d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc6169ae-a999-4ba0-9b9b-b1c7764402e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56690754-3b03-4478-a204-a3405f0a6502",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61cd62b-fd1f-47f1-a29f-9b12133a1956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0be1d0a-e7a7-4a65-814d-f8a16dae468b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6225203-da30-4ee5-8ec9-08af6172e252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5500bf6e-217c-41c5-bc99-c22e32c14743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac7e76c-3a03-4804-affb-6dad2c66de26",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b101a78c-cc9d-4ecb-bc30-dd31477e1ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7b43219-ef51-4882-82b7-9e85caf1e188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf795a9-67c1-44d7-a2fc-3a5ca8777a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df16477f-a6b7-4409-ab47-f02d4c4dbedc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66696b32-524d-40c8-b08f-64c11868e629",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17968cd-45e9-49bc-9785-e8ab0911ef36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f938e9d-b637-42a3-a962-40ca7799ab42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad84011-aa99-4a1c-8e74-f02d2d0cf172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afe77404-047e-4c0d-8b06-5bfa6ab8b337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be6a8ff-bbbc-460e-b6ae-2745c822f2d0",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9d7523-78ea-481b-b3bd-450941e39092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "591b0089-c9ea-478d-acb0-606edac705f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8967377d-5f58-431a-aede-cf07561c041f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e144c6e-42e1-4cd9-aba3-52b88fc41a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f223f9-3652-4093-9905-cef7de3522a9",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "724a0c6a-aab3-4701-b71f-3ef95e837b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "999ee724-4cef-40d9-bba2-3e8deef30b6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d6aec0-9107-4a76-b79e-27c61b346505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8927d9eb-8f7f-42ca-88bd-f1ecafb24ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a29611-3ec7-421c-8ff9-32243354b3bc",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81f4753-b132-4d87-bb77-ca0c8ae4948f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0087e09d-1203-4514-9561-ddf1e3d0a16a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7c01ab-1866-44f9-9286-c7f6219747f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "267a62f1-df6e-42ae-9586-52dac8e85237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee409a1-9f18-4372-a6db-1c399105ff62",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8c2c74-0924-417d-912c-cec8f473b27e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a781b6e4-578c-4d4e-97ac-357d2ec2051a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c9a899-6962-4431-9015-d09664a2604c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8584135d-55ca-494f-a46b-619d588653d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e57a07-c63c-4de9-8394-4984715a3c4f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a289c793-287c-4432-a9b6-cf9b3746546c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ff67f2a-5777-4589-bb2c-e8767d34cd6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd11c1e9-4460-43c8-a35c-08b5158f68e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8e40592-8f3e-4135-b1ed-6a67fde0e55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16685e43-da9e-4c92-be17-bacea14c6fd0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "310b7a94-d726-4893-81bb-46578398e5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0453c4cf-ee07-4d67-a7a6-5bc47031d2ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0389fa8f-9f53-4ff7-80fc-112243ec1215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f4e6a87-f70d-4e8d-9e24-fde170f7e805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce2c0c6-6db1-4cfa-98d2-2f94900fb1f9",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e20c5c-a911-46a9-9c00-710c0f005ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fe8d551-bd95-4319-83b0-3ae56cd0676e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b6c44e-ef96-4aac-a15d-f7024b5c5034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5a99920-6552-46ba-986b-26c83129218f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ddf3995-fbb4-4410-88fe-c27272832ca3",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34da43cf-9291-4bca-8938-e326709e9a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b131dd-bb44-4164-8499-c92b525a159e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b738b0d4-5f73-4535-942f-9da7be5317dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "705eff4e-ab66-4e20-b146-67bc39b7fe72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e17c75-eae7-4e81-93a0-85cc51fcf640",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "186d30e1-538c-4378-8a8b-0d31f793fe0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0eececc-03b5-49f1-b0b2-a7cfd2359d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063151bf-a8eb-43d9-a25b-48ca9a50850a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "915d7666-2f92-4701-861a-2e593918e9f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88be256-5ca1-4c6c-9d5c-afec061c2b84",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789650d1-a7c3-4ccd-bb80-4818101fefbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "441b6ebb-7645-4ff3-b9bd-80bcf157db28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e9858b-c3d7-4c16-8cc5-97b2d0fa437e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b97d2f0-f845-495a-806c-28d4c08e7508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7081068-32e6-402a-acdc-e7c8982238e3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c0074b-882e-4146-b3ca-5a2a945b0c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92a86cc-bc5b-44c5-a6cd-0b4e64e2c6f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a889fcc-b01c-468c-9c51-e46b38e6a0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a627c3bf-5d0e-47e4-b999-e2f0f83ce361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3558b3c-0efc-4fba-a682-94a9d8056926",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "956850be-4e35-42e5-802c-02829bc43882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3399fe93-79f2-4cef-88f9-93bf73a1c47f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb73e4c-3d67-46b5-9a32-f736aa558c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "35b0ad40-b465-4266-9a1e-0a65e286fcd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca365999-aee1-4ac4-a631-45c61251f3d3",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda920d3-e674-4033-87c7-18b78c28eeff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06265a9f-4da8-444d-bf92-26f2fc7f94f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3cec29d-ba6d-4d98-88fb-32e7f5cf2ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8aa9af4-d2c1-4f91-b8e4-7b28dce2d58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70adb199-82b8-4a96-9e78-b91b2c2060d3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4b57c4-95e8-4fd4-b4dc-9879c6a6dc60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c11f69ee-6649-4623-b167-72e6a3ed9342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdac524d-76a6-4e76-ac97-70da8c13f814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a44fe39f-7519-4ab7-9333-ff0e1917a2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1617622a-6e28-4a70-b4fe-47c424c3c154",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71766e6-e0b6-4da9-9f21-64a56e69f720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff557d05-5a4a-4fa2-a5f8-71124a9b8422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f10be3-f026-49e6-aa9f-13b0ffbdb5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd7e0817-c26c-4b21-995f-e4a208f2ecb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57220943-3025-402c-b333-a9e2a4f876ba",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9945f3be-29fe-4eca-a7e8-e207c4bd1dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2215776-49da-486d-bdf8-90f826455650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e50118f4-ab99-4735-9397-5827876ba846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccae384e-03c3-4fa4-9cfa-2e3c85465e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e9239b-a534-4875-b26f-2146a416f920",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6d6da0-8176-409b-b1b3-70726434b2ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d49a8833-17d8-43c6-b1ee-455a38c7a17d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e486d74-4fc6-48da-be4d-4d5583615916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "061c9587-54de-42a8-9067-8316bccc88c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e75fb1-c790-4ddb-be51-9df740a7bbb1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe34f65-87ff-4e80-a3a0-4e48668f4b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c8c3d0-ebed-4994-8710-a322a5219c7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e883a6c6-9fe2-477b-8ae4-ee1cc2d85ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e82d9e7-a490-405b-94df-58c27d93cde7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "241772e5-6557-49d5-bb52-e19bcec2ed11",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e80905-03ca-449a-a977-c9d2177dbc57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e492c40b-b197-419d-bd89-d28fa9b6d3cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9793fdd-105f-4b15-b863-a3694826199e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e1d60b9-84b8-4d23-876b-7b87271450c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fddd3262-de82-43a6-9125-08ebb5513ae4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa4b658-d697-4a1f-b334-24482620ef9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce61ec5-5f22-4ce6-941e-279df45b2634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e582691a-adda-498c-ae0d-83d37f62ef43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "13a8123c-4bbe-4a9f-b2c0-92caee02c5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e7293e-cc32-417d-9067-2e8390eeedb7",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d995727-709e-44c8-8ce4-8fa691000627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d50dc355-99d6-4e3e-9ca5-9dc051fff5e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "958896d5-a0e2-4210-8ddf-43242d8bc9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "30babedd-872d-441e-a897-36742b7c6490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea416d80-0f5e-486b-b21c-acea1eea0c5f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "879ee4ae-8eb3-4ab7-87f9-63ac5ea19ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b584e70c-b954-4ced-9023-fe02a795974b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57ebe8f-3175-469f-ab9a-36ec0d047d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfa331f4-f17f-4fd6-8b1a-905e4eab7707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "055bd67b-1f78-4ac4-8abf-3a4eb1b1c0e0",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7bd800-097b-4720-af2f-e65c083c7d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "910804b6-59c6-4808-a288-0c8ad3ee3c39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab661c12-fae3-428a-a908-901921ff989e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "247a7db0-6b22-4237-82a9-b19f9870585c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90eb804-992e-48a9-8d60-91d6f1e20148",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3279d823-0682-4734-a793-c4ad5ac4559f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da36bcd7-b3c1-473b-8010-1392bdcf107c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d897d8d8-38a2-44b8-8094-37c49d83a13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4a624e2-b5c1-494c-9b48-92396dcf7d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814282a1-4451-4320-b708-a1f5f5d3af7a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41159603-f43e-469f-bd76-fcc93fceb468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7655cf69-1fc5-43b5-bc88-abe919130818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d698e6e-ba4d-44a4-85e4-772c9ba9ca33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ee82b0-9370-463d-8a9c-0003fcf1bc93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf23d4d-4de8-41fc-8d6d-47fff45fa553",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c5e6fa-b87f-4c5f-9a60-00095904affa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1442224-3d6f-4db5-925a-d0979b6bfc71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9bd299f-a390-407e-b239-84f03ee69ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8be1f0e-f7d4-49df-b1e3-175c9ad8b91b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528feb3a-0e0b-4fc0-9715-31dc5aeb5321",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be793f4e-cbab-4122-b584-607dc95e62a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f18ab48-8360-4306-8057-d9ebad74cd93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f83d45-fede-4898-acda-44a8ae80d204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "fb19585f-945c-4f20-8904-f437ef435f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f97aa0e-7fe3-4a64-b97c-7963f3d2ea22",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad28c7e-dc82-4cbf-a203-253d1d0ded86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98bdd804-d783-4afc-9248-20c85c67243c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b510c611-dba9-4deb-9e3b-76060580ca67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "feb92cb1-7a5e-48f1-ba9c-4b0bd43e7a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbeb488d-3767-43c2-8858-6a798a4719f3",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a04589-bf12-4b42-9b77-f97c77b3915a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56b76dd6-f2d1-4ea6-82ba-d05da13ce922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4c650a-e910-4f39-9d47-04c105488572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6861b44-a954-4dba-8ba9-98d3a6f6e9c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21504f3-01b3-4835-bf07-c21df6c86bc7",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "606f94aa-d25f-4da3-98d4-51f8caad0fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b015de80-2e5a-4703-96c9-a3ebd96edf9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42845654-bbea-4ee6-9da0-3d7d80d5c674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "184461b6-bf71-4a8f-9ea8-c02d13334afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4f17fd-07ca-4391-b604-9779841739ac",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f7db51-e024-4a9b-befa-1516eeedef77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2b89f24-dde1-4d37-8ec2-21e79a9b82ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72341ca-916c-44be-880e-9f3442e69a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b8981ff-9d16-492e-beb6-48adfdb71e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a02ed62-1394-4c33-9654-fae283478534",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc6a3a4-f41a-43c9-b17d-6c0f409daaba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a80809-9bac-421a-bdae-10febc265120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b967411c-54a9-4571-941b-c3b7c190c06a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "733f6150-790f-44d8-a237-61a1249e92ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c38d922-80f0-49e6-90fa-fb5804d8cb8a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b655ea45-6ed3-4f9b-8437-66d6c6b87bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8d1a12e-79ed-4767-ad3d-e4387e3191ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161dff45-3643-4095-bdb5-a30971313a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "df86d9e3-d5f4-4ad8-8aeb-f859a55815ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce982cd-f0aa-4139-9fa9-f6e50d5de52b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a6b8de-9f80-444f-9220-22172e839b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f37f521-4144-4a2d-a199-4a2791c74151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d56b0a4-3faa-40f5-a401-63e438e41847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e8043d62-6888-4c5d-9359-f1e01a5c8b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad34587-2acd-400c-bd0d-d2d7543d9753",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "803458dd-c0d5-4c35-8ef8-46004d4c01f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d188e5-79df-4f8d-8a97-612a2b135cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d597f7e3-50ef-4165-8d65-63339ec7b39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2449fc01-0c99-4955-becd-5bd09794640a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e806be69-d50e-4235-9ea4-211954419b8d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c89341-cb3d-4d3c-887d-e3e4d5f4f35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "384eb2ce-07e6-4d82-ac2c-b2a83273ce0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170e78f4-0bbc-4359-a36c-df1af8321ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2a72931-bfee-429d-9f6f-0a2aa649de09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019febeb-4570-44dd-96c5-56bc30e98ca4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b37c9c5-4aab-42bb-9291-e159e3cd8d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd6165e-5e07-47fd-ab13-fada6d29128c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f728ed21-f0f4-43b4-8b1f-2eea176f4a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b129b0f-7541-4704-a69f-5ccac5e2567e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e489d0-4b18-46f8-8668-36c7467891dd",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fb65fb-1eb3-4d19-b37c-c92c51343196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01d873e3-3f56-40da-92f7-d8bc6d65796a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677ea35a-8df9-47c3-bb4f-54426f53fabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "289db65a-04df-4c8f-9377-f1d313b6802b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd716326-fd4b-4d1d-a7b1-0ffc08d3f92d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "905fb978-368e-49fe-bc1a-5d99d015a8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "236c5ef9-2683-46ee-a774-7e38faf4dccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18286a35-27b0-41c8-a351-a1d1a5dfffc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3433df37-ce6c-47c8-8a4e-a55481c8c9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68b6022-ab93-4413-b694-1a1545677611",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b031ecb-82fe-4ba1-9356-20747bfce8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb0ae37-0cf5-4d21-9fdf-9976e6ef6f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f39dbb-cf47-4a6a-a8e6-3da4ccc21ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1451f1b-c0a8-471e-a7a0-0a7bcd942c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d489b412-45f6-4533-96d0-548c6f74cfc8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6231998e-10b6-468a-bf20-de8e8735a5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "351ed463-5f91-48f7-a546-6070bc77a4c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80cd9868-d4c1-4e0a-92a6-de49ab19e22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1421ca9-0c48-4c27-bcaa-0e659ad3c560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0541820-43d9-4764-8eb6-e287cb996e3d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a73116-771d-48b5-836d-fce31d739413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c735299b-ef3b-4e84-99e7-05fe99f494f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b99fd8a-672e-48f6-b025-b097d5a66809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "71b796a5-186f-4c0b-8e3f-adf031df85e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f8d9ed-3eed-4062-845b-314ea77e7986",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068cc7b1-ba3b-4f69-bf2c-7351af496571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d65095-defa-448e-8c06-b809535bc03d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe911059-4262-4d93-afb3-e6e535f2f4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "05314c48-b719-4d2d-ae5c-f02a607cbe8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c812ae83-04d6-4520-bccd-f9406f933f72",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8367a5-5d25-4969-bfa2-4ac9697650b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57ac08fd-9155-49dd-903e-4b94e8d95665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78619a7a-36ed-44da-ad6b-e516e8d751e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fe964ea-0f90-4006-9ac4-41dee832550a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61c92f5-502e-408c-afc9-65dfa9a3cb50",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d369bb-af76-4c40-b534-42c39d97b5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d05a4b2-564b-4f6c-9a84-f051bb0fe6de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d89db379-56a7-4738-b25d-7101d2c692af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec1f6c43-f1a3-4a27-910e-423ba283205c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "825b515b-8658-4244-b2cb-296df40248b2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c5bea5-ea9d-41e4-b81b-a35101a0f14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f35908a5-ce16-4dd3-bfe3-e94527a04a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98c2d5d-957b-4367-9075-b9403f869c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a754ed51-c274-40d3-8a7c-bf2bbc663aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd070533-f30f-4ae5-bc41-7edb4b22a444",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "838fe652-d898-48b5-a55d-afadb5601031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43745e50-832f-4ab1-b13c-cf83bf06d85c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0bd9c3-ca7d-4a33-8383-2e423e79ebbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bd43c13-6f3d-421b-8501-c24164c2ea58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6462738-7a08-4f73-ac7e-7d732078ec01",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc78a821-0122-4928-90f0-52e83deb6ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e574d193-13a4-4b68-a580-52947a7ac115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83181af2-308a-4f08-94a9-d9e9054082c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "aa47dc3d-6627-44b0-9fbe-b79e32030fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26754b8-2267-4f1c-8486-f29e3ae114e8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609ae01c-5573-4628-9e7b-c50eabcd08b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c17bb7ac-7828-4c83-9e8f-45ec3d6012fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5071d145-2392-4ce9-948d-5fa048f13b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "14488e01-360d-4e7e-9718-2dfd955b5862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0c563b-b46d-489b-892b-4e1f0933bd82",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c80264-cc1d-4894-b67d-02d8711de0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a6881c-13bc-472e-b020-810256da7fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4836f2-b98e-4292-80a0-dcab3698e51e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9ac2ca0-b106-47e9-a4ba-6d8954e640d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9bc8dc-565f-4f7c-bb9a-5c95ed60ca09",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf2e194-89e9-471d-8dba-1f01cb4398e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45217814-9fc9-44d3-b79f-cafafc12cf33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec523a8-d79d-43d3-b9af-690f9c15563b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cfad9a0b-e9ef-4134-a911-ec7986355255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5abf5b-8934-4c4b-abbb-04e25ff0d35d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d585284-9252-4bd1-ae97-fed0c4424b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d855b95-32be-45b9-bb98-3380c33b5180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c7ec95-e6ce-4072-a937-55bb5a73ec8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "815f377e-3340-492d-b134-5c13dde68086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f093eb-8fc0-4e2a-adc7-f40fc92fde49",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9d6d33-c372-434c-b7c5-73d9bbc675ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a42e8cc-de2c-4260-ad34-2bd9c02cfa5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7ad439-eb5a-401e-9d50-0e7a8491499e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "26a47dfc-bc41-40fb-bab0-8e55f4b8e04e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d593523b-88e6-4ccf-8b35-7ed89e0153f5",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc0f465c-cb27-4246-abcd-c8f167928912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00bbd306-9e8e-4bdc-a2cb-b03ca3992386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e3b933-e5ae-4024-8337-8787ea307c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "28774770-7f01-4246-a584-489a384a5928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f734422-e6bf-4553-83e7-2f0ba96de55b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e29bd38-5aab-4ed2-be87-d04015050a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc859f74-1707-4e76-87e0-69178ffd7e37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bee7fac-86b1-4909-9b9b-228c562eee94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b3ab5f1-72a7-40a4-be2a-96098e8f0f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b849440-cf95-4d5c-ac17-cafc806b99fb",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c1b1e0-6b1a-4d18-b998-1b1a97e241c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e989150d-009b-4607-a42d-c66d38ba59fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ed61b4-216f-46c8-af4f-5f89b3ea28c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de4bd962-00a5-4bf0-89b1-82c441285733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b24e5a-5a39-460c-9de3-bee9e35f4ea6",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70316301-218c-4dbf-b5dd-1a0b76388f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a9eb2c0-5761-4430-9f30-12f87a121035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0efa27-5621-47fd-815d-6be4f0344de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddfb34f9-054a-4efa-ab76-05660daba812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970f405d-8b8b-4473-a62c-b2cf126e8c88",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8598bd-c85f-4837-aad2-5d06c4346077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a90c51-4a22-4be6-b6a8-e441cb044693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc1aa81-a53d-4842-9b2c-2b33b51397b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bce43ab8-d779-4163-a09f-f6202783443c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc85ebf-fdca-4090-a15a-2b3cdde899c4",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85765e93-20d8-4a8a-afa2-85d4ed15f3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c913d287-8b21-4948-87e9-acaf7437f6c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aabea508-5092-43de-9a54-c702b6a70a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7c5ebd3f-26f9-4343-8463-26cb17219493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005b4867-1223-4e8f-80df-69b39f9d502f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc66b3d-3ea1-41a4-899f-71006ab5b266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab481be-7068-4575-b62e-4ac59dfbdf79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d98d62e-0c34-458f-94c9-0b5950544336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e26eac7-90fc-4d95-aa20-5a62e41e143b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e40778-1cc1-4375-acac-8cdaa7f5b7d7",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d559f57-3528-45bc-ba95-20f55c4139dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d533b6-e141-4727-b722-ca2bab957738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98724970-f6a7-443b-a3fb-4b0746903379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "74b50218-cdb5-4a30-8e30-65bd6e2341d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b206084-9f71-4e23-a787-191558a114c7",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f257cb-9d54-4cd4-a744-1bdf6d7b0e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e44867-ec0a-412b-9bcf-2700508255f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9faaddde-0592-4b03-a87b-c32bc88ace66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3aafc85f-142d-4a13-b9fe-2682cb83e8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4416551d-9340-4a2a-87e4-a6fa82f2ced4",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a190c9d-6c9f-49ae-bbb6-bebc6b17b89c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ed4f4f4-9e7a-4c22-8841-46c0adfc482b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5829b57-b0cf-4b91-ab2e-806de84aa83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc7d68f9-8789-4788-8f2b-9791eb9aaca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff472046-1736-418c-ac8d-869fcb700a95",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec44171-9e22-40f0-90d1-bdf23e37c132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9c89c51-f65a-4c9f-9f5a-12e1746931d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff266efe-7be5-4237-ab5b-4a570bb45c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ec1d3ee-d5d5-4a39-8bea-bb28907b4b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a46258d9-6f18-4a28-9626-3b51803b23d0",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2803591f-dc1f-4aad-994b-2bef4c0911a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0971d7f4-1b02-4081-a564-40dea0d78e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821440d0-553f-4de0-b4aa-ffe712d773fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1172232f-c21e-4793-a220-07bc17e21977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09acfe92-5b15-4c28-857c-3b1ace2705ff",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddcf1ae7-9c87-4dc4-a4a5-91287b870cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83248e3a-a06a-4d9a-9158-dfee8b2e5030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a450655e-b28f-4fe4-949a-7383489a31c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "51913916-c39f-4e1d-9c40-462c36bf1581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579ed229-4c75-4652-a683-937a072a8880",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aed74f6-c1c2-4c13-98e3-0c3413a25392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f356a4f8-bee8-49df-abea-bbebb55255ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e074913-fbbd-4cda-8c0a-df5c15e21c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbef4463-c673-44db-933d-f2255943bf65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4f2fea-3fb4-4d0e-9af6-5e07acca4fef",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89922f58-ac39-4b5e-abc4-65a9dea7411e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d518d2-9aec-495e-8fb7-27be1590fba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e53a9605-ffe2-4bc2-b724-14feec64b713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7515875c-bf3c-4a83-a40d-082c460bf382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21e1061-14a8-4938-b0d4-dd00229fcfed",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "409737a6-2ef0-402b-aa73-2df10c29ae9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97635461-b6a0-49d7-8fc1-86c824273d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832921bc-83a2-4f11-b5ce-76acb88f6250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "160e7e94-8ba2-40e1-ab84-9a7b4c808491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96505718-c062-4d5c-b53b-0aef2a08f53a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33d22ef-d948-4420-88c6-e1cfb1f92efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7922cae7-d7c1-49a0-a090-49b3799055e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f19edb24-97c1-4126-9542-bebd0c0957f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "723610f1-53a6-4379-9b24-9faa650bcf68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6c48ed-ff0c-4bf0-88c8-2c90dfd0f401",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f462dd9-c16c-4c42-b912-81ddb7339461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cbf1f8c-0e29-4a1e-ba83-5b839271cae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71dd7a12-1031-4c0f-b277-b5f017e7bb9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "45d83922-e8f7-4115-a554-8dfb65e18154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f174e11-5395-41d5-bd56-6ddd8ef10700",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72edda23-115c-40b8-a452-b96ef2c0be9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b9381c-2e27-463c-a7f8-87182c169eae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ded0a09-6355-45ba-9f84-a9a47cae8061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6dad6c34-eb57-4ee7-ab51-676b5f839c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3c63ff-7a16-423a-8f48-4022e2d5bdc9",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe745693-5263-4eb8-b053-60e73a49491b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8fcc800-8559-4c74-9e0f-bbb702fd12ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce8efd5-ac7b-4c56-953a-da6cbb027bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a77c9c1d-be58-49bb-82af-0c514acd2349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde7b01e-1764-40aa-ae01-b9f5fddf5c2b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98fdbbba-9c97-429d-9288-f04d60f57a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "147952a8-8883-41af-bbb7-438421da4714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f0d973-fd73-4dce-a971-6cf9908ad6ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8026025a-cf25-4046-9170-e450ca3b98a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2928c2c-b488-49ff-b7f3-355f56f6d5b3",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7a36f9-8328-464a-955d-1e776e9c7d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3466645c-a23e-468e-b48a-4639238796c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0d7a85-d262-43ba-ae41-a6ea7aa148a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90c89c04-2889-485b-a703-1acab40fc27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd08d2b-797d-4e99-af88-8f8176d31bec",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38320c8-9e09-40be-9ee5-055df698be7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "338da761-c765-4d77-9bc2-d13a0985ccc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63749744-5037-4e17-8e7a-bfcec26085fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa2cbf92-6dd6-40c7-9381-1586da1b767a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c45919-3856-497c-bc84-b6e242ea6d91",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2080d49c-4f16-4a7c-88e3-91b66fbd6100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c85de3f-70dc-40bc-a53b-49749f82c4b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca38dc1-d5f3-419c-810f-6b0e9f7c2196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d4511c03-b859-4f72-bf3f-59a0b1294048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75db9084-7e91-40b1-8197-6fac9767239f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6686dbe3-f5e5-49a6-b4f1-08a9da60d069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f61597f-7c91-4cc7-8d7c-4b58a2162b5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae45ec8-6cb6-4b4d-b09e-bd7c51c84320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "69128f11-0521-4993-92f3-bfab848fb552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d957840-6ea1-47af-8ccb-d3f4679bc115",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f871f1a-70a6-4cd4-8e98-b189d7fbb8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60b5f92d-4f04-46f3-8aff-a13c1cbe809e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743f3fa4-e154-411c-99db-6ca8eb93e5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "72323454-ad22-4188-b2e4-06e77fb64c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a88a8e-f5de-4454-83fa-f875e036b0a7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e38b5e1-91b5-41c4-8e24-7cc6a74d00dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1397910a-35ab-43a3-bd36-75c44b9b2651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9640271b-97b8-4c0d-ad97-54ae9f61230f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb8416a0-5d05-487a-8419-c6e8c4625b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065137be-741c-49af-bcd3-97f75e34828b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cbf1d8f-bd6d-473b-92e7-a6dd3c73b7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "091d7e47-6d33-4966-ae7c-b70d3b7285b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e68c7d-65f0-4f62-a789-2f5b2b09e479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b225630f-b0de-4c2d-a4d2-b0f16d337a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cafa3844-57ed-48de-9094-aaf34c0efc01",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327466fd-fb9d-49a9-862d-5b49b2057db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e233e3d-daed-4691-9c01-23ff4e02d319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b574d9-b69f-4b75-91d1-f478e9a37642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a644e1f5-db7f-47fc-9543-f74b18bc3895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53601599-faf5-4072-a9c4-21bf000b2450",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be79570-72a2-4e38-bcfd-305158273eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ead0d627-36f3-4343-be48-ac744365cf24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34143b9e-df88-47da-b135-874b31ed0fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5ab245f-9b6b-49ea-8c54-9e3efe8a3457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85fd997e-dbd3-4ae6-b68f-8a9b5f768c9f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "632e46f2-cd5b-4556-b42b-fb9d297eeb96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "af4a4b42-fe0c-4bbd-8858-cb84a86b7a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d36252-a3c2-4de6-a768-421c0f6b5045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "500c6879-84ff-4000-9b85-7156e0c49b4b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f6c40b58-cf6b-4cc4-a797-d931f56f7295",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "01ce3fb5-5379-4231-8f07-7e6e1d407d1d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a51844-984e-4973-bd72-121f0f6f51f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b478288a-c585-4f3f-b2ba-485d39b37bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b21385-9b3e-458e-aafc-2807eae08bc2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75a302e6-697a-4901-8c1f-bb776f6a7654"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e06e150-5ea7-4bd3-a8f2-559fea787597",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4020c687-ae1f-42e7-b189-a35d4acac203"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd70fefb-1012-4861-8903-d0ed07df88d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34cc6381-db37-4f6d-a5f7-47d06e3fa3a8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d0b44dc9-afd7-4929-8227-1696d266ace2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9332acae-8c8d-4a19-912d-1f984f154fb7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c57ca035-4e5c-42aa-a3f0-b35e20ca5ed4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3ebb0553-6adb-4346-bea6-890ba3d049b3"
                }
              }
            ]
          },
          {
            "id": "bab6cdda-18d0-407d-8a50-489858391ac9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5aa5a4c0-4fbb-460c-9af3-c02202509656",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "346b01df-6037-4840-bb43-52c20db3d764",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "477ec585-aaa0-4e9b-9a8a-9c436223a439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "31c5b9f4-5a2f-434f-9205-8fdf415842a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49522c2-3666-41c4-b6d7-36222d187c22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "607fd5fd-0be2-453e-8a5a-2a9091659490"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c8ad0a42-9976-4673-a155-6edcdb4dff9c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "235f905c-2bd1-48e7-b5d1-1fc5d7494a95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16e8ffe7-7f09-473e-a9d7-89871334e361"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f740802b-a505-47f2-ad45-1817e2b5089b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f9f362be-e9b4-414e-b677-1af2e2f03bfc"
                    }
                  }
                ]
              },
              {
                "id": "0558df76-eed2-44e7-a808-aba565ca7d59",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f79d6119-d715-4335-91e2-c5e9f025978d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9c1a2c4-85f0-495c-9d4e-ff150ac9dbf4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fe4871c-767a-4052-9211-fa84331eab29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4d470e5c-7348-41a4-8c49-111e721aa0dd"
                    }
                  }
                ]
              },
              {
                "id": "9f281204-6078-4502-8385-fcad3206f159",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8fe87895-3251-4f1e-8132-46804f063be9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bd272f51-82d9-494a-98ae-515cb79c9ed2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13b5b281-b932-4f9d-82cb-fed0db375d24",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d2a2c2ad-126b-453e-b4a6-f59e522ecc91"
                    }
                  }
                ]
              },
              {
                "id": "29f4daca-88e4-44c6-bbab-224ab143368f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53587528-a275-4190-b240-0c4f00cee4e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "089c6287-8a78-445d-aa7f-2cd19cb9e111"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab94394d-ccb6-4282-bbfc-8cfaacb78389",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c072dc42-53bc-47fd-b0da-e502b42c3168"
                    }
                  }
                ]
              },
              {
                "id": "d3ecccdb-d44c-4ba4-b63b-ac289daee4ef",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "87e8cd5b-8673-4dee-aa85-9e70b6f4bfbd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6dbc4ce7-117c-474e-b56b-0db03ee5e407"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "635b92f9-e838-45ed-9a20-90e76673ac93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9f5d234e-e38f-4d13-91ca-06c0c0418e18"
                    }
                  }
                ]
              },
              {
                "id": "20a35750-ef41-41f6-89f6-4d7943db6ff9",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "21d8b592-8f7e-41de-a13d-151ae635f4cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a3299dcc-ef93-419e-8acc-5a024415657b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88dbfaca-372f-4c32-bf50-c828625e2d08",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7d71ab61-78fa-408a-a78f-589c9371b4b8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1cda1dea-d066-413a-adf9-8ab9111b9964",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f7a68c30-272a-4062-ac26-c267609451e9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4fa3aa48-513c-4595-8a2e-9d818c52f40d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "91b7e713-43c7-4ea0-b4d2-aca2f4f046d8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "844d9fea-fd55-4e87-bab2-73de43b9ddaa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "fc8f3d61-97e6-46fa-9e4f-4ed80c724f85"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8542699b-b18b-434d-91d6-4e72887cddad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "17141754-a0fc-4d23-a154-db65732cf3b4"
            }
          }
        ]
      },
      {
        "id": "77dc606b-7b86-4eda-af72-6da908c6260d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8bb493cd-a26a-44c0-9cb0-7c3842e9dd9b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8acaa350-ee78-4bb3-8f65-4892161fe129",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "db30dc2d-f52c-488a-a5ea-d9fb8219204c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c236598-4fdb-463c-b8d3-1d6924ad1814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "168238d9-856d-4cfc-9470-c1c973e97ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c6336f-e62b-4367-816b-44fac5275c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa37b8fe-055e-4d7c-8c18-84e743db94c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115a6710-4c3f-41eb-8b66-f1164ec39fe3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0463219f-d2cd-4e3d-b912-4bcd5162ab14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df510a38-2de6-46f6-8f28-12f194edc51d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0cf51f7-fbd8-48d7-9394-6998461551a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1e9a36d-92c8-4d88-bf00-0cfdf9a08779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ccc39d9-2e82-4ec7-9286-85a07dc40e29",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a04b254-a4a1-44d0-8ebb-8d9e5f48e4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ece9dba-0ee0-417a-8170-d295957a29c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e3aa95-ec80-437a-8bce-11db1be98327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9257e024-c106-4317-a055-8ad801c8e9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3944c38c-3203-4620-8f0a-0560057dc8a2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5ae903-1495-4c2e-a670-c5b75444f2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a08c08f4-dce7-47c1-b1ce-50c0fc9e7d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcdb7ceb-afad-4d9d-a7bd-485854e70a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "060b857d-9965-49ae-9745-61115f44a074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40a6d07-0004-4159-8aef-c67c44d5687a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e616ccfb-f327-44de-9d7b-5866651f8436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73b6222c-248b-4cba-a0c1-b7b691a33f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5980ac0-ec7b-4242-b529-fb649a31d46a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3477c1bc-d007-4c7f-8962-2a30cc1cb7c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15240dba-bd02-449a-87d1-a63d629eaf7e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de354d33-80d3-4e04-ba52-03feb881e027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4887cf7c-30cf-469f-b8b6-c8f3586304f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d502f17-a111-4757-8a2e-cecf26a86d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb38f31c-ac98-4c3c-bdac-ce70c7787353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f8ff5e-b664-49fd-a89a-ebe41a1cae3b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a078abe9-73df-4068-8b7c-cc7470905d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe23222a-fb71-4292-ab98-ad4cdabd0612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f334ffb5-8a90-49b5-926a-5626f7100067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a944e765-7277-4c77-93b9-8e670cf2b3e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a423381-cfae-45ab-b313-87981b7063ea",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f233afbc-f537-45c9-90ba-c84e429fe2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e844560d-d9d6-4a1b-8b85-13c5be75ebfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec972d3-3b89-4e6a-b9b1-72aab5458039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3ef357c-17ed-4c18-a99d-af4cc59a4411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9ce3fd-1f2c-4524-ae5f-0d26a3047397",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0cb3c8-eb86-48ec-a3c5-6d7de6d8b4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12581323-afac-447d-94e4-e218cab89faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e468021a-038e-4da7-84fa-5b7caaa06318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2305e1c8-4022-4330-8c92-a70a0b116844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b3d9a9-06d4-4920-984e-ff589734f7fe",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76599ee-6e7e-4dbc-b753-7ccebac54256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f16d365d-457c-4f6c-b2ba-80f68af0c3a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a312df48-d6b5-4f05-a474-ed922c5a18dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80c855d6-0c92-4727-980b-eadc94233a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e961d7-4ac8-40b2-81e2-faef7fe3bfa2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6385ca-59ca-4eea-80c0-510b87ea3078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef55997-c2c2-4cd8-90eb-5d37df1f9748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23420d7-c957-4c87-8df8-34e919b47509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d8632c84-67f8-4cd1-9615-f1ceefcf419b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b0ac340-17f5-4726-aadf-6f9ad827249f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74dab5b-ec68-4dc3-9d0d-86480807d521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32bc8fad-70f6-490a-8f90-f65749ff54ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abffef18-271d-43f8-8a92-281028f336fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0133a2de-ee3e-4579-ac8c-849e22090f70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23427429-e59b-4cd7-a622-d43d27c764cc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a40fee4-e053-4b4f-aacb-970fd082b6c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d5e342-4386-4268-99ca-41a3c57218b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d48790-d977-4e2e-b996-bec176a35438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1632e40-efe5-4704-82cd-af15eb49c1d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328bab6e-8712-4121-98e7-6d7e01cf4c40",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c430ab-7798-4e9d-8c8a-a24f4d515ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b355bf95-f198-46ae-831f-7b122ac0ceb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f1fbca-1032-49e0-bd42-b3ff7d8bf5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a1b3a69-a6b6-4cc7-aed0-551d4180a2b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82db5b77-3cd8-4f32-bcc8-43fab5f124c4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc48127-4522-4360-b689-1be55bc87659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95100b98-97c3-4da8-9b6f-0581b622120f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc3842c-78ae-4d26-a751-a4885f271674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0223e16e-23a1-427c-beb2-b8a583e61a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a50e4df-ec46-4792-a6e8-552e79423c70",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "163c7348-d9e7-48d2-b7f9-5afc9fadee21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58230b6e-e9c0-4c22-a359-cc3c7abc68bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "269b6e3c-b69c-48f7-bf59-dee0cc99c267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "58048a64-2624-4acb-ab98-125dbdfd6177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98df29b8-b353-43e9-92df-05f1a7836f70",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f5c0b5-b839-43e8-a299-244f5eb6c7f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a72c462a-b430-401a-94b3-df03bbdcbc98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b831afa-3a0a-4380-86e7-320af5008bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4710380d-0618-4511-845c-1d4aacc7711e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58537dd1-0245-480b-bd04-ea50726fd048",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1ba4f5-f48d-45b4-ad0f-4fb396721102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a079f4ec-f4c7-4d08-af98-f52fb20db29d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fe2bf7-b8fd-498c-89b9-f1684e2b3ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae005d13-5a57-46e6-bd19-050e3e282fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f44cec6-7b8c-4c9b-a462-460b463228f5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25703e4a-bec6-4cd9-8498-abae5dd8b3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f796a5-f128-4fd0-9307-63f5ab57d34b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0784c258-54c5-482a-af97-6220ae60fe64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c22727b-c588-4fd9-9257-e0587d4bafb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc0ed0f-63ae-4fcf-82a8-b6b52b70412a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "431e338e-8942-4dbb-991a-e43c8f56b2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04d9cbf7-c317-4114-9f0d-da161b4d371a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9292469-172d-4520-96e5-84aaab4f508c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dae3bb5-1099-4276-a852-e04c91f84f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f1b83a-9591-43ac-855e-aedd00b90c32",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e508b98b-3527-4ce1-a31b-dc0012b72fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abbbb1d6-7d08-4520-a521-345db40f1567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e56552-0b53-4922-a765-f0d38027a19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64b338f6-e4ec-4e7c-8474-1efefc30b25a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc005e98-2aae-49fd-bcaa-2330d051d32b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee4fd05-4098-4e10-b059-2236b4876097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88800600-1647-4253-be2c-5f4f59b6dbde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f752b02-12bd-4998-be22-804ac1ad90d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07fbb1b1-3833-4eeb-9293-ed77bbf5d69e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dbf2101-fbf6-4d80-9038-f32ca721b8e7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94056a9a-8794-4c08-a6f8-759a8f4e9a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b32b92b6-aedb-41ed-8283-b2b72daaee20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7b890e-5dc9-4c14-8292-dbf302fbaa84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dba0fcde-14a2-4958-8af4-3fa129c8b8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1fdb616-8c57-4a9e-972a-c34f2e8d4ab1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3bc8c3f-d56a-4d08-b0c1-9bab11fc2798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de2c677-2f77-41c8-901a-4847c21fb58c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3bdd559-956e-4449-9f88-d7b145e45f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7898c7bc-780d-47cb-9eb8-f57f0e54f0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c73f1ca-14fd-41d5-9158-bd1960baf8e1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19e5b35-c13f-4b46-938d-5810f8b710cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cc07477-90db-48c2-9e91-58f6dfd44bf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e888fa5b-09b0-46a2-9d1c-f96babe4fdac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "321234e4-4d19-41c9-9105-7c398e5b5e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc3b180-b091-428f-9bb8-89e253cfe727",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2d8adf-ad31-4428-a55c-80ff03a1eb8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ea9d3c8-68c3-453b-b23e-dcb83084f23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8a0ead-4634-40be-8b04-20a935b24e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b748bfba-2779-4482-91a5-b77bbb183475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1937c1-1cd2-46ab-b372-848c73f0a708",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e13554-7bf0-4c2a-88b8-68401f2950e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d39634e-35af-42c9-bfde-80f939614d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78349ebe-9b2f-45a9-b39c-148b99e0543c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "406092e0-65e1-4684-aea7-6f0ed1e332c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3cd903a-f537-4898-b92b-2049cbdc5f39",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e0ab23-4d19-4c23-b0f6-c96a51ec66f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d31533d-f434-4309-b5f9-31ed42f521ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b206ce8-cb45-4e47-bcee-5af4ebdf90ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b5e98c-5962-426e-b339-7fbe8de78b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063a6e71-41fb-4bb3-bd9e-f221e0eca8a9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7f5563-45c2-4e03-bb93-28ac559dcf73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "707b65fe-9ab1-45b9-bb8c-fd07d45af8f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa3ac25-f1d3-4640-8aaf-3cd987461383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "479e567f-bbc0-4578-a248-9ad3e9757d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a48f79-dcc5-4eda-997d-3d2311288aac",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18610e90-d33d-4fe5-809b-2a3821ad454b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a763a6d-4db7-434b-ac32-0ec83d2793b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11fb7fa8-ce28-42c2-9917-a9ced7414c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76b789b9-af50-44c6-8b27-58ad681fa23d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1054fe03-544f-4c62-8020-363d3ff1881f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "691f6ac4-bb29-46fe-b3a6-6f47b374d424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0ec30e-b045-40f9-8f5e-76ffa320279c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ec3993-1c44-4d2b-b075-176fc32f72bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d52ce0fa-4fea-4df8-b5cd-485df2ce0576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e976e87-afd7-4f31-a8c3-52f3cc8a836a",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23f998f-5420-4a7d-aca3-28a4f70053a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63227b51-caea-44ad-a959-317e85d153f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a8d93c-d5ab-4ff5-bbf4-571c894734a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12e58cb2-3abe-4cfa-bf43-a789be029684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ebc5b54-2ae5-465f-980a-b51cc920d679",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e4e4fd-c4a7-445d-9529-a05e5aac091e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae76093b-e327-408b-b456-9748d4fa7941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e20d5de-6cc8-4585-b3f0-fd3482459e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ccc0306-d08b-43f7-94b6-d6aad07a2bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071f1b9a-fb2d-407f-bbc8-393827e7cc1e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b23be6-2aba-4ffa-8c98-c48a30f689b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c530ec6-cafe-4f39-8a97-ca3b6c48930f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c59b177-b6f0-4ac7-ac6b-e7c074928a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0670d67-acaf-44e8-8e66-cfd666fbdc49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0654fc-f960-4fc9-b6b1-6a4892436847",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72bd2a22-0206-437b-9191-46d654dd35f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7020627-5177-4f5b-abcf-5fb0a5550e68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c8606ad-eee4-4247-a480-af11b7e7aec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb6ae03e-3258-476b-a4e6-b453fedec949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88be88c-16ce-488f-8e69-5d1d82408497",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a37c549-a027-4ce2-9f4b-e719bc86eb5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b19426-559a-4fd2-b062-8bdf2020f12a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b37c066a-88a4-4093-b178-8a392c4e940c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "767e254a-7900-46fe-9b5c-16a24e8d91e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeebe971-e48b-47c2-a13c-dcfb146cf89d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3cb28d-b606-4dbc-b2c4-021d4bae3c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e6e5b1f-3b41-4ea9-b115-426bfd49592a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dafc869f-3c02-4ea8-91de-018125da846a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45b343e0-f7a7-434f-a6a3-94bf9d362e23"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "219a826e-1c29-47fb-af60-6e3ce890ba6e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db8465ac-3a60-4f41-ac88-66bceae89aaa",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4affa64-25bb-432c-92ee-0d03216933d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7954030f-8949-455c-9104-f8086fcba9b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02e928a-93af-4458-bece-1eed6017bea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a047c536-c9d1-4ba3-9aef-8088194b101f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34817c0b-263e-42d2-8a40-ae8fc81a5cd6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69b7850a-a8e0-46fb-9de1-97d9d22e15cd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "624e7c72-6205-43ee-aa6b-db24020bb0e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d479789a-2a07-4bbc-b492-580ab1e39cb6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1b169280-d4d9-4e7c-8702-b973a7b6d475",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3faab94a-17aa-4b33-8df1-434586f6d811"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ad86e25-b610-427d-83a0-b56a515dbe54",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f312fb8a-0b54-479b-8a32-834ac6d25456"
            }
          }
        ]
      },
      {
        "id": "5dcce78d-aa4c-4266-9b90-2b95510f047f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f306cb06-e35d-4f73-a4ec-cc99ce84c0e6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "35fc5f05-152f-41ea-9c38-2f08ca1ee68c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c99184e4-a0dd-4479-96fd-79ccdd0ad013",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32b8f94-6e62-41f2-bafa-f0c116c332f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46d5b125-caee-4e15-ad06-d72ebcecba6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3055f3c-3c0c-4fb9-9dc6-a6d7b0550f2e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0402c718-3a43-4326-8dcb-4f9feed54d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c35f43d2-b7c4-4914-b28b-d419ac57819e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d5ceafb-bd8a-486a-ba05-e3c16a3e968e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "991917f1-d09f-4571-90f6-f1b0aa64e267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "356c668a-0bf1-474e-8967-4bd100b84587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23423d8-b524-4c97-b6af-853bd0ec40e8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a10c724-eeb7-4d86-b9c1-6e4a6eeb36c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff6d04dc-fb0a-44b3-a8a2-1dd738a087fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923ac87f-54cb-497f-870a-21237146919e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb94ee6d-4ad4-4dd3-9358-3862bf6a1d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3c28739-1d59-40a7-85cb-ec5f5f597524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717d8d97-3623-4fb9-aff9-87d544a0d922",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e482bc-35a3-4088-b54b-9ec49343f80f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e829d854-7918-439c-b3d9-194f9e2872d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590dd917-df67-4bb3-83d2-49b4332178cf",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae562ad8-e7d8-4e94-8728-0a45bdfab68f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc0d0d6-ac69-4ca2-862c-7867b6a1552f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c93524-5008-4ba4-9c74-d5be1ec3d53f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53af7b5e-6fad-4d60-95e6-afeab81a94ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26b00ad-620a-4f44-8345-374e84e3c1f3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df4a14f-f1a7-41b1-b0aa-583f64f88fb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ac2776c-b877-433a-ab7a-75eb7983e05c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0f81e8-5d63-444d-a59e-34c9c23cae59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "452723e5-a3c1-442f-9a9d-2b9215bdc45a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10640e9-bf08-44c2-96d3-979a5d6453d7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eabd0a9-35be-48c4-b418-428a9a912a5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9d1753b-04fa-493b-b9fa-1559e9185cab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b7f8c6-1284-4d49-a177-af7b03c4fcc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f6c12ae-5a13-4508-8524-be5a5403c031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e7f51f-666c-4e5d-8c6c-9237424b7cce",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ecf635-3575-4921-9073-3d3154de835d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93ec594b-0421-4373-b972-f7b0577555e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7a2441-6ec6-4dca-8b57-d69e28801791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "450ce6fa-2be0-407b-af91-5ea6dcd5e937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7246a4b9-f8dc-475c-a5cc-d8e506dbf486",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0e778f-4818-4b61-a08f-57484c8bf8a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922a4913-38dd-4c0d-846f-6508af5bd610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f370cd10-eb17-46e5-9ca2-6bbbe1c97947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cbfed0d-db12-47ef-8930-eb59be81f0bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a46246b-4c41-4b65-bf03-6d9f3de2721c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee0a457-4c36-4026-ac22-3320a0dd313d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4c1fa6-a3e1-440d-8ddc-596b12b0ddb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ad7478-17f6-464d-b938-1c67097256f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad2ec72a-e362-4ec8-adb5-64c5cd640e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b9e71e-83be-402b-8bec-2f61851c6c82",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1950b2e-db7f-4610-9a71-93d7d6de8b59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09a8fde9-0b80-4850-b310-ddf007c4c672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df96266-0676-422d-b6b2-2e67d37bc9e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30bb8969-59e7-4b03-944a-0f5ea4a31c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3424093-1e72-45d0-9844-8e2137dd61c9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834468a5-75dd-4bd2-8b49-6619beb05460",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7b3bcdf-6c74-4b74-a50f-a789dedde9fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac4043a-8040-4ded-8891-fb4aad60fa28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14965c22-c361-4b8c-8be5-1f3497fa9303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617f3e77-3d9b-48cf-8ffa-602ef160ab6a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5d4ad7-44c2-4e6c-b6e6-28020ebf0010",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14d5e14a-1ab6-49d0-96bd-517225c7debf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a04646c-e6c2-4be2-baed-404023e62b8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "822cf2af-216c-498d-8c61-8d81a42dcee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72acc763-7e60-4205-b6b9-9b823c0eb9ab",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a9434f-827c-4936-9ef0-079b409f1eea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7b30687-9443-44a0-a20d-388fa89af477"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7916d33b-fafd-4af6-88e0-9978cb382cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc398f15-8ec4-44b3-a58e-0f53c8906a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f59320-fc9a-48cf-ade3-bf98e42ad815",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69aca250-d659-443b-bacd-e3dfb203e7d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4305dc4d-66a0-4e31-b699-9fb7ac1dd985"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e09fd3-94dd-4ea0-879a-44b9a34e8f0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cd7d776-d0ba-4f3e-8552-7723d81b418f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e32d73b9-0b61-4d0a-8461-f6b72173190b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189b9b8e-7f55-4a8a-b7a6-b566111495be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2603bf01-fa92-493d-9146-520151b47749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d94ef2-bbe2-4567-a5dd-0b766b2630a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85e8f121-ac3e-4baa-afe6-2bbaa31d8643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a5102e-f87c-4dc4-aa21-1ed40e5177f1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b233b9e0-5355-48d7-91e1-d2b78e01af2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec5577d9-1c2b-42bc-b9ec-106b63a547f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad412cb5-5926-467f-9048-bf25f6aa3303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95edb62c-61d9-424b-b2f0-f62bc481a933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b78014-aaba-4f59-8582-de128ca4beff",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687970dd-7b4c-432f-b9f1-56b17e32f3f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "601eea03-2c47-41be-906e-b50143fcc406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f479f166-ed80-4bec-9aff-ee2f1c6d89c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31b25ebb-897f-44d3-a879-36bbe77d68eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed1b499-2d31-4f88-9c7b-3f37dfcf68ff",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc95db56-1b94-49a7-956b-23383bd85aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b2ec1a-720f-40f8-a89e-e06b35ca44cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c29de2c5-06ac-4ab2-9d54-7452eace864b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "accd96f4-73ec-45b6-928a-07ef5c60234e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebc8d9b-bebc-40b6-9ccb-a6086b59f1b7",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d5daf4-68a0-4616-a0f3-a7dd144a1be5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "069687dd-5b96-4523-b99f-b959793d806a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5911a42-e1a9-4e56-86f4-e225f34aaffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49bc017f-943d-42b1-9430-9affed9a432a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3005997e-4e6e-4382-9efb-2f5bfe5c7cf1",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2cea0d-e266-4f3e-a134-a89b7a6888ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5202a8b-a439-4731-9832-1bb014fdee71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebc33f8-0b99-43e8-9a95-8f796cbbac03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c66aaf4-e720-49c7-9b6e-4ff23e91bb23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8538fd6-7f2a-4586-bc99-10211e4c96f1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f373f9a-b835-49be-b14f-6d14ad12052f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a80ab70-a582-4007-8bcd-1dd426154d18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3313379-c5c3-468c-bc89-422391b07705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c3d2708-948c-406e-8ac0-8ccff0c6d4d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ae2cac-75fb-4687-8c2b-788ef8e9e694",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc4feab-1436-4041-a36d-b4c8f9018027",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67e43d4d-e6f2-4370-8935-175da7243b3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "420776f1-9f5d-4d5c-b8b5-9ebec549fc62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d7db439-c5d3-442d-a5e5-f86db4f9ba8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef7c0ba-e515-43f1-b614-6e1b58e26f0d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf3decd-27e8-45fe-a086-95ea48fe891b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d090ee9e-e2aa-416d-b037-c5efa3faa5cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8d7f9f-7f1e-47e5-a0fc-455d12f8e9ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae027645-2cd1-493d-9888-19f95f53a51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9fefce9-a72f-4ebb-b486-34ed464f651a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a032d957-7dde-406c-b145-8f3efae19f11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80626dbd-08be-46c6-9292-0b875bf519ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2d51fe-6148-4ef9-a86b-334ea57878f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89feef6b-d3ad-4893-b83c-94fe173724d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c68dfb-0638-4e72-916d-b985efbe94a8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf05312d-6526-4ccf-981a-7ae8dd0e86ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fad0ba17-0949-4886-82e6-b84b79bf47dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "526ac273-5109-49f2-b4c9-cdcf331e1e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af44e929-93c7-421c-ac6d-a625c9555daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88fb1c48-7383-4ef0-ae2f-46d8d4d96c05",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1a4880-5817-49c8-91b5-b32b14542c04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "329a9b12-a075-43ba-9269-0c3b58d4a559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8856e6b5-882e-4990-8ebf-c0b3572372e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dba8179b-daf7-46eb-b175-f3fc109e629c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c0dcc3-245b-4aed-bf4f-55336dac21f0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8b8475-f620-4b0c-9bf9-8a125ef276d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2135f2c-a4e6-4e94-99af-49d20d97bb4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9763f267-395f-4ae7-a5d2-91acaf01e179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7f03537-38e5-42e8-8f51-8d05acf0d1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b08072-35e8-4da8-91e5-53508aa5782a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe5e3e3-8718-47ef-84c5-56c4c270c367",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1025e154-6bcb-4a36-9862-39d072f21ebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab7ea5d-65d9-4d42-a3ba-b9ca9e75b7ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "664c41d9-f99f-4249-8553-1b3d5ada863a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "384137d5-f41b-4aeb-88e7-2d6a0840380d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4fbc28b-d62e-4718-b835-b039aae6ae32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7be3d726-43d9-44e4-bd4e-989156bb10be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "352489eb-c79f-4b81-8f8a-bfc9ec904bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f0f4aa5-4f07-40ab-b19a-f4f505412422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2fd412e-627d-45e3-b470-bc412d35f7ad",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4ebd73-24b9-49bd-8e03-f6eeac0a48d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e213f47-df68-44e9-b86e-ccabe1368aea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3027c5ce-731d-4c94-b0c9-86c81335c216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87b0fd23-1fb4-4e2b-8bf1-e771f398e66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdaade8a-07f0-47f4-b68d-3b2869f4a698",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e41d65-3dca-43a3-8785-b1ae283cc66e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c8021e4-1ed4-4d26-b224-e20b5f70999c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e03c47-911b-49cf-b5b0-5cba6ea626af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a358180-f581-45fe-b1bb-6b5ee9934a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a815ec-b9b7-4e40-b2ec-2aff6428035f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b626e8-fb70-46b6-82c7-6cc4f95e10d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff0787ff-9ae6-4a73-98d2-c1d8d41c13ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "252fa9fb-228a-4321-af79-30b3b92d2532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75104025-3113-45fa-b2e1-67b031df190e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2e7e54-f707-4793-a018-0aba0f2385d4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f9d00c-c9b6-4604-bf49-ab9840c45a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79fe588f-302b-4609-b3e9-aa379cac1a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "182d152b-89f7-4bb0-a4c8-e3bdda47f310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d1ab3cc-cff8-437c-8351-c41437ea55d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7b6f80-0ac1-4cf1-84aa-0cb105881065",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87d8d40-7bfc-4095-ab2c-f736635aad8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e77ab8f5-a4bd-4fc2-b4e4-2b09bde1ae95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b224db31-baa2-4df3-9dbf-cd7d8c813935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f4f9b7-f3ba-47fd-9ab3-57553f10bf48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4401808c-aba2-4e82-9dd9-0e0dbbe10854",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f3f4a7-ad2f-49e5-9b98-4e00549d747f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00483e58-7e8a-4bf4-875c-c5184eaf807d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95aa55d4-38de-4008-9468-2d066934efd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d775ee-d86b-4200-8b83-0094f822e894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9b13fb-0e95-4a7f-80f4-807b74526fe1",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae2d1ff-8bb2-4574-bdd1-d544b2c71ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a3af897-4abc-4bb0-8383-f680252426f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ebf28f2-e4d6-4919-a0e5-5dd9c64ba765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe397ef-9e83-47b6-b051-9a26ae412d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a781bff-e288-42f0-964b-976dd301a3ba",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1bbb73f-01ed-4fc7-a411-7f4a14410eea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bf55ef5-8b97-42eb-9aef-7fa3ede46641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcae73e0-0ea2-4a01-9bcd-1fd4ed50b28a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc07004f-ae90-4854-9172-93916f523e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2c613a-af58-4dd2-a8a4-c3f5f84077d6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92dcef73-8a83-46b6-9eb4-305a31f76607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5fbdae6-32eb-4e7c-97b8-afd1a7a8695e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8001173-92fd-4c99-b855-e6923fc384ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb28cd07-5e0c-4fa9-9641-014d29185528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa26f250-f32c-47f0-84d2-2e7ec26d1e1b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4977ae00-11e1-47ba-9d0d-30a46f32d1d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "187dddf2-cbfb-405e-9b32-8717b7696540"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c8a1ba-caa0-4b26-8fd5-46d89c62fbab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6320e48-850f-47f5-8e28-0f3832fd8bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa547ea-4c00-4d9e-af11-aecfd555144b",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99965a27-8b8b-4704-a804-47abce8f820b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "316db164-afe7-449f-8ed7-0be25f1dbe60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c8641e-900a-4d7f-af34-482ec666b89e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f74dc92-054e-4ac0-894d-51cdb1cee438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194c5963-2a86-4571-b308-509f1ece15bc",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbf199c-fe89-4967-967e-7fd40f78135b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f9765c1-4387-4458-8037-7eac56eb742e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51d6eb0-c40c-44a6-8d32-44cf6968a161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e05c16-7643-43ef-afac-822dfc5e2125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0e2b44-f8a8-4494-a5fc-799f55b4d430",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3e8534-43ae-4ffe-94e8-486caf3cf525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bce685b-070d-462b-899e-782ba311d807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16975a27-e56f-4695-a3fe-3a1d4c69d255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6fa1b69-56f8-465e-849b-113c64caf97a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2330122-673d-4d4d-bd86-e88edb83f723",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a839f2a7-d1d9-4fbe-911a-f4ad78bd1892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb9125d3-f276-4918-ab81-1542d71a1f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e691562e-217d-40e7-afa6-475e92da4a54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd3bd052-aceb-4114-a8cf-a136e43e08a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d6343a-4647-45a9-b1b4-abe8e198d226",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9364dc59-c6cd-4e2c-a655-5f11afd7fc69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c47a39-7713-4feb-886d-d8f9f8431fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d7275e-49d1-4c6d-b691-1a96d5a0138c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d93229-07ed-4125-95b6-3de6b2cf3e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9664d45-d5eb-4c54-aa30-be8a784b1481",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e202db-eccb-41ab-ac4d-8e28616f585a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eb32ef9-7d6e-47f4-b343-274bd3135b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c02e14-9648-4149-870e-9bf97f0f050b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "376ed00a-ad6b-41ab-91df-d2d5aea3f40e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455816cd-eeac-45fc-abff-c90a71a3c21d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e572b741-3794-4a95-b97c-b16ed77f853e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d4d7732-681d-4953-8971-6792fc99d390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07bbeb2d-ecbb-4f60-b38c-3b028093d1a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "818fa389-33ef-4785-a54f-018058d0eb30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83de3d54-805e-401e-9428-9590662f0f9f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2888a9f-ad5d-4345-8940-4bbe18e87bc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "679757a8-b7e6-4f0f-8584-23cb44384aa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67eb02f-52c3-4c53-8028-b91e031dae11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28dea8dc-0eaa-4e32-a493-26b83f54b304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446bd3a2-f29f-4762-9b4b-3f56b838934c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0172faf2-57b3-45ef-9b1b-433717b2e8e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1cb479a-b73a-46e1-9877-b6c6d15222a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "880d34f0-1786-4615-b7a2-812b3ee1e461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a06d23-a5f8-4ffa-84fa-e10a8b60e840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a6bac9e-16c0-4a50-a2b6-7177c085199a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5ffabf-eeba-4370-b768-dfb7afbf5f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "409ba2e8-b5cd-472f-96f1-c08630f1f623"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3446a7-e893-4aa0-bf3e-b5accb17aff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbaf281a-61bc-423d-8826-220346238e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79eccb34-dea2-4e07-aa9d-276c40af597c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc23f7c1-34d2-4384-97fc-2588cadd930e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18972fb9-2156-41ff-942c-1d202095b565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69075157-c068-4cd0-b698-50150d21e0ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13152d02-fa85-4609-9d2b-867117286351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f1c0fa-0011-4a97-9da6-831b91b163ae",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32344457-8418-4244-af59-642f6dbdfe34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41b3aa32-1d3c-4270-b0cc-d46bbdef7a94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "693d36a7-099f-48d4-98a0-9cd960d8de9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59abe8f0-f8ce-4741-baa7-2ccf90f60b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a923a317-6b72-4dfa-a487-aa8e05068a53",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3395b775-843f-440e-878b-aa28200729fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5a157f5-dd4c-4fd8-a353-47dc02ec2a23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3449e4c-2bfd-4a91-bf78-538ec36457de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a27032d4-5160-4911-a2e7-eadaddab91f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7d3036-034b-43d8-b410-6969d8077892",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79467ed4-ebbb-4db5-a9de-0d1938ef0e1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f930671-4b7b-49d7-b235-def4ebb20753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f283ef1-2c1a-4abc-8031-fe43b362399e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4feaf87-d849-4766-9b05-9fe46563c1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24293a9-b210-45f5-97eb-6c19e95af9c3",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b978658e-63e5-4f67-866e-d454e64b9c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1e6ba0e-efbc-4b4c-83ce-474abd6917a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eedbc722-21aa-4615-89a8-4e8dd66ba624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c8af937-79cc-485c-ba44-d7a00a9d5d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0bd25a-f5b7-438b-9b1b-6f2f3a77c213",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5d9d35-96a5-475f-8338-adbc2de4ce31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee8d4fe-26c8-461f-9615-cb8cbe3ca09a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a671bfb-bbdb-43b0-ae4b-ad031f8cc26e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1434b5bb-80fd-4729-a5c4-db8a45d809b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0800ff-6652-49fe-8354-45a7de60a9aa",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f008c9-256d-4c19-a685-9d895a2ddc49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c282b6-79f1-494a-ac1b-2fc913f58332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58abc91a-e327-4494-aff2-4071ab0bdf3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d59bdb86-d2d6-46bb-ad29-fa33390d164b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4016af10-23d4-460e-a819-dabe1eb9e6a3",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b032be-1187-472d-9540-1dbc984c3d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c7f7eda-2fdd-4171-9c7a-ce81ba9ae960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31fc42f9-563b-4c56-80bf-90c9e5602bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "805780ef-0f86-4216-854f-af0389b54a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e8b658-2932-4230-9947-bb0bb94e56f7",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d75f2c9-419f-44b0-aca9-3db4a9a747fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "073e55e2-df3b-4979-b051-860996c2cd3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71deb5c-28f0-4dd0-b2a0-da59eb7e2e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02015053-2676-47cf-a68c-d9d711dbee92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43db6c49-d6dc-4449-80c0-a4ab196ca844",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5370378c-c50d-46ff-922e-28c3f5124d13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91936cd0-d306-4b9b-b100-48fa5f89fbc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fb4b86-d8be-45e1-bf1b-16dbdc9ac3b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78cb1434-61cb-4537-83f9-34c7b987d867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0f0279-4fc8-40fc-9c0a-150614028ac4",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6344a3a-c9e0-4a3c-b8c9-a7956c0bf393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e789f6-caa5-4682-a3d7-c3f234bf755c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a10b8ca-f06b-420d-b673-dcedaca08a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17219126-0ac5-4a8a-a0e4-7418c8d8eece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4573c08-0e88-417c-8901-0e2f1ca53953",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c52fcae-2492-4897-9843-42ab652dfb90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af2dcbaf-134b-4138-a494-91111d12de3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55931a92-2dba-43c5-85d5-3a3fdada9098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d262023-c523-41c6-828a-8a4095fc01bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72697c55-a3ba-4e17-bc10-fde1469c10e6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc148e5f-9b60-4ded-beb3-1d1a9cb0b322",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2696812-f656-45d4-a400-145386ff3ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7277db9e-bc2d-4421-9388-9946530f61c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fc53531-e28d-40ea-b7a1-a27676dfeee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1713ac7c-1ff3-47ce-bd9d-5dade9c2f87d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1bbd694-e9d3-4d87-a9e8-d0bb17db0762",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62ddae5d-5858-48e6-8e0e-be2246f166b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19bc474b-2cbb-42fa-99d2-136258e7ea1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90bb32ec-6d67-4c5a-859d-bec5f5d63200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b8ada2-1c85-489c-ac37-d1c6a05d01ba",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8ef78e-a574-4d31-bf0b-8a8d5801c2c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0304a2d0-cae2-447a-9076-25b53b9a59a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aecad56b-d4c4-40eb-b215-17b5d0a06eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b690735-e0b1-43f0-ad87-e4854ac11933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959d12d6-1ea5-473b-9266-56ced7c23356",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a958482-be36-45a5-9ad4-863cb0f61731",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49f49467-b90c-4d60-80e0-217e466d5cb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1983701-b525-404b-9db9-44f401633c59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06c76d1b-ae87-429b-858b-2a60fed5b6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112ea6f2-92c6-4eca-8ca0-30af04ffd44b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a6838e-ff12-4ccf-bf22-3dbad8e285be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e7bec3f-36d4-494d-be83-e1ec1b6e61a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0883b105-56cd-45db-88ec-5f88bd6f9da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c8c284-2cab-4e49-a189-59f44a50ba57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3edd6fc6-3ba3-4c3f-ba52-c34590679e27",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ceca5c8-cdfd-4c1d-8f9d-7d9f821815f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c57f6ec6-a5b2-43c0-92ae-7bb19d605150"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c505407e-6f61-4c72-af4a-e6f9e415eec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "750c4ce9-e6f6-441a-a1ba-bff41a18a2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97ba0ae-f5c4-4a25-8b8c-80f94b00cb04",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff03399-d3f3-4d33-9e35-1ff065146cc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac5e6dab-153d-4600-8afb-b148b7b18158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6472d28-3bf0-4ed3-80dc-5375a02478ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d4b03f5-145c-423e-b990-7c3ebdad5ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565e4294-1913-4481-b6eb-d3db9679a589",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0243d63-8657-4c1c-82d5-0f053f31e00c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ae907ef-b9f9-49ab-b5c4-34dc3ed208f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "441175ab-3a00-4cb4-bc7f-c012f12b1503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac5ecc3-0d4b-4c92-9032-faff864eaa75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5706c3-9231-4c81-9876-663ce609ee7b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e8ab99-b8f1-4e41-ab14-d4b98fec6bac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f49ddbc-ea9e-49da-a639-30389b04e8bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30e6689-7892-47a4-a217-ec1a273fedc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6030d65-c36f-4e1a-9671-97b9d0002f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2acac5d-8ed6-4da1-9b41-a27689ade76d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db055210-82b1-4515-b8b6-939674b76367",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e7f46b3-38c0-4059-80c8-167a08a94555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ad07c3-6733-4655-91d0-7abf563d4537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09236c1c-7c41-45c7-a18a-8a16a9f5cc9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ba269b-8c5f-4789-b067-faa5989596e2",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98972be9-9b99-4feb-a474-6a2367e543f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5afefaa0-bf00-4500-9add-542285ff0864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "924fbecb-6186-44e7-b5f1-0362d4e6ef39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a531ec7f-8bfe-4aef-a1d1-e5b0c2a7236d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009ed5e1-fd84-4232-be3e-8572f1497bd7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e73b41-3442-4f50-847a-4d266d2d9b69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f153b0a3-599d-40f6-9200-fe1b7a6bc0fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3313e92a-9ce4-48bf-b2ee-3ad29e2d2164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "267a7066-c86a-4b87-ae8d-6247d71430cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c9036f-94c0-46c8-bb71-61babffce971",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a22932-848f-47f6-ad23-91502fa98e52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d45783cf-e8a8-4557-8957-1abd905fdf8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "024fbe2f-6e37-4d24-99b9-300f92d8ece4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83d8875b-fcf7-4baa-89c1-867c013b8aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0ae69e-75a6-4f33-b5c0-26f1ff236f25",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7ee7d0-26e3-4820-8255-46e226993cc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb2bef4c-6f7d-4189-8973-2b17847f0564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d88f738-f32d-4f12-9dd6-f6d927476c1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d610c6d4-782c-446f-8054-72f5bda1a67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae278e8-43c3-4c9b-987a-2bf490b5ac69",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df78cf00-f63d-40fa-92dd-ca374452e94e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecacfda0-4347-4546-a8b5-74b86f110126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84d5844-6090-4aab-b61f-c012416128fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7530c60-b5d0-4756-93c6-93df04bb72b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50a15c1-9f5b-4717-a9f1-488f1596958b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e425a2-f426-4979-a021-4bfec3887f13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6c7c7d4-5884-45d8-90be-3672c1521dfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2d4dbe-845b-439e-a566-c0f1376fce5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a989e3c-80d4-4ab9-9bfe-9c643b54db5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c09e88f-b692-4a19-b686-c0eb452ede7c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "501fd1a3-3733-44a0-8cdf-0a309cd063c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9db6a8a-8bb0-4f38-a75d-eaf48f2ac316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9635f519-1554-48df-bccd-99ed70570c2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abd496b6-8729-4aa3-947c-d5ca363d3020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6f5bb2-7d1f-4863-8346-5ab8bf987034",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a546989b-26c1-4440-9bb3-6e783b38a291",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23d7925e-41ea-4028-ab79-dba8a37a7078"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fdd3bad-822c-4058-8255-51cd80607350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c6c620-3218-499f-a738-7dd87baf0b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd89e13-804e-4f42-baaa-9b04774da7a7",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f85c2b-5975-493e-a385-e2b46254a156",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6c92c2b-ca60-4022-be95-feb7fd4f8e6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de224093-6a3d-4bca-8071-0fcdea8147e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142efcef-ee48-477e-8814-e2fc06832129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56a3484-0e8d-4350-9f8c-ffbdbe33da8e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb50ca3b-0d68-4b6d-b9bd-fae3529d988b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2327556f-8561-4edb-8238-eb42abcec60b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef7923f-1d38-47ed-8b3c-840ed2258991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bf4711d-e96f-489e-b90b-927e9c54c7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0cf34b-88bd-46e5-ba8f-59c9f08fa987",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02abac00-dcab-438b-8751-7f0f50d8551c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d6f72d3-e8f1-447e-8338-ae6c54d91621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23bba972-9989-4069-a740-a0aba53f94d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b86863b5-5d7d-40da-87ca-b0733cdbcf39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b587c4-f271-410e-8194-d43bdd4b8712",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48bbb466-ef42-49ae-941a-b4685d3ff7f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f5d822e-eeec-42d9-98dc-354100a2c4f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "431eb162-d892-41a3-94ff-564c8e2e57e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bee1ae1-e304-4245-af20-1b4f34fbf807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe6712d-7878-4ff0-8cdc-72f766c7089b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ada4778-c0c9-4f5f-9f3e-bb25fdd6f07e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dc0a499-fc1b-4094-b230-6c627a05e132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d121a4-b87e-495a-b71b-79ba97ac22d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f221827d-8870-449e-b807-f60f007bc376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aebde8c-eff3-49a1-a4ca-3ad6a4dd14e4",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9247337d-05cb-475f-8a2b-fa7de5dca46e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3a3781a-0775-48a9-a921-36befa597265"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1235513d-5365-4eeb-9ad5-484345ad2587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c03f0a23-dcf6-45df-ae46-06aede910579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9a0ad6-822d-47dd-b8df-5f6aeb64042d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "656d5398-0ffe-42b8-b229-3517a1b601bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "862b0735-b2af-46be-ada6-f24a7360062a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ac5142-d2f0-4072-bf76-d622e6e45c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ec2a40-8f5c-4f26-8ea8-337cd07e26a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ada2157-8718-40ff-abb6-d97ecbcdfa86",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fa99d9-e9ec-43fd-80c4-9bccb5b3f311",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "524af1e0-5977-439a-9cd4-ac9cab689f74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5ad8a5-6294-4c42-ba2f-299151a79214",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4563cc9-a283-4b89-ad40-53e361b65ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d84a9f17-4dc4-4cad-8b5d-f11bda3fe83a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e957413e-e5f4-4784-9d82-b9fcf1c485a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "049e8fff-c71a-4834-80be-4117fc69d01d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "433811c3-fa91-4f99-b4d7-66bec21f0ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bdc9df6-c137-4b35-aec0-7f513132706a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0893e4d5-02f7-4ced-9f36-1bd60aa6d6e4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0294ad-f989-40ef-8761-01580a6cb13d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59a5174c-4d04-4568-addc-40aba5943ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e428c514-b5d6-420d-a0e4-71c2e22abeb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1465f42b-0bd3-45cc-94c7-286b72a7b904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8247c69a-4ec6-4ad6-8293-75078caaf07e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4449aba3-43e3-4635-abc4-af3e53bdf3e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f9e83e6-9a42-4f08-bbd5-da36abfc1049"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6634b6c4-5144-44f6-a96c-dcbfe3838c46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0b5d971-2c76-4807-9c3a-0bc4e361bec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511b50b2-705a-43b4-b192-273677d46290",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e765478-b8f0-4e91-a37c-7be5dd9ecc58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a43fea2e-86f7-4970-aafc-331d36bc745c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ee49ee-6306-4b56-bd8c-8faaa8336241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a73adc53-ff42-49d6-856a-3726c0ebd41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cba0cdf-df40-435c-a4c6-acd5d6a2b886",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e66664c-dfae-45c9-a42e-8a032f4be8a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00532445-f634-4916-9a53-30bdfb0684bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b4ff6f-a480-4ffc-8b94-304ce1805901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25860bd3-5aef-4865-b3d5-66e1f57a1edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab42b70-051d-45f4-bf5a-5532120c3bab",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43311464-9408-4d1e-b95f-d99c17011fcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0253e4e1-86b2-4037-a660-da258d57c393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a7d492-770d-4b6e-a90e-05382413c3dd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd7fe08e-dac5-4e69-8c6a-a95c60ba1261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8adc6408-fe14-4748-b502-6f048c0bd703",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0a3e6e-9307-4db8-bd6d-1ef64f419a1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3924501e-0f1e-467d-b1b0-aa4e965e44bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37f2698-a5f0-4c28-bcec-2faae68713f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae7d9e9-32a5-481d-90dd-045de2551a3e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4254dcfb-0df2-454b-82e0-5f24a1cf0456",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f24efea-bfed-440f-96c0-6951d90ad820"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "de6bd2f1-a4ce-4fd1-b502-2a2414567af3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c67b68f3-8261-48d3-b1ab-51fc25319be3"
                    }
                  }
                ]
              },
              {
                "id": "aeeacc77-2d69-412d-9694-6237f1acc2f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "187066dc-c6a9-48d8-80c8-4a214efffbff",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20194b72-277c-4a4f-9de4-c54ceb29e17c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "29337143-da45-402f-a663-4996a4386c93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20952708-774f-4502-8a4d-8ac050d4cf1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e16dcaf-f234-440f-9a70-d763f6f06266"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09428026-541a-4a6b-82fb-c584217a1381",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f5f5861-ac9f-4fd8-b82e-70761eb07f4c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d191c2f-c4de-4cab-8d14-6b4e6fbeba8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "653256c7-5113-4d5a-b937-7f32d4616057"
                    }
                  }
                ]
              },
              {
                "id": "221fc4ea-ba82-47be-a6e2-01da918746d6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "38d05958-f6a5-48c3-b0c9-eb6e262cbd51",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "370b0605-5e2b-4612-8f90-b0bd0c293efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9bceba84-4a25-44f9-bbb0-84fe72cca6eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64218c1d-ba3c-4403-ac32-c01087589881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d14a700a-a759-4de0-ab37-5b16057c6169"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "813e1f19-7aad-41e0-a55e-ec3f005c5d6a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "05c3f279-bba5-477a-95c9-97c27cc46dfb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "45fff67d-0c20-44fa-89fa-1dc1d3cae2b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c6d5bbca-f406-4f79-9781-76c82e580179"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f09499b-0eb8-4d04-b23c-f9baf2212306",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d80d134-d22e-496c-a1e3-9c8e86fd2b34"
                    }
                  }
                ]
              },
              {
                "id": "7a80292f-f577-453a-a3e7-c6428b0b28d8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7998be1e-5a06-4ca5-bd63-61c13bce2243",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3b4d7d46-18aa-458c-8cc1-512a55a7dbdd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c76ed58-26d6-4fe9-86ec-d403d040f315",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d8cb9d1-b693-4808-9a96-add1a5d5ec76"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e5f32a6d-7491-433c-85c0-30b11a915915",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7d1c7acf-1e4c-4433-a7f3-2906df4f53e8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76abb122-8354-4e41-99ec-29eafb5fbef4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "41c5087b-2b89-4b21-a585-4e83adbc1763"
            }
          }
        ]
      },
      {
        "id": "ea9525bd-02a6-47a1-afcf-c041533afc09",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "26c8caa9-585d-443c-8144-de2663820225",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ab1ecdab-98b4-487e-82b7-53dfa9fd06ef",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1345f68f-34f7-4c13-bbf4-97e0d502086b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fc2cbb-d66b-4ecf-b65c-23af5c7c675e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f6019dea-61c7-4295-b03e-f09683888237"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc02d6a2-0117-433a-9b0d-9b6f235a47b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0061d737-23e5-469f-b000-7c2dad63f427"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a2e9c21-ec28-4bbd-a155-60d0233c7280",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "197709b2-6fa6-4f2f-a795-64b91ed91b0d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "688a280b-073f-42e9-abfd-00b73aae805f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fdc4a3d0-6f45-47d8-9398-c85af65d4f06"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4017f400-ba75-4965-8889-01a5ce6bf913",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a1b2b7e4-c6c7-4780-8b77-805186547c0a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ff244aa-716d-4c6a-9653-3cd741654f12",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ae07b941-2907-4710-84e5-d1fb930dea98"
            }
          }
        ]
      },
      {
        "id": "f65aab8a-6dd2-4fb4-b7c4-09080e8d5322",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "62369b69-dd2b-4efc-b1f0-302d23464472",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b96d3808-9fee-44a0-92c6-2c2377b8774f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e111f816-c707-468d-b05d-436906facb84",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330a9a83-c84b-4dfb-b482-ca4fad37303f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c68fd8b-d550-4af9-93f0-f3f363fe2b23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80f4a65-6492-4761-91e7-451893390c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f30ff88d-64d1-4a3c-ac4e-00743312036c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e2aec86-d90a-4ea4-9dfc-4560d2093cb2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95e7dcd5-d4b0-4708-a13c-4fdd526efc4b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "22b928f7-f891-4f9b-924a-0b5c61687eb9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "558bafda-9cba-4aa6-a235-3d8fee9a2197"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4e2e193a-24f6-4eb8-8efe-26ddcd90a62b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8ceec5d8-52ba-4c5d-b421-97fb94ce5cbb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d733798-7855-4f9b-8fcb-7406f16a1397",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc207b52-6f9d-469f-bba4-9fa0318c4f1f"
            }
          }
        ]
      },
      {
        "id": "9a1384b8-6d70-4288-8055-1ea6790313f4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f189e0ea-7241-4a1b-bd52-c5cdfa834419",
            "name": "Negative Testing",
            "item": [
              {
                "id": "98631435-1f41-403b-9291-22fa2157ac5d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "62ce73d7-3c9f-482a-88ad-f47cd915362b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab270ae-ce8a-4be1-acd3-84ed34aca19b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8ca58fa-d340-476b-9fe6-753c9dcf528f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cee53dd-7f5d-471b-bfa3-c90bb2221973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4d2e025-91fe-477f-b66c-e594ae5b2fb8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a46b87ac-6c9d-4316-9198-d8e5711aab3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0029ddff-4b32-47a7-adf7-875bed182418"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2631d982-2029-47f4-a515-4bffdb45fddd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eac2baf2-ba7d-4ec9-b95a-040739c494d0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ffc24467-7077-4afe-9ab5-101edfacf887",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5bc30365-3cfd-492b-be0e-500316ad363d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3de83016-622e-459c-a706-dfe10a1a27cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb23bb36-faa6-4296-9c66-ac0c89d5ca03"
            }
          }
        ]
      },
      {
        "id": "13600f48-27bb-4e47-a780-19859198ebdc",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "38e8639e-4a41-470d-8cc4-20c92fea1ae4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5954a6d8-e8b1-4a48-bc67-efc308313f43",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ac561746-961b-4ec9-b5a5-e9f57e3b08a2",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "497668c3-6559-47f4-bb47-8b3855a82658",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50ffeb8d-a5ef-4506-bd8c-6c33152e4b50",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 262
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 51.58730158730159,
      "responseMin": 21,
      "responseMax": 345,
      "responseSd": 26.98008373069654,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1712795720344,
      "completed": 1712795741612
    },
    "executions": [
      {
        "id": "2a6f3832-d7c8-4c9e-827c-6da4dcd8cb40",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7abbbb04-b799-4b60-8724-c199140ca276",
          "httpRequestId": "f2b27227-3770-46d9-b2d8-4cd2a2dd84b9"
        },
        "item": {
          "id": "2a6f3832-d7c8-4c9e-827c-6da4dcd8cb40",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f9e86d33-bb95-470a-a1f2-063d79e9b167",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 0
        }
      },
      {
        "id": "547ef62d-cb9b-4ed9-8033-622fabca6ab8",
        "cursor": {
          "ref": "e698390d-fc17-49cc-b93c-2f46802f3221",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "669101b5-3c09-49fa-a8b3-5361460b1b02"
        },
        "item": {
          "id": "547ef62d-cb9b-4ed9-8033-622fabca6ab8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "4ef5a768-df2e-4dfb-8f46-4b3835bb9031",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "d2f5c3a0-536d-4334-8a52-795f44f42d23",
        "cursor": {
          "ref": "35be595e-d7fc-41e3-98f9-849a4c289185",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "aae64568-2e56-4656-a6ce-4c555a75a059"
        },
        "item": {
          "id": "d2f5c3a0-536d-4334-8a52-795f44f42d23",
          "name": "did_json"
        },
        "response": {
          "id": "59c5ef61-8115-4077-b79f-7e8fec4f022f",
          "status": "OK",
          "code": 200,
          "responseTime": 188,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e83ccc29-ddf4-4a9a-8867-275fa77d37fb",
        "cursor": {
          "ref": "df2551d5-9328-49ad-936c-e30fc9c19860",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8e0891c4-5b99-414d-89bf-822f6e6e50ce"
        },
        "item": {
          "id": "e83ccc29-ddf4-4a9a-8867-275fa77d37fb",
          "name": "did:invalid"
        },
        "response": {
          "id": "f5c5b17a-840b-472c-8d8d-f17e85ce23bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e83ccc29-ddf4-4a9a-8867-275fa77d37fb",
        "cursor": {
          "ref": "df2551d5-9328-49ad-936c-e30fc9c19860",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8e0891c4-5b99-414d-89bf-822f6e6e50ce"
        },
        "item": {
          "id": "e83ccc29-ddf4-4a9a-8867-275fa77d37fb",
          "name": "did:invalid"
        },
        "response": {
          "id": "f5c5b17a-840b-472c-8d8d-f17e85ce23bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d53217-0fb1-4baf-af47-ca6dcd6f220e",
        "cursor": {
          "ref": "eab8a311-f361-42a0-9df9-092c42031c43",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7a0f901a-d3e9-4cb9-8561-5496cf7ce2b3"
        },
        "item": {
          "id": "62d53217-0fb1-4baf-af47-ca6dcd6f220e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "87734a41-cbc2-44e0-901d-c6f196866613",
          "status": "Not Found",
          "code": 404,
          "responseTime": 122,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159f16d1-4854-4bcf-94dc-b5024a0d8ad4",
        "cursor": {
          "ref": "6f057c64-3d27-4a6d-bf9b-395aa9102741",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ec538a29-8ee1-428a-91a9-0b59fa8d7b78"
        },
        "item": {
          "id": "159f16d1-4854-4bcf-94dc-b5024a0d8ad4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "10ad4f4b-e8e8-4afa-a612-3736ad70d1df",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53baa6f1-ef2e-4da9-926c-c82280fe26f9",
        "cursor": {
          "ref": "3ee08d80-a4ef-481b-84df-a75364ea05a4",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9e496d0b-9f8f-45ea-9172-1e5ece744bea"
        },
        "item": {
          "id": "53baa6f1-ef2e-4da9-926c-c82280fe26f9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "04d3781e-ee6a-42b1-b070-7b5b049e5ac8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62f82c4-d1e4-45fb-abd9-33bdbda836e0",
        "cursor": {
          "ref": "a1e821ea-da34-4238-aa8c-39a7ebe3a25f",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bfa21b42-cd15-4b11-846c-b0b938030b52"
        },
        "item": {
          "id": "d62f82c4-d1e4-45fb-abd9-33bdbda836e0",
          "name": "identifiers"
        },
        "response": {
          "id": "b99af724-e72d-4668-a6b0-01caf57c660d",
          "status": "OK",
          "code": 200,
          "responseTime": 237,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcafd56f-4d7e-4fcb-9b36-d598b648810e",
        "cursor": {
          "ref": "b6127127-c910-40e7-b8df-4187f3984fa9",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ebf37bfb-e84b-4eaa-b037-81a70ce02f91"
        },
        "item": {
          "id": "bcafd56f-4d7e-4fcb-9b36-d598b648810e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f88da490-50f5-44a1-89a7-4d47e2923966",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd7dbf6-224a-4224-95a7-962ccd9b022d",
        "cursor": {
          "ref": "956fe5ed-7a75-441b-9591-555a7455f29e",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4e8e322c-69f8-4a96-8e03-dc2e9be43e6c"
        },
        "item": {
          "id": "8dd7dbf6-224a-4224-95a7-962ccd9b022d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e75df3dd-ab1a-4918-bd53-f6771bce79dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b39c283-a590-4e92-a3cc-64374a6529e3",
        "cursor": {
          "ref": "a2fee4a6-94eb-4059-97ba-f33f3d3db50e",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a5711047-b99a-4eee-a118-70262593da4e"
        },
        "item": {
          "id": "3b39c283-a590-4e92-a3cc-64374a6529e3",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b899f1b2-df7b-4759-b342-aa4ec8e01c71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b1974d4-4507-4b5d-b1eb-3c2fa14f5bb6",
        "cursor": {
          "ref": "0cf0c276-9f83-4475-aeb1-7754f78e4444",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "95183b75-a599-4f7f-a88f-f6aabedd547d"
        },
        "item": {
          "id": "3b1974d4-4507-4b5d-b1eb-3c2fa14f5bb6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "354b41b3-e158-4d6c-8dd2-92eb10c0bab2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e0c35b-d673-40bb-96e1-8d83fd04d932",
        "cursor": {
          "ref": "330c5153-f841-42da-8d3f-21400b32a789",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2d81f8e6-0fc4-4942-a966-2d05aaaf585d"
        },
        "item": {
          "id": "24e0c35b-d673-40bb-96e1-8d83fd04d932",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "60ee3417-2cb7-4b43-85e0-cbef0400cd13",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56690754-3b03-4478-a204-a3405f0a6502",
        "cursor": {
          "ref": "cf1864b4-4385-4ac4-b64d-eca4ad1d0771",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "27cc8c5f-92a1-443c-aa3f-760606357815"
        },
        "item": {
          "id": "56690754-3b03-4478-a204-a3405f0a6502",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "92d41588-9e8b-48f7-8bd7-cbd8c93b383d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac7e76c-3a03-4804-affb-6dad2c66de26",
        "cursor": {
          "ref": "c4d29d6e-3f4d-4fd8-a9d5-b28d0ab49619",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "686b7a0b-54ee-465a-b9c1-e53a479e96d0"
        },
        "item": {
          "id": "0ac7e76c-3a03-4804-affb-6dad2c66de26",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0fcd310e-a646-41fd-80b1-f0f2fb2868a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66696b32-524d-40c8-b08f-64c11868e629",
        "cursor": {
          "ref": "4ae10b23-ffcc-46b5-ad4b-f6032a84160c",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "192058f3-bd25-4a8d-9ac4-fb4df27c2d76"
        },
        "item": {
          "id": "66696b32-524d-40c8-b08f-64c11868e629",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "97d343e4-dbfb-4f55-b5a2-47b626d88c9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be6a8ff-bbbc-460e-b6ae-2745c822f2d0",
        "cursor": {
          "ref": "ad12a643-7c06-4c1d-b70e-af8804feabb7",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2b26584a-5684-418c-ac6b-169da1f061ff"
        },
        "item": {
          "id": "0be6a8ff-bbbc-460e-b6ae-2745c822f2d0",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6d201d76-6bba-4da8-be5f-4731314df141",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f223f9-3652-4093-9905-cef7de3522a9",
        "cursor": {
          "ref": "678c967d-87a9-457b-b0db-b3322de823ac",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6529c91d-b03e-43c7-8a59-b34f865c3415"
        },
        "item": {
          "id": "40f223f9-3652-4093-9905-cef7de3522a9",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e9a18816-6dff-468c-98a5-d4121555dcef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a29611-3ec7-421c-8ff9-32243354b3bc",
        "cursor": {
          "ref": "0648d959-4f38-48c7-88c1-56bee29a3a56",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0c374261-b2a7-4661-a29d-5b2ffb5b6b03"
        },
        "item": {
          "id": "60a29611-3ec7-421c-8ff9-32243354b3bc",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "70f73dd6-6f77-4697-a737-26f41a7077b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee409a1-9f18-4372-a6db-1c399105ff62",
        "cursor": {
          "ref": "b3c06416-e779-4269-ac04-02c7d3ae0231",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "55153ffc-ad65-495a-be3c-ea0c10641d9f"
        },
        "item": {
          "id": "5ee409a1-9f18-4372-a6db-1c399105ff62",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "381a06fe-2e87-46d4-83be-56c1b5daa481",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e57a07-c63c-4de9-8394-4984715a3c4f",
        "cursor": {
          "ref": "725f0e0b-eb2c-4fa8-9cf4-a3535dcd267d",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c830d27c-9898-4fbc-9136-76e2956ac334"
        },
        "item": {
          "id": "85e57a07-c63c-4de9-8394-4984715a3c4f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "cbda3163-e34d-4958-b91a-2aec71ee97f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16685e43-da9e-4c92-be17-bacea14c6fd0",
        "cursor": {
          "ref": "e2b31b04-3fbd-4e49-b726-cd6316b47378",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "75ca7107-db52-471f-a7f1-cee8a4d34cc4"
        },
        "item": {
          "id": "16685e43-da9e-4c92-be17-bacea14c6fd0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "346968cc-dac2-4e8a-9597-1292fe47373c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce2c0c6-6db1-4cfa-98d2-2f94900fb1f9",
        "cursor": {
          "ref": "1912f4d3-4396-448a-aafb-ed47b2a92b8b",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "edee8e87-350a-44c2-af0e-c708befb31b8"
        },
        "item": {
          "id": "6ce2c0c6-6db1-4cfa-98d2-2f94900fb1f9",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "652e8a64-581b-40c5-9bd5-47e4e92471c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddf3995-fbb4-4410-88fe-c27272832ca3",
        "cursor": {
          "ref": "c1a00df2-400c-46b0-88a0-06f62cf320d8",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "77b69ff8-8fc1-44c4-9e00-efd99497f956"
        },
        "item": {
          "id": "7ddf3995-fbb4-4410-88fe-c27272832ca3",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "14f40c06-c448-43ca-af0f-53ab563abb0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e17c75-eae7-4e81-93a0-85cc51fcf640",
        "cursor": {
          "ref": "4a3fffb2-b0b0-41f9-8e25-e0b88c68abb3",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9b1225e1-0c50-4fd6-b33d-703c8d6198e9"
        },
        "item": {
          "id": "40e17c75-eae7-4e81-93a0-85cc51fcf640",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "911758f1-f557-4258-a88a-9bff813842e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88be256-5ca1-4c6c-9d5c-afec061c2b84",
        "cursor": {
          "ref": "6d62ca24-9980-4fd5-9347-55f2af2d874b",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ca8c1f79-81a7-44f7-8ce5-4c9a13d56052"
        },
        "item": {
          "id": "a88be256-5ca1-4c6c-9d5c-afec061c2b84",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2bdc30d3-f99a-42ad-84d7-2bdd54fe5b58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7081068-32e6-402a-acdc-e7c8982238e3",
        "cursor": {
          "ref": "c213c372-2cc3-4372-ba04-9ca0bd8c7b08",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "cc82522e-3925-4581-bdd1-097d9eda659f"
        },
        "item": {
          "id": "a7081068-32e6-402a-acdc-e7c8982238e3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "caaddebd-210b-41d9-bb01-5bb9b15292d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3558b3c-0efc-4fba-a682-94a9d8056926",
        "cursor": {
          "ref": "0e90ca8f-b376-4af9-bdf7-7461a8e6a6b9",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "90a3a0cc-8cc7-402a-82c0-135c6eeaa269"
        },
        "item": {
          "id": "b3558b3c-0efc-4fba-a682-94a9d8056926",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ec794ea6-e7e8-4dc1-9196-1afbb9415c64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca365999-aee1-4ac4-a631-45c61251f3d3",
        "cursor": {
          "ref": "9e134468-e988-4d1b-8f23-c6a0c4ffee7e",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "68871ec1-8671-49fe-8608-3d5f8771c783"
        },
        "item": {
          "id": "ca365999-aee1-4ac4-a631-45c61251f3d3",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4f44db5b-60fb-40b3-9aeb-755cbd7f8ce6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70adb199-82b8-4a96-9e78-b91b2c2060d3",
        "cursor": {
          "ref": "68ca6472-114f-4b9b-b3b5-05254be960bd",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "069d1bb4-e297-44cf-b47e-5d3ce0b54d18"
        },
        "item": {
          "id": "70adb199-82b8-4a96-9e78-b91b2c2060d3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4f8abad2-bfb5-4a49-ba8b-c001a3098146",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1617622a-6e28-4a70-b4fe-47c424c3c154",
        "cursor": {
          "ref": "2fc7be0c-787c-4fbb-946c-c94800988e9b",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2bd07859-1b3b-4c19-8a61-16e4f64bd556"
        },
        "item": {
          "id": "1617622a-6e28-4a70-b4fe-47c424c3c154",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2c033f19-cd7b-4111-a5e5-dddf6f73c6fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57220943-3025-402c-b333-a9e2a4f876ba",
        "cursor": {
          "ref": "6ffd54c5-7971-4df7-9eca-b5b9ad2c66af",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3de2e530-66bd-4ec6-a41b-75d396f8dd40"
        },
        "item": {
          "id": "57220943-3025-402c-b333-a9e2a4f876ba",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2fd5599c-5d03-4bdd-bce6-505c8b428bbe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e9239b-a534-4875-b26f-2146a416f920",
        "cursor": {
          "ref": "10245a49-7bbb-4051-b3ca-680b05e14940",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "775f2a22-d607-4d18-a5fc-e50ad877b200"
        },
        "item": {
          "id": "20e9239b-a534-4875-b26f-2146a416f920",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ae4386eb-cc5a-42dd-b43c-aef67483b967",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e75fb1-c790-4ddb-be51-9df740a7bbb1",
        "cursor": {
          "ref": "6b15f54d-4e98-450e-ab2e-ef9fb9eb275d",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "adfb160a-2d4c-48b8-ab23-9d9f4b1294da"
        },
        "item": {
          "id": "c3e75fb1-c790-4ddb-be51-9df740a7bbb1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "81eede9a-8382-4e85-ac8b-b01c9401ec41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "241772e5-6557-49d5-bb52-e19bcec2ed11",
        "cursor": {
          "ref": "b2a7999a-5db9-4cf1-9e53-ca4bcc3c0c81",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "af31b24c-88b2-42bb-b786-8ae746ca2b8f"
        },
        "item": {
          "id": "241772e5-6557-49d5-bb52-e19bcec2ed11",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3d8628fa-da8e-4fa4-b718-ce236f0d4f96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fddd3262-de82-43a6-9125-08ebb5513ae4",
        "cursor": {
          "ref": "89c0e075-343d-41d3-b117-2547991e5340",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7856ec81-87a8-4421-bb33-77549836b51a"
        },
        "item": {
          "id": "fddd3262-de82-43a6-9125-08ebb5513ae4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "096fabee-fe45-4da9-9687-efde4e037caa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e7293e-cc32-417d-9067-2e8390eeedb7",
        "cursor": {
          "ref": "2fd49dbb-4272-429b-b4f8-fe12a1d31c8a",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9fa587a1-e7f8-4d60-ae56-ed25ecf1bb0f"
        },
        "item": {
          "id": "a2e7293e-cc32-417d-9067-2e8390eeedb7",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "531641b4-16b1-412b-b94b-74cbe4e71dd7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea416d80-0f5e-486b-b21c-acea1eea0c5f",
        "cursor": {
          "ref": "9916c384-3c09-428f-8ce0-94a161f8d8f3",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "bef9f0c3-9fd3-49e6-8ebc-c7665fc8211b"
        },
        "item": {
          "id": "ea416d80-0f5e-486b-b21c-acea1eea0c5f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "939b0474-7917-4a18-b066-c067cb973c5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "055bd67b-1f78-4ac4-8abf-3a4eb1b1c0e0",
        "cursor": {
          "ref": "53476b5e-f0b6-46fd-8404-0395fa71296b",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2edd8200-7575-4b15-9d66-9f1cd2a580a6"
        },
        "item": {
          "id": "055bd67b-1f78-4ac4-8abf-3a4eb1b1c0e0",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "649cf081-bbd0-457a-b3e6-675fd8bffea7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b90eb804-992e-48a9-8d60-91d6f1e20148",
        "cursor": {
          "ref": "872ec788-246d-4d7b-beed-f4d8fcafc18a",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "899da4ce-634a-406c-8d6d-7cf54495f01a"
        },
        "item": {
          "id": "b90eb804-992e-48a9-8d60-91d6f1e20148",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c4ce98cb-73e1-4775-8bbe-bf692bfda419",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814282a1-4451-4320-b708-a1f5f5d3af7a",
        "cursor": {
          "ref": "aee6db8f-b51b-47cb-bb87-447c1ea98549",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ca77a2a2-cfb5-4f10-8fd4-c0133691f876"
        },
        "item": {
          "id": "814282a1-4451-4320-b708-a1f5f5d3af7a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4969d293-e4ae-4b2c-8f7b-d8fcac8a5cca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf23d4d-4de8-41fc-8d6d-47fff45fa553",
        "cursor": {
          "ref": "29ef8c16-e8e0-484b-8efe-8f061dc9923b",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9351171a-c8cf-4d8d-807f-98ecf670ad2a"
        },
        "item": {
          "id": "4cf23d4d-4de8-41fc-8d6d-47fff45fa553",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "eefb65fe-e915-4d08-b8ec-4a3a9d35414f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528feb3a-0e0b-4fc0-9715-31dc5aeb5321",
        "cursor": {
          "ref": "3574dd17-b6a0-49a8-8efa-2585edd2bf35",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f0f79beb-7fd2-4e98-88a1-1f30b4524405"
        },
        "item": {
          "id": "528feb3a-0e0b-4fc0-9715-31dc5aeb5321",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1ec53277-9887-422c-be86-7ec17b3cc260",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f97aa0e-7fe3-4a64-b97c-7963f3d2ea22",
        "cursor": {
          "ref": "0b041e6f-1e76-448e-8559-3bce991fa1d8",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0c71e256-86a1-41ea-90c4-2b5259ca9f43"
        },
        "item": {
          "id": "1f97aa0e-7fe3-4a64-b97c-7963f3d2ea22",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "bfdaadbf-0312-4775-b861-0799b0c014bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbeb488d-3767-43c2-8858-6a798a4719f3",
        "cursor": {
          "ref": "3ec6e824-c2d1-49f8-88c9-c857e431e253",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ac392aaa-84ce-425b-a11f-85c3acc7a31f"
        },
        "item": {
          "id": "dbeb488d-3767-43c2-8858-6a798a4719f3",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "069385e0-0da9-4807-a760-65a7e986f587",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21504f3-01b3-4835-bf07-c21df6c86bc7",
        "cursor": {
          "ref": "1bb8c96a-6aa3-4b77-8983-098cbf2b6fbe",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0e2fe9bb-1773-465b-9d2d-afba10062282"
        },
        "item": {
          "id": "c21504f3-01b3-4835-bf07-c21df6c86bc7",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "bfba7a57-13b3-48cb-9463-846930a369b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4f17fd-07ca-4391-b604-9779841739ac",
        "cursor": {
          "ref": "c0547ab5-ba7e-4526-9ae1-7591069e7a77",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "618bdc63-0c6f-47f9-8878-cb729e2f56e1"
        },
        "item": {
          "id": "bc4f17fd-07ca-4391-b604-9779841739ac",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "27d2983f-68d8-4b09-8de5-88d222e13b99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a02ed62-1394-4c33-9654-fae283478534",
        "cursor": {
          "ref": "bc34d66d-fcfe-4116-93f6-e5e7625788ad",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "497a9b13-dbe9-491f-921c-f96eb8388b6b"
        },
        "item": {
          "id": "0a02ed62-1394-4c33-9654-fae283478534",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d47b02c9-3f88-49a6-8c93-05e2dd79edbd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c38d922-80f0-49e6-90fa-fb5804d8cb8a",
        "cursor": {
          "ref": "44f2d323-6a7c-4ecd-bc43-e0cfbbeac218",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "bd5070e6-5a8f-4d3f-9cdd-736b0bd16100"
        },
        "item": {
          "id": "0c38d922-80f0-49e6-90fa-fb5804d8cb8a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "fe5256c7-ef17-452a-aadd-1e728cac50f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce982cd-f0aa-4139-9fa9-f6e50d5de52b",
        "cursor": {
          "ref": "4be96788-0e72-4752-9ff8-89ad0ddaf1f6",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "36a00ef7-5d83-4171-b8a7-21d5124d26f9"
        },
        "item": {
          "id": "1ce982cd-f0aa-4139-9fa9-f6e50d5de52b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "520e9f84-411d-4dc9-9100-2dd91b3e3068",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad34587-2acd-400c-bd0d-d2d7543d9753",
        "cursor": {
          "ref": "8039f561-dba8-4308-8dff-007839b4a721",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7886eac6-538b-4d69-ad9a-0556f97bc3a5"
        },
        "item": {
          "id": "4ad34587-2acd-400c-bd0d-d2d7543d9753",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "05df5497-b4ea-4c2d-b9ce-2edeff335c1b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e806be69-d50e-4235-9ea4-211954419b8d",
        "cursor": {
          "ref": "e852fb85-ec85-4ea3-8659-be95ea181821",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9d898cda-aa5f-44e7-a895-dca8519f79e1"
        },
        "item": {
          "id": "e806be69-d50e-4235-9ea4-211954419b8d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "46f998ee-ddef-4c8d-aac2-734f5e258507",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019febeb-4570-44dd-96c5-56bc30e98ca4",
        "cursor": {
          "ref": "dd6f1389-3cbf-4bd2-9dc5-876974fc1048",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9dd2ea31-7d91-4bfd-a934-af941084fab6"
        },
        "item": {
          "id": "019febeb-4570-44dd-96c5-56bc30e98ca4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "85f5e6de-9b1f-4ef2-aaba-811c100ad2db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e489d0-4b18-46f8-8668-36c7467891dd",
        "cursor": {
          "ref": "3a747a75-3531-4c17-9e43-60c3bd5ed742",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "36abed13-9994-48ed-a939-0b06552a041a"
        },
        "item": {
          "id": "d5e489d0-4b18-46f8-8668-36c7467891dd",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "21603cf5-bf77-41d2-80f2-019913420638",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd716326-fd4b-4d1d-a7b1-0ffc08d3f92d",
        "cursor": {
          "ref": "0b664537-0c07-4445-b821-e3ad0ae37fa3",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "cb674d15-fecd-4ca7-b01f-582b00d6a4fb"
        },
        "item": {
          "id": "dd716326-fd4b-4d1d-a7b1-0ffc08d3f92d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "fc5b4d01-7809-4c2d-867e-fd76efba44d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68b6022-ab93-4413-b694-1a1545677611",
        "cursor": {
          "ref": "aac09038-6148-4150-aa73-b747f5c4b0a5",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "fb88c070-f5cd-406d-b70f-7ca6f4f3b7c4"
        },
        "item": {
          "id": "f68b6022-ab93-4413-b694-1a1545677611",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b3726516-8fc0-4225-b759-d66836fbc6f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d489b412-45f6-4533-96d0-548c6f74cfc8",
        "cursor": {
          "ref": "1409fb25-0539-4749-9601-73692cd040b4",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "56dc6719-692b-4126-b67b-ea75f1e93be1"
        },
        "item": {
          "id": "d489b412-45f6-4533-96d0-548c6f74cfc8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d388e8b7-8ac9-4160-9539-4585cac4bd99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0541820-43d9-4764-8eb6-e287cb996e3d",
        "cursor": {
          "ref": "c47856c2-1fc6-4a1e-8f7c-a5ee722de019",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9acc815f-1a8d-48ac-b364-557ac115f200"
        },
        "item": {
          "id": "b0541820-43d9-4764-8eb6-e287cb996e3d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5b4fad84-cd3e-4282-aaeb-1d057e6093c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f8d9ed-3eed-4062-845b-314ea77e7986",
        "cursor": {
          "ref": "46027040-90fe-4751-acf1-7dd447e07cc9",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7707c436-228d-4b64-901a-2d28ca6f2551"
        },
        "item": {
          "id": "09f8d9ed-3eed-4062-845b-314ea77e7986",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4ce23ae3-1c7a-41a1-ab7b-16963bff3ac3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c812ae83-04d6-4520-bccd-f9406f933f72",
        "cursor": {
          "ref": "2b07c6f6-b00b-458d-91ef-473b94c5e083",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f53816fb-4361-4f9c-8fb9-2dbf59f23b67"
        },
        "item": {
          "id": "c812ae83-04d6-4520-bccd-f9406f933f72",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "232d1fcd-8f13-4b5d-9954-70b55dbb489c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61c92f5-502e-408c-afc9-65dfa9a3cb50",
        "cursor": {
          "ref": "aae1ca70-c095-4c60-a86d-e67a9a613d63",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "472480be-8320-4a02-9499-9d3c58cfeb3b"
        },
        "item": {
          "id": "f61c92f5-502e-408c-afc9-65dfa9a3cb50",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2e373949-de58-4556-ae0b-c4e9ff1a28ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "825b515b-8658-4244-b2cb-296df40248b2",
        "cursor": {
          "ref": "9e52a3ac-7b55-4548-b854-5effabc0bba8",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9e2d08bd-7446-49d5-af92-724348e7a622"
        },
        "item": {
          "id": "825b515b-8658-4244-b2cb-296df40248b2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "024b96f8-5532-4486-a412-c4a5e30ea30b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd070533-f30f-4ae5-bc41-7edb4b22a444",
        "cursor": {
          "ref": "704bc903-f903-4e4e-baee-e73f3a3553be",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "131a8ed6-0baf-4f3a-b994-22dddfe3db0c"
        },
        "item": {
          "id": "fd070533-f30f-4ae5-bc41-7edb4b22a444",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5a397c30-db43-4c83-836d-bad2bb63393d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6462738-7a08-4f73-ac7e-7d732078ec01",
        "cursor": {
          "ref": "e830e91e-ba60-46bf-935c-ca6c99a7a17c",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a5111e53-c58d-4dff-a20e-a1fd92ddbfa8"
        },
        "item": {
          "id": "a6462738-7a08-4f73-ac7e-7d732078ec01",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3d124093-03b2-4e59-80d8-800d8035e81b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a26754b8-2267-4f1c-8486-f29e3ae114e8",
        "cursor": {
          "ref": "a8664b6e-a506-4e5a-9a76-1ae6bd7602c5",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "84bbeae6-2f56-4953-8ba8-1fe79f38f588"
        },
        "item": {
          "id": "a26754b8-2267-4f1c-8486-f29e3ae114e8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5b199f6d-6948-42db-afae-636f54ac549f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0c563b-b46d-489b-892b-4e1f0933bd82",
        "cursor": {
          "ref": "352b8f0d-7ce6-4b8d-9e51-8ee01dade388",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1711f424-b87f-4c20-a306-dd80e1647960"
        },
        "item": {
          "id": "0c0c563b-b46d-489b-892b-4e1f0933bd82",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "dfeb1de2-8aa2-419c-aafb-abffa09a8fe7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9bc8dc-565f-4f7c-bb9a-5c95ed60ca09",
        "cursor": {
          "ref": "9d7fb36c-e82d-42ec-ba41-13ac33aaa1bc",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "966dee3f-8f05-48a1-b937-8a840a2b069f"
        },
        "item": {
          "id": "7d9bc8dc-565f-4f7c-bb9a-5c95ed60ca09",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4a9f3687-cd87-40bc-a4b7-b71b65b92aff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5abf5b-8934-4c4b-abbb-04e25ff0d35d",
        "cursor": {
          "ref": "5d8569de-2f7b-4e19-94ff-646f6481027b",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a578d6ba-39af-4565-92bc-e87ba6df39d3"
        },
        "item": {
          "id": "3d5abf5b-8934-4c4b-abbb-04e25ff0d35d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c024e60e-3b92-47ed-81d9-0a7f7707659a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f093eb-8fc0-4e2a-adc7-f40fc92fde49",
        "cursor": {
          "ref": "6ee6bdf7-50d3-4737-919f-f2b9353130b3",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6f6b1d9a-0855-4307-99c2-7898baca81d9"
        },
        "item": {
          "id": "68f093eb-8fc0-4e2a-adc7-f40fc92fde49",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "35ee2995-86ca-45ea-b27f-bf4d53c3bd81",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d593523b-88e6-4ccf-8b35-7ed89e0153f5",
        "cursor": {
          "ref": "45af9671-f8c2-40f7-ac23-6590413d6eb6",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "13070d88-e341-4cc3-b420-1d756006523f"
        },
        "item": {
          "id": "d593523b-88e6-4ccf-8b35-7ed89e0153f5",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "68258491-d6fc-44ac-91f6-28e8e82bd6ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f734422-e6bf-4553-83e7-2f0ba96de55b",
        "cursor": {
          "ref": "f6dde794-0c32-4a65-bddf-633283b9be9c",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "88c486ad-7440-4b8c-bba6-6051277314d3"
        },
        "item": {
          "id": "6f734422-e6bf-4553-83e7-2f0ba96de55b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "95827c5a-cb17-4bcb-9818-566521a8f960",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b849440-cf95-4d5c-ac17-cafc806b99fb",
        "cursor": {
          "ref": "6fe688f0-11fd-486e-94d0-be6696d87264",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "69e4d80e-7ec1-4b6c-851b-e3d90591dc49"
        },
        "item": {
          "id": "3b849440-cf95-4d5c-ac17-cafc806b99fb",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8e55385f-2b87-4cc1-b382-2872860f0ec7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b24e5a-5a39-460c-9de3-bee9e35f4ea6",
        "cursor": {
          "ref": "7255f40c-08e5-42ca-8a9c-f05ea0ad7109",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "be35fdb4-3874-493e-a9be-89f559a9a304"
        },
        "item": {
          "id": "65b24e5a-5a39-460c-9de3-bee9e35f4ea6",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "da07f0b6-c1dd-4007-b50a-c9cc101954df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "970f405d-8b8b-4473-a62c-b2cf126e8c88",
        "cursor": {
          "ref": "d5eeea9e-0915-49e0-8dc6-25c02f5656bc",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ad1cf10e-f370-47c0-a6d6-dc99f6c1846f"
        },
        "item": {
          "id": "970f405d-8b8b-4473-a62c-b2cf126e8c88",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "32126cb0-5e2e-4dfd-8eac-453225b1d300",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc85ebf-fdca-4090-a15a-2b3cdde899c4",
        "cursor": {
          "ref": "36093d63-bc8f-4802-8700-a3bb44ae9f7c",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f19c165d-6ee0-41eb-837f-c3184be7c8fa"
        },
        "item": {
          "id": "2cc85ebf-fdca-4090-a15a-2b3cdde899c4",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "cceb2a19-3108-4a8a-b874-7ff8a746cbc4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "005b4867-1223-4e8f-80df-69b39f9d502f",
        "cursor": {
          "ref": "1c8cb84d-2188-4b6a-a6de-0c3b7e9d9090",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0bedb5c7-e121-47a6-9d33-457a7ead62f0"
        },
        "item": {
          "id": "005b4867-1223-4e8f-80df-69b39f9d502f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6e08aab7-3b6d-408d-a427-3dc2c2f255a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e40778-1cc1-4375-acac-8cdaa7f5b7d7",
        "cursor": {
          "ref": "5b646fad-d1d3-4af1-b407-6f543db04057",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b3d6e8e5-6b04-4021-a2b3-5649fcfb55a3"
        },
        "item": {
          "id": "64e40778-1cc1-4375-acac-8cdaa7f5b7d7",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ecf88510-49ee-4dee-9d49-b7479375e5b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b206084-9f71-4e23-a787-191558a114c7",
        "cursor": {
          "ref": "33ebb141-4dfd-4084-95cf-b3a517a754c5",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ab3e54ef-badf-4e1f-839e-a6975d83321d"
        },
        "item": {
          "id": "4b206084-9f71-4e23-a787-191558a114c7",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8354932d-efe6-4f76-90eb-831b94cbf7d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4416551d-9340-4a2a-87e4-a6fa82f2ced4",
        "cursor": {
          "ref": "9d6caf66-2a92-4bbe-89e2-44ff43f34473",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "516829e3-7c50-48c9-bf1c-17233a53923a"
        },
        "item": {
          "id": "4416551d-9340-4a2a-87e4-a6fa82f2ced4",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a4fa13a9-7026-4236-84e8-9c4ad388b8a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff472046-1736-418c-ac8d-869fcb700a95",
        "cursor": {
          "ref": "1b2d610f-1c86-4f42-93af-af995ac41151",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2e421e9f-2828-42b2-9acb-039341758e7c"
        },
        "item": {
          "id": "ff472046-1736-418c-ac8d-869fcb700a95",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5d092891-08eb-4ab4-9234-9628c0e5cd66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46258d9-6f18-4a28-9626-3b51803b23d0",
        "cursor": {
          "ref": "a78b4789-4daa-44d2-9cbe-8127c6727129",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b7b4cd71-a158-4ac7-8607-757c92cc8cbb"
        },
        "item": {
          "id": "a46258d9-6f18-4a28-9626-3b51803b23d0",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e8cbe3fd-fb73-432f-afc9-fbdb58406af7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09acfe92-5b15-4c28-857c-3b1ace2705ff",
        "cursor": {
          "ref": "53d5785a-7106-4643-9099-811331475add",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "bb486752-9fac-49d2-b7c4-7951fa63bbc3"
        },
        "item": {
          "id": "09acfe92-5b15-4c28-857c-3b1ace2705ff",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c00d40ee-87a3-4161-8c5f-d2c3fd853275",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579ed229-4c75-4652-a683-937a072a8880",
        "cursor": {
          "ref": "88185724-ae35-4d2d-8a11-ea862bdb04cc",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b2e93e46-0e1b-44a8-aa56-7ec451fa6f8d"
        },
        "item": {
          "id": "579ed229-4c75-4652-a683-937a072a8880",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4a18cff2-d68c-4655-add2-189c77eca76a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c4f2fea-3fb4-4d0e-9af6-5e07acca4fef",
        "cursor": {
          "ref": "3351af81-3d55-4ce1-8f51-e68bdc899368",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "0f5a6c83-f10f-4e3d-9048-280ee1176452"
        },
        "item": {
          "id": "7c4f2fea-3fb4-4d0e-9af6-5e07acca4fef",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9d24fd3d-53b8-4dd4-873a-d5b1a147f363",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f21e1061-14a8-4938-b0d4-dd00229fcfed",
        "cursor": {
          "ref": "83d32fb1-853e-49d3-a660-41ef73dd8ff4",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7c37838f-de80-40b1-80af-d868444493e9"
        },
        "item": {
          "id": "f21e1061-14a8-4938-b0d4-dd00229fcfed",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "52dd5e8b-7229-4ef4-bc6c-fca495ea0a0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96505718-c062-4d5c-b53b-0aef2a08f53a",
        "cursor": {
          "ref": "a4ce3f4d-0400-4b84-b1c2-7227838b8bbb",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a8074c96-398a-4d29-8169-657e37efb5ad"
        },
        "item": {
          "id": "96505718-c062-4d5c-b53b-0aef2a08f53a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d12f521e-3f61-42b4-aa02-d0dda2fbd99e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6c48ed-ff0c-4bf0-88c8-2c90dfd0f401",
        "cursor": {
          "ref": "20fc433e-f5d5-4e6d-994e-5153dec67592",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "bae5c953-a344-41c2-9642-86c748e503d5"
        },
        "item": {
          "id": "7d6c48ed-ff0c-4bf0-88c8-2c90dfd0f401",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2e308ad1-fc39-4226-8268-44424edc143b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f174e11-5395-41d5-bd56-6ddd8ef10700",
        "cursor": {
          "ref": "926fd18f-46e4-42de-addb-05105ea00252",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "cb999127-ad3c-4020-9a69-5244e90f4098"
        },
        "item": {
          "id": "3f174e11-5395-41d5-bd56-6ddd8ef10700",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "81f064c8-d70c-4338-9c47-b88171fad0e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3c63ff-7a16-423a-8f48-4022e2d5bdc9",
        "cursor": {
          "ref": "be564efa-0f7b-484e-98c1-aa3b8960b75f",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7753abe1-99e0-4dd8-b91a-7eb46dbb1e81"
        },
        "item": {
          "id": "fd3c63ff-7a16-423a-8f48-4022e2d5bdc9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "21be6a70-2b61-4c90-a668-6eadd11652cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde7b01e-1764-40aa-ae01-b9f5fddf5c2b",
        "cursor": {
          "ref": "56310fbd-b570-4d0b-a4f1-1c3dbaa1363a",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b0a68099-dbaf-45c7-b28c-200eaf47e7ab"
        },
        "item": {
          "id": "cde7b01e-1764-40aa-ae01-b9f5fddf5c2b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "0e73911e-ae89-40d9-980b-be59870e5422",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2928c2c-b488-49ff-b7f3-355f56f6d5b3",
        "cursor": {
          "ref": "014f3d85-5221-455f-895f-0e234a6194ee",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "bbfc0412-ae6c-4185-a4f8-dd1711f12e34"
        },
        "item": {
          "id": "d2928c2c-b488-49ff-b7f3-355f56f6d5b3",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6e3a50be-7d14-47e9-b092-b51d28702d40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd08d2b-797d-4e99-af88-8f8176d31bec",
        "cursor": {
          "ref": "b19a7b0d-65c8-4f2e-90d7-b6aaabe8f234",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f4afff2a-af67-465d-aa26-ab97362f086c"
        },
        "item": {
          "id": "5bd08d2b-797d-4e99-af88-8f8176d31bec",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "24e1a60f-3955-4a0e-b884-5b949ec121f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c45919-3856-497c-bc84-b6e242ea6d91",
        "cursor": {
          "ref": "11123607-8959-4f9e-9de8-f2de8ae86a5a",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "be347193-05fd-43b4-a582-30ce129db7c6"
        },
        "item": {
          "id": "d3c45919-3856-497c-bc84-b6e242ea6d91",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "da60b313-9126-473d-878c-695529c04454",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75db9084-7e91-40b1-8197-6fac9767239f",
        "cursor": {
          "ref": "187afc5f-0935-4aaa-95e7-d41c3714dca8",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "01c5726a-fef6-4a93-bcfb-5387397123bd"
        },
        "item": {
          "id": "75db9084-7e91-40b1-8197-6fac9767239f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c8faeacb-5678-487b-ab2e-ee6c9a731510",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d957840-6ea1-47af-8ccb-d3f4679bc115",
        "cursor": {
          "ref": "8ddf5307-99cb-4384-af79-de8cb649f7b0",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d646730e-524b-4c41-81a1-0ce05dab9b47"
        },
        "item": {
          "id": "4d957840-6ea1-47af-8ccb-d3f4679bc115",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "411e5817-5e62-414a-82bb-34f6e786fd25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a88a8e-f5de-4454-83fa-f875e036b0a7",
        "cursor": {
          "ref": "1d63ba9d-2498-45bd-ac6a-0479d58e02ad",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "67ec4184-be99-4891-a2a2-7856b1fbc74b"
        },
        "item": {
          "id": "55a88a8e-f5de-4454-83fa-f875e036b0a7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "cba2a61d-1e01-45e6-9227-bd625744f176",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065137be-741c-49af-bcd3-97f75e34828b",
        "cursor": {
          "ref": "3943fcf2-6b4b-4155-932c-8e74f7ffcff1",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "16c211bc-ec5a-43e6-baca-05aa4858b7ef"
        },
        "item": {
          "id": "065137be-741c-49af-bcd3-97f75e34828b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9af6f764-f637-4655-9875-7e1f44bf388a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cafa3844-57ed-48de-9094-aaf34c0efc01",
        "cursor": {
          "ref": "fede41ed-3150-4e67-b3a5-dfe2b9807bce",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fe6a1f65-afa0-414b-ba09-14bf346d7b2e"
        },
        "item": {
          "id": "cafa3844-57ed-48de-9094-aaf34c0efc01",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "56cccb84-9e06-480b-8731-43f646a6a5f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53601599-faf5-4072-a9c4-21bf000b2450",
        "cursor": {
          "ref": "b48b087e-f9dc-41fe-aa57-47f37d6e7bbf",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ad419f36-5e41-4bab-9bce-651640d6ce59"
        },
        "item": {
          "id": "53601599-faf5-4072-a9c4-21bf000b2450",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2216f85d-7028-406f-881f-8203bed0b68f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85fd997e-dbd3-4ae6-b68f-8a9b5f768c9f",
        "cursor": {
          "ref": "99a90711-ed9b-402c-86b4-257ca70971a7",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1ef12aa0-f5fa-41ec-9ca5-37dacf73b2c9"
        },
        "item": {
          "id": "85fd997e-dbd3-4ae6-b68f-8a9b5f768c9f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "071b0b13-81d3-4a69-b5d3-a75635d27bbd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ce3fb5-5379-4231-8f07-7e6e1d407d1d",
        "cursor": {
          "ref": "e2ccfdf5-783a-4cf0-8b8f-fbd6ce23e98b",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c633ec8f-16ef-4f86-9a28-37990760930e"
        },
        "item": {
          "id": "01ce3fb5-5379-4231-8f07-7e6e1d407d1d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "82681f9d-7d4e-4f5b-b486-99bf50956e3d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346b01df-6037-4840-bb43-52c20db3d764",
        "cursor": {
          "ref": "e3ed2f5e-c926-462d-8927-524562ebbf53",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "626d1893-416d-48af-8e80-f1968901ca34"
        },
        "item": {
          "id": "346b01df-6037-4840-bb43-52c20db3d764",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "85087471-a87b-462b-a709-e5a05c0ced78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c8ad0a42-9976-4673-a155-6edcdb4dff9c",
        "cursor": {
          "ref": "a0abf7a8-16cf-4d79-a566-c39f3aa95bee",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e893741c-eca0-4968-9167-841dee52aeb3"
        },
        "item": {
          "id": "c8ad0a42-9976-4673-a155-6edcdb4dff9c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ba9db590-204c-412d-95f0-8d31ec5b6acf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 204,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "0558df76-eed2-44e7-a808-aba565ca7d59",
        "cursor": {
          "ref": "8bf87aa8-611f-44ba-a9d1-c0da312185d6",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "74085381-8f9f-4f16-a978-86f929f9dcbe"
        },
        "item": {
          "id": "0558df76-eed2-44e7-a808-aba565ca7d59",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f0a728ee-922b-4873-88ba-4aaafe206339",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "9f281204-6078-4502-8385-fcad3206f159",
        "cursor": {
          "ref": "1e1f47ea-6396-4031-b0af-cd8c544b53a4",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d716fd36-4d42-4c5c-aaec-1fcd7daa91f9"
        },
        "item": {
          "id": "9f281204-6078-4502-8385-fcad3206f159",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "80842018-f6b2-4022-af2c-5f7258f32563",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "29f4daca-88e4-44c6-bbab-224ab143368f",
        "cursor": {
          "ref": "ee228c9f-b290-4c51-83cd-d601d16ac3da",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f3ef2efa-458e-4f85-b079-b91fc9a53c80"
        },
        "item": {
          "id": "29f4daca-88e4-44c6-bbab-224ab143368f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2cb0e5df-c3f0-4132-8932-37f27ee215b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "d3ecccdb-d44c-4ba4-b63b-ac289daee4ef",
        "cursor": {
          "ref": "74fae985-d87b-4c83-9be0-4968cc3e544e",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b0053c4f-2100-46b7-81e2-59ebe795a2d2"
        },
        "item": {
          "id": "d3ecccdb-d44c-4ba4-b63b-ac289daee4ef",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4a815832-5172-4d9f-9df1-79dccb33bf37",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "20a35750-ef41-41f6-89f6-4d7943db6ff9",
        "cursor": {
          "ref": "cdd061da-1ba2-4a77-ab4a-3aceb0c7238f",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2c01f8f6-9103-4a86-b216-7f3e47df493b"
        },
        "item": {
          "id": "20a35750-ef41-41f6-89f6-4d7943db6ff9",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c0584494-21c7-452b-94fd-a5c9326be7e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "db30dc2d-f52c-488a-a5ea-d9fb8219204c",
        "cursor": {
          "ref": "5bed1e48-2e8f-46a2-9c22-7db56cf99b39",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e3e7fc1b-c17a-497f-9d3f-da9f2ef490dd"
        },
        "item": {
          "id": "db30dc2d-f52c-488a-a5ea-d9fb8219204c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7e5c0d24-086f-4a6c-92b6-9cd94aa20552",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115a6710-4c3f-41eb-8b66-f1164ec39fe3",
        "cursor": {
          "ref": "14fb68a9-ec58-436a-ad62-412cae19edd6",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "26834700-976a-4f0c-9700-7856e4c50dd9"
        },
        "item": {
          "id": "115a6710-4c3f-41eb-8b66-f1164ec39fe3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5b169549-eb21-4ab2-89ff-70655730d422",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ccc39d9-2e82-4ec7-9286-85a07dc40e29",
        "cursor": {
          "ref": "a6c6859b-ac71-468b-8236-de6d517f7731",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "baa50843-464f-4f5b-91af-92346318dc2c"
        },
        "item": {
          "id": "2ccc39d9-2e82-4ec7-9286-85a07dc40e29",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5429ebd8-8931-4115-9b92-6647bbb9fe80",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3944c38c-3203-4620-8f0a-0560057dc8a2",
        "cursor": {
          "ref": "6e4b4662-e4b0-4c60-aa26-6a546d819692",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2d5c66dc-2b2f-486d-820a-38602df9282f"
        },
        "item": {
          "id": "3944c38c-3203-4620-8f0a-0560057dc8a2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "50d0f4ef-d408-479a-8c81-5738191e7d0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40a6d07-0004-4159-8aef-c67c44d5687a",
        "cursor": {
          "ref": "6b16c0d0-4ff8-402f-82f7-65fe7652881e",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9c190140-ac42-4c58-a46a-3393cd727dce"
        },
        "item": {
          "id": "d40a6d07-0004-4159-8aef-c67c44d5687a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "dfdace7a-f029-4738-8beb-5438fd5e7e06",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15240dba-bd02-449a-87d1-a63d629eaf7e",
        "cursor": {
          "ref": "38d168cf-a2dc-4ad1-860c-a3a80a272d72",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "811f2687-707e-45ef-9154-dcc77d005255"
        },
        "item": {
          "id": "15240dba-bd02-449a-87d1-a63d629eaf7e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "dae74dc5-787e-4785-a90e-56d00736434a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f8ff5e-b664-49fd-a89a-ebe41a1cae3b",
        "cursor": {
          "ref": "11c58034-22fd-4a8d-9219-361709f6fbcb",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "86317504-6ab4-4825-b4bf-a7ceb0a65aba"
        },
        "item": {
          "id": "29f8ff5e-b664-49fd-a89a-ebe41a1cae3b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9a1df828-d478-4610-a48a-2685e1b21be4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a423381-cfae-45ab-b313-87981b7063ea",
        "cursor": {
          "ref": "0be93b6c-ea99-4a4e-b6fe-227103ae04c9",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "014532df-423a-4cf6-8a18-0ceb76af8d38"
        },
        "item": {
          "id": "3a423381-cfae-45ab-b313-87981b7063ea",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3ab3b84b-0e1c-482c-bacf-f93b10b50925",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9ce3fd-1f2c-4524-ae5f-0d26a3047397",
        "cursor": {
          "ref": "1bbe65af-7328-40ee-a660-a939567df063",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c812470a-0a37-48be-909f-b5149279bfc0"
        },
        "item": {
          "id": "ea9ce3fd-1f2c-4524-ae5f-0d26a3047397",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "72e4b4b0-103e-4872-bd40-eac05242c2c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b3d9a9-06d4-4920-984e-ff589734f7fe",
        "cursor": {
          "ref": "944a68a9-165b-4355-89c5-ab6b0128afdc",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "fcf2cb2b-cb70-4929-940e-a6d9d1276a0a"
        },
        "item": {
          "id": "19b3d9a9-06d4-4920-984e-ff589734f7fe",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4b8ff1eb-3c04-4d6e-9fe1-ff7028d2e7e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e961d7-4ac8-40b2-81e2-faef7fe3bfa2",
        "cursor": {
          "ref": "81c60053-c83c-467f-8ffb-bd63a98e1e09",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8d2dc4cf-0d6e-4d55-991e-9a8267c7c9fa"
        },
        "item": {
          "id": "f5e961d7-4ac8-40b2-81e2-faef7fe3bfa2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b0ddc4ed-1094-41fe-969f-a7d6f6ba6738",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b0ac340-17f5-4726-aadf-6f9ad827249f",
        "cursor": {
          "ref": "c6e7dba6-340a-4faf-9b93-e80f11c28524",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a78f1c89-8f15-41a0-9b35-3023f2ef3689"
        },
        "item": {
          "id": "2b0ac340-17f5-4726-aadf-6f9ad827249f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bec245eb-bf8c-45db-aba5-d70a2c897b66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23427429-e59b-4cd7-a622-d43d27c764cc",
        "cursor": {
          "ref": "30f07f45-3dba-411d-b497-825d250a6f22",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "04c12c45-f575-4eab-94dd-c6593e82b6cf"
        },
        "item": {
          "id": "23427429-e59b-4cd7-a622-d43d27c764cc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8c9b3e01-1efa-4de7-8592-3f1d1eaefc5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328bab6e-8712-4121-98e7-6d7e01cf4c40",
        "cursor": {
          "ref": "813c4143-0c30-4dc7-9f70-5a7cac396208",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "398a547c-93ea-4ae3-8da1-791b9b81b642"
        },
        "item": {
          "id": "328bab6e-8712-4121-98e7-6d7e01cf4c40",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "269195aa-fdcf-42c8-92ce-cef579a2e462",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82db5b77-3cd8-4f32-bcc8-43fab5f124c4",
        "cursor": {
          "ref": "964f0fb2-82ad-4f44-8a08-962c098d4f29",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c61385b1-0bad-4ac4-887e-1c90fbc3876f"
        },
        "item": {
          "id": "82db5b77-3cd8-4f32-bcc8-43fab5f124c4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0b9b5ecf-52b2-42d5-84b3-8cf96f3a71bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a50e4df-ec46-4792-a6e8-552e79423c70",
        "cursor": {
          "ref": "24b21731-9128-410f-8e76-6f639e300fde",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "66697c96-3208-445c-8203-dbafa9eb75ab"
        },
        "item": {
          "id": "5a50e4df-ec46-4792-a6e8-552e79423c70",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "249bb076-e853-4d8e-bdd7-f42275f46e79",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98df29b8-b353-43e9-92df-05f1a7836f70",
        "cursor": {
          "ref": "4634a0d1-bbdc-4c29-8bf9-f614ec7cbe23",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "71a308b7-eaf0-460a-ba9e-bb42b1f32d6c"
        },
        "item": {
          "id": "98df29b8-b353-43e9-92df-05f1a7836f70",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4e6bc84f-d181-4b7d-b8cf-bf9d4f793d4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58537dd1-0245-480b-bd04-ea50726fd048",
        "cursor": {
          "ref": "38077dad-4ed0-4499-aa18-6243a4ffb1fb",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1533824d-2210-486a-8f7e-9ffacc274b96"
        },
        "item": {
          "id": "58537dd1-0245-480b-bd04-ea50726fd048",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a0772d33-f4a2-492b-8644-8e63bd76200a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f44cec6-7b8c-4c9b-a462-460b463228f5",
        "cursor": {
          "ref": "fc20a39b-1935-4f34-8a71-61960a6162e9",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0f8f99ec-716e-405b-9b49-6dffc38949d1"
        },
        "item": {
          "id": "8f44cec6-7b8c-4c9b-a462-460b463228f5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "18d5d17f-ab06-46cd-8d85-a34f36995826",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc0ed0f-63ae-4fcf-82a8-b6b52b70412a",
        "cursor": {
          "ref": "67a7394d-7da3-4f75-9105-be5e71c74e78",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "17d53771-edfe-4d30-bd9d-cd0efae98a3e"
        },
        "item": {
          "id": "0fc0ed0f-63ae-4fcf-82a8-b6b52b70412a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a1fb5917-ff66-4d91-b4cb-0326fc6090f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f1b83a-9591-43ac-855e-aedd00b90c32",
        "cursor": {
          "ref": "9ee9690e-81a9-42fe-b75a-8d56d9bfc5b0",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3d1f5d37-d672-4d0d-abbd-d066da7a8865"
        },
        "item": {
          "id": "f6f1b83a-9591-43ac-855e-aedd00b90c32",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "cb237153-f52a-4494-a5d3-f2b1864cdf2d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc005e98-2aae-49fd-bcaa-2330d051d32b",
        "cursor": {
          "ref": "b7903a52-7aed-470f-8c80-6b13fa9e3a74",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "04f5d39c-5091-4ca9-8d32-6fcf1faab8fa"
        },
        "item": {
          "id": "bc005e98-2aae-49fd-bcaa-2330d051d32b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "541945db-2f5c-4d9c-87e4-43c67c5c99c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dbf2101-fbf6-4d80-9038-f32ca721b8e7",
        "cursor": {
          "ref": "b0515bfc-c311-45c4-abca-96f44ab4d17e",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d121de6c-e27a-4461-95f1-6ea0535db6d9"
        },
        "item": {
          "id": "9dbf2101-fbf6-4d80-9038-f32ca721b8e7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c052a2d3-0457-4f14-b6c0-f832ddf78f83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1fdb616-8c57-4a9e-972a-c34f2e8d4ab1",
        "cursor": {
          "ref": "9e4428f9-5299-4e7d-ab7b-01c67a249255",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c61a057d-a3c6-4aa0-9461-5fbada57878b"
        },
        "item": {
          "id": "b1fdb616-8c57-4a9e-972a-c34f2e8d4ab1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ed4484a4-31e8-4cc6-9c54-0968f2f401b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c73f1ca-14fd-41d5-9158-bd1960baf8e1",
        "cursor": {
          "ref": "5dfbbc55-fd7b-4492-94ac-1276cdb5be54",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "04f9f4b3-c9cb-43f8-b95d-e7b92b745bad"
        },
        "item": {
          "id": "8c73f1ca-14fd-41d5-9158-bd1960baf8e1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "010a75ae-50f6-4cec-81d1-e7c00c48cc73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc3b180-b091-428f-9bb8-89e253cfe727",
        "cursor": {
          "ref": "8c0eab8f-a0d7-45a9-91ef-4b1990ebc140",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4c9c0242-f57d-453f-99f0-32d769813761"
        },
        "item": {
          "id": "2cc3b180-b091-428f-9bb8-89e253cfe727",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2da24109-9017-42aa-bbac-187231afb583",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1937c1-1cd2-46ab-b372-848c73f0a708",
        "cursor": {
          "ref": "aaa32d21-5dc1-4c80-8b63-d64cf6c0d274",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "661df0cd-0e3e-4bf7-ab1a-38f0be9b2a81"
        },
        "item": {
          "id": "5d1937c1-1cd2-46ab-b372-848c73f0a708",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a8784fa2-43ae-4fc6-bf38-ee3132a0b5a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3cd903a-f537-4898-b92b-2049cbdc5f39",
        "cursor": {
          "ref": "949ee747-f71b-414d-971d-3e77af2aa7cf",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "65eab3fd-793e-4de6-9592-447d6b849e7a"
        },
        "item": {
          "id": "a3cd903a-f537-4898-b92b-2049cbdc5f39",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d458d746-5525-4054-87f4-a2cf8c219bf5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063a6e71-41fb-4bb3-bd9e-f221e0eca8a9",
        "cursor": {
          "ref": "4919ea64-93e9-440d-a752-0454831fd7ba",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "932bf3e8-7615-4631-9b19-5d374638e643"
        },
        "item": {
          "id": "063a6e71-41fb-4bb3-bd9e-f221e0eca8a9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "579bfaeb-3386-4054-acea-01c0d8655577",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a48f79-dcc5-4eda-997d-3d2311288aac",
        "cursor": {
          "ref": "0daa1908-6576-40e6-ae90-082080da3e83",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "94cc5b89-e9e0-455b-b101-00f5a2da4120"
        },
        "item": {
          "id": "57a48f79-dcc5-4eda-997d-3d2311288aac",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a1962bb9-8675-44b2-8c7d-072b9d5aaaeb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1054fe03-544f-4c62-8020-363d3ff1881f",
        "cursor": {
          "ref": "1ae8ff65-c9f2-45ad-8a09-f3eeae3b0748",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "5ad84d90-b50d-4044-bb0f-358721d78656"
        },
        "item": {
          "id": "1054fe03-544f-4c62-8020-363d3ff1881f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d059e0e5-be24-4d19-b702-559429863026",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e976e87-afd7-4f31-a8c3-52f3cc8a836a",
        "cursor": {
          "ref": "c979c970-a390-4599-aa6d-b7aa2d338ee2",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "eb2d9ed2-dc46-47e8-91de-9fb94678609e"
        },
        "item": {
          "id": "0e976e87-afd7-4f31-a8c3-52f3cc8a836a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "cc286739-9ff0-411e-9ae0-39e8199f20c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ebc5b54-2ae5-465f-980a-b51cc920d679",
        "cursor": {
          "ref": "a2873416-996b-44b5-96f2-ded8b6a88dd3",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b0b7a207-3bb0-4c89-a264-930964623a89"
        },
        "item": {
          "id": "6ebc5b54-2ae5-465f-980a-b51cc920d679",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "e2b157b3-5f9a-44f6-862e-c2b57b68035c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071f1b9a-fb2d-407f-bbc8-393827e7cc1e",
        "cursor": {
          "ref": "2627948a-45a7-4b64-a11f-587e59fd0924",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "32da6729-1929-497d-9cbe-d2042d043d9c"
        },
        "item": {
          "id": "071f1b9a-fb2d-407f-bbc8-393827e7cc1e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "e14bbd37-9b2a-4dc8-9d05-7469d271f3f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0654fc-f960-4fc9-b6b1-6a4892436847",
        "cursor": {
          "ref": "75cbe846-d3fd-41b1-8d23-4dc4e632b066",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5f5ff12d-212f-460d-9e65-083b1822e3d6"
        },
        "item": {
          "id": "af0654fc-f960-4fc9-b6b1-6a4892436847",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "67c1866d-9c0f-4085-8bf0-c79c0c2e3326",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88be88c-16ce-488f-8e69-5d1d82408497",
        "cursor": {
          "ref": "247bbc4c-16fa-4f60-816d-a6ace3457eba",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8bcf70e2-ab68-408e-a554-9857c03c0293"
        },
        "item": {
          "id": "c88be88c-16ce-488f-8e69-5d1d82408497",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "f1f71a49-bbfc-4d43-acfd-51558b7ab8cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeebe971-e48b-47c2-a13c-dcfb146cf89d",
        "cursor": {
          "ref": "964770b9-9088-4f1f-809a-356ff0a1ac08",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9cf002de-b403-491f-8acc-48afc9f56196"
        },
        "item": {
          "id": "eeebe971-e48b-47c2-a13c-dcfb146cf89d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a2dd2a72-c465-4c51-856c-1240f9bb5d61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8465ac-3a60-4f41-ac88-66bceae89aaa",
        "cursor": {
          "ref": "2414649b-f135-4b2d-a34e-ef62e9140d46",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "335141f0-06dc-489b-9065-6fcab35b7e10"
        },
        "item": {
          "id": "db8465ac-3a60-4f41-ac88-66bceae89aaa",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "733b2a3f-ee3e-4716-abcb-86bfb4de388b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99184e4-a0dd-4479-96fd-79ccdd0ad013",
        "cursor": {
          "ref": "eba6aea1-04ab-49a3-9e76-70564e5daf91",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2d4a3ba5-894b-45a7-b8bd-cd4854d1bfb2"
        },
        "item": {
          "id": "c99184e4-a0dd-4479-96fd-79ccdd0ad013",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "19ba66dc-bf44-4af4-872a-c92006f1d578",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3055f3c-3c0c-4fb9-9dc6-a6d7b0550f2e",
        "cursor": {
          "ref": "9ee911bd-04b5-437a-b871-af7def78b4e0",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e5478196-0c07-4537-95e0-cad92307147c"
        },
        "item": {
          "id": "f3055f3c-3c0c-4fb9-9dc6-a6d7b0550f2e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d8d3c53a-6e46-4a34-b64d-450be763e1eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d5ceafb-bd8a-486a-ba05-e3c16a3e968e",
        "cursor": {
          "ref": "162a2522-686a-4d0a-9c13-3afeed469ab8",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2ad3f377-3be0-40fd-ae96-82a696ab5edb"
        },
        "item": {
          "id": "9d5ceafb-bd8a-486a-ba05-e3c16a3e968e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8b093766-92c9-4e4b-9724-62fe22c20ffa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23423d8-b524-4c97-b6af-853bd0ec40e8",
        "cursor": {
          "ref": "c237a34b-5945-4359-9e61-c806190c8411",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "47c7bad1-99e9-4322-992d-25c82758c36e"
        },
        "item": {
          "id": "a23423d8-b524-4c97-b6af-853bd0ec40e8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e9518e9d-a506-4de6-8778-31e96158116f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923ac87f-54cb-497f-870a-21237146919e",
        "cursor": {
          "ref": "affffaa1-47f9-408c-8d95-01b5cebe537e",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e9c0ce4c-e381-403d-8e9d-3af5cc93a255"
        },
        "item": {
          "id": "923ac87f-54cb-497f-870a-21237146919e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "74c2d974-39f1-493e-b91a-fdd4d3a17083",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717d8d97-3623-4fb9-aff9-87d544a0d922",
        "cursor": {
          "ref": "e93c957f-e6df-4c4f-a6eb-a9f819e106e3",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ba3e8763-c6fa-44aa-a0d5-0c18c9e1c893"
        },
        "item": {
          "id": "717d8d97-3623-4fb9-aff9-87d544a0d922",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9f950c60-f883-4074-9cbf-99d229dc22d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590dd917-df67-4bb3-83d2-49b4332178cf",
        "cursor": {
          "ref": "217fa88f-f993-4850-9aab-b986baca5808",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b7ac2d7f-9bde-4767-bc0e-b743669df932"
        },
        "item": {
          "id": "590dd917-df67-4bb3-83d2-49b4332178cf",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "25a58717-62c4-4e9e-80e5-33b41be180ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e26b00ad-620a-4f44-8345-374e84e3c1f3",
        "cursor": {
          "ref": "529001c9-a5d0-481b-8dcb-a0ff55a6d2a0",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b9527c4d-97e0-4e6d-9fcb-0d2835aae099"
        },
        "item": {
          "id": "e26b00ad-620a-4f44-8345-374e84e3c1f3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e3e5aae6-e253-4df4-b10c-5a74184ffe9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10640e9-bf08-44c2-96d3-979a5d6453d7",
        "cursor": {
          "ref": "b9f3a66a-2fcf-4029-8f04-c96072470b02",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "47a354d8-efc7-42d3-8c8c-64307150101f"
        },
        "item": {
          "id": "d10640e9-bf08-44c2-96d3-979a5d6453d7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ce43df2d-2377-4cb6-b98f-db9405df67cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e7f51f-666c-4e5d-8c6c-9237424b7cce",
        "cursor": {
          "ref": "f386020c-3c33-4183-8b24-3e967dc8600e",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "cb0c37d0-f935-46a5-bed7-cc9f701515f9"
        },
        "item": {
          "id": "05e7f51f-666c-4e5d-8c6c-9237424b7cce",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e2266ed7-b4ce-4356-a5ed-21c11afb3124",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7246a4b9-f8dc-475c-a5cc-d8e506dbf486",
        "cursor": {
          "ref": "bfaecb83-0b18-42b7-bbe7-8be84ef5d836",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f982d4ff-34e5-487c-85cd-c21e87f94f42"
        },
        "item": {
          "id": "7246a4b9-f8dc-475c-a5cc-d8e506dbf486",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "84a306c0-84d9-445c-9d29-0fb13e85a159",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a46246b-4c41-4b65-bf03-6d9f3de2721c",
        "cursor": {
          "ref": "835ff824-a71e-4665-a530-470e32f54e29",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "efae7fda-e8a0-4197-bff3-73b7545acb96"
        },
        "item": {
          "id": "7a46246b-4c41-4b65-bf03-6d9f3de2721c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6d82038b-9624-4c4b-a365-811f7f22e847",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b9e71e-83be-402b-8bec-2f61851c6c82",
        "cursor": {
          "ref": "27ab2f68-908c-4f24-9b5c-d5485ae933d9",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f0b3bc8f-d8ca-49d6-a3dc-c6020d882c00"
        },
        "item": {
          "id": "60b9e71e-83be-402b-8bec-2f61851c6c82",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e0d22c85-1aea-42e0-b743-0939b2aa97f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3424093-1e72-45d0-9844-8e2137dd61c9",
        "cursor": {
          "ref": "e467986c-98fa-41e8-8279-a397adbf4e64",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a6ce9fae-fb46-4335-a606-c221befcbb5c"
        },
        "item": {
          "id": "f3424093-1e72-45d0-9844-8e2137dd61c9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2fda0836-36d5-4b08-9954-6f6c2fc4dc24",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "617f3e77-3d9b-48cf-8ffa-602ef160ab6a",
        "cursor": {
          "ref": "d7366971-be7e-4e9d-9321-61d815ca0e32",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ed5148e0-314b-4115-81d2-acc97f395bac"
        },
        "item": {
          "id": "617f3e77-3d9b-48cf-8ffa-602ef160ab6a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fa9a9b7b-3cf6-41fd-aa9b-8901ff10c510",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72acc763-7e60-4205-b6b9-9b823c0eb9ab",
        "cursor": {
          "ref": "71c5dfde-4a76-4e1e-878e-5ee613899327",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3657f431-6ee7-4d9f-90f9-19f0cc2ff620"
        },
        "item": {
          "id": "72acc763-7e60-4205-b6b9-9b823c0eb9ab",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a4d7ebc4-3ede-4dab-aebc-3f0ba170b110",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f59320-fc9a-48cf-ade3-bf98e42ad815",
        "cursor": {
          "ref": "def649a7-cc2c-4b3a-9e5b-72ad0b747d85",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "34f17785-200f-4b3c-b24f-a0bcfe1e0d33"
        },
        "item": {
          "id": "73f59320-fc9a-48cf-ade3-bf98e42ad815",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "578dd146-9f98-4825-80cc-af1489026ba6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e32d73b9-0b61-4d0a-8461-f6b72173190b",
        "cursor": {
          "ref": "a1744784-d07d-4d6f-84c2-71190809a93e",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "51c4b200-06c3-459a-9630-4adb4ca6ee74"
        },
        "item": {
          "id": "e32d73b9-0b61-4d0a-8461-f6b72173190b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f1ccf367-c3c8-46c8-bd4b-16d31c6b024b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a5102e-f87c-4dc4-aa21-1ed40e5177f1",
        "cursor": {
          "ref": "9f5f5721-ec9d-40f5-b120-5cc6187f46d7",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f96c40af-f442-4a04-ae22-6b30838b6b1f"
        },
        "item": {
          "id": "f4a5102e-f87c-4dc4-aa21-1ed40e5177f1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "26b6dd8c-5c4a-4ab6-b248-02a8f449356e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b78014-aaba-4f59-8582-de128ca4beff",
        "cursor": {
          "ref": "d30505f6-6dd8-4a1e-8d4d-a623d18d39c6",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e24de925-6157-4df9-9d73-fafde6688602"
        },
        "item": {
          "id": "a6b78014-aaba-4f59-8582-de128ca4beff",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "295a24e7-53d6-484b-b786-996679f9503b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed1b499-2d31-4f88-9c7b-3f37dfcf68ff",
        "cursor": {
          "ref": "3507edbf-7f55-42a8-8f01-c38a91c03964",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "445ac516-13b8-4d6d-a46d-ad813372c646"
        },
        "item": {
          "id": "1ed1b499-2d31-4f88-9c7b-3f37dfcf68ff",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1b8681bd-f437-49bb-be44-374bac6cc66a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ebc8d9b-bebc-40b6-9ccb-a6086b59f1b7",
        "cursor": {
          "ref": "abff4afc-d5c2-42a7-8b56-36101361ad48",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9eaefe1f-6b26-4e59-80c4-3dea46a9e483"
        },
        "item": {
          "id": "1ebc8d9b-bebc-40b6-9ccb-a6086b59f1b7",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e395bd22-7448-46ce-b30c-f7442fb870e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3005997e-4e6e-4382-9efb-2f5bfe5c7cf1",
        "cursor": {
          "ref": "8109a984-2bbf-4b6c-92b4-8970cbd4c1f7",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "93193e49-3caa-4bae-adb1-eea159d72194"
        },
        "item": {
          "id": "3005997e-4e6e-4382-9efb-2f5bfe5c7cf1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9777ba59-9d3b-4b5b-9262-e1c0b1eda15c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8538fd6-7f2a-4586-bc99-10211e4c96f1",
        "cursor": {
          "ref": "0340d0a5-c2be-456d-a624-ca03a55c30cd",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "669fb2e0-6a04-4a64-9e3b-ea69f8c28d7e"
        },
        "item": {
          "id": "d8538fd6-7f2a-4586-bc99-10211e4c96f1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e0c549bc-5963-43b4-8051-78ae6019d90a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ae2cac-75fb-4687-8c2b-788ef8e9e694",
        "cursor": {
          "ref": "3df6a786-10fe-4b6b-8dac-b5cdafbc0119",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c7b4bbe3-3eac-44aa-a159-4f4843ae8a99"
        },
        "item": {
          "id": "d1ae2cac-75fb-4687-8c2b-788ef8e9e694",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f1ede546-b439-4d22-8502-512298fc956c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef7c0ba-e515-43f1-b614-6e1b58e26f0d",
        "cursor": {
          "ref": "0280ae2a-b0f1-4a2a-a892-56b902e43771",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "960d3d0e-1950-4392-b3d7-bab2dcee28ea"
        },
        "item": {
          "id": "cef7c0ba-e515-43f1-b614-6e1b58e26f0d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c862e797-8068-4838-af31-6c826673f215",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9fefce9-a72f-4ebb-b486-34ed464f651a",
        "cursor": {
          "ref": "86e35766-0e27-424c-80cd-0f0d9cb1bcc4",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "043173b5-6ba1-4515-a214-21e3e49c3e39"
        },
        "item": {
          "id": "a9fefce9-a72f-4ebb-b486-34ed464f651a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7b7c6dc8-9136-4d58-aadf-75d5f3683b42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c68dfb-0638-4e72-916d-b985efbe94a8",
        "cursor": {
          "ref": "c9ae8c4c-b4a5-417f-92b9-96e27534d8cb",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f773f460-99c9-4d40-85d9-e7ecf52d0608"
        },
        "item": {
          "id": "41c68dfb-0638-4e72-916d-b985efbe94a8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "cd5121d9-c5d3-4a6a-b51a-5c0378fadea8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88fb1c48-7383-4ef0-ae2f-46d8d4d96c05",
        "cursor": {
          "ref": "124a75a7-7027-4ac5-9710-f4d7996e9625",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "dad76f5a-9afa-428e-8c58-8fff0144dbbd"
        },
        "item": {
          "id": "88fb1c48-7383-4ef0-ae2f-46d8d4d96c05",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ef8800c2-8917-4297-8756-349921170c86",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c0dcc3-245b-4aed-bf4f-55336dac21f0",
        "cursor": {
          "ref": "5e6ee285-faa9-4886-bc33-92f2da513932",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5d4e5ec9-355d-493f-81e7-92fed5119dad"
        },
        "item": {
          "id": "52c0dcc3-245b-4aed-bf4f-55336dac21f0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "de77c2f3-c8f6-4249-a70a-604d063d01d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b08072-35e8-4da8-91e5-53508aa5782a",
        "cursor": {
          "ref": "19812d4d-ad6c-4931-bacd-146a8b4f251f",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b882ce44-7751-4ab7-bfbf-a0c26fbe73a6"
        },
        "item": {
          "id": "a2b08072-35e8-4da8-91e5-53508aa5782a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "912d84d2-4691-4d38-ac72-cf4f0dc37d48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "384137d5-f41b-4aeb-88e7-2d6a0840380d",
        "cursor": {
          "ref": "582a664d-ca29-4a50-9d00-8f7b157d8827",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "792113ba-436c-48f3-ab81-3342e29ad132"
        },
        "item": {
          "id": "384137d5-f41b-4aeb-88e7-2d6a0840380d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0199c8b9-af06-4ce7-9ca7-1c5a7810b7a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2fd412e-627d-45e3-b470-bc412d35f7ad",
        "cursor": {
          "ref": "88e11b40-3c8d-41dc-b649-86ed783a986e",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f3f0de85-0867-4f52-adb4-eaf46bdd2d68"
        },
        "item": {
          "id": "b2fd412e-627d-45e3-b470-bc412d35f7ad",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ea5c15b3-d6d2-4ecd-8431-8a05d4086695",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdaade8a-07f0-47f4-b68d-3b2869f4a698",
        "cursor": {
          "ref": "f0daf97f-249c-42b2-b658-9031680463d6",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4c68dc4d-1b47-41ed-bda9-313c27ae7934"
        },
        "item": {
          "id": "cdaade8a-07f0-47f4-b68d-3b2869f4a698",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e990c438-e36c-405d-8b69-c4a7a654becd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a815ec-b9b7-4e40-b2ec-2aff6428035f",
        "cursor": {
          "ref": "5be584fb-2ac9-4cc7-9b7d-52debc7b1f5e",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f6502d88-68f5-4f88-b3d3-a3e18a0e0d6c"
        },
        "item": {
          "id": "f3a815ec-b9b7-4e40-b2ec-2aff6428035f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "23d41cc6-e1b6-447e-9e5b-3109b7bde183",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2e7e54-f707-4793-a018-0aba0f2385d4",
        "cursor": {
          "ref": "d63b14cd-347b-4280-a197-2b2b4579dad0",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c902b1ca-d17f-4a58-9e17-28662b12e5ab"
        },
        "item": {
          "id": "fb2e7e54-f707-4793-a018-0aba0f2385d4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9e70f68d-a2e7-498b-ab36-6d0f695d5a37",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7b6f80-0ac1-4cf1-84aa-0cb105881065",
        "cursor": {
          "ref": "9270f0e8-aff3-4599-8b01-cdc38a918998",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "567d7039-e844-4940-8ff1-1044e73e392d"
        },
        "item": {
          "id": "cf7b6f80-0ac1-4cf1-84aa-0cb105881065",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "851ba1e3-6fba-4dbf-9874-a467b74de9d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4401808c-aba2-4e82-9dd9-0e0dbbe10854",
        "cursor": {
          "ref": "b9bf6482-f6ae-4567-8352-48237bcaf304",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5f57c610-77bf-44e8-bb6e-a56330e80672"
        },
        "item": {
          "id": "4401808c-aba2-4e82-9dd9-0e0dbbe10854",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5adb32a1-d6e4-4715-8644-3d8b5428c5fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9b13fb-0e95-4a7f-80f4-807b74526fe1",
        "cursor": {
          "ref": "6954704e-0e21-4182-a6cc-e979b625e54a",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6864ed0e-b39e-4cca-a710-044e7838b5e4"
        },
        "item": {
          "id": "ea9b13fb-0e95-4a7f-80f4-807b74526fe1",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f86d650d-7472-4fde-a5e9-9375a01698a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a781bff-e288-42f0-964b-976dd301a3ba",
        "cursor": {
          "ref": "d22f42a7-8a23-4196-bead-686e6546b74f",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d8a20fed-1179-4868-89f4-e72ea5fa8b9d"
        },
        "item": {
          "id": "8a781bff-e288-42f0-964b-976dd301a3ba",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ff6f0e8d-43ff-4024-b7d0-956c6f8859b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2c613a-af58-4dd2-a8a4-c3f5f84077d6",
        "cursor": {
          "ref": "8be21229-1426-49c1-85d2-9e5ab0208ffa",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "56115a94-4bb8-44aa-8937-baae6a23546e"
        },
        "item": {
          "id": "0a2c613a-af58-4dd2-a8a4-c3f5f84077d6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b352f88e-58b6-4164-8b8c-ea4b874a753c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa26f250-f32c-47f0-84d2-2e7ec26d1e1b",
        "cursor": {
          "ref": "7db020ef-a9df-40cd-88c6-6d8fa104df89",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e22df14c-f984-478a-a84a-189f5ec15d3d"
        },
        "item": {
          "id": "aa26f250-f32c-47f0-84d2-2e7ec26d1e1b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6fc2406d-d418-4269-b8cf-9819f87091a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa547ea-4c00-4d9e-af11-aecfd555144b",
        "cursor": {
          "ref": "dc4a2f6d-fa46-456f-83da-669e7b594ea7",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d3e0f9ac-c9b2-45e8-a4bc-826763395794"
        },
        "item": {
          "id": "aaa547ea-4c00-4d9e-af11-aecfd555144b",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "317f3beb-feff-4bb5-858f-5edcbbe4d599",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194c5963-2a86-4571-b308-509f1ece15bc",
        "cursor": {
          "ref": "3ec5873e-082e-438f-a488-fd976b8d301f",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "36ca25fd-8222-4c09-b9a7-b1a4087015ff"
        },
        "item": {
          "id": "194c5963-2a86-4571-b308-509f1ece15bc",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "fa06ddf8-8b4d-4343-821e-fab0033795ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc0e2b44-f8a8-4494-a5fc-799f55b4d430",
        "cursor": {
          "ref": "da1dee4e-03b7-4085-b4da-6ed09e51d919",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "084d0586-7984-453c-aa36-8ea1b34ea0f3"
        },
        "item": {
          "id": "dc0e2b44-f8a8-4494-a5fc-799f55b4d430",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1fe70932-638d-4e6d-85ec-ed42991d86a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2330122-673d-4d4d-bd86-e88edb83f723",
        "cursor": {
          "ref": "ec3b935a-928f-4fe7-85c6-960f6d343452",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "222dd1ea-32d9-4508-becc-a7aa3f6e2134"
        },
        "item": {
          "id": "c2330122-673d-4d4d-bd86-e88edb83f723",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e04ef2cf-c62d-4456-8171-4839f9ca08f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d6343a-4647-45a9-b1b4-abe8e198d226",
        "cursor": {
          "ref": "83860159-b196-4d51-9235-bf6e9c2bc7cf",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "201f7a1f-1ba1-48a0-bd37-633c1a61ab1e"
        },
        "item": {
          "id": "01d6343a-4647-45a9-b1b4-abe8e198d226",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f6ff531e-1bcc-4154-b7e2-d4157e10341e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9664d45-d5eb-4c54-aa30-be8a784b1481",
        "cursor": {
          "ref": "c18c5410-b074-414e-b07d-1e61198427c6",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d1484242-9ad8-433b-af90-af07256ca7e2"
        },
        "item": {
          "id": "d9664d45-d5eb-4c54-aa30-be8a784b1481",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "31bf7cf2-0a59-448b-a841-9a458648260e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455816cd-eeac-45fc-abff-c90a71a3c21d",
        "cursor": {
          "ref": "0d0bfade-79ee-4ab1-b137-016a7b208499",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "25780b28-428a-467f-bae0-138669e0c6c2"
        },
        "item": {
          "id": "455816cd-eeac-45fc-abff-c90a71a3c21d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "aa43cc90-29ae-480b-b2f5-5d2f181fd420",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83de3d54-805e-401e-9428-9590662f0f9f",
        "cursor": {
          "ref": "12e2c9ed-ac70-4992-b60b-b7d690de61cb",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4b024a5d-009c-43e5-82e2-051e33ce9cef"
        },
        "item": {
          "id": "83de3d54-805e-401e-9428-9590662f0f9f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5996dbe6-f754-429a-8b13-40fda098868c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "446bd3a2-f29f-4762-9b4b-3f56b838934c",
        "cursor": {
          "ref": "13d1563f-4eae-444c-86dd-4cd076ee9ad3",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f4dfea18-dd09-40a6-a3ef-a5fa56a78c2b"
        },
        "item": {
          "id": "446bd3a2-f29f-4762-9b4b-3f56b838934c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "de970d30-446d-4738-8fb8-58e5c60d700d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a6bac9e-16c0-4a50-a2b6-7177c085199a",
        "cursor": {
          "ref": "598b87a9-474a-4282-9df3-8036a3901d01",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "637603bc-1729-4986-b10e-5a55afb6a434"
        },
        "item": {
          "id": "6a6bac9e-16c0-4a50-a2b6-7177c085199a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9a5492f1-bcc8-4274-9fa0-898dacee1c9e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79eccb34-dea2-4e07-aa9d-276c40af597c",
        "cursor": {
          "ref": "ee00cf28-2f7c-4b1c-99e7-17b2817283e7",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "38d56cf7-dc0f-41c6-9772-360c32f21bbe"
        },
        "item": {
          "id": "79eccb34-dea2-4e07-aa9d-276c40af597c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "025106a8-54aa-4b6e-b157-468556b599b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f1c0fa-0011-4a97-9da6-831b91b163ae",
        "cursor": {
          "ref": "7d192d1a-1699-4cda-9d4e-ad73e458e607",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "792526c2-6b52-4c1f-9488-db483170c4ad"
        },
        "item": {
          "id": "68f1c0fa-0011-4a97-9da6-831b91b163ae",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e9a01e5f-19c1-4c1f-a181-b01f52bde934",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a923a317-6b72-4dfa-a487-aa8e05068a53",
        "cursor": {
          "ref": "b47202ec-c8aa-49fb-92b2-c5245ddbe86b",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "52f992ac-0fce-4456-857c-9cebe9b1f88b"
        },
        "item": {
          "id": "a923a317-6b72-4dfa-a487-aa8e05068a53",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d822e1a4-5a67-409d-a879-b20ea8a0b77b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7d3036-034b-43d8-b410-6969d8077892",
        "cursor": {
          "ref": "bfc7f586-65dd-4309-81f0-fe8fb5e9abe0",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1886caac-ba17-4daa-af8c-122313e1f245"
        },
        "item": {
          "id": "0e7d3036-034b-43d8-b410-6969d8077892",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e3a4a8d6-a569-4d01-91ab-716c8fa53a0b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24293a9-b210-45f5-97eb-6c19e95af9c3",
        "cursor": {
          "ref": "5ac504b6-184c-4363-a002-f3281337e5c9",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "77770a65-099f-4196-ac60-c17b26d05308"
        },
        "item": {
          "id": "f24293a9-b210-45f5-97eb-6c19e95af9c3",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8728d3ca-5346-4c5a-a92b-e9d2f14b1730",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 155,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0bd25a-f5b7-438b-9b1b-6f2f3a77c213",
        "cursor": {
          "ref": "0cac927e-a616-4439-bee5-0c4862c27b75",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ad2de1b8-4406-40c1-9698-a026db56d7f4"
        },
        "item": {
          "id": "be0bd25a-f5b7-438b-9b1b-6f2f3a77c213",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2dc80f68-9470-411c-bd13-278729df3998",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e0800ff-6652-49fe-8354-45a7de60a9aa",
        "cursor": {
          "ref": "1d16352c-1d5d-4fad-94ab-0a69f44cb95d",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e2970788-0ca1-4cd8-ad31-233cd0f255ec"
        },
        "item": {
          "id": "7e0800ff-6652-49fe-8354-45a7de60a9aa",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "bdce7f2b-3abb-4f8c-983d-1a319398cceb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4016af10-23d4-460e-a819-dabe1eb9e6a3",
        "cursor": {
          "ref": "3737770a-088c-413b-9469-0f944b4f5653",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cf36e4d9-8618-4c36-8080-29736dbf534e"
        },
        "item": {
          "id": "4016af10-23d4-460e-a819-dabe1eb9e6a3",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "194cba61-49ae-45b0-81b9-14f03ca63e27",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0e8b658-2932-4230-9947-bb0bb94e56f7",
        "cursor": {
          "ref": "246457ee-3a15-4758-b579-7d78fc1c0fbb",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ba8ba914-8ce1-47ec-b3e6-5adb7c91cdab"
        },
        "item": {
          "id": "d0e8b658-2932-4230-9947-bb0bb94e56f7",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d572535c-c467-4a76-af01-e122b396798d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43db6c49-d6dc-4449-80c0-a4ab196ca844",
        "cursor": {
          "ref": "7b99859b-32fc-44c7-baa4-9a32862f5c60",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c5c708ad-9f9f-491f-842d-dd3942a28a46"
        },
        "item": {
          "id": "43db6c49-d6dc-4449-80c0-a4ab196ca844",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2e288f54-319d-405c-a26d-4dfa6d6d19be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0f0279-4fc8-40fc-9c0a-150614028ac4",
        "cursor": {
          "ref": "61f547d3-b98a-4f57-8e43-297fd7bedbe8",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f0f7d156-7c07-4f8e-bbda-e82d0c09cdb3"
        },
        "item": {
          "id": "0b0f0279-4fc8-40fc-9c0a-150614028ac4",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "93dd3e02-ca65-445f-ae7c-49519f4137b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4573c08-0e88-417c-8901-0e2f1ca53953",
        "cursor": {
          "ref": "15748296-9b4e-4cd7-a617-60ebbadf1871",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0e91048b-f00d-4560-8f90-1993e7052c08"
        },
        "item": {
          "id": "c4573c08-0e88-417c-8901-0e2f1ca53953",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "02b54294-e869-41d7-9237-6cd8dc1fc08b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72697c55-a3ba-4e17-bc10-fde1469c10e6",
        "cursor": {
          "ref": "497f3309-3083-4309-aab3-110a7988520d",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3e5932ab-0ddb-4336-bc57-9706b7a90d5c"
        },
        "item": {
          "id": "72697c55-a3ba-4e17-bc10-fde1469c10e6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6c84e43f-f93e-4ff2-b1a7-f07ef28bce41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1713ac7c-1ff3-47ce-bd9d-5dade9c2f87d",
        "cursor": {
          "ref": "29648e00-45e5-4798-9b55-8afda7d4cd35",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "586012d8-058d-4d4a-8bb0-48cd52be7229"
        },
        "item": {
          "id": "1713ac7c-1ff3-47ce-bd9d-5dade9c2f87d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "17ada520-6ff2-4744-a982-b93ab789c014",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b8ada2-1c85-489c-ac37-d1c6a05d01ba",
        "cursor": {
          "ref": "85157ac0-daaa-4013-b06b-1e6eea597707",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f58eb945-1cf6-49ff-848d-fda944db3c23"
        },
        "item": {
          "id": "46b8ada2-1c85-489c-ac37-d1c6a05d01ba",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "2916fb2e-9258-46f2-bb02-9058516c52b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959d12d6-1ea5-473b-9266-56ced7c23356",
        "cursor": {
          "ref": "c411e3cd-fdb8-4ee9-bf0b-4d0fd3721451",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8ee40242-2bf9-435c-ae30-6957341aa49f"
        },
        "item": {
          "id": "959d12d6-1ea5-473b-9266-56ced7c23356",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3a87bafe-65e3-400b-bd41-d5f9baceb741",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112ea6f2-92c6-4eca-8ca0-30af04ffd44b",
        "cursor": {
          "ref": "e0eb8d4c-b4e1-44d0-88e1-d22bc74c9f1f",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "498d74c8-bb5c-47db-b5b5-0dd21ab6bcb5"
        },
        "item": {
          "id": "112ea6f2-92c6-4eca-8ca0-30af04ffd44b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "51378a9f-10f1-45f1-baa9-2c7fb87033ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3edd6fc6-3ba3-4c3f-ba52-c34590679e27",
        "cursor": {
          "ref": "25bd3133-afbb-4ba9-aafd-2a98033b3cd4",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6a6c2546-949b-45f3-aaf2-39c5ff3c49b3"
        },
        "item": {
          "id": "3edd6fc6-3ba3-4c3f-ba52-c34590679e27",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3a545328-3e87-4725-bad6-aa297ad7abc4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97ba0ae-f5c4-4a25-8b8c-80f94b00cb04",
        "cursor": {
          "ref": "22c7bdde-1e63-433c-901e-12c157b66bf8",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "db2a9fd5-b4ee-4921-a400-6b6ca8aad9c1"
        },
        "item": {
          "id": "d97ba0ae-f5c4-4a25-8b8c-80f94b00cb04",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "2c02c766-8c18-4b70-acb5-99cfc692285f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "565e4294-1913-4481-b6eb-d3db9679a589",
        "cursor": {
          "ref": "9597771f-0409-493f-8266-81c1845ec365",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e4f1fe8a-aec5-4a6c-af45-b580189b1200"
        },
        "item": {
          "id": "565e4294-1913-4481-b6eb-d3db9679a589",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "04c180a5-eb83-4a6c-84e2-aa370bf55e7f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5706c3-9231-4c81-9876-663ce609ee7b",
        "cursor": {
          "ref": "99005f37-7a2d-4d83-87ba-11f98bd0c69e",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "281010a2-3927-4163-ade9-a2ac19456ff9"
        },
        "item": {
          "id": "2f5706c3-9231-4c81-9876-663ce609ee7b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "48fdaa14-5b2e-47c6-a2ed-34f8b57a07bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2acac5d-8ed6-4da1-9b41-a27689ade76d",
        "cursor": {
          "ref": "f637c719-10b4-40ec-bce1-1db873cf0b6a",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d85bb953-2697-4907-a3d0-4a48edfe804b"
        },
        "item": {
          "id": "d2acac5d-8ed6-4da1-9b41-a27689ade76d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "25245806-ac7f-4ffe-80e1-432d0a564b13",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ba269b-8c5f-4789-b067-faa5989596e2",
        "cursor": {
          "ref": "a928dcab-2c21-4cef-a4b4-9b2593ddb896",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b7db8386-f40e-49f7-b407-ad309a438598"
        },
        "item": {
          "id": "85ba269b-8c5f-4789-b067-faa5989596e2",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d2b98aac-b57f-42a5-a3e0-f8cac0972e9b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009ed5e1-fd84-4232-be3e-8572f1497bd7",
        "cursor": {
          "ref": "0c26f80a-619f-429a-997a-5c8b035c281c",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "afa24ea3-6332-4993-b682-5b2861a55b6d"
        },
        "item": {
          "id": "009ed5e1-fd84-4232-be3e-8572f1497bd7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e2c8fd1c-c086-4cc9-8102-43bba1d2e5ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c9036f-94c0-46c8-bb71-61babffce971",
        "cursor": {
          "ref": "3743915b-bbe0-46ce-ab0a-37fe1dafd2df",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a49ede2b-4306-4cf0-a558-9be20df69ae9"
        },
        "item": {
          "id": "b4c9036f-94c0-46c8-bb71-61babffce971",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6398bd7c-85b7-42bf-9de0-9f91bdb485a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0ae69e-75a6-4f33-b5c0-26f1ff236f25",
        "cursor": {
          "ref": "0d3f802a-8c86-43fa-a9ec-ad5beb6ff360",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8ba1c89c-7a0f-4b10-8012-a7af129933db"
        },
        "item": {
          "id": "ca0ae69e-75a6-4f33-b5c0-26f1ff236f25",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b1eb5695-ed86-4459-bc53-fc4583c38266",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae278e8-43c3-4c9b-987a-2bf490b5ac69",
        "cursor": {
          "ref": "f859ecbd-72ec-4206-bcec-89c178f8f3d1",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6a59cfd4-3f45-4e07-a628-1b5a8742d31a"
        },
        "item": {
          "id": "5ae278e8-43c3-4c9b-987a-2bf490b5ac69",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d6960ab0-ec7d-4108-98f5-b5fd544f6354",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c50a15c1-9f5b-4717-a9f1-488f1596958b",
        "cursor": {
          "ref": "29673b86-c9be-4af6-b8cf-6daef794cf0d",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d6d453bd-478f-408a-952f-0f973039c83d"
        },
        "item": {
          "id": "c50a15c1-9f5b-4717-a9f1-488f1596958b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "df3eeeef-7155-47c0-b16b-48de7c3b2f53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c09e88f-b692-4a19-b686-c0eb452ede7c",
        "cursor": {
          "ref": "eec8ddb1-e4d7-4b14-b240-ade8c4910043",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3ed7e4b2-2441-406a-8cb1-e85b0d97032f"
        },
        "item": {
          "id": "1c09e88f-b692-4a19-b686-c0eb452ede7c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e32b239f-db53-4e66-8a8c-a864602ae265",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6f5bb2-7d1f-4863-8346-5ab8bf987034",
        "cursor": {
          "ref": "9fa903dd-0abb-46e0-8eb8-da8e6ec384bd",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "98c876ef-3a3f-4cfa-8d87-d0f699b22b5a"
        },
        "item": {
          "id": "7f6f5bb2-7d1f-4863-8346-5ab8bf987034",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "24a57fda-5fcc-4e96-a15c-b4468783243c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dd89e13-804e-4f42-baaa-9b04774da7a7",
        "cursor": {
          "ref": "11fe8532-35cc-4816-a5ab-0b2086a94d18",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "82ec9bf4-fe8e-4fed-b855-b2f16722ebb1"
        },
        "item": {
          "id": "1dd89e13-804e-4f42-baaa-9b04774da7a7",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "df2faa76-5af4-477a-bbe2-7873ed6125ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a56a3484-0e8d-4350-9f8c-ffbdbe33da8e",
        "cursor": {
          "ref": "7226793c-9ecd-46ae-bfa6-d5068b960605",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e53a91f4-3bca-4f00-aaef-7e36452ab903"
        },
        "item": {
          "id": "a56a3484-0e8d-4350-9f8c-ffbdbe33da8e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e15ca347-8f36-4bbb-8db3-3be9ed58f183",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf0cf34b-88bd-46e5-ba8f-59c9f08fa987",
        "cursor": {
          "ref": "cf6c1a03-23c9-4c15-ae14-82f6393673ee",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "37c22209-862c-42d3-9fba-0a5db4d1723a"
        },
        "item": {
          "id": "bf0cf34b-88bd-46e5-ba8f-59c9f08fa987",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1d2e2cf0-ddc8-4bd5-8a1a-caa76e34bf2b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b587c4-f271-410e-8194-d43bdd4b8712",
        "cursor": {
          "ref": "e1b7bb32-f555-46dd-b8c8-4df2c0b12039",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cf87846c-81d6-486d-b232-5f87dce62179"
        },
        "item": {
          "id": "b2b587c4-f271-410e-8194-d43bdd4b8712",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e4a6cd9f-393f-4b23-9e94-360a631cf078",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe6712d-7878-4ff0-8cdc-72f766c7089b",
        "cursor": {
          "ref": "a471361a-faf6-4d7e-84d8-625e1dc17f0f",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2d9abc6e-5ad5-4ae9-a427-ce75b34cb31d"
        },
        "item": {
          "id": "abe6712d-7878-4ff0-8cdc-72f766c7089b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c87048c1-1c53-4555-a497-b8a9da349a92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aebde8c-eff3-49a1-a4ca-3ad6a4dd14e4",
        "cursor": {
          "ref": "48614e23-4a6b-47df-8ce0-a2f97e9ad2ee",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2d21940d-39f6-4ebf-a29d-073ac5fa6fe3"
        },
        "item": {
          "id": "9aebde8c-eff3-49a1-a4ca-3ad6a4dd14e4",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "41ea6540-d80f-4f1e-8705-e022036dcd10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9a0ad6-822d-47dd-b8df-5f6aeb64042d",
        "cursor": {
          "ref": "b49db51c-bc06-4b88-a351-9f56cf4edabd",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "22f32128-c1f1-438b-a78d-41ddee7ec253"
        },
        "item": {
          "id": "0f9a0ad6-822d-47dd-b8df-5f6aeb64042d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f96c6a2b-a6e7-49b1-b20c-f8e6d737ca38",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ada2157-8718-40ff-abb6-d97ecbcdfa86",
        "cursor": {
          "ref": "1459aa08-9571-468c-b301-03e4f56acda9",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5a125ada-8860-4910-b42a-8b32a9675272"
        },
        "item": {
          "id": "5ada2157-8718-40ff-abb6-d97ecbcdfa86",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2020fe14-025a-4236-a8e9-99562d40bdcc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84a9f17-4dc4-4cad-8b5d-f11bda3fe83a",
        "cursor": {
          "ref": "2e646382-7154-4f86-b432-273e64c26a77",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "231b7bac-68e9-488b-8441-bcdca138bf18"
        },
        "item": {
          "id": "d84a9f17-4dc4-4cad-8b5d-f11bda3fe83a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0d71b1e4-5338-49a3-afc3-4d12a6a30282",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0893e4d5-02f7-4ced-9f36-1bd60aa6d6e4",
        "cursor": {
          "ref": "326bb129-0159-4d5f-810f-b8b0a84a4e22",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f4713a26-9bc6-4c67-abff-16d9df8ebb41"
        },
        "item": {
          "id": "0893e4d5-02f7-4ced-9f36-1bd60aa6d6e4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6ae17434-9f3a-4808-9891-cd6604a6842a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8247c69a-4ec6-4ad6-8293-75078caaf07e",
        "cursor": {
          "ref": "0378a688-7349-45fd-b404-0497a732381b",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "16d72e3f-0b90-421f-8033-87409a9a6624"
        },
        "item": {
          "id": "8247c69a-4ec6-4ad6-8293-75078caaf07e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "408e0bf0-8c9b-48be-81ac-4d902324389c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511b50b2-705a-43b4-b192-273677d46290",
        "cursor": {
          "ref": "0909be4b-1c0a-44bc-aed8-d611ca5fe7da",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d0b04c03-a204-4318-8812-0ec37c8c2952"
        },
        "item": {
          "id": "511b50b2-705a-43b4-b192-273677d46290",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6d1fe51c-a951-42c0-a00a-56b6a420834d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cba0cdf-df40-435c-a4c6-acd5d6a2b886",
        "cursor": {
          "ref": "0cf5297e-9369-4d10-9e8b-2ab0b7c59c10",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d41bbb38-045f-4c0d-ab94-d259bb25ddb5"
        },
        "item": {
          "id": "3cba0cdf-df40-435c-a4c6-acd5d6a2b886",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f8e708b6-bce4-4531-acac-dbf2b4b9ef7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab42b70-051d-45f4-bf5a-5532120c3bab",
        "cursor": {
          "ref": "be0db07a-210c-4c3f-ac41-5ddd8614fff0",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a8fa2b93-7983-4f0b-813b-31b67d9bd31e"
        },
        "item": {
          "id": "dab42b70-051d-45f4-bf5a-5532120c3bab",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "bc865b88-870b-4726-bb37-39913b07c1cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8adc6408-fe14-4748-b502-6f048c0bd703",
        "cursor": {
          "ref": "45f08858-f749-4329-9486-ea543d3107eb",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ad31680b-913e-4045-8793-86009b7bf864"
        },
        "item": {
          "id": "8adc6408-fe14-4748-b502-6f048c0bd703",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5f41a704-711f-4a37-9130-1d4651d3594f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187066dc-c6a9-48d8-80c8-4a214efffbff",
        "cursor": {
          "ref": "bfbbbc3a-b241-4b14-95d7-5882ba1fe026",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "521dc495-4e7d-4854-b658-87645c732215"
        },
        "item": {
          "id": "187066dc-c6a9-48d8-80c8-4a214efffbff",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "83d73040-e3e2-4aca-a5fd-a9a56448e6fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d05958-f6a5-48c3-b0c9-eb6e262cbd51",
        "cursor": {
          "ref": "0e39d59b-07f0-4d4c-852e-9083ba36e24f",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7a3d8ccd-c26f-4b5d-87b4-e69fa548fdcb"
        },
        "item": {
          "id": "38d05958-f6a5-48c3-b0c9-eb6e262cbd51",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f77ab2cc-1a95-46d0-8940-b357a6f18ed8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "05c3f279-bba5-477a-95c9-97c27cc46dfb",
        "cursor": {
          "ref": "e06ff3d3-01ef-4049-b7cc-a8e278c3337c",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4b71d129-2b83-4974-bf7e-7c8e92dfc18a"
        },
        "item": {
          "id": "05c3f279-bba5-477a-95c9-97c27cc46dfb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "eb1a7c33-7f9e-4a60-8c8e-3fc2abcf5c98",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "7a80292f-f577-453a-a3e7-c6428b0b28d8",
        "cursor": {
          "ref": "a6f868da-befc-4b4c-9901-d9182ffbb13f",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0e10f51c-6d79-41a1-ada0-a124cb8e4c4d"
        },
        "item": {
          "id": "7a80292f-f577-453a-a3e7-c6428b0b28d8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "94b8c0ea-dfc1-48f8-9ddc-4f25b93e690a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "1345f68f-34f7-4c13-bbf4-97e0d502086b",
        "cursor": {
          "ref": "1bb7dc1d-2a41-42cb-b920-cd12efa69d5a",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "05e2b586-9368-4ad1-b019-8827f24a806f"
        },
        "item": {
          "id": "1345f68f-34f7-4c13-bbf4-97e0d502086b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0f4b7b95-9bc6-4f77-9305-5e1a7130ad6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1345f68f-34f7-4c13-bbf4-97e0d502086b",
        "cursor": {
          "ref": "1bb7dc1d-2a41-42cb-b920-cd12efa69d5a",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "05e2b586-9368-4ad1-b019-8827f24a806f"
        },
        "item": {
          "id": "1345f68f-34f7-4c13-bbf4-97e0d502086b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0f4b7b95-9bc6-4f77-9305-5e1a7130ad6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e111f816-c707-468d-b05d-436906facb84",
        "cursor": {
          "ref": "8cbad500-76b7-4988-846c-0c18bb6789f5",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "08b0a840-49de-427c-80c7-1075d80ca744"
        },
        "item": {
          "id": "e111f816-c707-468d-b05d-436906facb84",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "36c5ffe5-c088-488a-b138-1a9a156a87f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ce73d7-3c9f-482a-88ad-f47cd915362b",
        "cursor": {
          "ref": "a904e489-0bf3-41dc-ba25-3f5b7f4b8369",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3cdccdf0-e6cf-4ffc-90fe-333bb1331e21"
        },
        "item": {
          "id": "62ce73d7-3c9f-482a-88ad-f47cd915362b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7c43d127-02a0-47a6-9c92-9d9786b08a93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}