{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a6f5587e-ccd3-458b-a342-0e67b154cf38",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d4b302c4-e8f0-4fae-b3e5-07a5344c88fd",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "703d4963-1cc9-4663-92bc-7743a3119ebd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "067ed59b-d912-4e4e-9036-d8cf57486e5a"
                }
              }
            ]
          },
          {
            "id": "777234b4-b081-4692-98bc-735fc021e679",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "34ec15a8-c2a0-4f3e-9808-2f6e7780b34d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "005b02d9-36d6-4db4-a68e-260121aa04a8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "632cbcdf-da98-496d-a938-c41ae8a43aa9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7a3b87af-e887-4603-91ed-0c965e0e618f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0e857b0c-c991-4c35-80af-8e9b24868a7a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c85baaa9-cef9-4602-afe4-d42f474d9b1c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "db98036c-0015-4e94-8925-4481c64d3fa2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eee1802a-f99a-4892-83cd-7fc5a662e88e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e805526-1c91-41ff-9ee4-2faa04f54348"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1c3c9d4a-f8c6-463e-86d8-6350a82e63ef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cfbb9b12-a22e-4b89-ab78-8607bd64b8d8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf7e48be-58c3-4686-9f73-730a97ff9bb0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8694d7c6-80d3-42d9-a4b6-390246918948"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c71bd3f3-ae51-4b73-8cd6-0358f34a705c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b165bc3a-952c-453a-a438-313cdcf83a8c"
            }
          }
        ]
      },
      {
        "id": "33293c15-03b4-4034-85a6-6d508df39710",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a2794fc1-e294-4f0b-8190-377cc325af8b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4b88cb3b-54c3-4241-8d68-2dd76244f462",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d4b7e2bd-d13d-41a7-ad51-1f5027387c02",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad8a7e0-1f21-47c1-96f3-3745ff10b6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "937b8b45-460a-409e-86aa-083d0c098075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbbdea3c-4a89-49ee-8733-fd74d77aab5a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0d6308-c246-4fd6-83ab-1af354446271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d74a26fc-7c2d-4482-8c26-c1a64deff1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c891de3-904c-48e1-b75e-f9e7e2bd7316",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611409ee-945b-4ce5-86e5-e2eade86c409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b84d5a5f-ed91-4249-b8dc-6b8bd22f9ddd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5d14caea-f5ad-45b6-9f57-401515861b8b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2aba06f6-35ac-4523-96a0-1b4d3670e154",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "540a750b-86fb-4dfa-863d-0352e07950d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ffd8a734-3080-4dd3-9b62-e9ae6acddb2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7a0fc2-5632-483d-b95d-44248e9f3b45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1057eea6-27c8-4c14-8429-7ea0ad751390"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "af772c95-906c-4f6b-9365-084166dde2ca",
            "name": "Positive Testing",
            "item": [
              {
                "id": "39088709-64ce-45e7-9e06-8b8fb7b6c64b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d79d80dd-665d-4c77-ad8a-c4cadc7eb034",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6bbc446c-137f-4872-9232-0d600b20947c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "476aafbc-e209-4698-85c9-62f7527a0374",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "bd6127d5-d32c-46d2-8289-b6c142c6baa6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75a21cd2-4874-4630-bafc-28838a13d984",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "db344609-ff22-4111-b75b-536ca87bdc59"
            }
          }
        ]
      },
      {
        "id": "6a50fa7b-ecf6-4ade-a9ab-d195556bcc13",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6b2567f9-3400-4529-b916-3232a2a10da6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc928664-8f38-43e3-abbd-57e5c3a30ea4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "dd491d16-3627-4422-be5f-3fbd923ab937",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e638bf5-241e-49bb-a838-e0adb5becb36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea41d778-ddfe-4f7a-ae19-174c6fe5adec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf60b2c-6fce-46e4-ac8e-2b0bcb8c69d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f4d2e6a-6787-4182-93b9-0bb9076b5c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c570c1-c0ef-421e-a7da-eb10ac5c9271",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e39b4b-d22a-41c4-a6e6-c257751bbf2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7752fde6-6299-4ce6-8c25-e4193259a21e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5460ede3-9e40-4120-8e41-d34f2c2416e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79b274e8-d78d-4fa2-898f-c2eb591d64d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efceb682-3ec7-4026-b63c-2cd4473f074e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ae8371-9369-44a3-870d-b0f61130a547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7791507-d596-4d9d-8474-734a84453752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b09675-f8a3-4a5b-8294-f4dba9e16139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c31943f-b987-439e-9cee-61037404f85a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8a7b1e-4ae4-47a2-b9de-7f0bd0d33b71",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8444229-2f88-4fed-9083-100fd128f879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b479fdba-327a-4802-ae38-f8443abfaf87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30144be6-299f-4791-9244-368930ec54bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0741b5a-5ad6-467a-8cc3-536fe7478ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74a46f6-6da4-4107-9997-d463b198951e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e1ca5a-a9dc-4d05-8921-e3fbbfba6f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94c5e8de-c89f-4fbe-a28f-d67d996afa6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435fe02c-c0db-476d-b344-7b2078ccd21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2e75c5e-6c99-4217-8d01-645d4aab3ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261e01eb-26e3-47d8-a94d-e2dd9a0502b5",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d3918e-b5cc-406f-9a29-b6bca9c13e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34c43d45-28fe-402d-b2e6-e4e32a88122e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f7dbc4-8dc9-4e3c-9d81-8fd6c081a542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "115a6b99-f402-495f-ab38-4a401637f137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f70c93-01dc-440d-a3c9-e887af796f98",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "695522c9-c837-4c7e-9239-495d53eb3816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0fa6f6f-09c9-47bd-9ff1-ded66e178704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b645bc-dc2b-494a-a4d1-6c4a0259e363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b967781-749f-4ae1-80b2-2c80db50f8cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065e0f65-3ccc-4580-bc4a-079d71029046",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee019f3f-2103-4512-8305-75966fdcbb47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73526883-c679-4781-81f6-01f0c4d2ef61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1818d5-6e35-4a23-949b-4641b8a2aa97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "547463e1-3d6b-4373-b998-994fc1e09616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15c7238-51f4-4984-84d3-268a6c5462e0",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9b2f40-d73e-405a-b3a0-a26460321c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "472a17e3-ec9b-470c-a953-da41a572cf58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4217ed2-90de-4337-8daa-1fac4fdb4869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81d4ea00-95e5-4e07-9c70-aac92ecc5320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f24fe0a-7b6c-4bf1-9c1b-b75f2caed624",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58b6291-0c08-4055-9bf5-0000e1168f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee9a39b-b1fa-4266-915e-08cd3c90b92a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa255d5-ea97-40df-b100-abce81e6502e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6118dad0-12de-4a1d-8ee2-b5bb5352d6dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e41e509f-11be-4de0-8087-14cf0d7386ea",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc80205-33b8-41e2-9812-e01c8505a35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "978e6fc4-f6f8-4867-b882-06ee6b6d72a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b8d00b-8d3e-4e5b-958a-f843e18d4abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb8732fa-8a5e-4b98-bb3e-63668bab15e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c535bd-ec05-44e1-b505-64f480579dd9",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47db49f6-9e09-4b96-9eaa-7cf3393787a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1030f7b1-0456-4546-8b07-268a47c0fa85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c56ac4-bc28-458a-b2bd-8ff370ed5354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7879ab52-c4bf-4b05-b79d-60810ce72fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f205d42-6954-41b2-969d-14408369cd0d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "481090e5-dba6-4009-a8cb-156768808910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b7e8b9-3724-483e-8b1a-31e38790a149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26420277-c8cd-4c3c-b6d3-eb1bda2a731b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d2454ea-295f-4731-8c5b-3d883e025290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c84104-c5e0-4f31-8250-8b53b61fbea7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9182ec5c-2f6e-45ed-a665-8a6696dfa72a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6ebce91-3f92-44f3-af47-6fa3a67df5ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a126d522-513e-4d39-a106-a2ec1529ccea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83fa54d6-d9ea-426a-b53d-3f2752c165c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92593430-03f3-4220-9b7c-af75c3a3f072",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "256975ca-da4b-47e5-9a44-ee2239aeddda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d10ecc3-6651-4536-a866-876b33047bd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096bf7ef-71af-4c83-acac-b5a813077931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a363300-7012-4f53-a8fd-1f5bfc8563fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed51d38-0398-4b33-8fe2-e27fa95fa019",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5cbc9d8-029d-458c-8c60-d5fca9614149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f05c8048-5128-4bf2-9c59-64894b8a1b17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d361c4-e1ba-45f8-be34-672e50a76bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6fba9fe-a44f-45ec-8451-babc8b40eba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77bc591f-4b65-4342-98e6-8dab11a6219a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e0a503-8fdb-4717-94dc-dfadde968df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b0fde1b-872f-49c4-821d-8705a75e00ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5b2e35-6b1f-4446-9902-754b2e5e747b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "819c1e48-4da6-4180-afab-3896f55aa5e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f320291-3d89-494e-9f59-19fc599ee747",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df5e442-4d8f-4ad0-9824-458e1dcf5ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d14b403-70ad-43dd-83df-c607ec46c630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509ea7d6-b35e-4824-b218-c8f0834e859e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "61ad13c7-1d00-44e3-a2fd-1e6e62ca3458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5da39f-fbef-4b9b-8b66-348eb36ca1f4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed2c3bd-d171-433b-9301-d2633dbe6a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8081e9ea-9fcf-47be-a281-3b2dbb4fb5d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f55dbe-0d3e-402b-8e97-27a57456b4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a76f393a-391f-47a2-9df5-b2fa5af6ecf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "735dd3d0-7786-4184-8a47-78d860a930dc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "298c2cfa-870b-4cef-88de-4e63452a6407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a6bffc9-9d01-4374-b599-73b5d7ad37d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0f7b15-63be-4200-8bbe-b7e2c0ec0ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "70e7f2fe-c488-4d40-a48e-c50d11b62a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7374efbe-97e9-444e-ac80-cf1c637588e4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20519b93-8e66-4e62-8570-40445b8da9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1578b99c-0e8b-4ea5-bb82-a2076898d3f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38bd9be4-c6fa-485f-a843-47005129bdd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07973304-27f0-4f9e-b2d6-b816ff116b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8570bb1d-0836-4af4-b427-f0b559c3412f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c863945-ffcb-47d1-bf0e-e40d5fa989d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9372cf59-82ea-425e-86ce-a51d648a0511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f42a5d-e2c1-4247-a31d-20a7394c35fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e478a42-f69d-403e-96f5-c811cbad44ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "125a3c47-bed3-4111-9988-5be65e86f835",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "607a1f5b-4af1-4e33-9028-ea484e788e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af8a1c1-0328-40df-aacf-e8237f16ea13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac92cec1-6610-4ec9-9a02-c308e0da5c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f35d0bf2-2582-4e3e-8bed-44a85f6875cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062d246d-7a33-44f7-8216-599eff524fe8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f69ade9-3749-45e9-b2c5-ae5fcaf9f941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc3703d-c8a5-4238-ade5-24b574bc6d8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43788611-eccc-4c90-8f13-0c1d58f9c83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "83e0d944-b73f-410c-a3f4-b93bdd4618bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ae1143-8d9f-44ec-b645-7284c045fca2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2731d8-dd07-451a-bfe3-e873bafd9f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d02fcb10-bfed-4c8d-98ed-ae64de5be9a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59118d6e-6a08-48f7-8b98-2afb853028eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "329ac637-b822-495b-8a73-9c0d8ca4cf6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68852d82-b645-4c29-8844-2463834da467",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b888d14-1d9b-47c6-b465-5bdd88e7cfbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d05d0a-9452-47ec-819a-d784b4aad79b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a698afad-fe9b-4b67-bc71-1e28d09bb77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f1b49f3-354f-4a7e-9904-e7e2f25a58cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0aabc7d-98d8-43f3-bd33-5db6617774c7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ca649d-6534-4fa9-b58c-dd641920db09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7eaa95f-ea78-4393-8ba3-853eae91073b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6043e9-fe5a-42a7-aff6-5c10ef8fff3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4576994d-1f87-48e9-92e7-fbb3590ff333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1f98ef-ef96-4e37-af61-d8d4a7e0b2ee",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c85a15-0e98-4902-bd3c-81fe162a1b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fe4aafa-5545-4c01-9a91-1cd20fbae164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86002d1-487d-4f0b-bd0c-f30f4d7f017d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f0df6f7-a39c-4049-b1ca-c970fda4d088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485560fc-aebf-451a-9ade-8ad9bb099b6a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16936c06-9657-40bc-9bfe-3e775d73df3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c0d1f0f-b3fc-477e-a07d-e54c928c1fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d561338c-303e-45dc-a940-bc5ae4f02282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b0c423-9a3c-4fde-b63c-a8b3f09076dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec741e0-ab03-4ab9-907d-02c3d4a9c3c1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a2ff2a-aae0-4347-99e1-70486774eece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "844f7c13-cac2-46f1-b485-c53b53a80dc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e51700e-ca55-4fe8-890f-6ab658d18cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "609b1a86-da9e-425a-bb86-f8516a7b793a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2421ea34-849c-4d70-ba7d-62c02c0aa452",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05cd056-c811-4961-ad05-a9b4a2996d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e326cd-cf89-4de2-bab1-2f46a982dbee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70487b04-f044-46a6-abd2-45a3195f582e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7b31ed2-8ccc-4f32-93a2-7a0443605237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dda00e5-5bc2-4422-8fdd-a42323806081",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2d5826-1c49-4c8a-869a-e4c1762b52ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d4c30e-db81-4df0-8594-bf72aa14e7ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b6bd0c-8fa0-48ec-a222-859fbac18869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d25ad7b2-221c-4331-851b-04c57adc968c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f77c4b1-2727-48e7-bdab-c14a2e48e6a0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d6c276-f501-40ac-a6fa-5684373c4738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd81be0f-95fd-4a6b-ae5d-c6f43f9100d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572cb892-c893-4bb6-a828-febc1f52f627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0c33995-3feb-46e4-99c0-a65db69a331a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6709cefa-6f92-4789-8baa-024900cbb428",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "002cbc32-585d-4520-a700-871e392bd5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e310bb68-fc28-496c-ac0d-03e9b67c8e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee19a5ae-c776-46f6-afeb-c5286604466a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38c58bff-908b-4f3a-b0f7-a2c658b19c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c4c8b9-f780-49c2-b2cb-cb3a871003d8",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566a641b-1532-485b-8a78-1488d2de8406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffd21d14-ee8c-463c-b811-9bd38101f15a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7fe7d7-4e45-470d-b2bc-068d1645f762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4e3ce6de-8ea4-4ee3-b2ae-5e0fbbc7107c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c7f502-d3e5-4251-9641-1f0bb9f2d38c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61831d05-20ec-43dc-82f9-fe9b87d3f7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "781fc3df-48f8-46b1-9a9b-ceda3d98c5f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6cb6ec-9e86-4bb0-8b06-b7c85ce52dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e45acb26-6f43-40f6-8d48-a27cb3dc196a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b966ed21-fefe-4d9d-aaf5-04d258a928cc",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "313c6173-484e-4a61-87bf-a558af8f954c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b97dca03-738b-4964-88d8-e8190a7085bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96cf307-6ae4-42a1-8300-c44c23501618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "226201f8-2a3e-4ba7-a884-719fe40a7bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de5ede60-7130-45a2-aacb-0ebfb4040d71",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc287a78-1064-4041-8ea4-fe3c12debb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b332c9f-a483-4659-9229-29529e913875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24820542-0779-4073-938e-47a038a6b2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "908ccda3-2e1d-4d1a-a0c1-9ca033f10966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3dc19e-f86f-4756-a3d0-b2a9f087cd9e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "268bd982-7c3e-4f08-9fbf-61cfd6e88a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562c7419-99f0-46c0-b1b4-5541f7de4081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8118da5-98ac-4f09-82ac-a712bb39ad72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8672e73-c7ab-45a1-9e9e-c35b43ceb9c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b849f824-5330-4b01-a937-dc1001baf789",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52ed31f-b7d3-4617-8fc2-7e8342d9cbea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44bf085f-9166-45e8-9db3-e82da2a958f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6667ba-8b9b-4c6f-b32e-c85cf0bf075a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fd8ec0d-5574-4b67-bee5-87a4acc85b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1786ef9-9abe-4af9-acc2-03987f735ade",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c791e33-5e75-46c4-98b4-9b13eea0b887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3c4400b-c847-469e-9d95-28b839633b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55977aa8-f07d-495a-8d93-f56add6bc031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8a615c7-77b2-4e89-be2a-4425a7f17727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03fe58f-faa4-45ba-af8c-ce5808312108",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3bd5fbb-5ea8-442c-9fac-85c5f4c9a300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9453494f-1598-473b-9a85-6169a54c1803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5e7575-29d8-4de8-876f-b8f2ce5bfbc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2b9c2d6e-b3ad-4de0-a140-743526ada3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3a9ad6-51e9-4ef2-b0e5-24d6138168ca",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06355647-4fa7-4300-aa21-b38c4c2eb2e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71dc037d-ce19-4020-b8c7-a3818b7643a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3359cda1-6089-4886-a7d0-449eb06283f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe34b1f-4460-4b6e-9e79-63d6e5ada450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97437b61-e632-44d8-a96f-10c6cbabe675",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94106893-34eb-425f-ad44-69b64a738cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5996ad6d-f302-4cf4-969c-c9bdbe194bd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e05b364-af0d-4cf0-bbcc-84471393157c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "124c0bdb-95f8-4ea2-9129-5e0a818f3f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2665fc10-cbd4-49bd-bc14-501cb4afcd7c",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a23b44-2276-4237-9cf4-34682042fb44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6914d129-a708-4b2d-b576-62763181bb2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f7cb0e-2910-4092-b22d-e0ca20093695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bac06c7-dc1c-4f2d-b0d8-d40ebd5d6368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b7e7bf-9ac0-4d6f-8640-9fab94167ceb",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa08921e-5096-434d-9cc2-55fac439cf13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f1f982c-45e7-46e6-b394-77fa2a7c3103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f628b0-381a-45ab-a560-a2441e3e9e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d5e26b3-c958-4c8f-9ed1-a08161698cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde2ce90-caf4-48cf-b3f0-b2bb0bf9d081",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44638d9-a64c-43e9-b77e-7cc97b0641b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49411b6a-d5f7-47e2-9865-8e8010aeac81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727afd53-7779-4461-a70f-10e2c740f9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a91a808-db83-4157-8a07-d04241aa3741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2bae89-fc4a-47bb-9b6e-e26cfacce965",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0151e709-bd0c-4de0-aa52-23c0e287e8f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c94f95a-a735-4510-a0bf-16511d72dd25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa178d4f-19f1-466e-ba91-88f9878e9549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6927009-6524-4851-8f96-d40b89e257b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f512e55-ca93-46e5-85ea-c19eb8678ee8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8b52d1-023b-43c2-89ba-b65bdba96096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "283030fb-155d-4744-9d31-62dc7b8c5f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5309b0d4-0514-4724-9347-4802d39cbf2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c60ac87-7187-4cf7-bccf-402dc884670d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d1089f-98b3-4410-b612-da5c1221a04d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6583f66-dc52-4d73-b967-210c27a93b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f42d41dc-3157-42d1-a24c-b1da4884e22a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9117a0e4-ae6a-45a2-99d4-050b8c28b4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "48bc1eee-44e8-4825-9f23-5f3d6e75d6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e562f84-a5a7-416b-9c11-71adbdae173f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e6584f-afc0-4fcc-8c45-b1db834b5dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d61ec518-091f-470d-9a37-70c405177f61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c390bfec-f742-482e-9e89-d1f8f2002b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fe40083-bd4e-4f01-b9b6-f09ad0d2ddd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ba5850-1c8d-49aa-9ff6-3885cb265561",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90da453-8b86-45e3-9637-145ebb7da28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9280105e-74fb-4ec3-9e07-4228e9c7055c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc739bc-c1d8-4963-868e-30e23d9a0a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0df150aa-63df-4fff-8570-2c77e6a689a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358ad799-ffb3-4ddf-95e3-c74942bc59cc",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83294836-087b-4688-8939-0edbb90ee7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672df819-5ac8-46bc-861b-4aa825f30dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450a3317-02c0-442c-8220-2a4fc38ebe87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21504800-9277-47f1-9820-61dff2b52578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf25b27-3fbb-4744-af6f-4c89adf01d01",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b56bbb1-1f67-4d2c-a4f5-01f3523bf1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56b04854-5eef-46a6-a453-eff9d60532d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1bd4af7-4fa1-40a4-8b37-262dc9673696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "37e40224-11b2-4602-9464-7e5fbed88999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4205251f-fe35-4b41-9232-7b21e93ddb78",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d3c97b-6fb3-413c-91a6-4d99fa654f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38bf2291-f24b-4917-b5b9-58464c32f367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62c45f4-7dc9-4387-b247-ddf8db3c21e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb841c01-b225-468e-8b44-464eda53eb52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27364ee5-a701-4a10-bdf5-0ba68f9afa0d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58cc86e9-341f-49f7-994b-05b5c9425157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbeeea63-6d98-4a78-a3cf-6dda226d7a69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8667a972-127b-4d10-96ff-ff144c0679a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "09102a75-0b20-47eb-85b3-065afc4b1ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d985ee-b646-4533-ae45-558852b2a32b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb6d61f-8dd0-4fb0-9fc4-f5f7a2a8b78a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce729135-b484-4e48-bd60-02e9bd33db7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c241dbdf-1c6e-45d8-8348-905176cc1a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1fa7b5b-e44d-4436-b414-0dc8a8366425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d2106dd-ad71-4867-ae8d-2980adc697be",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "532cc018-be6d-44f1-a35b-8b810261095f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86efd769-c775-4d49-9ddf-77f9511a2494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3666b2a6-c561-49cc-ba08-a70ff80c2ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8056be3e-dc66-4fab-971a-e3b851ecc27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be8b44f-2e42-4f7f-8b8a-3820f37764e3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19cda614-8a96-483b-8989-a806130bfe7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d977f710-bbf1-42cc-bca0-76a4afbb0abf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb29285-5486-456e-b545-e1dcf56cd4f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "274f874e-5994-4af6-9900-b208431c631a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10b5413-3f9b-4166-bb9f-590115c7df27",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1755da23-7f02-4d56-8f10-a64685d6dba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b4bcc0a-ee64-44df-a828-32e93ef60555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14386891-6578-4ace-b596-4e4d2d76ee0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "306468f2-b0a7-4986-88eb-6d55cc5315d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f140317-6c92-46cb-845a-4c8db30e36e5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6713ccdd-78e3-4a91-ad2c-d998e36bc725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a5ab712-aa38-49f9-8880-2b9f73b1ea44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04bdc77a-4a83-4abd-8745-1ddf560faded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb86dc2e-1e10-4458-89e7-e5ff2a034128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e547980-3043-490a-af12-98de7ce1b3d8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c807ead-2edb-49bc-8af0-934a027e255b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b55bc72-9a88-42c7-9524-c1822111b50f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23102bc3-e55f-45c0-81c3-cc4397062ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b66f713-e850-4d4a-bea0-424d26892ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed9205d-bf02-42e4-b436-cdf93e77b6bf",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d0be29-0e07-4c59-a788-f669845ebf73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aa57a6e-9dc5-4c82-9bed-33a3d8fd1fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d672f75-26a1-4495-923d-e65850adfd41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e859da3c-c6b1-43ee-b41d-1df437e9c831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ddba0f-84d8-4233-96c3-8045571ccc00",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2fbbe8-07d6-4eff-b50d-af128c98474a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21e41ab5-cab0-4aa0-a0b6-363e7f83961b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503b4613-c3d6-4b0b-a4e8-b6022b5c9270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1914d15a-d5fd-46e4-a544-f47e30cee309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90289f7e-c08d-479e-99f5-82ed352e551f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a38c48-e028-4d0b-8dc6-1fda40247d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16798757-482f-4841-b706-3c397b663b1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14011328-5ddf-4eb3-8c27-80b4dd40a7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c34ced58-465d-451f-98ac-b18f08fcf525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bfd8947-7cc7-4a89-bfb5-602260cfa36c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbf193e-3ba9-44d1-9965-1f4680ab2fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b0af4a-93e6-4002-b7b9-eb02d46796ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27b57c8-16c3-41c0-8f32-dab6044b3cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a085263d-884c-4ced-a942-f32282043f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07663871-431a-4f1f-aed3-f9ebb188d767",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27e50df-a9b8-48e5-a957-d3b8511dac8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03799e08-53bf-4a7f-9838-7fd3bdb5a712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdda24e0-24be-4be8-a95f-65aba82c1e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "91b180da-1f59-4b59-b19d-58b78ef9e807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15037bc4-61f1-4525-a68c-3e5c25f75f98",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6558d23-4b06-4441-b9b9-c64fad505aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a348ccb-0e6b-4c64-bcbc-61f3ea5c90b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "952a904b-7ba7-40e8-badb-36714e09e4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f6fc265-f250-4d60-bd87-bc2110b9ba09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f97acdf-e656-462f-8584-6678f961bfbd",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b7ac81-7df3-464e-93d3-2f563531dca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d917bab-899c-4d49-8f4b-3b15925865ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c85f67-615c-43d7-a427-5ca17d43e6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "79430cb5-9a13-4e14-9092-63d7a1176925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2203ee7-dbcd-455e-8c0b-f4ed8be80472",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0cad176-c20e-4f60-83b4-f846f19d1e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db416ad-0707-4506-b6e6-9ba1dee7d02c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea28d83-2e20-4f23-a6be-c66c191dbdcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8aac8ae8-a56d-4fa3-8806-709d8a596c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3b5470-7768-4740-be77-ed1fb9053979",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc017ef-96a6-4018-94f2-f74cf3c9688c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95f34d55-84cd-4bdf-b888-5edb5f6c7060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f77d14d-12fb-41f3-a818-b550351bed68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cecf880-c6b9-4fa8-8ac4-5ffff5782900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "646f6a5d-1798-4926-9917-3792d63a6446",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84632a6e-7c02-4819-8df1-53a0e777ed2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c60592e1-e0d5-42ae-8864-eb44e4a83a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881286d8-df59-4fb4-9a05-c5950d5cfbe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4726893-ff53-429a-b149-bc343f5f74af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a59f2d7-7f7c-4331-b78a-a1d99024ce34",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3059bbd7-b8c6-4044-b6cb-d1569fc9c263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d0af9d4-7047-4d2e-8204-421815c21bc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94396348-ba17-4b70-9bc0-1f3e83bff0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "812d361a-a25e-4623-b36b-14c19c21b00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4fac344-3566-4a62-8587-ab50f130860b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7feffd9b-fac2-40b4-9ef5-3d1ebf9ba7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31f8846d-c8dc-4ad3-b2a8-71c2e2d08487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b84dc4-6d41-407d-b914-50ece12c6ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d421330a-9356-4ef0-875a-b51735fb58da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8babe3-11a3-4bd6-bfe5-c96918a4c7ca",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "411e1075-3906-4c7e-a8c6-611275e77465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c31d1c06-983a-4eca-80a0-d9cb69ebf295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c41137-6385-48fe-ba0d-3215ec938a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f19ce765-0f76-418a-8bc8-6f82625951c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6e6df3-999d-4397-840e-ca5d07f31346",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92edab11-2a52-4104-a629-a54075d8ad62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "234c877d-049a-4b90-9a09-9926ff1b6084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8439bd03-dae4-4fe3-bbca-e66010ab5399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d305c0c7-ac68-4c82-b480-3cd8dcbca5f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fda7c5b-9065-47d4-a8d0-60009d618ce5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7366045f-2989-493b-9c96-5322f817732e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d37ecc0-9079-483e-b0e6-b5cb483a2bc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b439c6-009f-42d6-a442-5127a3a88add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d6409d9-0808-4768-8562-90af4ccf605d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8ea884-bcf7-4d32-bee2-19a5f8af0165",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669d5fb3-9dc0-4895-ae47-dda035ec28c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aff920d-8752-46b0-afd7-a4d6e1993eb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c6c908-1263-4e62-8660-caec38df8b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1c504c2-ddee-47c0-be15-a4b3a1125107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ada962-8c3f-421e-a251-6619f7467045",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55696b28-7076-4c13-bcc0-18a4e9102296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3407e9-e43f-4fc7-97f8-c991a9400fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c818941-f39f-436f-b598-2ca6464e4686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b55929a-85cf-46ae-8b44-90cd61d3ffb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be0cd37-3f20-490b-96af-2a134f85023e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "541a0de1-1f1d-4b06-962b-f114b62b6643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0100adc-9f82-4453-b8eb-03b37fb54cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811e4308-867e-402c-975f-e9ce89136a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb18c59-4cb2-4d04-9a99-ef37a64f375e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9623b38-eae6-4489-ad0b-a827afcdb58e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1267e15-b50e-4cda-8b56-6feeca0886b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4e2f7f0-e7d2-41d6-acfa-a3404f5f8b61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f813741-df48-45af-90f0-e5279744a0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "196202c1-91d4-4fe5-93a7-e65e67c78ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab38bc6-baba-4d06-a14d-0310c0c46dbb",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01506fa0-e47a-4901-8991-90171eced229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8d48ab9-4a87-494b-aa24-379ce7fed8c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0080f7-7f46-4ce0-ba15-623e0280eb7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c536736-d84a-4b67-af5e-88afa5ed834d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2323344-6bd1-4e3d-9d91-499b09094ccd",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12436cab-9db9-471a-8ff9-a268b698f790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fce1aac1-3962-4834-b45b-21c2b8a5489f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a9f787-0494-4771-9bec-27d441cec412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc87e084-89b6-4fe8-aea4-844f57ca3288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3cb3a2-fa0f-4058-b302-d35522500cd2",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68cc8ff-17ae-47fb-80c3-3fb28ec4c4bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f26857-ca0a-4775-abe8-5795e40787ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06acfe49-64fd-45de-a0bd-555a6e27ec96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b1726ee-1361-4683-8677-2c65c013778f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef980037-40d8-4366-aeb3-4414377e7d91",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa171ab-91f4-400b-87a3-4996e0e8e4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271de5c8-6bbc-4e14-adae-c46ee75b317e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64444fc6-dd8b-4abb-8b3d-16b0e4328217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f08224-e6a1-41a5-bb3a-738e958a9d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d9aeb2b-3966-44f2-a201-eca26778f42c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a72a1a-e4e2-4cce-9623-828e66661848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de7564f6-1a3c-4a2e-a24c-6538266c9bdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e185b2ea-232d-4686-93b9-2b0eec71ff7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "db4601bf-4d55-4055-bdf6-395e92a2a186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa126bf-034f-4ef8-ba28-c94e17e39231",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4f57d2-b743-4a25-a711-709166c744b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b8653e9-4d2d-4d6c-b883-9f789fe3996b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2de4a2-9b7e-4dbe-97ed-815ec284e2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "95590825-1d67-4cef-91cc-cabe7a8baa5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375aa3ab-5dc5-415b-b1ba-640444a6f741",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d816c9-c81d-49ad-8f1a-f81a1b5a8760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ed23fe-de22-41e9-89df-e641b00269fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594bac14-d2d8-4b7d-bd5b-48f83aea95e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e0596e3-cc93-4cb7-ace1-ee037f44c789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fb7677-37b9-40ca-bc07-ed72c582e2d1",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c30ce85-c075-42b5-993f-09921ff3c2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4c54d8a-8d30-4c38-866c-2a41c012f6a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ccaca8-a8b3-480e-beaf-06311fb86739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d95cc92-a0b4-430d-9d6a-4c8d1f9b9bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd89838f-2e78-43f3-9ea8-67b9dc35bc57",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56612b4b-4b52-4374-b9f2-a52ccb0aaa31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60fc2250-2ec4-493d-b30a-ad6fac6f0742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6db35a1-778a-4bf4-aa3b-3484df7bd3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aed8cef3-8024-4b42-9634-63b19c04c4b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fccb4a5-fdfc-4e15-8770-d33965bfec24",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c0a323-5e52-4657-acb7-01430cf0237f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8421672-bcf0-436a-adea-4f59c366ba25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a3cd9a-bd81-4f05-ad17-0fbdb1003d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b03a8346-92bb-4b24-9010-6e33e4e5d43a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8c429d-c6e7-43d6-94e4-45ec82cfb1e1",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e0c36a-2bf9-4e48-84fa-6fd769408e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7c594ca5-1126-4815-a839-67181557cd1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c052e7f-dbf0-4529-bf8f-dc968c06e35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "618111f6-b3ae-4467-bb11-510aac31809c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c21cabc0-7c04-4fb3-95ab-11834dbbbd44",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cf735661-cca7-4a14-88ea-377a0f91e39e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e19581-b8a0-4bdd-803d-e5d3d34ef892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3bfdc344-5ab5-4508-90a2-a8ad155e36b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63364e0a-dfcf-445d-8d3d-1128a3ea8d30",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe6f5e25-a085-409b-91ba-70a730e449d2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "211256c9-ba8f-4953-b0db-747141c637c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8c76dd8-54a2-40f1-ad4b-e4da3c733068"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f4b78cb-7e37-441c-8fd7-023a22aae1f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71b4a6e2-a0fd-4e43-a569-0473b8f76fff"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "03a70c62-fa26-4b66-8f09-5925575a13cd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1a6cd019-61e9-4505-9838-a9e748a8f2dd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "049229fd-1b66-4b86-9ae6-6a24f91bc5a1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8911a286-9cdc-4d41-b8bc-32bd8c7cc909"
                }
              }
            ]
          },
          {
            "id": "49d99f4e-692e-4627-ac3d-d094a4fd043a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "23fe72ea-436b-41c6-b138-39f3e6d3b6a6",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "75dd6ee5-4088-4bdd-8164-04b1daef8c96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c596e2c6-d999-4aaa-9d9f-bf04637acd98"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bbfda9bc-3c20-4581-9590-16e18e6b1843",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b10c8b42-8835-44cd-93fe-2df4f19f427b"
                    }
                  }
                ]
              },
              {
                "id": "230c0bfb-7f7d-41ad-ac44-52554463ea60",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11d97260-413a-47d1-8d11-60004b3dde7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "82e31949-3f75-45c6-9bb2-66d87580e592"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3177899f-c5fa-47cb-8de7-1f6127b75107",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0f4b03c5-5c49-4b36-a8b7-7960201d4e4f"
                    }
                  }
                ]
              },
              {
                "id": "ebedb265-2dbe-48bc-964d-f1e0d737cae7",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12316cdc-f034-4431-b79a-aa7efaae3c84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b6619b20-55e7-4638-bfc3-448269b6e13e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7dc1a2e0-631c-45c9-9dda-fecb18786679",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5064f360-2e60-4904-a325-5a7645ba46bb"
                    }
                  }
                ]
              },
              {
                "id": "cafe70ac-4509-46b4-b0d1-ba57d179da2a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f23fa8e-a332-44ae-81b9-27f0b9b83d5b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb6c60e9-68cf-419e-835c-5af0d9dcab30"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad9c390b-3c4b-47f8-96ac-dffe40ec8dab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1a7d7b99-8c84-4150-bceb-ff1257db78e3"
                    }
                  }
                ]
              },
              {
                "id": "c744fb58-1450-4c7f-aebd-d5681df8ce57",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9ca528e-cdef-4014-a908-b843d1c8a7d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70a1aa21-0d35-4a36-9894-cb1b35e8d842"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da92d04e-f791-4bdf-9a8a-e5240746baf3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5176b91d-2ed1-42d0-be39-3a3efd751266"
                    }
                  }
                ]
              },
              {
                "id": "cc290974-ab49-4901-b59a-de900bd7fd37",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab750c16-b341-4b67-8555-2cf1c0707eaf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f65066f5-1594-4142-8bea-00384822cc5c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4ac6beb-cdb6-4e1a-a9d7-2aa3f1dbf82d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d4fcac10-8a75-4e98-8bbd-4205406fe512"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e98fd3cf-eca4-446a-b40f-5aa901af399b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "329492cb-51bc-405e-a173-a0c2f6fdf503"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "46f82bf5-5e55-4363-84a5-e17931d5c1d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1bfc96ee-b684-4ba0-b38f-dd0d855627c3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f39f001b-b987-486a-8875-695e8891584a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c312551e-b915-45c1-b836-e8720afbbe49"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57f8cf5a-3692-4f76-a41a-cb2f58128b57",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "023311b1-cdab-4125-8833-b7b9734895ee"
            }
          }
        ]
      },
      {
        "id": "6035b3e6-a433-41fa-936e-bce3f1e3d4c3",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b5ffb399-ad5b-4a8f-a1e7-9997380060b1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5f0c464b-ac08-43cc-af13-155e49ff0224",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bedb220f-b1f9-4f3e-80bb-6b90bc8d77b4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2027a21-16c1-451e-b3cd-3100483e111b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3444d08-f4dd-4b3c-8bde-830a2889ea42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3994d9bc-cdfe-47fd-bdb5-ff8e0cf0d18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "510a0d1e-db2f-4154-bfd0-e8d02b5f92d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402c2792-80f6-4ce9-bd0d-fcc8b4bab458",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82690d9-b4e6-4f9c-a22e-941d25bcc656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2774021-07d5-4514-bd92-b8b2c0f68982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4874e38f-33ee-4313-9398-3ce4b9caddd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "05ddc0fc-e9e6-4e7d-9eb3-33816de53deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f807913-85a3-4593-b79f-79b08f503c7e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872b3704-da1f-4511-afe3-1c00cf2d1d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4206981e-2920-4e8d-acec-e99fb562d2e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4e48d7-d6c1-42a9-ab51-f66e78dcf6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af04d539-3373-478e-982d-8892ff956ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607d32b8-c98d-4ca9-8fb4-9b771567a8c0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13e53f6-b98d-44bb-a704-d27eec5b114e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2f2ef97-d066-4d80-a329-619c6c6af914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2586b9-e775-4707-a6f1-39e41fefab2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c78bf989-7ae8-4f43-9663-fbfd56cb183f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552dcb77-7d7a-4fed-819b-0190b7d358ba",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f2cd7d-84af-4c37-b02e-e789b3eb7841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd074c73-4c93-4c3c-a809-31ee611de25f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed80559-5d83-435e-8acd-7e7e236f7902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bb6480f-37a7-4c64-a9da-955af0ed5156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990fba44-be05-4586-a2cc-299ee5b19f94",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd89db4-8734-426a-a561-922d4f40a0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89a2923b-3745-47d6-b22c-be47f41ae806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d567d4b-09ee-4f5f-9783-141b811afeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b4fa8a0-0728-432a-93fb-c336760ab7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46096945-8b0b-4a93-a9cf-b54671ea2188",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a6aca1-0ff9-4e07-bc46-24f616300590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab674355-2614-483a-8568-20cf48f0dcb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266ea1a8-77a9-42e5-9d76-e87bfbb31a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f5d885b-74d7-4410-9dde-00203eaa7705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b60fa8e-360c-498b-8e05-06adf8e27ae8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a00a58-d443-4e88-ae03-8f8d956e328c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52f23a8d-6787-46ff-853b-0663efc186ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff6dff7-08c1-4f89-8edf-c76d8f03a1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6597073f-bcd9-4156-9dbd-a47d4c81b531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c2eb17-f374-42fd-8da7-83125945f8c7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70cb253b-5ffb-47fa-a66b-49c30defdb86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c774a82-3a53-4950-9c81-7da4b6a9c424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8952ac37-105e-4413-9740-a71c729c30b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfd3ccfb-3489-408f-abb1-cad4e899aa86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac40dc2-3082-4de5-8c53-1132fdf8a532",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f822c44-a6e6-4ad6-a327-fbf2514736df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65825c29-afa0-4a8b-a5b4-cfd39d69083f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a09852-2e67-40fd-a1ea-8a097503a746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e10f2f65-c0a3-4789-a4fa-5e16a171281c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af74e67d-7825-4483-bc43-24b92d4db4a6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe3c446-d3f4-48d2-aaa4-a597e1b17475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b164575d-dd55-4833-b3f2-203388514e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbc3b7a-c4e8-4589-991d-d63746287fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a86afdbe-0d02-4b79-a3a2-f848fcc2782a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd2da52-70a3-44ce-880a-a320ed553619",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0efafe-d28d-41a1-9813-6e279d6ba54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f55b24c6-c78f-4060-97e7-0c51ca3bf0d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf017c94-3345-4921-853b-08a737d631f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5670de5d-8271-43c1-a16b-a53fd400f1ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3430f70a-9297-4a0f-8f87-dc65a55680bf",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5e83c8-0a75-4bfd-9164-fc2d18ae2815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09cd39d9-89c0-4410-91c6-ebc4da2dc07d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ad037b-1edb-4b47-8ea8-2ea31e8c139e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "76a38f35-be3f-432b-8e79-c14258d26951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d8090b-37fa-4a34-8831-9a8589b9283f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe8229a-b878-484f-a1cb-1049db3b7039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca2d010-00de-45d2-bd6b-3b5f3de21e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf985be1-5038-4b14-b704-66245406275f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "160f2e9d-39c1-4c60-8e1d-d0fe71749911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e6602e-460a-4cd0-aa48-922aae9595bd",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b20b2e-9c47-42d7-aedf-682a96d431c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9676fe7-4e79-4050-b7ca-ea023154d2de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6de0cfc-812f-4827-9bce-39fd22c12c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ac97f73-62ac-42fb-a435-7eb06b966578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c99def5-d5bf-41df-b828-ca6b7cf49dbb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ad3c31-3b4e-4dd4-b8c6-b59dade7914b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb977b1d-aa26-4e34-9aaf-be8ea5637d8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883d650f-f559-42e8-adb3-9678b5a58dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d858b6f9-cc6f-453d-ab5f-5c0dd2b2cd2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec8d5dd-f56c-44be-9466-c20f5dfaf42a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1b99e3-3432-43e4-9c97-b12e60482a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2847b095-4f4f-46bd-9828-0fbc976352b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571c2118-ce42-4149-b0b2-070d2be97bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd1eb889-7bc8-4275-9df2-f88fe12247d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8d486a-d3ea-4298-963f-a1d4ddccfed3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a553266-db9e-4492-a44d-da762f5283f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06ee6cd1-26f2-44ca-9440-4919bfa78ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33011917-1b24-4455-b70d-23ed691eeed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f3b5a1b-3190-4489-a149-e1572dfc36cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439ce484-61cf-446d-b180-33effca4afb4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7bff5db-fefd-431d-8097-7abd3cf354fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f1cef8-aa42-4a63-a16a-f3c732fc0b54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53124e7-da43-4b2b-a882-f8810f66eb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2db9c5d-40b2-447e-8a32-0f89f7a3f4d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8e5d61-1b74-4398-91ec-7219b72f74c2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb75d64-04df-472a-bdb0-20e053ebd7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b34a03-134c-4d90-bfe6-78f086aca10d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af425929-531e-43d0-8e3c-30a9a33d96ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28e45e4e-9c92-48c1-b112-efe09c526653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52abf7e-e02b-4547-91f3-ab8af4ae1ea7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be597b3-6964-4247-80dd-90b57ef39bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b86628-c2d1-4294-8c4d-4e0d1b47b688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e8b5c4-1631-46a2-b909-a9edfe0e0388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba6cb0da-6397-4cc2-b0db-9f5cba147592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2386ec-a7e1-49c2-9b8e-bd964c2ba41e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55fed66-c88f-4067-948d-f3ee922921c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "814aae99-a326-4b1e-8ebe-777d7a5a2525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b5094e-800c-4cad-9f27-c9d8081fb7aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6baf998-1b55-4a5e-ba58-e118bf2bc48d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d0e477-4fd5-494c-8e6e-851073cd53c8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d0162f-d22b-4292-b0f1-eef19330a828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba804178-ee33-4abe-a80c-6f6656c00e90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d43ebfc-d5c1-426c-8ccd-66fd8346f0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f077a324-3d5a-410d-91a4-5a371afa9076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9eb7d94-043a-4b08-bdce-3a5b963723cd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b712046-d075-40c5-b160-3a29ee6718ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99dd2dc2-987a-4ba6-88db-7f18011f0d1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6f76c1-7c05-4376-9649-359528cd0ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ba710be-e7d1-4a95-abb2-10b29e8d6650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c491ef74-8351-4f57-a8ac-6bbe9f7b8976",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab8acaf-9522-4b15-b82e-5a90152429cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2232a262-17c1-4a10-93cc-b618699790a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a313bcdf-7c8b-4b68-946f-d187b865834d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa4a31a5-8c65-4efd-bb0d-f721a8a9b55c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9596d0bb-bc81-47bc-990f-acbba7373171",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61561405-524b-4550-b04b-e94114fea92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff60a659-3712-43c4-8387-b6c5468442ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f736a64b-601e-4329-a04c-f4e456771ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a304da8-d57f-497d-b99d-2be4e1605e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2a7514-79b0-47df-b178-cb722c683573",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "507d61a7-6446-49b0-97b0-5e7e32fa8865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e3a1ded-213f-460f-8a9d-b32c2f9865a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32b9e7f-6959-4fd4-bcdb-f805c3574bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89639f27-96dc-4ff3-8ddb-5310c60e9851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c58808c-7118-48e4-b406-934f333f54e4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94fba5a-41c0-45a9-949f-e6b71adb1e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feebb420-7d20-496e-a859-c8c998a65582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0358777a-b6b6-4417-aabc-3ad4eaf092d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0242b15-394a-4938-9ef5-a2b42f64c84f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7566be-604a-4dd4-a2d0-c4696278ee2a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12f5840-41f6-41b4-829a-da300858e2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d8b19c-0470-4cf0-98d1-86e0220742af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e6ff02-2219-42c8-b43d-c541dfcdc68f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae2857d8-9edd-413e-b93b-6cfd90867747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d3081e-e527-4a8c-ba41-bcd03cd85109",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7150583f-b055-435e-8c63-4a81bb620c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6144be89-0a49-46b9-81d8-202028d5d713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e0ca5e-3a9b-4065-8611-898ee12e516e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e261d3a-4413-4fb1-bd9f-2cd67d39b421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52a9846-a21a-4c2c-9f3f-4d014e73ebc4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d76ee775-03f8-43d4-a9e0-59cf2becb61a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f265f395-4211-40e0-81eb-2c2801f860b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e8fc8b-e36a-49db-b970-8c922b40fa45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00f47fef-6463-4e56-aa80-bc088b9a79ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561a8bc0-d1db-4a18-9e51-7a0940bb7de9",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "167ed4b2-a4c5-4d6b-9fd4-341c1d26d08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35d1ba52-4adf-4871-94f0-a274f9ed6510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ae6166-c1af-4dcd-b00c-26f12684c697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2fae2d5-3569-4f9b-9693-010c54f90488"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a0e8a4ac-10e2-4583-8c0e-d3395c075216",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9172cc3b-7658-41cc-96c2-52c429796e4b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe5e5f2-f9fc-416c-856a-7427ad3a7b15",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "737814d3-da00-43c0-b563-62eb47914245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9d8a7c-c0c2-4b58-be62-8fe9484c24d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ccf35bc-9afb-40b4-b275-52db08513164"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46be78d8-f01a-47d3-aaf3-c1b798d4cc68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be56a6bf-5cc2-46c0-a47e-01bfae2fbb51"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4702a9dc-32d0-463a-95f0-abc2deb1ba20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9979044a-3c61-47a1-b26d-aa725a64329e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00674a05-784c-46ae-b4d9-141c2ea5b721",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0f5d6818-be9c-4a23-bb16-a415e6ce4f90"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0c42ed30-e9c7-478d-876f-d7eeaf8f82a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "109713ae-9cc3-4850-942a-89926f7c96b2"
            }
          }
        ]
      },
      {
        "id": "51677613-7377-40e6-a833-40c67ae8e7d1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a75a69b6-4d56-440c-91a2-0cee65d582a7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f68469c-bc93-4ca5-9144-adc2d370a15e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "789b142e-39ed-4476-ac1e-4a27fc5d73d0",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1100841-6dae-4909-927d-84f2ad7ce45a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a9f880b-dc33-430a-be38-1d166b02acc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57fdda6-57f2-47da-89ae-5e736474a58d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fc3149-4483-411f-87d3-9181cb68df09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd361373-64da-4d6c-b0c6-4b352170e5f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb93cb03-c095-402f-869c-8d320ee70b7d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e048cc25-debf-41cd-8e94-7e5cc903625e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ca7ac7-940d-49f3-b7d2-d111b1eb6b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd09b51-4d83-470b-810a-995ca2db3634",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4525c68f-50af-499b-90cc-78ccf387f7f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95b1487c-aeed-4895-b5b1-88e86f22ae70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c86b5f-4a94-4d5f-9a18-6cd34d357898",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b24520-7666-4cf4-815d-fbf263f5b904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b988537-afe1-4eeb-8490-a27bb1295dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2713e8ec-fe00-406c-99e5-2a1f78782174",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa80791-37f8-49de-a097-d046e245f987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d2e46dc-f250-48b8-a219-a08a935ed804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e45dadf-9633-450e-9ac4-271861dc5327",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff7d415-11fc-4d9e-9e00-558d4459ce2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd1c2da1-381b-48cf-b328-f6a7761bac2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6f489b-379e-46ec-9d0c-38f78ce1fb9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04659041-fc39-4ee0-bf76-6f52d8825dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dfe1e1a-a0dd-4fbf-9664-1cf32085e6e7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1924478d-a5b1-454c-a879-04725e3a6ff7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "991a3847-0b2d-4d14-bcbe-dc1da4fa0b68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa23443e-0bed-49fa-80d2-123b4ec98853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01a12fef-83b1-47df-9b9c-5416c364f75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad027db-2cf3-4319-9b81-a5e75fe8195d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57420c2-3757-49d9-b3a3-3066bea4614a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2086a51-4057-4c80-9df0-234f8e88debc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4e5e42-34a0-4c3b-94e6-8517dc3092ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a568ea-2e48-47e9-a75f-1bf4cdf7c027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c77a12c-6ace-40a0-a4ff-22e1d8223183",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b485ea48-e88f-4f62-9c83-0e4764295b74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d3e0ddd-6a0e-4564-99f8-fe0aa2af8674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0baba5-5ee2-4a06-827f-b4a6b3c02fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e5ca00-234c-48d8-b89e-3b21f0a4df7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634499d5-00b2-4a39-9d58-e6ffbfc2a8b6",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75cc8f1e-a7eb-47a3-9124-96870bf5b62b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d609268d-76ee-465a-a7ed-5cbe1a2b4fb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e71c71-ec72-4c45-a073-e5e61fcc69e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d49359e9-5452-40fa-8ea0-5d9c0d4a1e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99541498-1cc7-47b1-8780-b74291edf76e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54bd9c95-6c7b-43b0-814d-371c68fca49b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e340b5d-c76d-4739-a371-0491873143cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c508db78-2991-4369-8ea7-32967b2c83b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aabe1c3-b270-497e-99a8-a21aa3731f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a02276-d4a1-4162-8c30-86673576b3f0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba12b0ac-f7a1-4a26-ad88-7e724ef0cf34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed27086c-31cd-424c-acab-de69db901822"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0feae29-9cf9-48c2-84fe-db8a5203ce4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f5b4f57-3087-4113-9a1d-b9b78d3c6da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da548055-8f5c-4471-a835-2516d2623891",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "296ec5ac-4b34-4608-98f5-168d77cbe9b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b08a927f-e463-4f5c-99a3-ac6ae18f2cc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbb9828-74eb-4550-9dd9-3922916d890d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c062f263-2036-4f1c-b42c-c7e5bf0d8cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e545d079-86e0-4d12-b816-3c4bacb4a2d7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99f5153-0de6-4e6f-97e7-fddbc97ead3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e9a0e5b-16bf-4c2d-89ce-c981e51b2eb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af374e3e-4390-418e-af45-9ee3bdbcf3f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da1b8f88-89a4-4484-b85f-26e039913bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79899572-ed77-4fd4-a048-54d1b2a8baea",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49859052-e042-4237-96d2-90b7d044bb44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d245fb84-bc91-46a1-a391-7ce97e24f712"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5eb2875-81a0-476f-8fb9-180aa05ad3d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "475bbb3a-b857-43e1-9a34-330588ede27b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51478d4-2977-43b3-923b-be5170333f78",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4db431-a0a9-4e32-82da-204dddd0b7e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f73cbef-e460-4172-9b3e-ea0b8b3fe0eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3e1d9e-b190-4501-9c6c-a9f7317e6e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c85614a-39bc-46be-9e0d-e6c95713e65d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3aff53-01bb-4173-aaaf-d2e1a66655a0",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f80eed-3af6-44c6-84fe-3ce0cebcb552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aeaa26d-2225-4d33-a3a0-040ef54e70c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f31f6f1-9e70-4b11-bdc5-19edf4d15a18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20fd4cb7-a8dc-4845-b6f8-c29738298e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb9f317-dea5-4bb5-95f7-f70352876287",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "395da0ec-810e-452b-92ed-0194e65e0d79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f02621c0-50b5-4ee4-a18a-2b69ea00d9bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0da8764-a3b2-4f5d-80ff-f90dbea3b670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7805da68-c821-4b42-8e50-0a72c81a2912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578b60bc-1468-429e-bfc9-77d2df754c35",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e73ef4-2c67-496e-b19f-70ffcd641e5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "636f1045-0f2c-4a5a-bb29-aa2a44ef8293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09de150d-df21-4748-abed-14c443fbbc23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d88fde-a0dd-4115-9a06-b845dd83ec57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0599e1c6-321b-48d2-8b53-e12909cb2407",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a43d31-7ccd-4df3-86d0-82f06c3af979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1edf9db-3a80-4c68-9e6a-ebfd86b6e57f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c88a202-2d5c-4b7f-9e00-59e46d733eb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de6def26-b746-49a0-b858-0ea9d8dc5968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f29c18d-f743-4a67-8eef-8d7f12e0adf8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058422bf-e076-4784-91d9-1a5e2a2e9ea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c808c71-97d5-41df-8cc5-348ca8176ad6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "301aa203-104c-4da4-a5e0-503e4785830f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27033dad-d107-421f-af94-2af5b0d5de46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e4bb67-f4e0-410e-8cb9-651efec8bc3e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3e5aa6-3cb2-4b94-9ffc-f4bb468d88ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71d2a450-27b7-4099-a335-2c6e6a04d8e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d94446-2c1c-48fa-a1b5-d937e25cbdc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e4a904-8a3a-4c7f-a0f6-7f797108be7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9459cbf-43a6-4101-b5ab-db39956af93c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65bcddf-d9e1-4213-baaa-dcac6890da81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "252a136a-b798-4e14-b30f-b103bc1acb54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8336b620-167a-4e1d-a1ed-a1e59364641e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8da53d63-5d2b-4620-9124-aa0c7b766229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e80c4d-a071-4b35-9abc-cbd8c8fc6946",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794e75dd-be13-4935-bcab-074bbf0da2ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be0f5637-c0f7-4d3c-8625-949ff06d9314"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1daca60-6e3f-4193-8a0d-ca0e4e326ab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d7a21f5-3ea3-4242-a401-a657a71e67d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44fc5c2d-6d46-4bc1-86d7-aca15ca094f8",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578ee9ed-e1b0-4ff0-88f7-4fd9cf863042",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b41ab200-4f46-4a3c-8aec-4bdb22d9ccd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "640f0f7c-1ad6-4bf4-a094-f65d1e076adb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ec3dfb-69d9-447a-ad39-b4abd98c8ec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b59f6ee4-1c70-4d6f-bf51-127410b18e93",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df045d69-b72c-4d54-bab7-fe732a830657",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "971321a6-7c52-40dd-8ccf-450000b427cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee9527f-038c-4a29-a016-ed2ab1e1555b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8a07c2a-7076-47a3-81d1-611c54e4781e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d956432-386c-40f6-b6f2-88b6a1b86661",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9694839-b29c-42ff-ae2e-ec367a0fb6e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a3dc573-4297-4c60-8b7b-370bd468b47c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b219f1-30eb-461d-a837-cdfda5b07bfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73bcd9bc-2360-4390-9f37-cbdfd206175f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a11679a-596f-4831-bb7e-f8a17d442efd",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de6e3a1-15f6-490a-b67b-250e59ef118a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e0f7e77-9e74-466a-802a-9b25348734a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efde1b3-1b7e-47c8-a751-2607e2d8e43b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab27760-fbc3-45cc-80bf-58a95b541e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480ba751-75fb-4138-8cf1-b39030f8cc77",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2e3e5a-db33-41ab-975a-6978dc126b5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b73f259e-c831-4da0-8358-b654d11379a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d31329b-5bc2-44b1-b584-15e54f07a52c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d28ff41-68f2-4fc1-bf3c-92dca446d4cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acec8ee4-7a13-4751-838b-35814eac8a7d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e01213-e2fd-4b6b-a01b-8c4710ec1af1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8630e034-7f6d-4d33-8a52-e3198c46e61f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8393ac17-43e6-4b3d-9627-63baffeec99f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9fd6099-7034-40c6-ac02-cc97c3038c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e1cd89-26ef-4f4f-a61e-f5093f270019",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c1cb59-729d-41b5-800c-fc595462eb5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b69b0b0-f3c6-49c6-b111-c8118ca328c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f740278b-333c-46fe-8c80-e42b7bac69c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec37cb8-b196-4e85-aae2-1e3c45eae3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f433cb8d-7b78-4ad3-8f82-06c751658883",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4128ff7a-2470-45cd-9815-8fe5ea2c2dd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3deaf429-d936-4b4b-a5b3-8e1a669996b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a54fe68e-39d7-4aea-98d1-9bb5c87aa493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbabeaf4-33b0-4133-ae6b-233949cb156f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349cc277-3aa9-4260-93a9-12b0b8b71a5d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e1d85e3-82a0-410c-8de2-a6f75645eb48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d3a7e1c-1913-4ebd-84d1-9bcfe5e676a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c2e535-4268-4673-a5fc-af80dde03070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "058fc79c-6e33-48b1-a24c-b8f78d6d6f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef54894c-bee0-4797-bd56-8fa305f1f22b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "384bf59f-b010-413e-9d4a-a8038847da13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81f1f288-76fe-40a4-8461-252cd55e2a2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13ab680-dd58-4915-82a9-aad03f6e9627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b715bee5-d7ac-4155-93be-c9cf1f077e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "257aef22-ca4e-4c54-8faa-fce2683006d1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b865807-6f3b-4c08-a9fe-198f5d3c3cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ddea28c-7e01-45c5-b607-e98628179e72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5005362-aa10-4f5a-ae4b-920f9ca4a402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e3f0b3a-40f8-42df-b4b5-b4ff2c4dc9ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b762c301-4397-43c9-a367-1b5c2e79f397",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa53931-2354-49d7-a3b2-36a849a209e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a664e1f2-de9d-4aba-97c8-240568f07101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff1e8ca-c2b4-456f-816e-f41f89b1874e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a79dc860-2553-487d-94d7-95cff9029d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc3e168-8ddf-4682-b4ce-d67c93e81bf1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913124b1-1e6d-47e3-96ee-9452925e6aed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5269def8-cbbd-4a8e-9590-c7d42d889e15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65346a79-7114-4538-a8b4-c05e4dcab2e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6599ffd-deb0-4d6f-8cf6-ac6511767ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c0fa3f-620e-48f3-a1a3-f142a5a4d46c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543976f0-1e92-4bf9-bbb6-863f9bf1d1c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee455cf9-95ba-4e9a-aa48-07fe96fae62f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d029d6e6-661e-4fce-a2ab-243789ad7605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b036ada1-f7fb-45a5-a4e1-fa077d081d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d326d2-d651-41d8-ad14-51ec86c3fd06",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd839b5-8d00-44e4-9ef2-8b1cafc4bf8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc2fffe5-e03e-4cb4-bcf5-8d9966a25ba3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38753e04-28a8-41f1-b879-8761955fc877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf2eae26-21fb-4b6d-b735-a3943a05a28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ba08d9-e603-4e6b-97d0-b727248cdf05",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e2ff13-22a7-40d3-896a-8f1ce0e73561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "369d8a3d-6e53-4e23-af78-0293ce62c5ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0422e31-6a54-40b1-a2cf-731497ee95bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d24bab5-14a6-4765-9c94-9bc44b31746f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8776949-f876-4880-8ce3-4baaf94e4c71",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab598c20-1a67-4601-bd61-578bbe141fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2adef962-d659-443a-924f-28a5d095bbdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b309af8a-10ad-4ce9-8250-b37054f43f94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed62220c-058d-4e63-95a9-5ac0e8ede36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248bb99d-fd01-4d5c-a7d2-77431f91b0c5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acfba95a-1046-414f-8948-933d1c328310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71f81b37-13e9-4f1c-807a-ba93e2edb99a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cacade6-1def-420f-b23d-2142e6a36006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "799a415a-5829-4ab1-b6b8-75db0f210f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd970fb9-fd10-45b4-b830-7ee0448b4e3a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83dd142-cc46-4c04-a9a7-f6928fe4297d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc898e0a-36a2-4dba-a623-fd91ca5a5b09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c88f334-55d7-4759-94c5-e5ca7272052b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c608505d-2bdf-4762-a20d-41489fa303ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb09f3e-c492-4321-a18c-3ab5b5e7525f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89b1f29-04a5-4087-9801-ba66639c5e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc27db5-c744-4f9b-8d34-794ffd43f270"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ea78de-8bf5-48bd-9e07-4c3c7eb0d5d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a2df7e5-efd3-46f9-9a8c-1a098d2b8d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d5947f-509a-4d88-8f0d-ed6f48faff87",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caeb97b0-f5ca-4a81-85e1-defaa12bfd9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e23630cf-061f-431b-b547-2a74fb290fbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ac9adf-4efe-4ae1-a7e9-abe291f70741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db90bcd-b277-4a12-a565-c429cda593d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722a35c0-91bf-497b-92c5-f055ba9b22b6",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3094cbc6-8607-4877-96d7-e384d34d2c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75c09112-d29e-4047-85c5-1d55ebbbde5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b6eba4-4d29-4fa1-a415-9586a8f27f49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35d8c240-7b49-4cfa-911b-f13fe94102e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b412ce52-512e-4bf6-818f-8351544c0754",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be2031d-ee5d-408d-81be-0dc9f6600098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9479e3dc-e7f8-474f-be83-2501a05bd778"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9056f0d8-7500-4b3c-b8a4-9010e46a9bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e0e96f9-851f-4a05-84f5-a18a83ae6ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73973af1-4095-4809-bd94-e3fb80d58387",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e13dbf-3856-4f5e-b10a-3181f486e8a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d516817e-7074-46ff-9a43-5e1c88a4cdb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c0a2f3-e6dc-490e-afd4-3944ae7f2326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4349479-e32f-47a6-a7de-2f38285ce039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a0efad-51b1-45e0-96cc-dc1c2dac1d95",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d6bb35-2ada-4a8d-81ee-cf3f0498cded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7a38354-06d5-4f6f-924b-b5b924214bed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba746864-6bdf-40b5-93eb-42614955140f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40a64b39-6ef5-42b8-9c68-b0c6a21db49d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5928f3e4-4ac3-491a-9f17-4661b64c8fe5",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849874db-f790-4733-8fde-64b259056474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "986c51d4-c75f-4599-9205-1e64358b356f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d28991-7550-44f4-a8ea-42114d64ad4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "148dd79a-4fb0-4e7a-a453-d9f63a120d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb872f4-36cb-4fc3-b295-5ef1b9178f48",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca79e44-659c-47a6-a142-88ef3667150f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b048c14-3850-40d6-8655-f41046ffcb15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fee66cc-fd19-43d1-8e8a-371b675a8cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34f31fcb-369b-4a92-83de-7e6b26a675c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e132a9-d6d6-47bc-b6fb-e54f877e5141",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9995023d-301f-44ee-b201-f0bd57bf2ac6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ed5b80-9e2d-42ff-9322-28842dc40f2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e4dfa2-4056-4ba3-8fb4-73f5b7ba507b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8be91e9-c66e-4231-8e42-3f914220d587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a502db8-c56a-4ab8-808e-9d81e9fd5ec6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d22a6c6-c56b-456d-9f40-ea99a47c41fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a05c0c76-3940-458a-b6f0-79710eca57bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3901edc-1526-4fb6-8ef6-ed29ff614afa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4992c41-6bee-48ff-bed4-4a76ea3302a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "135f3cd7-a9a5-478a-8a34-45f287531a24",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d5b3f8-a7da-4803-9807-7d5ac5bfdb43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48537fe7-858e-4817-8ee9-77aa1a101ba1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87cf447-721a-46a9-8858-fbe008680eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512abd49-cc3b-4804-8178-48da6d9cf85a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9d17c5-14e3-40da-8c20-12674ac1df1f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e5f8bc-4df8-4e18-ace4-42b8ac10417f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77be903b-7d25-4699-ad61-8f93eb560eb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "913b94de-899e-40f4-b886-dbc97a2fae12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54725cc8-3955-4b42-9f94-f7a5733781ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04d0764-81e7-4ea8-93c2-da1fdbc9c46e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b81368-4dcc-44ef-b2c8-f21146a51767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eace22b-7aef-4bae-9d50-8bd4d099bfe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f114e88-0149-4d27-a593-886bad92aefc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a44b35aa-10a0-4620-92ca-6c44effca5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9750cc-7676-4194-ac40-5ac997687de5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d165c59c-83a6-4ecd-a35b-7f3d0e8cc747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdc6801c-e0de-4c56-aedf-ee7c9e611eca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69f6ff3-cd5e-43ac-b9c9-544e5173ea54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72fea772-e47b-4e7f-a265-5f94734188e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c81b85-9edc-402a-b5a7-a292bccdee81",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91d178d-f77d-4082-8dc9-569fe1c8e8ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9604e465-b1bc-44ab-9dcc-50425a709fb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efa8e6a-f6d9-4ccd-9012-16f8cf6508b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ed8531a-82f1-4006-89fd-b5ee1a98439a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b365f3-25e1-44fa-ba0b-80914159736c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45040f95-2d7a-4718-89fe-2d483ded2915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e816b1b1-ad8b-41e1-81cc-8d489c221eef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5251c4a6-4861-44f4-9375-9ca66581d43f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29985625-125c-45c9-9181-65d6199f7dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58635e8-48c1-4047-b54f-0a0b29ef932c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7632e66c-b4bb-4c9e-a125-2d05fd808964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9236f5a2-84c4-417c-99c3-d2d5474ee0a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "098342e2-47fd-4891-81fd-fa0a75b70697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9482cae2-3c34-4954-a43c-e1f0a29d82bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706d65a4-c50d-476b-ba7c-cf48456aa130",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3408be08-b5f3-4e3f-aafb-b26eaa809668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9db81bf-0adf-48fc-a246-bacfa326efde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "709a7749-cc6c-49f4-8af6-07ffe841b2c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d1b2cc-1e11-44e0-86e7-67974c29ad9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9f1c2a-9a76-4fac-b021-b2b5f0cf57b4",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38112715-9655-4b55-90b6-a50b7c5b6088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08e917e-1288-4e43-94dc-72a8ce655ad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0020cb58-c4f6-40d2-b65b-d87a7a4f27a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de3f211-8fd6-40f9-bbd4-d360a68e084d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64435e6e-1cad-49f9-9cca-7a0665d4bea0",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdeee2c1-53b7-49ab-9bd5-f9060ad39f50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12f35df1-42f7-414d-a998-7dcc891e1581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2608e246-1ea6-41a8-aaff-d8e888987f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e926419-e815-426c-9a62-6988bf81c482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace33f2a-ea40-43b4-a2fe-52b68cef521c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc26cf5-6531-47a9-8e51-26c00c457399",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5b91976-6393-4bad-a967-c81b192fd679"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb74e0e-fa10-4722-8531-461a7a531f32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "536261fd-da05-4e50-99e6-330cf6770839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe6b981-550b-4bc5-9cf7-266b3ef9a884",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad975fc1-2713-4afb-a514-8c3bab79df6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3400059-8534-4793-9cfe-75c7ba0c7d05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5239fd41-5175-4ceb-af99-f8664135ee10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a14067a9-4410-4d77-ad7a-8824507e3ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee96b30-be81-41e8-b764-8d7439623ebb",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f776ea7e-c08d-43d2-b93d-487f59c72e83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78b9731e-b5c2-47d9-8d42-628b7feed329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec3773d-e3a9-4608-affd-c0f412d53717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc7c60f-b07e-4502-b67a-88d74ea42995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cafe9ed-bf0c-48c9-9eb3-0a7160da3cd3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9726c4a-4b2e-41c6-aa4a-373715e4d60e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7ce83ee-5284-4ed9-8903-582f41c8c31f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "350c9dd8-ba38-42d2-af5a-c6da8cbfb433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1fa34e8-60fe-4b4b-b7ab-bec799704712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce18da05-3469-46df-88d7-c64c223fb8a1",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57571d4a-286f-4879-a3f0-9da65ea27d0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2729aa0-fd96-4a02-a860-5c750517c09d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cab5a20-f086-4e69-9a92-d6019442434c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cadaf03-8e91-4f5a-b45d-81c1828cfc16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e68dc3e-a484-4657-901d-3c5b46bd9a33",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b828ff1-f367-41ad-920e-32e8b0cd2e57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ff3d729-6526-4501-932b-50c9e689a010"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c76e9b6-27f4-462b-a264-e0dcc9ff0917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2035c7f3-e2ea-4292-8818-fb62749239c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af196205-450f-4ee1-a0db-fe7e516d6e2e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e17362-9b85-423e-9206-9f15bfa1365e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbbab0f6-bd80-4140-a305-e904ebd2c1df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e204f76-ce6f-4428-aa92-2d9d786b4c7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73a18c26-bc45-47d5-b289-1413efdc7f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8c58ee-d81c-4324-9846-7ede85523555",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6356f31-882a-42c5-8e51-2e4f9c13cb1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "842dcc2b-15bf-4436-8ecb-faaa70b846e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1358bc84-277c-4250-a8db-66db86924517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df1263ac-c850-49b5-a4a1-1b531d9ad1c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f80ef8-4a5d-47d8-aa52-56e70df02fe7",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4c6139-47e9-43a2-b4fb-541c2b25fbd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdd7110f-516e-4933-8273-8f14cdab1bf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87650f29-6bfd-4004-a67f-bbda598c2823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ed43ce-57aa-42e8-9634-acaa26662758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8220c8f3-4a64-4e78-8864-311c5a94e011",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106eb331-7af3-4f11-9548-9a96b56e395f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29c7ca8a-5cf2-4528-b14e-08acac5c36db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f81b713-1005-4a8c-afeb-43ca23c77329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1f1d09-c7a8-4bcc-ba58-0d5edc430b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007040bc-991d-4753-8724-af41c39067e5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5876cf-6d87-443e-be45-cfe39940fa1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6060065-adad-4c7a-ba23-e7117e799acf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37e014f-5e68-4833-9f9e-b5c1bf5c252b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7044a0dc-6f29-4bce-adfe-2bf10427f2ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9dcc39b-3d6e-4e29-805a-87f42345c64e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907de294-f54d-4787-b9b5-e6bdbf56afc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2238488-1bfa-4156-adf1-1e3d66315ce0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d46d4b5-4361-4fdd-b435-0aa3a0581ffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dad44b2-e558-4d38-acd8-4dfc4f3e5a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f472fd9-c249-4072-ac76-35ca86389059",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0db5092-c5f2-44cf-a447-0bde507b136d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "663ead01-2a10-45ea-88e6-8fe6fe30bc63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f3a778-0773-4e42-b318-a7c87905a46e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b68c26b9-4da5-4950-b688-b070d729b81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883ecad0-f91b-4e6d-93fd-e3e9a8c66778",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1effba3a-6edf-417e-9526-eeb5739ac752",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9447fcd-a86d-4d3b-907e-dba60c6663ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9aa2940-efc1-4a22-98a1-2fd49b44b7e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf6b3c1f-8fdf-42e7-b24e-24fec6fb4789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202c4193-088c-4dc8-8e97-41ec110bb1e6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8416ee13-f115-4a2e-b054-1eb7fdae4a4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2beb92e-0947-4e6a-86ff-f77022f598b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59271df8-3da0-4ee2-a873-d405d796a64f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e9acce1-2f70-4001-a95f-3c20c09fe9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d54798-9483-45cd-9313-ade1f74b936e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7453a14d-53ce-4a16-809d-3093353f74fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1176aab-66b8-47a4-9bb0-f651d1d4b919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c0191d-a89d-4eb9-8fe5-d1c2c1747877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21c9d436-b834-40d2-beca-37ad96669efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d964e8e-1c20-4f3b-88f4-f2791a75cf2f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd95b02-47fd-4110-9acc-bec99b4ca6d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ad4c720-0f9b-449b-85fa-cb2e34311ad4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "480baf6e-d0d0-4ad4-b9c5-9328a172f64f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de7da85c-df19-46e8-ac5d-9066c8ffa352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536c8a02-10ed-4918-bcff-6d8ebacf2d96",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e8334e-5fa7-4a2a-a5c5-3265dbe00166",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71dbf2f0-bef8-4fa6-b001-bd5c0ae34e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34265951-e798-457f-a3a7-aea86db41427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b59d4d-d099-43f2-bf1c-628523aef2b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b8c8d9-07eb-4e0f-b801-8da4c22b1041",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8954178a-dca8-4397-bc68-62e41ab530cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5adf449-af4d-4aa1-ae91-f23d6772f73f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e9af57-95ed-42ff-b333-5c63b8ac47d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312c06b0-cf4f-445b-8cd1-8ae1285c8c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "335152e6-7bf4-4958-a01d-805f54fbf734",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79fad88a-a9b9-43e6-8f48-f828a4146bd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d6b3b16-4095-4674-bd57-8ca63fcee504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65306a68-ed82-4b2a-b748-7fcb7b712966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7b3c1c2-a5a8-4e41-ad39-cd4a7f0f6078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1884de0-85a1-479c-939b-d3d6170148b6",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa59387-b6e3-457b-9f58-eb2fb4a5cfcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c3817e2-fbfd-4b04-84fa-f6334f408eec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ece692-8cf6-461f-b7f8-5044fbd166c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a74ee2-fe01-42b6-ba77-fef7c6696e01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2fb981-2424-4eae-bc3b-26f6c6451b50",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15cb3613-964b-4467-8fa5-f0832dbc5b6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2809a98b-6bc6-4a20-b890-a29b6302db22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcea0bc-c43d-4a52-990f-5014f7ff3518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d067e4c5-4a82-4860-a33f-3e11517757da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbca5e8a-c92a-441a-a4c5-9cb8e87ef383",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e430ab-193a-4291-8d87-3e70b1cd1121",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38aae647-9657-47bc-8fad-9155ae76e4d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de875223-b3c2-4c48-a4d8-3c6ce6800cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dacdd21d-d70a-419c-ad83-0ada6bbe1bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1030e15-425e-419e-bcd2-d9bd7b894b4a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e96d44-5ef8-4123-ba48-151bb33b2337",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8b194db-783d-4048-ab11-8c724e81fb64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18cd60b5-9233-4051-a4fa-d64eff01992e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ab1d1c3-6749-41ab-aca4-5d0c93ffffa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38281c70-8d6a-4c61-8bdf-54b7cbac70f8",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c0d741-31ea-4b79-aa0f-9e47ac0242ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbd999b3-8eb6-40f8-bd47-5cceeeec6409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "818528cc-9aa9-493d-9c62-2823e4cd91dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "333d7ecb-fdc6-490f-bd2c-df9329462f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8862cbff-8723-47ba-adc0-8b8628f6259d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c9f657-c017-4f36-970b-3a2032fb9be3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d41435d2-c36a-4267-a7f5-310b3ba8528e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8e728c-d86b-47a4-897a-89ab13295a79",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7b27fc3-104b-4e7b-83ba-2ee382c949fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b677b0eb-cf7a-442d-b942-af2090fd494f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f7e087-4101-499e-aaaa-d1f69ceb36aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1be9b749-0bf5-42dd-b84f-45aeb61885a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9830ba5-5526-4e17-ae80-8fde972cb3e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e36dac9-4141-4273-bf94-5b4cf8a00323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba2a833-c6c5-4f70-acdb-9b2d493ff22d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2801359f-85aa-4e4f-beb2-acd8b191dd4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "483fb566-3c5a-4b75-a61c-8832ab710d5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1126a6-10de-4f30-a757-3535b65c814b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01eaa849-3a49-4b24-9742-af2e334b1c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c402ae-13de-41d2-86c0-d084091567ff",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d0ee917-597a-4795-a871-2210d90c812c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39ee566c-7f15-4765-ad25-7303fd91be90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef059fd-7fdf-4f09-9bf0-f4d7d3400431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e230569-0f47-43d9-9063-6f63ee9c4efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ac1a13-1d18-4fb8-b2a1-22900c80e718",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962fdbcf-18ad-4085-9ec0-78186d182b79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67a0e7ac-b3bc-4046-9e9a-cc925fde0971"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "025430e6-66ec-4f53-8372-f3b10c25560b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "821ceca7-f2e4-41f2-8235-4719dbde9d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d37714b5-1434-48e7-a1ed-e01744493caa",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e89e4f-a3e2-4cbd-b123-cf904caa642e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0df676de-1214-4154-85c7-d27f2f04a101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b42ee3-4416-4f80-a381-c5ba75f22b8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd4b66c7-90de-4436-9b2f-547afd0f0d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708b846e-1ea8-491f-b0d2-03bfec16ca59",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977fe92e-b06e-422c-ad52-8d57a1f993c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27eaf1a9-0195-457c-baf3-2a6fc9a47bcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e56b65c-01c4-4ef4-a6a6-451d849b7133",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6e75793-89ea-4067-81db-86f67e776904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4358642a-c76a-4c07-a010-68a43ea4a5e2",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf09f0ad-3074-4b7e-9026-62d03d518b0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3d1cf01-8386-45fb-a7c5-be2f8cc3731c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8934f96b-a4e3-4467-9bf0-7484f8d7c944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36beed80-647a-4e58-89a9-7866aafb78bd"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "683ed693-754f-4904-acdf-324bc0ac23d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc3252ba-f3ba-428f-8375-968d4ecfd605"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41f9dc18-e519-4b11-83f4-27d165f3be46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "51a78b79-1121-407c-9037-9e06629bf778"
                    }
                  }
                ]
              },
              {
                "id": "2e1028eb-30d4-43ec-a20c-4575d11fba7b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3bf633be-4510-4db6-98fa-487e5ec743ea",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd76b951-98cf-4fb1-8843-a6cea608d9ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "548752ee-2b47-4626-a506-4984e4741370"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ac462d-2279-4dbc-a009-f2c5ed95fa2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "940a88ff-c118-41da-9dfb-eee98eba6b2b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7440a619-4b62-4c9e-97a4-e5ab37764f27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0f50d77-a050-42ff-9bc7-28d89e239dfd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "35f1d7f9-35a0-4608-8394-25fbe7c7b090",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ade98b25-73a4-4a3d-88b3-d0e446e0487a"
                    }
                  }
                ]
              },
              {
                "id": "62c09ae7-61a2-45aa-a1be-66559864e54a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "35f8c225-5aab-4ee3-be90-d1f3d3f01cd3",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a509d7d-df73-46b4-a3cf-68518b40254f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "09b93328-8123-4cbf-9ea1-71497368aa5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f198dd2a-4238-4de1-b1d0-eaf47ee8f665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5af328d5-4211-4673-a438-e66ca6007b7b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5009a0e1-9a61-49a4-8215-25b329135587",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ad35c13a-a5e2-4981-9bfd-ee76b9d2aa7c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "54961072-a767-432c-a02e-a8077afb35de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "51e201cd-9247-4eed-a73b-752df3bf269f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1b1710b-4c75-4065-ae64-797667482a7d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6be9c63d-00cd-4661-9b4b-0df911cd7574"
                    }
                  }
                ]
              },
              {
                "id": "4256264a-a038-4eae-8519-6e2775e7743c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbcd0795-b1cc-4755-a67d-36dc94285ac8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b5128d15-cb16-491a-bb74-b64ca9ed3071"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4664e459-7d07-443f-aa05-c21d6aa0964d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44d4178a-f409-421f-a75a-c5caa1629c47"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3808f57b-0308-427c-b92b-2ecb36419dcf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "00b5f31e-160e-45e8-adf0-842a0f438b66"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "10b55240-1c45-4280-9081-1d7088f00a3c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6a14069-b119-47d8-bf41-bcfe117b64fc"
            }
          }
        ]
      },
      {
        "id": "48e145b9-8228-4677-bcf1-f5c1301ffe43",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "897c7d9b-bbc7-43d4-971c-7ac9803af859",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e7c1599f-4ee9-4024-b6d4-89bd7a73345c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "81df445f-77c1-47a0-959c-283a3f3524ac",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f873069a-cf2d-4d37-a7c7-981812d98eee",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f46e18f6-01b0-4795-8c6b-1b9675ed67d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a2c2f1-fc36-4933-8ff1-05ffd9826199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40fb107e-3bbb-4a83-a7f6-2c6d69beb955"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e49831fa-0c19-4d3a-997a-3852f30104d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cb16afa-5af8-4192-8cc0-b9422baacc98"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "afc51852-2c5d-4a93-8f03-91e13cc55e2b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0159df21-af55-49c8-ab15-a3e4641e2d5f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bcdaad4b-05ce-430e-8721-fcdefe148856",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "258ae953-1997-4de9-b5aa-989b2996fe51"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9eabf705-1b60-4aa9-a384-61e77a3d4b6d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c8badbd8-3f74-4844-b59e-5cbf37e8626f"
            }
          }
        ]
      },
      {
        "id": "f28f8a62-7592-460a-8c42-0774e936bae2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d9e7437c-cd4d-480a-9a9f-607e9289882b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5448ce5c-1ec6-49a1-b398-e54dbea4553d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d5dc5091-5bfd-49e2-8c39-941041797d58",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b032cd7-6b3b-4bc9-9793-c4bcdb6e0b56",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5cf78786-d7d1-4e88-ae2f-b1e5bd4bc0f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "942c8287-188d-4171-b8d3-7e9ee371f025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd76a2bb-ab68-4811-9454-7601949f0b59"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba00de58-ccd0-485a-b90b-ffd6e41294a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ae6f1ad-eb1b-4e55-87d7-db72b59d3cce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1a67304-a69e-4220-bd69-b0646033b2be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "edde19b6-5e29-4149-bb8d-257068ed99c7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb91357d-04be-4068-8deb-57f3901387a7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "55633516-3557-4368-b3c5-d213eed7c42a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca34f924-a3bf-4c2d-9aa2-d9c47ebaf8ff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0d09f831-d56f-45e7-bcbc-4914bcd5c091"
            }
          }
        ]
      },
      {
        "id": "518be794-d54c-4f41-8710-c9dd57c48a0c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "416efaac-dd1b-4473-9edd-f22dc04c848f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "761cb331-52bc-4073-a712-b08c84a4bb91",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "be92c52a-8784-49fa-8f64-69657283150d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637ab511-9d51-475e-81c1-7912e26713cf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3703b8b-85cb-46ac-b39e-53ad23795188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d7bc36-5080-47a9-a520-bfefc302125e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cfbe625b-4b55-4e1f-a922-551b01d2b5c5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4ca955b-6484-4109-8924-f7a3932f944f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a0bc87a-3ae3-4906-818a-40a33c5220ee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bab34141-8460-4d7f-8dc7-45c2014bd59b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba19b313-403a-45d8-8be3-eb971d16eb19"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da76d445-b312-43a9-8d9b-4fd2f9bb68fe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "623566ed-4a8e-47a7-b0a6-5dab89d86365"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "318095cf-39da-426a-ae47-5b4349edea39",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd647c1c-099e-4bf1-920d-a89e7701b12f"
            }
          }
        ]
      },
      {
        "id": "da35e6c9-98f6-48ac-87ec-9becfb573c83",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46d42d9f-2e7d-4726-ba34-f7a527062b2c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e4c0818-23ca-4d81-ab30-44d5f11eca67",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4d155981-9aff-42b3-b3f3-77b8b2be29b1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "071a7790-b695-4986-b44d-ac8c0c211ecb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e1bc89c-a365-425c-9e2d-4fca407673a8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 280.5081300813009,
      "responseMin": 18,
      "responseMax": 7085,
      "responseSd": 821.7049781229949,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685580768510,
      "completed": 1685580851519
    },
    "executions": [
      {
        "id": "d4b302c4-e8f0-4fae-b3e5-07a5344c88fd",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ded355aa-7907-45ee-bb2b-0a2cd197ad80",
          "httpRequestId": "7df41eea-326e-4f40-a2fc-e28a0d1000af"
        },
        "item": {
          "id": "d4b302c4-e8f0-4fae-b3e5-07a5344c88fd",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d294e6c8-5fc6-44fd-8ccc-969b588aa444",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 0
        }
      },
      {
        "id": "777234b4-b081-4692-98bc-735fc021e679",
        "cursor": {
          "ref": "9b7adbf2-775d-43ed-86bd-1126f6ec5437",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ef97b1f8-52f7-416d-bf22-28265bef41de"
        },
        "item": {
          "id": "777234b4-b081-4692-98bc-735fc021e679",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "33e37477-b27b-4cbf-8765-07d91a6eca22",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "0e857b0c-c991-4c35-80af-8e9b24868a7a",
        "cursor": {
          "ref": "328a2ae2-4520-43c2-99c3-78f42f9a560b",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c9f43b7c-7c73-4d23-bd70-5d7e7f33a3a3"
        },
        "item": {
          "id": "0e857b0c-c991-4c35-80af-8e9b24868a7a",
          "name": "did_json"
        },
        "response": {
          "id": "59a731e5-b2f1-4b25-a192-a84e8d066a17",
          "status": "OK",
          "code": 200,
          "responseTime": 483,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b7e2bd-d13d-41a7-ad51-1f5027387c02",
        "cursor": {
          "ref": "aa9ec6d3-d94d-49ca-8741-4bfbc281f251",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "487ba3a2-4ad5-4e87-a29a-b6d2ba85c1c4"
        },
        "item": {
          "id": "d4b7e2bd-d13d-41a7-ad51-1f5027387c02",
          "name": "did:invalid"
        },
        "response": {
          "id": "7b0c534a-dc17-490a-912a-cf3090ae8054",
          "status": "Not Found",
          "code": 404,
          "responseTime": 4254,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "d4b7e2bd-d13d-41a7-ad51-1f5027387c02",
        "cursor": {
          "ref": "aa9ec6d3-d94d-49ca-8741-4bfbc281f251",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "487ba3a2-4ad5-4e87-a29a-b6d2ba85c1c4"
        },
        "item": {
          "id": "d4b7e2bd-d13d-41a7-ad51-1f5027387c02",
          "name": "did:invalid"
        },
        "response": {
          "id": "7b0c534a-dc17-490a-912a-cf3090ae8054",
          "status": "Not Found",
          "code": 404,
          "responseTime": 4254,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "fbbdea3c-4a89-49ee-8733-fd74d77aab5a",
        "cursor": {
          "ref": "99bc8fa0-a5eb-4401-992b-8a585609ce07",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "551642b1-dea7-49d7-95d5-a832cda3a54c"
        },
        "item": {
          "id": "fbbdea3c-4a89-49ee-8733-fd74d77aab5a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2ce8769a-defc-46bd-b902-3f2059cf1641",
          "status": "Not Found",
          "code": 404,
          "responseTime": 51,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c891de3-904c-48e1-b75e-f9e7e2bd7316",
        "cursor": {
          "ref": "2c409d0f-4e9a-42f9-a1be-d4023590a942",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e15b41fb-d9a1-445c-95d3-52c61a927edb"
        },
        "item": {
          "id": "2c891de3-904c-48e1-b75e-f9e7e2bd7316",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e49f9835-7933-432c-864c-d01c6d3fbe80",
          "status": "Not Found",
          "code": 404,
          "responseTime": 76,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aba06f6-35ac-4523-96a0-1b4d3670e154",
        "cursor": {
          "ref": "913e1bb1-8cd7-48ad-8cc1-33103b20e1d9",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fc44ba5c-c502-40e4-a7b5-b7a6c62ff009"
        },
        "item": {
          "id": "2aba06f6-35ac-4523-96a0-1b4d3670e154",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "71539de7-32d8-4bed-b121-da8cd196dd8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 449,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "39088709-64ce-45e7-9e06-8b8fb7b6c64b",
        "cursor": {
          "ref": "2e49d4bf-7d2d-4c0c-9e27-32426ed4b439",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e8c598ab-3cd8-45f8-a209-ede53ec62031"
        },
        "item": {
          "id": "39088709-64ce-45e7-9e06-8b8fb7b6c64b",
          "name": "identifiers"
        },
        "response": {
          "id": "301c1d90-8615-4d3e-ba9f-6b94dc402a94",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd491d16-3627-4422-be5f-3fbd923ab937",
        "cursor": {
          "ref": "53723666-1d5a-4e88-afc3-fcf5214fe625",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "eff84b6b-fa12-4bb7-9193-c1f57f1fd25f"
        },
        "item": {
          "id": "dd491d16-3627-4422-be5f-3fbd923ab937",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "27aa80a8-e89b-4736-959b-3c89db53b08f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c570c1-c0ef-421e-a7da-eb10ac5c9271",
        "cursor": {
          "ref": "61cc13de-86ff-45ec-b725-e95116278136",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bd7ff018-9e25-4cbf-87ce-8c02cf268a56"
        },
        "item": {
          "id": "79c570c1-c0ef-421e-a7da-eb10ac5c9271",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9d394109-4bb5-4b8b-b330-48610f1947dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efceb682-3ec7-4026-b63c-2cd4473f074e",
        "cursor": {
          "ref": "f34a8133-8627-4334-bee5-a3b412a5544b",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fcb42f62-a97f-4884-ae12-02d642df4418"
        },
        "item": {
          "id": "efceb682-3ec7-4026-b63c-2cd4473f074e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2f7d2b20-33ab-43c6-b092-5823a0939f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8a7b1e-4ae4-47a2-b9de-7f0bd0d33b71",
        "cursor": {
          "ref": "7b7cf219-7625-419b-ac95-c19dde3f7e03",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "eab4400e-9b0b-4f36-9a22-2b6fa7c4f079"
        },
        "item": {
          "id": "0d8a7b1e-4ae4-47a2-b9de-7f0bd0d33b71",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "71aba570-0321-428a-b2b5-be0ed59c50ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74a46f6-6da4-4107-9997-d463b198951e",
        "cursor": {
          "ref": "4fe70ba7-e8bd-4d75-99c5-052a1679514f",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c5fd648e-4858-4d2b-91f2-1c6b64142c89"
        },
        "item": {
          "id": "f74a46f6-6da4-4107-9997-d463b198951e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1450c91b-fdef-4c61-8863-561550503649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261e01eb-26e3-47d8-a94d-e2dd9a0502b5",
        "cursor": {
          "ref": "1ff0d8d5-dabf-48ce-83f4-0ff299d628b5",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bf6cde0d-5a1f-4d3c-bd21-8a9e7112f4f4"
        },
        "item": {
          "id": "261e01eb-26e3-47d8-a94d-e2dd9a0502b5",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a7ce3bc7-286d-4924-9d26-b3206cf8cefb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f70c93-01dc-440d-a3c9-e887af796f98",
        "cursor": {
          "ref": "9bf4e337-6221-49e1-be67-2dec6ee6acaf",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4507534f-d366-457a-a3b3-7c4bf4533473"
        },
        "item": {
          "id": "f5f70c93-01dc-440d-a3c9-e887af796f98",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7fc464c8-7fc3-4a2e-9af9-4578e982cb9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065e0f65-3ccc-4580-bc4a-079d71029046",
        "cursor": {
          "ref": "b018ee1f-bd54-4653-ab7e-5226a0ea99db",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "53509b11-7c61-40c3-b296-feafaa8bf2bc"
        },
        "item": {
          "id": "065e0f65-3ccc-4580-bc4a-079d71029046",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5f27c414-3b1b-46e2-83c1-526cd02f7ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a15c7238-51f4-4984-84d3-268a6c5462e0",
        "cursor": {
          "ref": "78bf514c-6e0e-4c17-b008-ca05a7e3cbac",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "acc8d361-9b2d-4849-a862-e7e83ce05bb4"
        },
        "item": {
          "id": "a15c7238-51f4-4984-84d3-268a6c5462e0",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "bc77477d-5dfb-4b67-adcb-b8a24ced98a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f24fe0a-7b6c-4bf1-9c1b-b75f2caed624",
        "cursor": {
          "ref": "c87c98fb-3332-4005-8b9e-7460eff783dd",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c3b642b4-506b-4eec-b311-2ef00bfc5887"
        },
        "item": {
          "id": "6f24fe0a-7b6c-4bf1-9c1b-b75f2caed624",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "58110974-1b46-44f8-968a-3ff20044e5cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e41e509f-11be-4de0-8087-14cf0d7386ea",
        "cursor": {
          "ref": "66a0d342-533f-424f-addd-7594ff9c292a",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "18aab561-2f20-47cb-8c09-3621eb61e37e"
        },
        "item": {
          "id": "e41e509f-11be-4de0-8087-14cf0d7386ea",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e4f8262e-5972-4508-ad4a-f4a9fb6f2f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c535bd-ec05-44e1-b505-64f480579dd9",
        "cursor": {
          "ref": "6a9d94fa-7f6a-4a88-8ab1-a4fc47a1fa88",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c8217e66-1c84-45f8-a41f-518da151f24b"
        },
        "item": {
          "id": "e5c535bd-ec05-44e1-b505-64f480579dd9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "95be1135-54d0-48df-976d-d70fd363bfb8",
          "status": "Created",
          "code": 201,
          "responseTime": 1072,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "5f205d42-6954-41b2-969d-14408369cd0d",
        "cursor": {
          "ref": "ed1371b8-f4fc-482a-95f9-820f77ea9a19",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0f42cf8d-ea84-4611-b111-f1853b8c779a"
        },
        "item": {
          "id": "5f205d42-6954-41b2-969d-14408369cd0d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "bb2e626f-de9a-4ae4-854c-4c26ade15c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c84104-c5e0-4f31-8250-8b53b61fbea7",
        "cursor": {
          "ref": "bc6a2987-dc42-4e3b-8efc-44534a2408ba",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "cd918d2b-e5f3-4591-9fde-36b817fc40c3"
        },
        "item": {
          "id": "87c84104-c5e0-4f31-8250-8b53b61fbea7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b7fd7473-6b55-49a7-8594-37a7a4385b51",
          "status": "Created",
          "code": 201,
          "responseTime": 7085,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "92593430-03f3-4220-9b7c-af75c3a3f072",
        "cursor": {
          "ref": "11a71e2a-f974-4403-9cb5-9ff64833f45d",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e017b17f-2957-4116-8c78-e6a422cf0fe7"
        },
        "item": {
          "id": "92593430-03f3-4220-9b7c-af75c3a3f072",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4b549fad-8c0a-485c-b8b6-ba714829c5ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed51d38-0398-4b33-8fe2-e27fa95fa019",
        "cursor": {
          "ref": "e0585957-abd0-46c8-876b-70a0297b5ec0",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c567caaa-677c-47e6-b092-d99d13719db0"
        },
        "item": {
          "id": "9ed51d38-0398-4b33-8fe2-e27fa95fa019",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3d69298d-0898-434d-a27d-0c1f6ce32bfc",
          "status": "Created",
          "code": 201,
          "responseTime": 3236,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "77bc591f-4b65-4342-98e6-8dab11a6219a",
        "cursor": {
          "ref": "ac4ea5dc-2e81-49c7-a6b9-aa703b86176a",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "742e35aa-1df3-4edf-84a8-c60e927b0f69"
        },
        "item": {
          "id": "77bc591f-4b65-4342-98e6-8dab11a6219a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d3587645-85d8-4603-bc0b-29ceb747c33b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f320291-3d89-494e-9f59-19fc599ee747",
        "cursor": {
          "ref": "e4b04d05-6b7a-4e1f-80b5-c4a54fab1d09",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "07804aad-1a8c-432e-8cc6-a54d92718570"
        },
        "item": {
          "id": "4f320291-3d89-494e-9f59-19fc599ee747",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a4f4814f-8928-4345-a6c8-5395bb857dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5da39f-fbef-4b9b-8b66-348eb36ca1f4",
        "cursor": {
          "ref": "e43bce8e-a174-47ac-958b-8928ef18f23c",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2069db42-2b27-43e4-bd1a-b454ff0e107c"
        },
        "item": {
          "id": "dd5da39f-fbef-4b9b-8b66-348eb36ca1f4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "abad4553-af8a-4ccd-9721-eadde9377ae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "735dd3d0-7786-4184-8a47-78d860a930dc",
        "cursor": {
          "ref": "59660fc4-4467-4265-bec3-d39f19ff5348",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "16e7f2e7-3430-4653-91c9-3419784ac03b"
        },
        "item": {
          "id": "735dd3d0-7786-4184-8a47-78d860a930dc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1e30a967-6aba-4665-bde5-4d4ecc36f557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 280,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7374efbe-97e9-444e-ac80-cf1c637588e4",
        "cursor": {
          "ref": "22206e94-05c3-49f5-a4de-15032f241621",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d3e87208-0945-4e33-ac1e-138cbd7de5dc"
        },
        "item": {
          "id": "7374efbe-97e9-444e-ac80-cf1c637588e4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "42410841-62de-467a-8b45-df27013c89f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8570bb1d-0836-4af4-b427-f0b559c3412f",
        "cursor": {
          "ref": "9855b012-574a-4b35-bee8-52b68374fed4",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7eb8e859-d0bd-45ac-b534-e6dd5a351b52"
        },
        "item": {
          "id": "8570bb1d-0836-4af4-b427-f0b559c3412f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "627e5828-4365-41c8-b9cc-43a7d53c3bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "125a3c47-bed3-4111-9988-5be65e86f835",
        "cursor": {
          "ref": "2af646be-6971-4dac-8562-42e096933b19",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8f7fd6f5-0fe3-420d-b9d6-f2ed2b4412df"
        },
        "item": {
          "id": "125a3c47-bed3-4111-9988-5be65e86f835",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ce11d619-906a-4094-b076-b4b3a469a8dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "062d246d-7a33-44f7-8216-599eff524fe8",
        "cursor": {
          "ref": "3f23950d-ef74-4c0e-b1ae-cd3999dc3048",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e301f862-05cf-45a6-b190-3c321385d189"
        },
        "item": {
          "id": "062d246d-7a33-44f7-8216-599eff524fe8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3fa141b6-a03e-40e1-9fcf-8db317151750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22ae1143-8d9f-44ec-b645-7284c045fca2",
        "cursor": {
          "ref": "33e03f97-f1ab-492f-8e83-919ffb2d9ec5",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "886a609c-1a65-40f4-90de-3c74a1d5e693"
        },
        "item": {
          "id": "22ae1143-8d9f-44ec-b645-7284c045fca2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "64058e29-ed7e-4bdc-829e-5f2efd6f5565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68852d82-b645-4c29-8844-2463834da467",
        "cursor": {
          "ref": "f7eb1bc5-a08a-4f5c-b4c0-b513f169ec42",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f8be10c0-0a39-4114-94c6-2ea8b70f7059"
        },
        "item": {
          "id": "68852d82-b645-4c29-8844-2463834da467",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "70d3818b-18d3-4855-a59a-f98b8ea84819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0aabc7d-98d8-43f3-bd33-5db6617774c7",
        "cursor": {
          "ref": "6c78d57f-9ea5-4bd0-935f-ca3fb96cfd58",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0f1a04d4-b127-4c3a-97e9-a011aa88336e"
        },
        "item": {
          "id": "f0aabc7d-98d8-43f3-bd33-5db6617774c7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b4a6a9fe-cdfb-4192-93cb-6e503d4857f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1f98ef-ef96-4e37-af61-d8d4a7e0b2ee",
        "cursor": {
          "ref": "340061f2-7117-4791-88d3-ac19ff51437d",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "bae27c6d-8db6-42fd-abef-e58bd5dcae9a"
        },
        "item": {
          "id": "0b1f98ef-ef96-4e37-af61-d8d4a7e0b2ee",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3913853c-0d9f-4308-a7d0-f5ec6e1cd2ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "485560fc-aebf-451a-9ade-8ad9bb099b6a",
        "cursor": {
          "ref": "34453c62-781e-4ba9-ad88-af332e8329a0",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b774ef55-d800-4aac-b411-98a17077b1cc"
        },
        "item": {
          "id": "485560fc-aebf-451a-9ade-8ad9bb099b6a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0eee19e6-9920-4d6d-b5c4-6ae94829d603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec741e0-ab03-4ab9-907d-02c3d4a9c3c1",
        "cursor": {
          "ref": "82fa2998-ff27-4cac-83a2-3135ab011f0d",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2b11ef3e-2c88-4601-b51b-24096451cdfe"
        },
        "item": {
          "id": "1ec741e0-ab03-4ab9-907d-02c3d4a9c3c1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "92552b05-7349-40cd-9a6d-b409762435a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2421ea34-849c-4d70-ba7d-62c02c0aa452",
        "cursor": {
          "ref": "a1e30084-c6ab-4eb1-800e-daf3250c8493",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fa9f1f0f-fe03-403a-a560-abd8a9ae29c4"
        },
        "item": {
          "id": "2421ea34-849c-4d70-ba7d-62c02c0aa452",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c1055539-92b4-481a-84be-adf838fba62d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dda00e5-5bc2-4422-8fdd-a42323806081",
        "cursor": {
          "ref": "db9ba5f6-3b3f-444f-a2c2-60a9f251374b",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e47ab0a7-f74b-41a6-9909-e08792c79d55"
        },
        "item": {
          "id": "6dda00e5-5bc2-4422-8fdd-a42323806081",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c36e8eb5-d903-49e7-a135-5a9f9e3ca445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f77c4b1-2727-48e7-bdab-c14a2e48e6a0",
        "cursor": {
          "ref": "08dec76a-8dfb-4659-9e41-77b0a2d2eb2a",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c1db98ab-c7e7-4c43-a473-32cc38da71c1"
        },
        "item": {
          "id": "6f77c4b1-2727-48e7-bdab-c14a2e48e6a0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7a4fdfe3-a5b4-4445-91d9-4f37826f0663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6709cefa-6f92-4789-8baa-024900cbb428",
        "cursor": {
          "ref": "4d1d70d1-40fe-40b1-99f4-d57f420d1541",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "385c7506-9b48-4ba7-ab03-fbb611df5a98"
        },
        "item": {
          "id": "6709cefa-6f92-4789-8baa-024900cbb428",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "91bd732c-f463-4194-859a-dd1f77eb3c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c4c8b9-f780-49c2-b2cb-cb3a871003d8",
        "cursor": {
          "ref": "37be9b5a-0677-4853-83cd-2a008ebda6c1",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7bec131d-aea0-4f62-8319-7890a90f029b"
        },
        "item": {
          "id": "39c4c8b9-f780-49c2-b2cb-cb3a871003d8",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3a25b253-92ed-4937-900f-9ccfdc8d6aed",
          "status": "Created",
          "code": 201,
          "responseTime": 2445,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "04c7f502-d3e5-4251-9641-1f0bb9f2d38c",
        "cursor": {
          "ref": "b9cace6d-1ac6-42d2-999d-4c70e6965b08",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "43ba3634-0e47-401d-bc66-3e3483088a5b"
        },
        "item": {
          "id": "04c7f502-d3e5-4251-9641-1f0bb9f2d38c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "96614d36-b6ea-482a-88c2-261e3e5024f3",
          "status": "Created",
          "code": 201,
          "responseTime": 4221,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b966ed21-fefe-4d9d-aaf5-04d258a928cc",
        "cursor": {
          "ref": "f4a12eac-67f1-47b7-b73a-563e12ac5ced",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "19d35900-9dd1-444c-bb91-892b290e3a7d"
        },
        "item": {
          "id": "b966ed21-fefe-4d9d-aaf5-04d258a928cc",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2e964a92-4412-41b8-88d9-b4023b23eb27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de5ede60-7130-45a2-aacb-0ebfb4040d71",
        "cursor": {
          "ref": "9a9d48e3-ddcb-4fac-bdc4-00f00dc0887a",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1c67a747-1eb8-410a-bd9c-a22e3470bec1"
        },
        "item": {
          "id": "de5ede60-7130-45a2-aacb-0ebfb4040d71",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9c82e5bb-f4d5-465d-904d-14190e84ab46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3dc19e-f86f-4756-a3d0-b2a9f087cd9e",
        "cursor": {
          "ref": "78155ec7-fff6-4d04-9ef7-3a22ca5ed00f",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "51eadb54-cf70-41ca-9ec7-0e679c8cb7be"
        },
        "item": {
          "id": "5c3dc19e-f86f-4756-a3d0-b2a9f087cd9e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "433d4e76-4828-408c-b4a8-56595353b534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b849f824-5330-4b01-a937-dc1001baf789",
        "cursor": {
          "ref": "3ad8ff5e-03e6-4881-ac9c-96fa7c998162",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c70d626c-516c-487f-83a3-3222d707c6a7"
        },
        "item": {
          "id": "b849f824-5330-4b01-a937-dc1001baf789",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "50ffd2c8-c978-4871-bf27-7f7d5a7a55bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1786ef9-9abe-4af9-acc2-03987f735ade",
        "cursor": {
          "ref": "f5aa1a78-0d9d-407b-b071-3f523c8716ae",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9d3a167f-13c4-41ca-b9a3-f7cc29e31167"
        },
        "item": {
          "id": "c1786ef9-9abe-4af9-acc2-03987f735ade",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "069c99ae-61b0-4e2c-8b5b-847d3a4bdacc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03fe58f-faa4-45ba-af8c-ce5808312108",
        "cursor": {
          "ref": "ce479cfb-e55a-46c7-b6d0-29fc8b8a44a3",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d5f546be-966e-49cd-990e-f18d216bb07b"
        },
        "item": {
          "id": "d03fe58f-faa4-45ba-af8c-ce5808312108",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ee604c4d-5621-4908-8ee1-70607bd6d1b8",
          "status": "Created",
          "code": 201,
          "responseTime": 3494,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ba3a9ad6-51e9-4ef2-b0e5-24d6138168ca",
        "cursor": {
          "ref": "6f941387-da61-427a-9794-0471efcb4470",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6c5672a7-5611-4e0d-a6f4-de4fc477ea53"
        },
        "item": {
          "id": "ba3a9ad6-51e9-4ef2-b0e5-24d6138168ca",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "41ada5a8-5379-484d-8c56-a7cdbd6bad26",
          "status": "Created",
          "code": 201,
          "responseTime": 2701,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "97437b61-e632-44d8-a96f-10c6cbabe675",
        "cursor": {
          "ref": "579cf756-cfd7-48ef-8bed-707a7b22f028",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6966ff5f-b6e8-4913-ae58-94c8891e5efa"
        },
        "item": {
          "id": "97437b61-e632-44d8-a96f-10c6cbabe675",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "eaf2173c-7b87-43b8-ab98-c2ab963664a0",
          "status": "Created",
          "code": 201,
          "responseTime": 2540,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "2665fc10-cbd4-49bd-bc14-501cb4afcd7c",
        "cursor": {
          "ref": "d44a2c20-d9df-40ef-8d48-f458d9f515bf",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "01016795-eba6-4769-8312-9019cf9c20d9"
        },
        "item": {
          "id": "2665fc10-cbd4-49bd-bc14-501cb4afcd7c",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ba6783b9-ea45-4644-b1cf-c1629da54271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b7e7bf-9ac0-4d6f-8640-9fab94167ceb",
        "cursor": {
          "ref": "27c6f028-357b-4f5a-a7b1-ea7cdff8c887",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5d030a41-fdf8-43e0-981a-bc4c7131a130"
        },
        "item": {
          "id": "f0b7e7bf-9ac0-4d6f-8640-9fab94167ceb",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7e307499-fe43-4de2-9ecb-2ff2e7954729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde2ce90-caf4-48cf-b3f0-b2bb0bf9d081",
        "cursor": {
          "ref": "aaf65952-55a9-4b32-9d79-b71e50abc22c",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6c7d411f-b72e-4603-9a06-676da1b18128"
        },
        "item": {
          "id": "bde2ce90-caf4-48cf-b3f0-b2bb0bf9d081",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "73180bc5-6d9a-453d-97e2-e1fd564c1628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2bae89-fc4a-47bb-9b6e-e26cfacce965",
        "cursor": {
          "ref": "cd9c894e-d836-42ee-ae71-a8924733834c",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a93ca74a-9bef-4934-92e6-a311b2812723"
        },
        "item": {
          "id": "6d2bae89-fc4a-47bb-9b6e-e26cfacce965",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b39b2d87-de8d-443d-87aa-19e80ebff567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f512e55-ca93-46e5-85ea-c19eb8678ee8",
        "cursor": {
          "ref": "b706d838-c655-466f-9411-9c0e75d1a1c8",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7c8a125e-7e69-430b-93f3-5ee97436f29a"
        },
        "item": {
          "id": "6f512e55-ca93-46e5-85ea-c19eb8678ee8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0f884ba2-6c65-445e-9045-6998c6cc29a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d1089f-98b3-4410-b612-da5c1221a04d",
        "cursor": {
          "ref": "b04e0562-2e32-4e17-a539-21a1f26b6cb3",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4661d385-79ec-465f-ae56-5270cc3d2b1b"
        },
        "item": {
          "id": "60d1089f-98b3-4410-b612-da5c1221a04d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d4b6997a-885c-416c-ab85-3dba800190c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e562f84-a5a7-416b-9c11-71adbdae173f",
        "cursor": {
          "ref": "fb535679-bce1-4719-988c-cac3d534fdcb",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "776c8d8c-f626-4637-822f-d65385f95938"
        },
        "item": {
          "id": "2e562f84-a5a7-416b-9c11-71adbdae173f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2479e112-a7a7-423c-9bbc-bf18a7fc81e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ba5850-1c8d-49aa-9ff6-3885cb265561",
        "cursor": {
          "ref": "06dd7269-9154-428d-a44d-35e2a9d3088b",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e8646e9d-9f1a-4557-a399-26d8d9df127e"
        },
        "item": {
          "id": "07ba5850-1c8d-49aa-9ff6-3885cb265561",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "022fcd27-0183-496c-8562-293651129c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358ad799-ffb3-4ddf-95e3-c74942bc59cc",
        "cursor": {
          "ref": "8bbc1a15-d6e7-435f-a431-54fa5829edb1",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "05477d72-7c4b-4025-a6de-0403eb20baea"
        },
        "item": {
          "id": "358ad799-ffb3-4ddf-95e3-c74942bc59cc",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "164de5e4-6a5d-4b9a-96d3-b450b7076b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf25b27-3fbb-4744-af6f-4c89adf01d01",
        "cursor": {
          "ref": "2c8aef40-7f0d-470b-b43d-f042fb20713d",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2a82e0fd-a093-43f3-8235-0be269155584"
        },
        "item": {
          "id": "ecf25b27-3fbb-4744-af6f-4c89adf01d01",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ae6b6300-ca26-4a76-bf80-769ea24efc7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4205251f-fe35-4b41-9232-7b21e93ddb78",
        "cursor": {
          "ref": "0ec68060-17b0-4da1-a839-f63e2cd2ef37",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "64e62d88-ceb8-44a8-906d-cdff2a64cd69"
        },
        "item": {
          "id": "4205251f-fe35-4b41-9232-7b21e93ddb78",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "438fc73b-c649-49a3-99c6-069b4f9caf41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27364ee5-a701-4a10-bdf5-0ba68f9afa0d",
        "cursor": {
          "ref": "a2ee6f56-0cb0-499e-9fb1-a4b6e9a99806",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7aa0a00d-0424-4b29-a08a-98c1c0e84528"
        },
        "item": {
          "id": "27364ee5-a701-4a10-bdf5-0ba68f9afa0d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a7429e3d-0c22-4b5a-8851-72e37ed0c005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d985ee-b646-4533-ae45-558852b2a32b",
        "cursor": {
          "ref": "4f1539c8-af3e-4b16-807e-3d3aee89a6df",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5e4592d6-9d82-4e94-984e-413a2c0f5294"
        },
        "item": {
          "id": "32d985ee-b646-4533-ae45-558852b2a32b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "032277d9-3ace-4dfe-ac8b-7c2d342d7254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d2106dd-ad71-4867-ae8d-2980adc697be",
        "cursor": {
          "ref": "c4600d76-8153-4cdb-bea1-ce6c09ec817f",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2eae2eca-6fe7-4c28-ac25-7c6abc48fe89"
        },
        "item": {
          "id": "5d2106dd-ad71-4867-ae8d-2980adc697be",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f8969a2d-a5fe-49d4-963c-ec0759ff818e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be8b44f-2e42-4f7f-8b8a-3820f37764e3",
        "cursor": {
          "ref": "e9b8cb8e-b8c2-4618-8ced-49c09d84c85f",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "81adca72-c5d1-4887-8c9d-46bb5fadbf51"
        },
        "item": {
          "id": "2be8b44f-2e42-4f7f-8b8a-3820f37764e3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a69b2983-4294-423e-96cf-146ece541c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10b5413-3f9b-4166-bb9f-590115c7df27",
        "cursor": {
          "ref": "ba649604-4ef1-44e1-8d22-808e0d57c77d",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "324019fe-0861-4ca4-a975-ca9aa064fcc1"
        },
        "item": {
          "id": "b10b5413-3f9b-4166-bb9f-590115c7df27",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f816d8dc-d8f1-420e-b628-616f8c55adf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f140317-6c92-46cb-845a-4c8db30e36e5",
        "cursor": {
          "ref": "0e30e9b1-ae2b-4c55-90bc-cb6fc75eb84f",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b97fae74-14b3-4142-9a14-1848c3247bd9"
        },
        "item": {
          "id": "5f140317-6c92-46cb-845a-4c8db30e36e5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f70d808b-26d1-45cc-8cd2-e2745a932c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e547980-3043-490a-af12-98de7ce1b3d8",
        "cursor": {
          "ref": "90a2d2bf-1f64-463c-b4c4-d87186bf49c4",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "745f4ca5-67f8-4859-bb17-4d060a11600b"
        },
        "item": {
          "id": "0e547980-3043-490a-af12-98de7ce1b3d8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6d66b661-ffbe-49dc-ab56-ec080705062c",
          "status": "Created",
          "code": 201,
          "responseTime": 2046,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "eed9205d-bf02-42e4-b436-cdf93e77b6bf",
        "cursor": {
          "ref": "9988382f-d25d-4981-a24a-bf740551c448",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c662e4ef-1166-43e0-9e7d-3f553cdc956b"
        },
        "item": {
          "id": "eed9205d-bf02-42e4-b436-cdf93e77b6bf",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e7cdbfec-d20b-4b73-9bfe-4a13194f0265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ddba0f-84d8-4233-96c3-8045571ccc00",
        "cursor": {
          "ref": "19044a3a-8017-4677-89eb-0e9d8abef58a",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1af0fad5-a627-4ab8-8780-b235ba52bb14"
        },
        "item": {
          "id": "c7ddba0f-84d8-4233-96c3-8045571ccc00",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3539a127-cf64-4ae4-bc88-deec30c41a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90289f7e-c08d-479e-99f5-82ed352e551f",
        "cursor": {
          "ref": "92ec053f-e689-4c3f-882a-47570b6475b2",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3290b169-6cb6-4680-b696-65df6a6ffd47"
        },
        "item": {
          "id": "90289f7e-c08d-479e-99f5-82ed352e551f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2a8e73cb-1fd1-4aa7-804f-72df624c0e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bfd8947-7cc7-4a89-bfb5-602260cfa36c",
        "cursor": {
          "ref": "90144371-8ec8-4510-9847-b02ce3029733",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fa50b4f9-2765-4930-9901-df23797ecfe8"
        },
        "item": {
          "id": "5bfd8947-7cc7-4a89-bfb5-602260cfa36c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e167b2d7-24ce-40f3-bad9-7c75644eaca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07663871-431a-4f1f-aed3-f9ebb188d767",
        "cursor": {
          "ref": "9d386d13-d67c-4496-8c1a-a6657ecf6f23",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "11f186d0-4209-4bff-bb13-2fac6d0161a5"
        },
        "item": {
          "id": "07663871-431a-4f1f-aed3-f9ebb188d767",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b263b33e-c417-435b-9a27-0496b246890e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15037bc4-61f1-4525-a68c-3e5c25f75f98",
        "cursor": {
          "ref": "5276f19f-631d-483a-9f20-9988bc5c4142",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "31543070-700f-4f5f-970f-e520d9c7c442"
        },
        "item": {
          "id": "15037bc4-61f1-4525-a68c-3e5c25f75f98",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "71ba4dc5-d336-4386-98ed-93f2a7980437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f97acdf-e656-462f-8584-6678f961bfbd",
        "cursor": {
          "ref": "be3c4d62-34aa-41f5-ae00-f838a983c021",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e8bfb474-21d6-47ea-89f0-ec8b1783c419"
        },
        "item": {
          "id": "6f97acdf-e656-462f-8584-6678f961bfbd",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "52dd55d9-3e88-4943-bd2a-5c491aebef72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2203ee7-dbcd-455e-8c0b-f4ed8be80472",
        "cursor": {
          "ref": "17b94a8e-a730-4949-854a-f46063d38308",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3bbf2415-ab63-48be-8a46-23c783c41c9c"
        },
        "item": {
          "id": "d2203ee7-dbcd-455e-8c0b-f4ed8be80472",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0a81874f-c6b0-4795-b677-d9c36925e008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3b5470-7768-4740-be77-ed1fb9053979",
        "cursor": {
          "ref": "0966f37c-dcc4-4bd4-b36c-13b4c0142f01",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ef67875b-d5de-40d5-b6f6-9d7ddf5184d0"
        },
        "item": {
          "id": "3b3b5470-7768-4740-be77-ed1fb9053979",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "3279f5ed-0d00-4ae7-bcb7-67b94080aa6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "646f6a5d-1798-4926-9917-3792d63a6446",
        "cursor": {
          "ref": "c5c5cd29-509e-42ca-aea4-d48902a63edc",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2757cbae-58e1-45d8-8e7c-2a064abbd689"
        },
        "item": {
          "id": "646f6a5d-1798-4926-9917-3792d63a6446",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b7180426-3e31-44c1-9210-fa2ce3e645c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a59f2d7-7f7c-4331-b78a-a1d99024ce34",
        "cursor": {
          "ref": "d3672dcb-e388-481d-8240-fe0d8507425e",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1ecf1f7e-6f93-4c79-bbc7-b2ad51be1d77"
        },
        "item": {
          "id": "8a59f2d7-7f7c-4331-b78a-a1d99024ce34",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7ca03c08-317a-4c65-a08c-89710e0bfe21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4fac344-3566-4a62-8587-ab50f130860b",
        "cursor": {
          "ref": "5af495a1-fea5-4993-9fd8-3051e8b47349",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "52c1940e-f5df-4325-8798-87f24744efa2"
        },
        "item": {
          "id": "a4fac344-3566-4a62-8587-ab50f130860b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1193e553-d24a-43b0-95cc-e0f11581cc93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8babe3-11a3-4bd6-bfe5-c96918a4c7ca",
        "cursor": {
          "ref": "a9160236-1b56-4db2-9547-51bd14a1d842",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "69e1c0bd-8093-43a0-bda6-2dd05b7fa0a7"
        },
        "item": {
          "id": "0f8babe3-11a3-4bd6-bfe5-c96918a4c7ca",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4862687d-91fd-4d7a-9481-bc91aeda5d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6e6df3-999d-4397-840e-ca5d07f31346",
        "cursor": {
          "ref": "4863127e-5758-4f2f-a3b6-82bbd091c341",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "799e22a6-5995-4dd4-9752-822f735db12a"
        },
        "item": {
          "id": "9f6e6df3-999d-4397-840e-ca5d07f31346",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "dc8edee3-3e1d-4846-b23c-084e165c18b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fda7c5b-9065-47d4-a8d0-60009d618ce5",
        "cursor": {
          "ref": "a02b3a4b-0e60-40a7-bd6c-13d6ad0cc815",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "fd7adee6-1d33-4a5b-888d-dd2e3d539eda"
        },
        "item": {
          "id": "3fda7c5b-9065-47d4-a8d0-60009d618ce5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e26e62d5-13b0-4814-a6a9-0c03f1f271cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8ea884-bcf7-4d32-bee2-19a5f8af0165",
        "cursor": {
          "ref": "14f2ad49-952f-4b11-91e4-f06e97e15564",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "05d2f997-6a21-4b3e-b126-bf8e5a284e5e"
        },
        "item": {
          "id": "7c8ea884-bcf7-4d32-bee2-19a5f8af0165",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9f8bc676-f4fd-43d1-8d8a-60137c4fddee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ada962-8c3f-421e-a251-6619f7467045",
        "cursor": {
          "ref": "1da49101-0d08-4f54-95fe-2e9f4dde9cf5",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b7e045d4-d5ae-49b1-8dcc-773cddd89fff"
        },
        "item": {
          "id": "c0ada962-8c3f-421e-a251-6619f7467045",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ebdd6db1-77dc-45c2-8a15-111577958ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be0cd37-3f20-490b-96af-2a134f85023e",
        "cursor": {
          "ref": "81474877-25df-4fe9-bc07-d58531d220c4",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "eabe438f-c7fb-4e9c-a984-a1052756bdac"
        },
        "item": {
          "id": "3be0cd37-3f20-490b-96af-2a134f85023e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7805a424-d454-4d9d-a404-46a3ed5a1c3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9623b38-eae6-4489-ad0b-a827afcdb58e",
        "cursor": {
          "ref": "12221dcc-65b3-4a7a-8d13-41782f0148a3",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b1159560-fc6a-424d-bfc3-bd5358517fab"
        },
        "item": {
          "id": "d9623b38-eae6-4489-ad0b-a827afcdb58e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3f97288c-d900-4bcb-aaea-11ac2122d4f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab38bc6-baba-4d06-a14d-0310c0c46dbb",
        "cursor": {
          "ref": "44101f82-c681-4f97-bf20-eadd81a0311f",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2cb8fdcd-9960-477f-bed1-b2d73574c4d2"
        },
        "item": {
          "id": "6ab38bc6-baba-4d06-a14d-0310c0c46dbb",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d69e9803-f24f-418f-a01e-e39cf4a37a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2323344-6bd1-4e3d-9d91-499b09094ccd",
        "cursor": {
          "ref": "6c8ffed9-8725-445b-9424-a0f3ec3898b8",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8009e120-6c1a-442b-bd35-39d17b5f023c"
        },
        "item": {
          "id": "f2323344-6bd1-4e3d-9d91-499b09094ccd",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f711d0a9-1765-4ac8-beaf-e50884477145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3cb3a2-fa0f-4058-b302-d35522500cd2",
        "cursor": {
          "ref": "9b496f30-838b-4b5b-8357-e837ea321697",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6e2e483f-0baa-4dd7-b73c-9bd22c5edee5"
        },
        "item": {
          "id": "6f3cb3a2-fa0f-4058-b302-d35522500cd2",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e1ca4f8e-4107-4a25-8f84-4829c685b9f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef980037-40d8-4366-aeb3-4414377e7d91",
        "cursor": {
          "ref": "cd23df51-7396-487f-bf96-c7ee4216aa9b",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3f6b6cf0-8421-4e42-b93d-3eab3a6e4227"
        },
        "item": {
          "id": "ef980037-40d8-4366-aeb3-4414377e7d91",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "28bb9e36-43bb-4417-a282-48cdf04b62ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d9aeb2b-3966-44f2-a201-eca26778f42c",
        "cursor": {
          "ref": "0e321c4d-5dfa-4207-bc9f-79dec4b3d799",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0b355711-dbab-40ea-811d-d95dc59076d7"
        },
        "item": {
          "id": "8d9aeb2b-3966-44f2-a201-eca26778f42c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "06cab5ab-35b9-4ea2-8410-26bd323a656f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa126bf-034f-4ef8-ba28-c94e17e39231",
        "cursor": {
          "ref": "5e76d3b1-afcd-495f-ac48-e9cb95e840d5",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b1439599-62ca-45d3-aba6-0d9c0bf9b243"
        },
        "item": {
          "id": "dfa126bf-034f-4ef8-ba28-c94e17e39231",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "41dbe77d-57d3-4d2a-97b2-ff2297c5b274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "375aa3ab-5dc5-415b-b1ba-640444a6f741",
        "cursor": {
          "ref": "4dbd2f11-c596-420e-b789-fb410fda87e1",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b0e37030-ec4d-4bba-a7df-89823294f0a3"
        },
        "item": {
          "id": "375aa3ab-5dc5-415b-b1ba-640444a6f741",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e4aff585-7572-4077-a2db-1d4dcc8ceb15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fb7677-37b9-40ca-bc07-ed72c582e2d1",
        "cursor": {
          "ref": "da55e7d6-fcf3-4d48-8b9d-a97804f1627a",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ba96e9cf-080a-4b33-a5d4-a664e583564f"
        },
        "item": {
          "id": "73fb7677-37b9-40ca-bc07-ed72c582e2d1",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e4ba65b9-e565-4d99-a8cb-0fd2bfcc56b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd89838f-2e78-43f3-9ea8-67b9dc35bc57",
        "cursor": {
          "ref": "0e22fa46-72e2-4fa4-85b1-a069383eddf6",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "10ae0e6a-2c70-4d18-8676-0b5e3e919a65"
        },
        "item": {
          "id": "fd89838f-2e78-43f3-9ea8-67b9dc35bc57",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "55d8fb3b-e7db-45b0-bdd4-21fcf8f77be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fccb4a5-fdfc-4e15-8770-d33965bfec24",
        "cursor": {
          "ref": "339e260f-96c2-42e8-b3d0-fe26e3c5679e",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f8ecc0c7-f739-4861-8622-e575d1816c1d"
        },
        "item": {
          "id": "6fccb4a5-fdfc-4e15-8770-d33965bfec24",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9073eb12-bd95-4225-9a0a-750d4a8c11b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8c429d-c6e7-43d6-94e4-45ec82cfb1e1",
        "cursor": {
          "ref": "55cecbd2-c993-486d-a2af-c3225e9ae68e",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "49779806-e541-4cdd-b417-7a75f312fdcc"
        },
        "item": {
          "id": "2f8c429d-c6e7-43d6-94e4-45ec82cfb1e1",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c3f91bf1-1b31-4089-bb4b-26ed37cd4ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf735661-cca7-4a14-88ea-377a0f91e39e",
        "cursor": {
          "ref": "cf0985d1-3061-40b3-80e9-8241c2f7bb59",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "574f70c2-6002-466f-9282-970391662721"
        },
        "item": {
          "id": "cf735661-cca7-4a14-88ea-377a0f91e39e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "805b2887-66c0-4c9a-897b-5f6377ff7efb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "23fe72ea-436b-41c6-b138-39f3e6d3b6a6",
        "cursor": {
          "ref": "3cb5a03d-edda-4561-893d-02f34314bb4e",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5038f2a9-2af0-4a2b-9591-3a76e9cc93c8"
        },
        "item": {
          "id": "23fe72ea-436b-41c6-b138-39f3e6d3b6a6",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6e5a6a43-46bb-4403-a587-74d8d5f5b4bd",
          "status": "Created",
          "code": 201,
          "responseTime": 2832,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "230c0bfb-7f7d-41ad-ac44-52554463ea60",
        "cursor": {
          "ref": "28cdae14-d504-4e55-a3d0-0caa89602e48",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2b2b49e8-7b14-4dc5-8a68-9415b1a34943"
        },
        "item": {
          "id": "230c0bfb-7f7d-41ad-ac44-52554463ea60",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b6fbb765-28d8-424b-957b-198c1a54c667",
          "status": "Created",
          "code": 201,
          "responseTime": 2559,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebedb265-2dbe-48bc-964d-f1e0d737cae7",
        "cursor": {
          "ref": "ba7b3b20-ceec-40c4-9de4-a98321917c5d",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "86c1d9d0-dd7e-4b5c-951a-811688fb2cd2"
        },
        "item": {
          "id": "ebedb265-2dbe-48bc-964d-f1e0d737cae7",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f4e8163b-e78c-4564-86c1-911c586c3430",
          "status": "Created",
          "code": 201,
          "responseTime": 2327,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cafe70ac-4509-46b4-b0d1-ba57d179da2a",
        "cursor": {
          "ref": "1aba4e1d-147f-4ad1-823e-cbd557e4915a",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "04e3ce12-6ae0-46d3-8ddb-ac6752115886"
        },
        "item": {
          "id": "cafe70ac-4509-46b4-b0d1-ba57d179da2a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d1fa3321-bca7-4312-b87d-f64e5868cc68",
          "status": "Created",
          "code": 201,
          "responseTime": 2379,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c744fb58-1450-4c7f-aebd-d5681df8ce57",
        "cursor": {
          "ref": "f2dbafd9-fc45-461c-9dc0-619c5502ba2e",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "71f04b74-7611-45e3-9375-71a62766bbce"
        },
        "item": {
          "id": "c744fb58-1450-4c7f-aebd-d5681df8ce57",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1a770e0a-a369-4577-8fd7-6cf692aefea3",
          "status": "Created",
          "code": 201,
          "responseTime": 2468,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-01T00:53:46Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-01T00:53:46Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "cc290974-ab49-4901-b59a-de900bd7fd37",
        "cursor": {
          "ref": "49baa504-8d95-401f-a2cf-f892bc88958c",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4a1a7f2a-7734-46b9-afbd-009ff25ad33b"
        },
        "item": {
          "id": "cc290974-ab49-4901-b59a-de900bd7fd37",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "640e0197-cc82-426e-b5f6-6af8e75a4c2d",
          "status": "Created",
          "code": 201,
          "responseTime": 2390,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bedb220f-b1f9-4f3e-80bb-6b90bc8d77b4",
        "cursor": {
          "ref": "4f403943-206c-4c2b-b1b9-e29ca27e2d5d",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9a754184-e9d9-4823-a6a4-60e2eedfd10b"
        },
        "item": {
          "id": "bedb220f-b1f9-4f3e-80bb-6b90bc8d77b4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "06dfc11b-a07b-4b3e-82da-a1b37a0dd76b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "402c2792-80f6-4ce9-bd0d-fcc8b4bab458",
        "cursor": {
          "ref": "cef0db1b-0385-40ae-a73b-1b9489763d3e",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "be06f69c-f2ca-41e4-928d-b775b4d81013"
        },
        "item": {
          "id": "402c2792-80f6-4ce9-bd0d-fcc8b4bab458",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e7e7091c-b3e5-4058-a0c8-efd56d3da36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f807913-85a3-4593-b79f-79b08f503c7e",
        "cursor": {
          "ref": "1dad9f6a-aa04-4213-ac0c-c1d8836bb454",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b4cc32db-c835-400e-85f2-5b35340758ba"
        },
        "item": {
          "id": "2f807913-85a3-4593-b79f-79b08f503c7e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0f9b54fc-867c-4512-a6f7-f3714ab55e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607d32b8-c98d-4ca9-8fb4-9b771567a8c0",
        "cursor": {
          "ref": "0965284b-55dd-45c8-8b03-966e853695c3",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1db84090-63df-4594-8bd2-7b10de00746e"
        },
        "item": {
          "id": "607d32b8-c98d-4ca9-8fb4-9b771567a8c0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d22b538a-c355-4576-82fe-cdd94cda423f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552dcb77-7d7a-4fed-819b-0190b7d358ba",
        "cursor": {
          "ref": "241e86ae-6112-45b4-be0a-f06c45204b92",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8a3524d9-f4a6-4204-9dc8-1ddb28e6c54a"
        },
        "item": {
          "id": "552dcb77-7d7a-4fed-819b-0190b7d358ba",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "20cfe218-62d6-488c-a599-b7464bce734c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "990fba44-be05-4586-a2cc-299ee5b19f94",
        "cursor": {
          "ref": "e804f14f-d2d7-40b7-bbd1-9e6df2b5fa79",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4b34df18-4e78-45f5-b9f9-70f7cda9bd4c"
        },
        "item": {
          "id": "990fba44-be05-4586-a2cc-299ee5b19f94",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "542f79e3-c817-472d-8e02-6590ba2fec7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46096945-8b0b-4a93-a9cf-b54671ea2188",
        "cursor": {
          "ref": "151e61c7-148a-4add-b087-6a9c703f7ef3",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e87f74d5-5654-488d-bacf-8484e1cefde7"
        },
        "item": {
          "id": "46096945-8b0b-4a93-a9cf-b54671ea2188",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0ef5aa6a-1a29-43b3-ae79-4b6c915d7abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b60fa8e-360c-498b-8e05-06adf8e27ae8",
        "cursor": {
          "ref": "00d35ef8-27fe-4bc8-b9f1-6cc4e7ae7954",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "edbbb60b-0596-4a64-adc7-06e35e4be540"
        },
        "item": {
          "id": "9b60fa8e-360c-498b-8e05-06adf8e27ae8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c28ea1fb-fd31-4976-ab5f-b3499eb8c4d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c2eb17-f374-42fd-8da7-83125945f8c7",
        "cursor": {
          "ref": "656b5aab-eb31-4240-af6e-4a5aba1d4b27",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "bab529ab-1578-4172-80b2-981f0ed8f3b3"
        },
        "item": {
          "id": "c7c2eb17-f374-42fd-8da7-83125945f8c7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "adfbbf03-65a8-467e-9275-750cf3f2ada8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac40dc2-3082-4de5-8c53-1132fdf8a532",
        "cursor": {
          "ref": "0a3474ff-7787-47ad-9a56-dabf2738e6e8",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f7c56986-650f-46f1-aef8-dfd243e66855"
        },
        "item": {
          "id": "4ac40dc2-3082-4de5-8c53-1132fdf8a532",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5863ff72-592c-4368-b45f-3525b28e7fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af74e67d-7825-4483-bc43-24b92d4db4a6",
        "cursor": {
          "ref": "3600c9f6-5021-4a9a-8736-1d154559b0b5",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "eb9011e7-9620-49bd-9298-49a369202ed5"
        },
        "item": {
          "id": "af74e67d-7825-4483-bc43-24b92d4db4a6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5c1e13cb-8d9c-4440-85ff-269d1d407c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd2da52-70a3-44ce-880a-a320ed553619",
        "cursor": {
          "ref": "9cc647f3-49d7-4bd3-8870-1aeec3ca699f",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0e007aa6-970c-4854-b758-3edd28172ad9"
        },
        "item": {
          "id": "2dd2da52-70a3-44ce-880a-a320ed553619",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2e7740e2-da63-4a42-b0ae-20ba4794e7e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3430f70a-9297-4a0f-8f87-dc65a55680bf",
        "cursor": {
          "ref": "0ebeab8a-0d02-4e74-a6dd-18b60de6fa9c",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "fd823d9d-6b90-4f5d-9b06-3aee645aa83f"
        },
        "item": {
          "id": "3430f70a-9297-4a0f-8f87-dc65a55680bf",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0eda81ec-62ab-4e9c-a5fd-8466b2e6df06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d8090b-37fa-4a34-8831-9a8589b9283f",
        "cursor": {
          "ref": "d3c4523f-9cd5-4431-861f-deb34d0bd3b6",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7d1e0d73-728e-408d-a7d9-fa3f74e6f487"
        },
        "item": {
          "id": "f9d8090b-37fa-4a34-8831-9a8589b9283f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "de3c42eb-7e09-48f9-af7f-1756248be86d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e6602e-460a-4cd0-aa48-922aae9595bd",
        "cursor": {
          "ref": "26a9ace6-9284-48a2-8c2b-dba061865dee",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d129f83c-24bd-4f2f-ac08-862a1ee51bd2"
        },
        "item": {
          "id": "87e6602e-460a-4cd0-aa48-922aae9595bd",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ddd60f0c-f089-4683-81bc-120b8a6901f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c99def5-d5bf-41df-b828-ca6b7cf49dbb",
        "cursor": {
          "ref": "b0d722c4-51f9-41d1-aaec-8388565644bf",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "57e3e03d-8e0d-469e-9653-2eb756151a27"
        },
        "item": {
          "id": "2c99def5-d5bf-41df-b828-ca6b7cf49dbb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0e057c00-4d87-4d4e-9764-85d7ecce64a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec8d5dd-f56c-44be-9466-c20f5dfaf42a",
        "cursor": {
          "ref": "a93c8178-0e27-4782-8da8-2c3c5def5222",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "73c70a61-5f5f-4acb-9043-2d1d225dd1c0"
        },
        "item": {
          "id": "2ec8d5dd-f56c-44be-9466-c20f5dfaf42a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f8a1c16d-ef43-4a7d-b515-07bf47f31c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c8d486a-d3ea-4298-963f-a1d4ddccfed3",
        "cursor": {
          "ref": "c85e72fb-34bb-419a-8945-219b77069510",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "da7714e1-0787-4af9-b2ae-909039d200cb"
        },
        "item": {
          "id": "5c8d486a-d3ea-4298-963f-a1d4ddccfed3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "eae557fa-5b01-4c90-a90d-ff99c7bd991f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439ce484-61cf-446d-b180-33effca4afb4",
        "cursor": {
          "ref": "f5675844-4884-48dc-bb95-4e452b5fe1e0",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "01a10fc4-ab34-4c8b-ab82-a16600ff2764"
        },
        "item": {
          "id": "439ce484-61cf-446d-b180-33effca4afb4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ade1a81a-b6a9-424f-b856-39aff04eb92f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8e5d61-1b74-4398-91ec-7219b72f74c2",
        "cursor": {
          "ref": "23511aa2-0bb5-4260-9945-b0fa4c36dc22",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "76648ace-6787-4518-af39-5db37ed0eb50"
        },
        "item": {
          "id": "ca8e5d61-1b74-4398-91ec-7219b72f74c2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c7130537-d692-490f-8db4-4d37de56838b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52abf7e-e02b-4547-91f3-ab8af4ae1ea7",
        "cursor": {
          "ref": "968d42c8-b955-44ba-bec8-ab917cd227c5",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7c9a00f1-c3a8-494f-84fc-23317d9e775b"
        },
        "item": {
          "id": "c52abf7e-e02b-4547-91f3-ab8af4ae1ea7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bcf7a6ab-2cf3-4f43-a9e2-654768db5a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 809,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2386ec-a7e1-49c2-9b8e-bd964c2ba41e",
        "cursor": {
          "ref": "d116cbdb-75b0-40ef-b614-c36fec047c1b",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "dced22e5-b65b-4a55-a764-85c4087182c2"
        },
        "item": {
          "id": "6c2386ec-a7e1-49c2-9b8e-bd964c2ba41e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "08c45c50-dd7b-4ebc-8dfc-b1f158ed414e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d0e477-4fd5-494c-8e6e-851073cd53c8",
        "cursor": {
          "ref": "5750f85a-c799-4253-b23d-565dfad92517",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "16c7697e-cf65-4528-b7f1-0536cbb8d177"
        },
        "item": {
          "id": "a7d0e477-4fd5-494c-8e6e-851073cd53c8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "275283fc-b395-4c6f-9500-8aba724ab266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9eb7d94-043a-4b08-bdce-3a5b963723cd",
        "cursor": {
          "ref": "ec9c6d15-60a6-4e0c-9d5e-66a9e45e9da6",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f36cf71c-f3ad-4e64-be66-c93698a5fd2b"
        },
        "item": {
          "id": "e9eb7d94-043a-4b08-bdce-3a5b963723cd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c5ec22f1-e732-4438-968d-d52f62580984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c491ef74-8351-4f57-a8ac-6bbe9f7b8976",
        "cursor": {
          "ref": "501db9e9-a3a0-4318-990a-b45fc3e23771",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "78108961-e697-4dc5-b1ba-f0186d293444"
        },
        "item": {
          "id": "c491ef74-8351-4f57-a8ac-6bbe9f7b8976",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "da4f9d7b-af6e-4e3c-81bd-7d7b2f4f3714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9596d0bb-bc81-47bc-990f-acbba7373171",
        "cursor": {
          "ref": "1d0c83cf-cb66-431e-a56c-36cbb95ef406",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fce16e48-a982-4c57-930d-73136416838a"
        },
        "item": {
          "id": "9596d0bb-bc81-47bc-990f-acbba7373171",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "410c8a5d-f3b1-483c-844b-4a2ecc794abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2a7514-79b0-47df-b178-cb722c683573",
        "cursor": {
          "ref": "a53f9bb4-eca7-43c2-82ef-8c614c069ee2",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "99e5e9f4-026d-48a6-b9d9-b7dbe05752bb"
        },
        "item": {
          "id": "6e2a7514-79b0-47df-b178-cb722c683573",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "59bcdb65-8a94-4fab-8910-d63caf59a91b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c58808c-7118-48e4-b406-934f333f54e4",
        "cursor": {
          "ref": "df3246dc-23af-40b8-8c83-ddc209bc8ef5",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e6837f2a-48ad-4a9c-9203-957d8755ba5e"
        },
        "item": {
          "id": "4c58808c-7118-48e4-b406-934f333f54e4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1b7a7039-100f-4a86-b476-e424596186e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7566be-604a-4dd4-a2d0-c4696278ee2a",
        "cursor": {
          "ref": "aba61275-c712-44a4-91aa-9fdd8672e36d",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d08c2d5f-ac3e-426d-b548-e727e7fbbbb8"
        },
        "item": {
          "id": "aa7566be-604a-4dd4-a2d0-c4696278ee2a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d8433eb9-9a1e-4706-8017-6ebc5da0669b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d3081e-e527-4a8c-ba41-bcd03cd85109",
        "cursor": {
          "ref": "71a23d15-65bd-4cb7-93b7-2c31009faa39",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c900b2b7-5e76-47ee-81a8-1f4efac10ea0"
        },
        "item": {
          "id": "44d3081e-e527-4a8c-ba41-bcd03cd85109",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c49b4958-450c-4700-89fe-932728788ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52a9846-a21a-4c2c-9f3f-4d014e73ebc4",
        "cursor": {
          "ref": "6f67d251-6559-4fed-9f3f-23a5964f2724",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c4da1d27-3b02-43ba-9cb4-b00a8297b7a1"
        },
        "item": {
          "id": "f52a9846-a21a-4c2c-9f3f-4d014e73ebc4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b1b8b48a-1e04-438a-af33-0bcf5cbb6ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561a8bc0-d1db-4a18-9e51-7a0940bb7de9",
        "cursor": {
          "ref": "5e632ef0-13bc-4714-8e07-77d64ca55641",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8286fca9-f484-4c71-bd56-0fb84d5d5efc"
        },
        "item": {
          "id": "561a8bc0-d1db-4a18-9e51-7a0940bb7de9",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "64f2267d-2b1a-44e1-bb97-159066749813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9172cc3b-7658-41cc-96c2-52c429796e4b",
        "cursor": {
          "ref": "956f55c4-9d54-4751-9020-0e15f9ed8e8c",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c894742d-2a7e-4fcf-b0db-38cbe36eb9e1"
        },
        "item": {
          "id": "9172cc3b-7658-41cc-96c2-52c429796e4b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "daba1127-b88e-4c94-b70a-3bc9c8a83ea1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "789b142e-39ed-4476-ac1e-4a27fc5d73d0",
        "cursor": {
          "ref": "5de302e4-db79-405b-8737-ab54fc55ae67",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6fee5121-474e-4be0-8764-29ea6d7743e6"
        },
        "item": {
          "id": "789b142e-39ed-4476-ac1e-4a27fc5d73d0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fb2a2ba3-949f-47f9-9470-0d775265d411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57fdda6-57f2-47da-89ae-5e736474a58d",
        "cursor": {
          "ref": "a8f76372-5e5f-427c-a5a4-063fb2222810",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "11f7d0fd-dca5-4bf1-85b3-1263030c090e"
        },
        "item": {
          "id": "f57fdda6-57f2-47da-89ae-5e736474a58d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3f50fef6-db1d-4866-a3b0-3482ff1e006c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb93cb03-c095-402f-869c-8d320ee70b7d",
        "cursor": {
          "ref": "5ceaad6b-ebda-4e8a-a7aa-5f9dc5812945",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "46c717c9-ecf1-4088-a46b-3716f30a6779"
        },
        "item": {
          "id": "eb93cb03-c095-402f-869c-8d320ee70b7d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "7f896db0-8cd1-40ce-9244-e53d6a6c9ab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd09b51-4d83-470b-810a-995ca2db3634",
        "cursor": {
          "ref": "c329a185-6da9-4631-bf33-9ad4da641e79",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4cf02171-5b32-4973-bddd-e83de544b36c"
        },
        "item": {
          "id": "9bd09b51-4d83-470b-810a-995ca2db3634",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a7386411-da23-4188-9494-d31960628e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c86b5f-4a94-4d5f-9a18-6cd34d357898",
        "cursor": {
          "ref": "6507431d-acbf-4135-8c85-3502d7deaf2e",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "659ae53e-53b0-4f0a-be7e-7cfd732438a6"
        },
        "item": {
          "id": "54c86b5f-4a94-4d5f-9a18-6cd34d357898",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "eaf1753b-840d-4e5a-9921-09137cc80d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2713e8ec-fe00-406c-99e5-2a1f78782174",
        "cursor": {
          "ref": "99ce26ab-bbb8-4980-9ef7-b80b2db2e0de",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a82b0595-0a18-4433-87c7-e491f4c2e790"
        },
        "item": {
          "id": "2713e8ec-fe00-406c-99e5-2a1f78782174",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "956bc951-8e42-4d29-9c14-5f5369f5f6ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e45dadf-9633-450e-9ac4-271861dc5327",
        "cursor": {
          "ref": "d1136fb4-0233-44d4-92c0-a533a1c927ef",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f7409717-84b5-4f0a-98d4-c4359f299952"
        },
        "item": {
          "id": "1e45dadf-9633-450e-9ac4-271861dc5327",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6b7e4b6a-7eac-435a-985a-7990f04ac2a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dfe1e1a-a0dd-4fbf-9664-1cf32085e6e7",
        "cursor": {
          "ref": "65adaeed-425e-4ca9-8507-fdcdafe70722",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "dbbfd4b0-f8b8-4885-8929-6fcb07960006"
        },
        "item": {
          "id": "5dfe1e1a-a0dd-4fbf-9664-1cf32085e6e7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "85db90c4-7709-424f-a214-be8684934517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad027db-2cf3-4319-9b81-a5e75fe8195d",
        "cursor": {
          "ref": "4397e721-f1f6-4146-bb39-a04dc91249cc",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "753e9113-46f3-4c3e-8501-abccdc6c3fcf"
        },
        "item": {
          "id": "fad027db-2cf3-4319-9b81-a5e75fe8195d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "fdc4a187-654f-437b-a929-e4ac93f436ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c77a12c-6ace-40a0-a4ff-22e1d8223183",
        "cursor": {
          "ref": "703f7692-3f6d-40b4-8001-6d34105a88cc",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2964b20d-bd8a-412f-8466-de38d9b8e4c4"
        },
        "item": {
          "id": "0c77a12c-6ace-40a0-a4ff-22e1d8223183",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "826332e3-45f9-4284-b3ed-9f27ecb22508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634499d5-00b2-4a39-9d58-e6ffbfc2a8b6",
        "cursor": {
          "ref": "11ee3f28-e489-4a40-8888-f75c9ef54bee",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5792dc82-8d26-4bcc-a3d7-49ccfdf8116d"
        },
        "item": {
          "id": "634499d5-00b2-4a39-9d58-e6ffbfc2a8b6",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b53c36b6-a9ce-4053-89bb-4e328351e27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99541498-1cc7-47b1-8780-b74291edf76e",
        "cursor": {
          "ref": "13cb8081-a6d9-43cd-961c-61ee917622ff",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "58e3be62-d182-4ec4-94b2-128d4c519b98"
        },
        "item": {
          "id": "99541498-1cc7-47b1-8780-b74291edf76e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "10b7370f-ddb4-46a0-9c75-c0d9947608a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a02276-d4a1-4162-8c30-86673576b3f0",
        "cursor": {
          "ref": "7b66636b-4df0-4285-95db-84d10c5f1227",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "abbf2c54-5002-469c-9139-bd789ccff265"
        },
        "item": {
          "id": "46a02276-d4a1-4162-8c30-86673576b3f0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7f82448e-c203-49f4-92b8-87c75e9e8170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da548055-8f5c-4471-a835-2516d2623891",
        "cursor": {
          "ref": "5b0b1feb-9fec-4f12-b335-ee58c9f8ce74",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3c485436-59fa-4d7d-b02d-1037902c51e6"
        },
        "item": {
          "id": "da548055-8f5c-4471-a835-2516d2623891",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "de08ca44-d523-46b9-8481-f81e5d4bd65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e545d079-86e0-4d12-b816-3c4bacb4a2d7",
        "cursor": {
          "ref": "19940ea3-c5a8-483b-aa28-ae221557720c",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "bf2e04c9-9117-4bc2-9672-e1f9af13badf"
        },
        "item": {
          "id": "e545d079-86e0-4d12-b816-3c4bacb4a2d7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "86a70a8a-a90b-44dd-b71b-5fd3d3984f9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79899572-ed77-4fd4-a048-54d1b2a8baea",
        "cursor": {
          "ref": "be7df260-2fa9-412a-99fa-c7b4e1a49e7e",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "cca03cd6-62ec-4206-af76-4564ecbdfc9c"
        },
        "item": {
          "id": "79899572-ed77-4fd4-a048-54d1b2a8baea",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3729934a-9745-47c0-a6bc-504e2824bae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d51478d4-2977-43b3-923b-be5170333f78",
        "cursor": {
          "ref": "6a9ffc36-b02f-4826-9d64-05d536ac5aa1",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5084276a-b37d-4d62-a12d-6f96a5dcff99"
        },
        "item": {
          "id": "d51478d4-2977-43b3-923b-be5170333f78",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e06bb4f1-e241-4874-872d-fab6f8420b9f",
          "status": "OK",
          "code": 200,
          "responseTime": 271,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "7a3aff53-01bb-4173-aaaf-d2e1a66655a0",
        "cursor": {
          "ref": "9ed99a46-1068-4925-91c5-269a38f514c8",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "2594d3be-eb6e-40b8-91c4-0ffb33e6e0db"
        },
        "item": {
          "id": "7a3aff53-01bb-4173-aaaf-d2e1a66655a0",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "aaa98df2-ce60-44e6-8d7a-dbcd9b441729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb9f317-dea5-4bb5-95f7-f70352876287",
        "cursor": {
          "ref": "dc0d5e29-81b0-4134-bd5c-a14e539a5e3b",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "69301c2a-794b-4f96-adb5-3d3fd91901cf"
        },
        "item": {
          "id": "3bb9f317-dea5-4bb5-95f7-f70352876287",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9fc339a7-d126-463e-be9d-93ae38dfd8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578b60bc-1468-429e-bfc9-77d2df754c35",
        "cursor": {
          "ref": "62f28996-91b1-42b2-bb9f-3991fe7e8e15",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8920eb0f-250a-4fa6-b60f-b0fecf0a59f8"
        },
        "item": {
          "id": "578b60bc-1468-429e-bfc9-77d2df754c35",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8783ac77-c1d1-4500-97d5-5519d6380851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0599e1c6-321b-48d2-8b53-e12909cb2407",
        "cursor": {
          "ref": "17e6531f-8cbc-4e91-bf91-caeac0da2e3f",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7bdd2fa3-4797-450c-a792-52251c19af44"
        },
        "item": {
          "id": "0599e1c6-321b-48d2-8b53-e12909cb2407",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a724e386-4f6f-40fc-b5cd-0e57df63ec82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f29c18d-f743-4a67-8eef-8d7f12e0adf8",
        "cursor": {
          "ref": "7eab98ca-d4b9-49cb-95b2-2c294c0c5b90",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9792d225-faef-40e3-a525-bc6f535015c1"
        },
        "item": {
          "id": "3f29c18d-f743-4a67-8eef-8d7f12e0adf8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "44bdcff6-153d-4970-b32c-5a5670ed598d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e4bb67-f4e0-410e-8cb9-651efec8bc3e",
        "cursor": {
          "ref": "398a5ebf-c7b5-4ad3-9f9b-b4a9517e26ac",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "01527ff0-39b0-4ed1-ac0a-7a33ff9ff145"
        },
        "item": {
          "id": "65e4bb67-f4e0-410e-8cb9-651efec8bc3e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3e91b77d-17b0-440e-9867-67aa460e1f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9459cbf-43a6-4101-b5ab-db39956af93c",
        "cursor": {
          "ref": "1294ec9b-031a-4cf7-b84c-11d7d6d45d9b",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1dab943c-2914-4bea-9065-a803ce280e77"
        },
        "item": {
          "id": "d9459cbf-43a6-4101-b5ab-db39956af93c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b9b52db1-7d9f-494e-beb2-d03c74eb82c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e80c4d-a071-4b35-9abc-cbd8c8fc6946",
        "cursor": {
          "ref": "a330fad6-8bb9-4601-a411-06edcf17b1cd",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "cf644496-bb3f-470a-a91c-ff0f8ecdbfea"
        },
        "item": {
          "id": "27e80c4d-a071-4b35-9abc-cbd8c8fc6946",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2fba0a50-c643-49e7-b1ba-e4ce5939127a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44fc5c2d-6d46-4bc1-86d7-aca15ca094f8",
        "cursor": {
          "ref": "eb75a0d1-90c5-4615-b882-51621948b28b",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e730cf79-197f-4597-8d07-328ca26073de"
        },
        "item": {
          "id": "44fc5c2d-6d46-4bc1-86d7-aca15ca094f8",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "36b1b77f-3cc2-42c4-995c-39562e28b904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b59f6ee4-1c70-4d6f-bf51-127410b18e93",
        "cursor": {
          "ref": "1a55f919-8511-49d7-9c97-bdf194619d67",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0248947b-8d47-4e6a-b0f7-f93d4e7d4cc9"
        },
        "item": {
          "id": "b59f6ee4-1c70-4d6f-bf51-127410b18e93",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "29c3a909-7fe4-43e5-8d26-27231f1655d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d956432-386c-40f6-b6f2-88b6a1b86661",
        "cursor": {
          "ref": "4e201614-7109-4a6d-aefa-4aa921b505c6",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "47e1f723-677a-430a-b127-a2781744f561"
        },
        "item": {
          "id": "0d956432-386c-40f6-b6f2-88b6a1b86661",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c95b14f0-5252-4583-8f84-f31d3e8d6c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a11679a-596f-4831-bb7e-f8a17d442efd",
        "cursor": {
          "ref": "13e87a7d-1f7f-4ec9-abf0-0e4104ecb953",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ecbca9ca-a9d4-43e0-9615-44be7e11610e"
        },
        "item": {
          "id": "7a11679a-596f-4831-bb7e-f8a17d442efd",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a840ca3d-93ef-42f5-9fd0-d5a8b71f88d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480ba751-75fb-4138-8cf1-b39030f8cc77",
        "cursor": {
          "ref": "4bb8583c-391e-47ec-95fb-318c8f2a56f0",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f0982116-6cf5-4b66-aacd-01902ce25467"
        },
        "item": {
          "id": "480ba751-75fb-4138-8cf1-b39030f8cc77",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "00f18687-db9d-4943-9bb1-3059815dfd1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acec8ee4-7a13-4751-838b-35814eac8a7d",
        "cursor": {
          "ref": "63cb24b9-db69-4795-bd32-2a0c029a8ad1",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "73f5c376-f7d0-43a1-8b7d-e0090c9b863e"
        },
        "item": {
          "id": "acec8ee4-7a13-4751-838b-35814eac8a7d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d936d359-a8fd-428c-bac6-d307ad1882b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e1cd89-26ef-4f4f-a61e-f5093f270019",
        "cursor": {
          "ref": "a2386805-a4ff-46f8-addf-096c1d42388b",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e0662487-645d-4d46-991c-f4379631b12e"
        },
        "item": {
          "id": "f8e1cd89-26ef-4f4f-a61e-f5093f270019",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "8d35165e-f27e-4e92-a803-de606feaf4a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f433cb8d-7b78-4ad3-8f82-06c751658883",
        "cursor": {
          "ref": "a49aae8a-1c2f-4294-a8cc-f3b5935291b3",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8f2e43b5-3ce8-4a38-af5d-ae72f21d8e7c"
        },
        "item": {
          "id": "f433cb8d-7b78-4ad3-8f82-06c751658883",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c94e471f-7541-453a-9eb2-f4ba7518d362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "349cc277-3aa9-4260-93a9-12b0b8b71a5d",
        "cursor": {
          "ref": "d5f4f9bb-e248-414b-9d25-d32078fef447",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e2f6aa51-90b5-470f-b173-6b8988c7883d"
        },
        "item": {
          "id": "349cc277-3aa9-4260-93a9-12b0b8b71a5d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "89a5889a-c752-4aaf-b716-ea72dc3a15ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef54894c-bee0-4797-bd56-8fa305f1f22b",
        "cursor": {
          "ref": "f6041cd6-f77a-4dd2-beb5-8ca9090d08a3",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "45d4686d-d242-4ae1-80f9-4589ae277c4e"
        },
        "item": {
          "id": "ef54894c-bee0-4797-bd56-8fa305f1f22b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "18d6b43f-e365-482b-9ec2-00f2c2d0a286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "257aef22-ca4e-4c54-8faa-fce2683006d1",
        "cursor": {
          "ref": "5c68491c-f9ad-42d7-a7d7-798870a21bd5",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2144ad52-a55d-485c-b9a0-1921729f9bfb"
        },
        "item": {
          "id": "257aef22-ca4e-4c54-8faa-fce2683006d1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d09276c1-ab63-4de7-94ae-2a27596f31ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b762c301-4397-43c9-a367-1b5c2e79f397",
        "cursor": {
          "ref": "7ff5564b-3809-4cc5-9e29-7c44bf9a1041",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "00b5cb66-dae1-4c36-a008-8d3c3dea0aff"
        },
        "item": {
          "id": "b762c301-4397-43c9-a367-1b5c2e79f397",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9542baf3-2bd1-43af-be1d-8e848a8f98ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc3e168-8ddf-4682-b4ce-d67c93e81bf1",
        "cursor": {
          "ref": "31a5b047-aabc-42c8-8405-1464d3b3359a",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7bc6484f-9e24-4525-9f85-34581433563c"
        },
        "item": {
          "id": "8cc3e168-8ddf-4682-b4ce-d67c93e81bf1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ee5e69f2-eada-4a85-8557-fff6b48fb50b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c0fa3f-620e-48f3-a1a3-f142a5a4d46c",
        "cursor": {
          "ref": "606c773d-9fcc-46f4-9bd4-d0dd83ca010e",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c87da278-cd0c-408b-a5e3-3582880bc2b6"
        },
        "item": {
          "id": "e9c0fa3f-620e-48f3-a1a3-f142a5a4d46c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "dc67985c-a3b8-4cc1-8b64-dc1d6229c86c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d326d2-d651-41d8-ad14-51ec86c3fd06",
        "cursor": {
          "ref": "652b6a43-2260-46ec-80e4-5b155dc008a9",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "66e6d147-4bfc-438d-8fc6-8e98e2f9501a"
        },
        "item": {
          "id": "06d326d2-d651-41d8-ad14-51ec86c3fd06",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "968450f4-341a-4711-8b84-972bfa464639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ba08d9-e603-4e6b-97d0-b727248cdf05",
        "cursor": {
          "ref": "8899e413-90e8-4a6e-b11a-1454f517918a",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6c63b3f1-418d-4f10-b573-118d6df4e082"
        },
        "item": {
          "id": "d8ba08d9-e603-4e6b-97d0-b727248cdf05",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0b07f87a-bc3a-4a94-b9ab-2f6c9d195732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8776949-f876-4880-8ce3-4baaf94e4c71",
        "cursor": {
          "ref": "d2f88547-b518-43ff-ac2c-68617e0be97d",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7db8b6f8-f995-407a-9069-685b91ca4f51"
        },
        "item": {
          "id": "f8776949-f876-4880-8ce3-4baaf94e4c71",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5b6ddec1-ad48-468d-af7a-242c628a6031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "248bb99d-fd01-4d5c-a7d2-77431f91b0c5",
        "cursor": {
          "ref": "4794ff11-19c3-4f8d-a07c-be1f84fd81a3",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "930a28b2-db64-46a0-89ae-449170fa8646"
        },
        "item": {
          "id": "248bb99d-fd01-4d5c-a7d2-77431f91b0c5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "22d91d82-52fd-4f0c-8fe6-0ac956029986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd970fb9-fd10-45b4-b830-7ee0448b4e3a",
        "cursor": {
          "ref": "b827e390-0dc5-4104-b96f-195ff4ebed2e",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ec9a39dd-8cf7-44b2-a009-5fdf8549a441"
        },
        "item": {
          "id": "dd970fb9-fd10-45b4-b830-7ee0448b4e3a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e5ae2396-4b6e-41fd-9b9f-7b4f7ea5d111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb09f3e-c492-4321-a18c-3ab5b5e7525f",
        "cursor": {
          "ref": "861019e3-db94-44b7-9aac-099341b03b5f",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "bf5b2743-7e44-4d95-a55f-106b1669f69d"
        },
        "item": {
          "id": "fcb09f3e-c492-4321-a18c-3ab5b5e7525f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8fd3cac6-b83f-4bcd-b634-587368bef3b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d5947f-509a-4d88-8f0d-ed6f48faff87",
        "cursor": {
          "ref": "1ee3c6cb-1e29-4bf0-823a-e50b7c964de9",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4253f2ee-0038-4731-b270-8e3f963d30e2"
        },
        "item": {
          "id": "76d5947f-509a-4d88-8f0d-ed6f48faff87",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3bd5189c-38f6-4ac3-ba9b-4a2a272bc43f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722a35c0-91bf-497b-92c5-f055ba9b22b6",
        "cursor": {
          "ref": "c057204b-b0e3-44f4-b28f-9d47b7f962d9",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "af37b7c7-1dff-40c1-babe-b95626a570a2"
        },
        "item": {
          "id": "722a35c0-91bf-497b-92c5-f055ba9b22b6",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "84bed97c-d9f8-4d06-8586-be0751c48c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b412ce52-512e-4bf6-818f-8351544c0754",
        "cursor": {
          "ref": "21b1b465-513a-475d-ad1c-9783051dc341",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b66b143d-fb97-4ca2-ade6-f6fe0632407d"
        },
        "item": {
          "id": "b412ce52-512e-4bf6-818f-8351544c0754",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b11c964b-c17b-4fec-8d29-6f399c491df0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73973af1-4095-4809-bd94-e3fb80d58387",
        "cursor": {
          "ref": "d7236aeb-227c-4395-bf73-888ebd02301e",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "eac877c3-1395-4378-92e4-4b7158e0f0d6"
        },
        "item": {
          "id": "73973af1-4095-4809-bd94-e3fb80d58387",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f39b3892-1e42-4fec-b365-f6c45678dc80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a0efad-51b1-45e0-96cc-dc1c2dac1d95",
        "cursor": {
          "ref": "06fd1cca-f9ff-44ab-93b9-22b9304de177",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8ed42b62-da78-4fc0-b27d-52490035a48d"
        },
        "item": {
          "id": "74a0efad-51b1-45e0-96cc-dc1c2dac1d95",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "11d3d367-aed3-4c62-ad72-ee42146e614f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5928f3e4-4ac3-491a-9f17-4661b64c8fe5",
        "cursor": {
          "ref": "fbe9def9-cb63-4397-b93b-3eba66a43f33",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "02a21c22-250a-446b-b9ce-bb5431141509"
        },
        "item": {
          "id": "5928f3e4-4ac3-491a-9f17-4661b64c8fe5",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "31a69a00-4524-49d7-96bc-8b2d9480273b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb872f4-36cb-4fc3-b295-5ef1b9178f48",
        "cursor": {
          "ref": "7237214d-45b4-408e-b6db-b373d80853a5",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e9056a9f-7023-4706-8036-cb7de69f0816"
        },
        "item": {
          "id": "acb872f4-36cb-4fc3-b295-5ef1b9178f48",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "bdae2af6-41bd-4746-84a2-647e55545d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e132a9-d6d6-47bc-b6fb-e54f877e5141",
        "cursor": {
          "ref": "ae909175-9f08-4c58-8441-c7a307f06d02",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a1d354a4-1e04-4d8d-8550-b9f0da037cc6"
        },
        "item": {
          "id": "66e132a9-d6d6-47bc-b6fb-e54f877e5141",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "26dff98f-5410-44d7-8eed-78a80ea38148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a502db8-c56a-4ab8-808e-9d81e9fd5ec6",
        "cursor": {
          "ref": "0acd98d6-d5c7-45c1-b7b3-c4719ad1adcc",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "16ca3ada-4066-478a-a6c3-db4f4eb09665"
        },
        "item": {
          "id": "5a502db8-c56a-4ab8-808e-9d81e9fd5ec6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d19511ed-ac54-4724-9203-06bea320e162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "135f3cd7-a9a5-478a-8a34-45f287531a24",
        "cursor": {
          "ref": "64a32648-d6a0-4093-9b23-4e53b5fb04a7",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8c44c615-4728-4442-9f0f-19cbeb99c800"
        },
        "item": {
          "id": "135f3cd7-a9a5-478a-8a34-45f287531a24",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "bf8ae2d0-0027-49ca-9adb-4f24edfa6ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9d17c5-14e3-40da-8c20-12674ac1df1f",
        "cursor": {
          "ref": "a56f0f0e-23c3-4185-9d28-17f7a2a41162",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a8975035-0afa-408f-8cda-234dd5714b47"
        },
        "item": {
          "id": "6d9d17c5-14e3-40da-8c20-12674ac1df1f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "cab42599-bb5b-4754-8d0d-35c1e08fb67f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d04d0764-81e7-4ea8-93c2-da1fdbc9c46e",
        "cursor": {
          "ref": "e8e1a5fe-cf6f-49f6-a19e-18b7bea1baeb",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "eadde7cd-7ca6-4c7b-bd29-3109ae2700a3"
        },
        "item": {
          "id": "d04d0764-81e7-4ea8-93c2-da1fdbc9c46e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f36f10da-a5c5-4da9-b043-ab5ba4bf1bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e9750cc-7676-4194-ac40-5ac997687de5",
        "cursor": {
          "ref": "9b11f601-575b-40a7-be53-ae5acb6fb1bc",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9b29f4eb-6336-4fc3-a3f7-c85f20eb447d"
        },
        "item": {
          "id": "1e9750cc-7676-4194-ac40-5ac997687de5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3cea50d9-3d5a-4bea-aa01-46afcacb1832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c81b85-9edc-402a-b5a7-a292bccdee81",
        "cursor": {
          "ref": "5ab26a5f-8ee1-4898-b080-b5daaacac9cd",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e4fa6dc0-9765-40d6-8c06-d6566138348e"
        },
        "item": {
          "id": "f5c81b85-9edc-402a-b5a7-a292bccdee81",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "24c588fc-5bc2-4a7e-b25d-f39beed4af10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b365f3-25e1-44fa-ba0b-80914159736c",
        "cursor": {
          "ref": "ad85f609-686e-49ba-abcb-96fab9818717",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3723f229-b628-4b46-9b0a-e2c859207121"
        },
        "item": {
          "id": "53b365f3-25e1-44fa-ba0b-80914159736c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f78678f5-591f-4f16-99ca-19d1361e85d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58635e8-48c1-4047-b54f-0a0b29ef932c",
        "cursor": {
          "ref": "50824203-22ee-4df3-9b7c-be376d09f66d",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ad57adf4-e9d4-43a7-88d1-01b0654d9383"
        },
        "item": {
          "id": "e58635e8-48c1-4047-b54f-0a0b29ef932c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c2f88b21-19ea-47ee-a501-dc819982bc63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706d65a4-c50d-476b-ba7c-cf48456aa130",
        "cursor": {
          "ref": "cf4cc003-6990-4e24-b3ab-6c804484187d",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a5c0e6b3-0286-41cf-b506-adf672ff4a9f"
        },
        "item": {
          "id": "706d65a4-c50d-476b-ba7c-cf48456aa130",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a9e5d0b3-daa5-40b6-a2c2-c2236f2d3a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9f1c2a-9a76-4fac-b021-b2b5f0cf57b4",
        "cursor": {
          "ref": "842f4a21-107e-4971-b528-df00068e671d",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ba1871fb-1b3d-4839-9354-f1e4fee03b6e"
        },
        "item": {
          "id": "eb9f1c2a-9a76-4fac-b021-b2b5f0cf57b4",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4d740c34-b6f1-4765-a6d1-cbe6866ddff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64435e6e-1cad-49f9-9cca-7a0665d4bea0",
        "cursor": {
          "ref": "afa22ba8-1a24-46d1-ba35-c558a7188ccc",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7e11185e-8851-471a-bfb0-5b974d3d0eaf"
        },
        "item": {
          "id": "64435e6e-1cad-49f9-9cca-7a0665d4bea0",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7c320597-948e-4954-b313-98eef3351661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace33f2a-ea40-43b4-a2fe-52b68cef521c",
        "cursor": {
          "ref": "5c1fc77b-d72d-457b-afc9-96ab16062de3",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "30c95665-dec7-4173-bfa8-3055c43103e4"
        },
        "item": {
          "id": "ace33f2a-ea40-43b4-a2fe-52b68cef521c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "35dd4ccb-b966-4739-a0af-a46d7c20762f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe6b981-550b-4bc5-9cf7-266b3ef9a884",
        "cursor": {
          "ref": "cf9f18e3-5b2d-4653-aa64-5bece2d47927",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a7296cf2-759d-420d-8b78-2c6cfefd17dd"
        },
        "item": {
          "id": "9fe6b981-550b-4bc5-9cf7-266b3ef9a884",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e1bece3c-8f75-4262-9670-94d77c8cdcb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee96b30-be81-41e8-b764-8d7439623ebb",
        "cursor": {
          "ref": "402e4fb4-0f2f-403f-80dc-69a529edcf0f",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1dc6bfb2-7dc1-4a8e-b62c-0fc1764943fc"
        },
        "item": {
          "id": "6ee96b30-be81-41e8-b764-8d7439623ebb",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "fdba8a99-4dd0-422b-aeef-ef71c4094682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cafe9ed-bf0c-48c9-9eb3-0a7160da3cd3",
        "cursor": {
          "ref": "986de3d0-23d5-4274-ad13-2fff0f7dd317",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "954ee300-84ae-40d8-bc92-9d0a2cd9a612"
        },
        "item": {
          "id": "5cafe9ed-bf0c-48c9-9eb3-0a7160da3cd3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8ce99be0-c241-4517-8aad-1e740500f238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce18da05-3469-46df-88d7-c64c223fb8a1",
        "cursor": {
          "ref": "2136b1b8-4cd4-430e-b2ef-f722c9d20244",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "df8c67cf-382f-4346-8208-e78b10021a84"
        },
        "item": {
          "id": "ce18da05-3469-46df-88d7-c64c223fb8a1",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4f5a2c3a-c9b8-46a2-aa87-f63e79b0b6b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e68dc3e-a484-4657-901d-3c5b46bd9a33",
        "cursor": {
          "ref": "4962b708-3fc6-4f59-943a-5f65f8e14341",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8e2df724-e681-4555-a2c7-59f52bda8683"
        },
        "item": {
          "id": "4e68dc3e-a484-4657-901d-3c5b46bd9a33",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9a784d01-f9e5-4e58-bb64-f6fb519922b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af196205-450f-4ee1-a0db-fe7e516d6e2e",
        "cursor": {
          "ref": "d930ea98-6582-4582-8e26-bff2a2c4bb1a",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d0c1f4da-f7dc-459a-9429-e35284aed189"
        },
        "item": {
          "id": "af196205-450f-4ee1-a0db-fe7e516d6e2e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "95bc8e19-a12b-4c9d-a275-6ecc9b984367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e8c58ee-d81c-4324-9846-7ede85523555",
        "cursor": {
          "ref": "d7ee67fe-fd8e-4454-94c0-a27b43ccddaf",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "38c2e962-e484-487b-b1a6-a57795b21337"
        },
        "item": {
          "id": "1e8c58ee-d81c-4324-9846-7ede85523555",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "30f98f5b-878c-40e3-a499-47f1b3c1d533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f80ef8-4a5d-47d8-aa52-56e70df02fe7",
        "cursor": {
          "ref": "a07f7fd4-58fa-47dd-9b2a-01af188152ae",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8607d288-a586-441b-8399-39c642952480"
        },
        "item": {
          "id": "28f80ef8-4a5d-47d8-aa52-56e70df02fe7",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "86c911f3-c7ab-462a-817c-c8c593719232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8220c8f3-4a64-4e78-8864-311c5a94e011",
        "cursor": {
          "ref": "363d7f28-6e16-4e0a-9bc3-664f0923e757",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "410ad9ad-6b3d-4c71-b2a6-89a41c12bd9c"
        },
        "item": {
          "id": "8220c8f3-4a64-4e78-8864-311c5a94e011",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c3212389-0cd0-49ed-aa2e-f0b014e9bac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "007040bc-991d-4753-8724-af41c39067e5",
        "cursor": {
          "ref": "69ba41bc-4d6c-47fc-b84a-5e602cc602ac",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e7d16287-443e-4b8a-a9a1-44fec33199f6"
        },
        "item": {
          "id": "007040bc-991d-4753-8724-af41c39067e5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "da37c3d8-dc9c-4c4b-97cb-f544b3381061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9dcc39b-3d6e-4e29-805a-87f42345c64e",
        "cursor": {
          "ref": "949a36e8-8797-4e18-9796-110ece1e6379",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "318752b0-169c-478b-ba26-6dcd5d1e35ce"
        },
        "item": {
          "id": "e9dcc39b-3d6e-4e29-805a-87f42345c64e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ce4101e7-a04a-4f47-8c3b-32db9788dd06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f472fd9-c249-4072-ac76-35ca86389059",
        "cursor": {
          "ref": "79d75217-4f16-4826-88ba-f249ba7a5ab2",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5e4f627c-9478-435d-98f6-a06fbc070b65"
        },
        "item": {
          "id": "6f472fd9-c249-4072-ac76-35ca86389059",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "bd3ec346-9d20-4f15-903b-9b85231ed0d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883ecad0-f91b-4e6d-93fd-e3e9a8c66778",
        "cursor": {
          "ref": "443bf129-ea85-439d-a07a-3b73e58ef838",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "82e282ae-91fe-4b3c-8a10-e43769a4095a"
        },
        "item": {
          "id": "883ecad0-f91b-4e6d-93fd-e3e9a8c66778",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0c3b8a7a-9d04-4764-a46f-08baeef6173d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "202c4193-088c-4dc8-8e97-41ec110bb1e6",
        "cursor": {
          "ref": "bee0e711-7a9b-48a2-b073-e50b1d3465b3",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1703e50e-8b30-48db-ba68-5828db65e473"
        },
        "item": {
          "id": "202c4193-088c-4dc8-8e97-41ec110bb1e6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "13bb3dd9-a479-467b-aeeb-eeb7cf38b0da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d54798-9483-45cd-9313-ade1f74b936e",
        "cursor": {
          "ref": "e4592bed-8639-4e44-9b81-a4bbe1da9b79",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3a1d3d13-fc4b-4f97-b437-1cb39920cd38"
        },
        "item": {
          "id": "85d54798-9483-45cd-9313-ade1f74b936e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f2173698-6c0a-4eeb-91c4-e6eee97aedb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d964e8e-1c20-4f3b-88f4-f2791a75cf2f",
        "cursor": {
          "ref": "137b83e3-75ed-4f91-bf17-f4ae562b5c64",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0df1ec58-ad4a-4881-9ddf-d716f166bc87"
        },
        "item": {
          "id": "1d964e8e-1c20-4f3b-88f4-f2791a75cf2f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8a771c7e-5509-4d8e-a98a-4586cd1707cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536c8a02-10ed-4918-bcff-6d8ebacf2d96",
        "cursor": {
          "ref": "810f8a98-77e6-4182-86c2-ce50b8c21fcf",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e4a79f38-f076-4884-8638-eed249f2570c"
        },
        "item": {
          "id": "536c8a02-10ed-4918-bcff-6d8ebacf2d96",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4a1ced1b-cc0b-4441-aafb-1df2543bfb7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b8c8d9-07eb-4e0f-b801-8da4c22b1041",
        "cursor": {
          "ref": "dba8fc47-988b-4f31-a18a-f88860ca24a3",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a23925db-8d50-465a-852e-f7f792356fff"
        },
        "item": {
          "id": "91b8c8d9-07eb-4e0f-b801-8da4c22b1041",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "14b3572b-b0b9-4bf5-83ea-8c64a1c48b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335152e6-7bf4-4958-a01d-805f54fbf734",
        "cursor": {
          "ref": "a19eede3-adf5-4030-a640-a690e8fc6c11",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "50fb8c60-8b78-4d78-bf00-be949221f91c"
        },
        "item": {
          "id": "335152e6-7bf4-4958-a01d-805f54fbf734",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e4dabca3-ec76-44f0-be3a-cd9faf2703f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1884de0-85a1-479c-939b-d3d6170148b6",
        "cursor": {
          "ref": "a5775663-d10c-4a3e-a160-a209564f6261",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f34e9bfd-bbd0-4ad1-bf80-c34c6988699c"
        },
        "item": {
          "id": "c1884de0-85a1-479c-939b-d3d6170148b6",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b2031d0d-e362-447f-9128-b220280c4d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2fb981-2424-4eae-bc3b-26f6c6451b50",
        "cursor": {
          "ref": "5c3151fc-72de-43e0-8a0a-d009adabdf50",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "17659e17-51e0-4ee1-b073-dcdfba7e6a02"
        },
        "item": {
          "id": "3e2fb981-2424-4eae-bc3b-26f6c6451b50",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0ad1c8ef-7e1c-496b-a91c-220ad79a982b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbca5e8a-c92a-441a-a4c5-9cb8e87ef383",
        "cursor": {
          "ref": "015d6f9d-32b3-4a9a-8e9e-0946f62bfa24",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "54945dd4-cda2-44dc-8ed4-b6dbb219c5d0"
        },
        "item": {
          "id": "fbca5e8a-c92a-441a-a4c5-9cb8e87ef383",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2caa3647-d8be-4cdc-9335-caed961381c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1030e15-425e-419e-bcd2-d9bd7b894b4a",
        "cursor": {
          "ref": "11675bb4-7e46-4079-8f29-7214f1592a7e",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1d6a25a8-06f2-4081-b528-dd560db5b0ef"
        },
        "item": {
          "id": "f1030e15-425e-419e-bcd2-d9bd7b894b4a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4c3c3697-c794-477a-8197-8eed3edcfdf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38281c70-8d6a-4c61-8bdf-54b7cbac70f8",
        "cursor": {
          "ref": "3b7578b7-c8db-4242-9d4e-35c7efb8e1e0",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fe79e76e-595a-4b51-be76-b738ad730d21"
        },
        "item": {
          "id": "38281c70-8d6a-4c61-8bdf-54b7cbac70f8",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ae6d2c30-c8ec-4597-85af-e260f5fe53fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8862cbff-8723-47ba-adc0-8b8628f6259d",
        "cursor": {
          "ref": "f01eed75-78b4-4895-bd01-df9bb88eb697",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e3db178e-c7cc-4675-9a04-e47cb6691b05"
        },
        "item": {
          "id": "8862cbff-8723-47ba-adc0-8b8628f6259d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "dc0145fc-8fea-4d53-89f0-a8221b13aa8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b677b0eb-cf7a-442d-b942-af2090fd494f",
        "cursor": {
          "ref": "c1f0f5c9-7efc-469f-8ae7-693a673bdfad",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "40b07eaa-4b86-4fc4-a4c4-e7268aba48f7"
        },
        "item": {
          "id": "b677b0eb-cf7a-442d-b942-af2090fd494f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "bdec8e3d-cbc0-491f-a2a2-6081b0ea8908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba2a833-c6c5-4f70-acdb-9b2d493ff22d",
        "cursor": {
          "ref": "656b7575-bec4-4213-8ba3-5185909e531b",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4cd35aa3-d660-42a7-a669-dee51a603400"
        },
        "item": {
          "id": "7ba2a833-c6c5-4f70-acdb-9b2d493ff22d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7d7145de-67a6-4f34-a6f1-d5858cf5d49f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92c402ae-13de-41d2-86c0-d084091567ff",
        "cursor": {
          "ref": "8a8e788e-be05-4b38-898b-4f0169eddea0",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4444e535-344e-49f2-aa93-f691be371fd8"
        },
        "item": {
          "id": "92c402ae-13de-41d2-86c0-d084091567ff",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b0abf086-b557-44f0-b671-ccf1185455cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ac1a13-1d18-4fb8-b2a1-22900c80e718",
        "cursor": {
          "ref": "28342f45-31e7-4733-b38f-5d1a0633b7a2",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "cca251b6-88b8-40f9-bc1c-c928b0770ae1"
        },
        "item": {
          "id": "e0ac1a13-1d18-4fb8-b2a1-22900c80e718",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "eedcb0d2-1437-4aa2-bcf7-bfe6bc549e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d37714b5-1434-48e7-a1ed-e01744493caa",
        "cursor": {
          "ref": "9c831de5-f79a-43a9-b2aa-82a119922c88",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "bfa15b2d-c0d8-4469-a044-f12860c7bc5f"
        },
        "item": {
          "id": "d37714b5-1434-48e7-a1ed-e01744493caa",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e12aa9eb-d695-481a-95e4-555037e7b7cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708b846e-1ea8-491f-b0d2-03bfec16ca59",
        "cursor": {
          "ref": "d34103b6-275c-4d4a-9aa8-5130f4057219",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "183fd0d1-a2c1-4297-96d7-061bb119e29c"
        },
        "item": {
          "id": "708b846e-1ea8-491f-b0d2-03bfec16ca59",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5daa2cc8-ec47-4040-aa72-806e49e24690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4358642a-c76a-4c07-a010-68a43ea4a5e2",
        "cursor": {
          "ref": "31c5c71f-70c3-42e0-9b26-067eb6e7b5ef",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6c24be65-a26d-4f9e-92e7-a46c3f8db459"
        },
        "item": {
          "id": "4358642a-c76a-4c07-a010-68a43ea4a5e2",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ac710377-813c-4bbb-bff8-43879af4edd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf633be-4510-4db6-98fa-487e5ec743ea",
        "cursor": {
          "ref": "88d99cf4-eff6-4a00-ab64-b4f3777d0edd",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3e433de9-ef53-4250-a630-1b58ce1443d0"
        },
        "item": {
          "id": "3bf633be-4510-4db6-98fa-487e5ec743ea",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e5b912de-7cf1-4e57-9945-964e5d6a25bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "35f8c225-5aab-4ee3-be90-d1f3d3f01cd3",
        "cursor": {
          "ref": "0f930ae3-ebb8-4b3e-a147-7375465e2ccf",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "eb579bb4-796b-4668-95fa-829c89fff85a"
        },
        "item": {
          "id": "35f8c225-5aab-4ee3-be90-d1f3d3f01cd3",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "abbee362-d6cf-47cf-8219-e443b5b5e45f",
          "status": "OK",
          "code": 200,
          "responseTime": 185,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad35c13a-a5e2-4981-9bfd-ee76b9d2aa7c",
        "cursor": {
          "ref": "e47764c8-ab06-40fa-a44a-7d4c2d14a931",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "39dc9731-eb34-42bd-b719-84fd74d38a16"
        },
        "item": {
          "id": "ad35c13a-a5e2-4981-9bfd-ee76b9d2aa7c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2a43d078-0130-454e-82d9-f8180e469a28",
          "status": "OK",
          "code": 200,
          "responseTime": 1664,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4256264a-a038-4eae-8519-6e2775e7743c",
        "cursor": {
          "ref": "7084f40b-4f6c-4237-847b-b1775dc32236",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "cce4fc3d-e272-4b61-a6f1-55e3fa220899"
        },
        "item": {
          "id": "4256264a-a038-4eae-8519-6e2775e7743c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "068bf515-10ef-40b6-9ed7-f78bc5a727ba",
          "status": "OK",
          "code": 200,
          "responseTime": 2364,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "81df445f-77c1-47a0-959c-283a3f3524ac",
        "cursor": {
          "ref": "2ff243a2-c72d-495e-8413-c3668f0201f7",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9284bd1f-a766-4a89-b658-76404d66f632"
        },
        "item": {
          "id": "81df445f-77c1-47a0-959c-283a3f3524ac",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6800008e-d9ad-4276-afb7-37bc9ddcff28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "81df445f-77c1-47a0-959c-283a3f3524ac",
        "cursor": {
          "ref": "2ff243a2-c72d-495e-8413-c3668f0201f7",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9284bd1f-a766-4a89-b658-76404d66f632"
        },
        "item": {
          "id": "81df445f-77c1-47a0-959c-283a3f3524ac",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6800008e-d9ad-4276-afb7-37bc9ddcff28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "d5dc5091-5bfd-49e2-8c39-941041797d58",
        "cursor": {
          "ref": "4aee99ff-c628-464f-bf82-ef62d8fa958a",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "78cbbffe-b72e-4cd0-9340-95877f3a5e75"
        },
        "item": {
          "id": "d5dc5091-5bfd-49e2-8c39-941041797d58",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "da9f48c7-91a6-41a8-bc1d-07f128c171eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "be92c52a-8784-49fa-8f64-69657283150d",
        "cursor": {
          "ref": "1bc7a07d-58aa-4e70-959e-0fefa1fab6a6",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f389365b-4258-415d-b67a-1b2b3609caf9"
        },
        "item": {
          "id": "be92c52a-8784-49fa-8f64-69657283150d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "aa0f1432-ca3a-45f5-8576-40437e2693ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}