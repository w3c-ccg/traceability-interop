{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9361e60e-78e7-46f3-a28a-dac248ed48a0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2c625d37-5ddf-42bc-9639-54e47eaf815d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "09122081-2db8-48d3-92bc-182cfdb4fa4b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "35f8f4a9-9f1f-48ec-9a4d-b5d57d8d6122"
                }
              }
            ]
          },
          {
            "id": "961a51f6-1ab5-4445-bb05-ea2926318be8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5ee479e0-15fc-4932-b153-7333752b9854",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "71e0a56a-aa9d-4ce9-8862-d38b6143b49e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "525fd3e9-8645-45b7-81d0-5447310c9f95",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "74c9a6c7-0e40-4505-8009-4b513dc98f59",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3f9a3cd9-925e-473e-b4da-af3fe401bf48",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf406255-37ee-440c-81e5-fc6f2be3866f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3bc18a02-cdfb-473b-a989-bb8ec0a174d0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c8da729b-4107-45cc-b31e-178e80311e8a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7ee67475-1297-4cb8-9eb7-573894e6f060"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b52126c2-5b51-4f68-95e4-cdd9b3263050",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9a4f7b40-a2e8-4a4f-8ebb-218f4d87f912"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da1da1df-fa0c-41a0-950e-b6ffe15da6ed",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b60e4a94-b892-4523-883d-360325b0eb0f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce91de02-1045-46a9-8f32-9391e3c4a025",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "197c1e89-95fc-4488-9030-780bf74c0263"
            }
          }
        ]
      },
      {
        "id": "acfb3f23-6353-46e4-a718-e91acbafadad",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0455762b-70b1-4130-be66-a8d86ca93971",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a9340cc-e295-4cb2-8755-94f30214246c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5e80e31d-0b19-4fea-bf62-35640f4c0923",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d735febb-a059-4b40-bf6b-e99805f34aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f30baf54-0cb4-49a3-8a58-782cd6a60a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57dac034-ce9c-45f5-b734-429b8ff87e6a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae69d4b-7a22-4c1b-b5ac-f805ec92598d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3169f8ae-d38c-4d89-bccb-994439514a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede7cce6-67e9-4f31-994c-137e1591743e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8289304-8238-40d3-b3b1-b68a1524809b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc3ec2ea-9f93-48a1-9f22-f8fdd033de8c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "591a5537-3e6a-42a3-bcb8-db7d1d1263a2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "417a93a2-1d57-41d5-9161-eb47dd7c6bcf",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e48b4cf-cb55-46a1-99c9-26092102d2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba682326-b708-4a1d-8bb8-f6975f4cda2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e97f3f5-70ae-4614-baf2-cbf70a499c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6330e1b3-9111-44a5-aabb-d3823b2e0559"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7a181cb9-279c-4e13-b1b1-2b4a0516ca0d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f6bb03e6-4e41-4291-94b1-8d6393256f30",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3aadaf15-4a35-4790-bb8d-5bb2c8ab9cba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3213842f-ac1d-4595-a58d-7993b4d14358"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "78dba504-f008-4210-8ef2-220038372d94",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "15cc47db-fbb3-48a9-b693-d0af92f58c47"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c27f2ec-7755-4001-8e6b-ee0fea2a8a49",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e4d8eefc-8cd4-44c2-806d-81110acb2d8b"
            }
          }
        ]
      },
      {
        "id": "891e0abb-d21e-4783-812a-a33be4f98d1e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "84225f65-47e0-4b76-b3f0-db89294df700",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fcd28a3f-d868-40df-8b6b-7721d85dd4e1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f0f5efb9-9c65-4789-a842-db6a05779579",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57eb1e46-fd02-4263-9695-238acc3cf744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c346071-feca-468b-a977-77e0da1139c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350f0463-47a8-4112-b484-dc3dcca6bedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a377ef3b-ab5f-4fab-b492-eadbc10fd01e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5344aaaa-392d-4c36-9e11-8ee940433e06",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8154e9-ba6f-446e-86a2-a59036c1d63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d8a783-a54b-4b55-8e20-3f89f7e14e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c023c16d-e88f-4280-8d43-1ecc93f16e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "752bfef8-0fbc-4517-bcd1-4a5ea50792f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99bae874-0ce9-4540-99fa-5606e45e9137",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03ca6b5-6f44-4d41-853d-d1f33b343e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3d14fd-8c69-45da-80ad-e084cc8c3665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d100a5e-9d4b-41c6-89fb-40e82e6a002d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b30f0ecd-a1aa-46fc-b24c-dad1c2bfb9fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614abb83-8bd3-43de-a239-5df5a3bfc1f7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad45573-b532-44ed-b7c2-3809963c5058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ff4d239-bf2e-4f8a-803b-e3d1d6436db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ac6049-2ed9-4265-90e4-2e9990a0f223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57c91b6d-58b5-4ebc-b272-5faeac34e7b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8598e6d1-2336-4cf7-a31c-47ca031f084e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47198157-e0ff-4dab-8840-052dfe12383c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb6f972-401c-4acd-be93-199c601f258b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb41587-2087-40eb-8828-a743af830a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "582f057f-6d0e-4c44-9dae-cbdc03741d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c3f827-014d-4804-ae16-a47bcd40a94d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b464f5b-6278-46e6-b132-ce22fdb8755d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc01313e-0d3e-4276-9520-d331305c020f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7f0b4f-f0dc-440d-bb2d-63036f89893c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b59d6cc-d7b4-4aa5-ab05-6fd58284d07b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b690f8e-dd26-4dc0-8795-a2eed6efabee",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da235500-cb5f-41bc-ba87-d5f3d3ff38d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6f730b-75c9-4ad5-9ceb-6902dbb1bb49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f2a8a6-6eb7-49af-aea0-6465d45e4cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14d1e773-8da3-4e12-a576-cd4874b14b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26859d07-e654-43bc-bc9c-44ae12113ce4",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "024729f7-3d7f-49a0-bbc2-15e5034d4f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b86ada-3721-4164-8b6c-2e677d2b165e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2f8aae-bc93-4dca-9e29-7c8525e57606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0e15320-e533-4adf-868c-27c21fee32d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f790c5ca-6d78-4d7e-9163-99c4dfea41b9",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a9a1ad-b723-4e3e-b3c3-f4dd046b26fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16e4e2f5-620f-4c48-ba57-b9ff3d29d03a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1dbdf4b-5de5-4a23-80cc-2f578d9a7f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcbfcea9-9b61-408c-a1f2-79b4b9181d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98abe363-53d0-4d30-b2dd-8e85cdb6c6a6",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fdb7d0-b61b-4873-a140-745430aab7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d12246b-dec2-4ed5-ad41-8e8fa49cae9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08416ca-8c35-4446-81fc-5a94b942dde8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ac70bce-7a70-43ce-9b62-e6491087c563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13eb73f-e0a5-43c5-b939-8447f7e7f074",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9246a9dd-36a6-4938-b565-2e58ea6894fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b0f3d43-65d4-442b-8006-c9c0a3d0b000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "904943f0-cb8c-422d-8703-01ab168c8b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe817654-0aa8-4f17-87c4-d1a00b447f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd35b09-f5c9-4ab1-a076-6a1726f7b3d4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d99979-d763-4b62-819d-394deac7c9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d899147-164f-419b-814f-381aa43f7632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ac3c7f-1690-4f51-9969-3216171d54c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2176a90-5377-4f3e-a241-4e351e054f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f4a791-42e0-40e1-94ef-eda314eba145",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b22a13aa-5cb7-46bd-a841-d821f38d2c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "840bd31c-b3db-40e6-8dec-d87e412ab028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329444a9-70e1-4821-a701-bb2b1c14d643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c06f3a20-5fd2-4fb5-8793-8b1aeb1818d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef9d48a-de00-464e-b748-3e975b76be06",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8054c88c-8d48-42c2-a011-630f877aa723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56382ef9-6def-44c6-b636-f372988238e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5f0137-3b78-4464-b37f-168540258b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91653f5b-8613-426d-a590-0ca2a8b42937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e3d374-afb4-47c3-be8c-81d16c803770",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "346da768-258c-4c54-8704-744eb032dbf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80c0aa02-dd3f-45d7-aba4-f0c6527a73c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260632cb-96e8-4ced-bf7f-b76aaeca768a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8cfe723-0bc8-4290-a0fc-71ed5ee4d2e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e6d5af5-b60a-474a-afdc-45eeaaaec4cb",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92bcd989-6385-4a70-88ed-8aa552ac7c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c016d502-0dee-4b3c-a5ae-dc5a1cf33a0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4abf933f-13f5-46de-afda-52521a0ec708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75725e86-31d4-40cb-9dde-49ebba6f5b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8848af99-4b23-43c2-b6ea-1f5699ef40b6",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214ff91a-580c-44cc-aca6-9ecf1bc181a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79fa599b-ae0e-4746-b316-c935020a65d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83b6d3a-6f9d-4de4-aa33-73266b0ad7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8529ad8-e426-45ff-966e-6407e43c2e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5e7adc-1edf-4a8b-84b3-132796a97af1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45420a78-7203-45be-a2a3-be1f536fc582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e4e5201-a0bb-4103-8d79-bda97e4c9c78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4280500-7f06-4d92-b0c3-aff5c652b047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f779ed72-d0e5-4455-8894-143ca37eb096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c97dc57e-6aa4-4022-8925-423d55de40e5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1795104c-bd5f-4097-836f-6081a67ca654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92508364-b2e1-4bb0-93ab-810bbc017052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c1a964-f175-44cb-acb3-03f226d00e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b7fa9a9-9b42-4df9-a718-06598778d1b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1351e939-237f-4b53-b842-fc20407d687a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49813512-8ce7-4e3c-a75c-2b1ed1fb7ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e92d9e-7f77-46a4-8228-3d7d4edef7da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "febb56b9-4515-4e0d-aefe-01c48a87b455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b152bc9b-4fa9-4c60-ba0f-c6d921004f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2746a045-b054-439c-a6be-85c296902a81",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08dc2e0f-510d-437e-8056-11bd801fa0d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0a9ea95-b919-4be7-93ac-ce461887f14f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540637da-4eb1-429d-853f-b972882dee9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "750ed779-d1b9-4904-a4a0-58b2d64d5821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29fb53f4-07ab-4542-96fb-91c7ff033fd1",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f59004d-b136-42dd-8c53-dcf83d52d6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64063ab5-1c1c-48ad-ae32-14618f8583df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea692e1f-c74c-4d00-a876-dafcf687b02d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fae5378-3801-4ee8-875e-48848ac26676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb3f160-c888-4742-87a3-f8471b51ec96",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df248660-6452-4865-b6ac-2b08aedd5f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72097f37-89f5-44d8-9bca-546161806aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51df3bd-5970-498c-83c7-22083c3471aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc7d627-40de-4a06-8414-c099f1c3848f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "742afa40-7857-4133-af83-bd57e6dcdaad",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f882a30-9f27-4e04-a54a-bb57d8735482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b6b36a6-f4b7-4f7c-ac23-443b40faace3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e14e2ea-20c2-478b-a9de-dc4583d1dd00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0666345d-7e62-4a74-acde-e8fe91d4d11b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2969ceb9-72ec-4482-a8a0-fb156ab7f54f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c613b4-8dfc-4e0d-9192-70b34baf2b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aea15e8-ac2f-4b7d-a0a5-3c111bbc39b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e963aac3-6241-4978-9bf2-cf8eb4cf2c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "975a1377-a463-47e9-87b4-1ae5f44951af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4e4bd4-a58f-4431-8f7e-d24915964ca2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf54d8bd-31c3-4962-865f-26d54c60d8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a9610c7-c765-45c2-b143-28f06d3d4dff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7b6a32-66c2-4ef4-b8d2-14c63fd043f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b691b65f-ee68-43cf-978c-4f1a564cf71e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455066a5-d61a-455e-8a04-589484ff076a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "477de192-f133-45fc-8b26-c2cb24896f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5b2f8f7-38ca-4c84-a968-ec35d2f93825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebb7d24-d299-489d-b315-5303261ff28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "407c77c2-8f4e-4cc6-9203-de6d27f70c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a120dd-2cf1-42f8-b692-fa5b24c3c94f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a02335-c5fe-49dc-ba3b-0c8d18c59c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89fcad2d-4444-4476-88af-d27e620e7e3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9363ca-dbee-4c7f-8782-3f0cb532234a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "be56a7e7-d7f2-457a-92cd-d89113559614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b71a273-8801-4247-a267-b7a56eb1f02e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b68680-412c-4f8e-8f08-ba3691e0f415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d38e7c1-dc74-4088-b124-c12f5e9bac84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ea90ba0-2245-4afd-94ac-6cf317e3a8c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "20d2c3eb-ef78-456f-b061-5c95fb53cff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99fc5310-eda7-4fcb-a110-d5b72b8d06e6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4401b87b-3b75-4071-a94d-7443d7ae6e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f125e9d-3968-4a62-bb71-a21a114c399e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78646713-2c1b-48dd-b6ec-358314e50602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "832947d6-175c-4a29-8b2b-d355ea8201f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef91981-ae6d-44f8-ad98-9516e745b3e9",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f3246f-a106-4995-9bf0-25a7c43ded2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff6c0b98-c209-45bc-b788-a69b174bca53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf4495b-ef47-40ac-9a7b-63ffcc78fd29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a67adc5c-c063-4380-be6a-5178b7b64f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8019bc1-fdb0-4c82-9ee0-b5430344d21d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79094314-c4c1-4e39-a412-610f54c513f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f777a7b-1820-40cd-816c-5d2a8982e202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690a5403-016b-402c-8100-daff56179a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f695e4b3-8044-41d0-8c77-323c2501250c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b119b1-7162-473b-8263-a03447b060ef",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5b172b-a963-4e90-b0ce-d2a475287739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfcecd01-e66e-46c2-bd2f-e14eb778d862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bfca53-6a9b-4f32-aa87-9d9d9ecca1cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5afdfc46-458b-44df-a804-00605fc72005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10945b96-e80b-4429-95dd-94cf640e2636",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0dd1c1e-417a-4cdd-b3bd-d4cf5e53e86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31a4cd7e-e028-4493-b5d3-a788543cfffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95744a1f-568b-4186-b588-566412e15d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8a05115-4f96-4a17-9e12-1d72987f1948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c197e6b2-8ba5-4459-b27b-aee1ca709494",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39156bf-707e-4d50-bb1f-5869cf81e9d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2dd25bd-8caf-432f-8857-9874805b6f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fefe4f3a-5c0b-462e-910e-dfa10575801a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "41c256e2-5b40-48d3-96a9-253f1301d8d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "469051ec-d6d1-403e-8c78-916b13fca37b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f71ccd7-7c94-4a34-b46c-020ab55246d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c9d4397d-af68-4fe5-aeab-9b1d344147cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e177f56-7250-4aca-a61f-141f18477039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b9b8711-9977-4e77-a888-16f1cf4ab165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58524066-99c7-49ab-9714-a351c50bbe3e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8b9c83-14b0-432a-bbb3-ced0bec93858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c73a160-28f0-4842-8b6d-934562e2c326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19df378d-48b1-47c9-bf52-fc6e915d00d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4260d83-1984-4004-8b54-31ea9f303cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3ee327-865c-44b5-b1fb-b18a21e0c5fb",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32cf95d3-3955-46c5-9fe6-ff6bf22478eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b852346e-280a-42fa-b22a-8719f770f65b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1880fac7-1f74-497b-93ba-dfaacd4b3458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8079a2c2-bea9-4642-b362-ad2d8e02b769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11508c62-51cf-40a5-b26a-77db2e3cf233",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9111cf-db37-404a-ace5-64f34f678c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63e90f8a-b9a2-4309-a85a-18c5355e709d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9494b149-25c5-4a0b-8169-3f1162ef8b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c925f92-8a98-4d0a-bef5-18656e27f3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c6012f-5b10-4bf4-b7a0-03bf324ea56e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d19356-c58a-49b0-a335-eef26181c99e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b910eb70-23a9-4af7-9cda-33854be84382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d7d297-8371-4b80-9e5e-147ffbf6d4d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "80ef3a9d-3103-463c-a5a6-079f579ee61d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b73e1b75-be51-40ca-b1d3-021dbbafaa5f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d460e38-19b5-4992-af89-1151971a306e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e2cbeb1-ca2e-46b7-90ea-2eadbba6a557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9066e941-f847-4bbb-8cd6-9aff3e5cbf0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7555c4d-4867-4758-aa07-606170c5e5ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725452ba-6418-4d11-9564-3101beb85031",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd6ae4a9-5de1-4d40-afca-b6f3cb777e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e407f20-abef-4744-8d18-8b4164a4f22e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a401dc7d-437e-4e25-821f-7cd6d9ab3f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8a4b4adc-9f21-44ea-b6c3-48491ef38bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec170d0-788c-4bfa-9dd4-52ee40c80249",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1290699c-23df-45f4-980a-52cde96206ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb10092-44d6-49b5-a11f-911a85c69782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810c6290-12ea-4112-b616-8a9a4669dc68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "72e02c68-dd60-49f9-a5ee-1602aac46a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fffa6a2-f122-4a47-b681-b8b4945b1819",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde1fc51-713e-46e3-8ea2-8750e69233a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d7ee956-c65e-4084-b532-b6997281c347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c47899c-20a4-40b8-9f04-b3f9ce455370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ed55ddc-d0e9-4c57-be32-9fe87bb61d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264d854d-07e8-467f-a442-387761ec4f49",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2f67ab-aa25-4f40-a4b4-43ed2d420e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b40241-0022-4f41-94a5-52c0843dfcda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d92a6e8-a745-4c64-94a4-3651382c4392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "64f2d003-ee0a-48e6-a7f0-b6432ce2f605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feed5167-4b34-4173-b83b-2965ceff4e4f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f81191-6e1d-42f4-9c4e-ed7e1ce575d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f2ea1ad-cd0b-44fb-ba16-8b576f00a2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a171bf6-870c-46df-a6bd-80ad06e48990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c845e01b-bbfc-49d5-998d-1612832f130d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5dda3fc-b2d9-46bf-a3c2-92c068cac2ee",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca1758d-53e4-4a8e-914e-afe9f681579f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74fbcc62-56ab-4c2e-827e-41085653e0ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9e9e6e-4933-49a9-bf28-7a9abb058872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1a0508e-22c9-4f78-a797-878679c4d310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1563bf-cffc-4ffa-b74c-7c7c2762a5f5",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f925e337-d1f9-405b-af5a-e645f1723c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "158f93a7-a333-4fb9-8200-7d074fe5357d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8659c82-d5b5-46bd-ad95-cd7003a5145d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "133c0632-233c-4eec-9f33-54e75dbca8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722f24da-c34a-4987-85d2-da19e724a690",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29728ebd-a838-4bc7-a340-b1b6564d342b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5289977-c44b-47fb-a781-1a952414c450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37d7281-3573-4273-be1e-e90250551666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb3020dd-f8e8-4fc8-9bc7-8152a7a0e186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608e23b3-dfc2-4aa4-9ff5-ac8c8114cd06",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab9d2be-dd35-42a3-8828-6e9896cbe5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7a3673b-16e2-4893-ba86-7ec0a84459ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e8011d-c546-4735-8a69-4147ba4fdcdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e26a8602-e494-4155-907b-51d7238fef46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73af536-f864-498a-86f1-29a77c8e2fa9",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ee712d-afba-4fc4-95de-0467300e0329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9de12fb-6f80-47e9-a643-384024b70c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac72387-c44c-4344-8bb7-78e4bd7825d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1cd4bf1-8eea-4e03-b88a-dfd98de69e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6236e8b7-1372-49f6-a911-ed608722c83d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad893fe-c1b3-4de2-bd18-aadec2d13aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bdf60a0-21af-41f8-86dd-4a4f87217b88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81618846-c959-4159-93bd-ce21d4b9fa2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "39f49fbe-0a87-4cd6-9004-870ce8434800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd3df11-4338-491b-a971-f9ac7476a7b8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84193376-3a84-450a-ae3c-60e76060215b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c816271-5e52-4390-a5e5-697de37bff15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e27f0a4-a2af-4901-9c47-85bca01b90e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca40be93-c4e1-4418-8cfa-22d39d747668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44836f9c-bfe0-4fef-9ac9-5e5283ea2c50",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955acb9e-cf19-460c-87ee-8611ea6b1446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c48b87d-ca21-412f-9f95-727b8e3f36a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48bf5ed6-b943-4d29-98c7-a02d70cec737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "afa0dfb7-5955-4dc9-85f1-b36c3a5f3c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ffadd8-7ef0-4628-8517-076b903f0a19",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03236879-3778-4df6-b39e-decb46b1e446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b0c126-5ba2-4a86-90fe-112f57752696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b228b0a6-8c1c-4fbf-98ea-91a21633970c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf8852a0-14d9-4bd4-8712-51babbbf203d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3f7afa-58c2-46d7-a49c-9034cffb4a59",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "decc9d4d-1b65-4d50-a993-87cb763f71e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09e173b2-fd3a-4c5a-b401-ef480367909d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c307f33b-8ef2-492a-ba2a-82243e062b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "434d3a19-fdb4-414e-8e6c-dd9a3556c2e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d56c315d-30fa-4bff-8b44-96a300a8af3e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb047c4-b639-41ab-94a6-4fde4e76c119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fca5710-cde0-45d7-a71a-70cebb7be6af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd46df8-67a5-4acc-9bea-5531d5b37ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "42e30465-204e-48db-a06e-98c9ff23e6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4720bf-43fb-44a3-9c5c-4678fee6fdba",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6da666-ed3d-41e0-a6f4-f6109c7b7909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39569ea6-5aae-447d-9e3a-f81b1e52d3d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0e1182-df0f-474b-9012-70901efbe715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb72280-e4ea-42bb-b8cf-e3183ad81d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f510daff-beef-435a-b389-690520cc839d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "055dd34d-699e-42da-bc3b-d6e27e79504c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2442b5c1-680d-43a9-8b4c-a9fed3d0aeea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f51d5b-2788-4d12-bb0b-d3cdc69f51fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d79437d8-4b0d-4ae1-bcb4-f825b1272fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb143f57-7fdf-4d94-a4ee-8739ac7aae08",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7f6e36-5a98-48af-840f-8534f29522cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faf04ba7-374a-4519-9413-dbbfcf750054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f8fdc1-1be8-4d80-9c7b-8b9fd6892dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf3c6ec1-4652-431b-95ef-04ce12379f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb881d50-e11d-4666-aa0f-31eafe392d75",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd8de45-0f1f-4738-bd30-11a2795c62e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684c4e07-2903-4295-a4d1-04dec974b518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d850764-6f64-439c-bbe6-12b871513495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0dec0741-78a8-46f3-b6b4-2611f5d08f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e6dea8-b96a-49cf-bd46-9604e0bb7096",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "591c386e-55a3-447f-baf7-d11f5161c654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1320ff41-febd-43ab-8731-e9909368565e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dcea822-f28d-4b3b-9f28-b7422a0107ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c393876-b822-44b7-8c9b-931903e0dfb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d787580-c5b4-4842-9252-886ebb1da5d1",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74337c5-4aa3-4ca3-a0e1-758d91ca20a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a284e88f-0bc2-4fed-b1fa-6453c93c4f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a141184-52f7-4415-ad4d-7e8645cabb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ff53a2e-41be-4027-b515-3a08c84c6cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2dfcb8-5391-4587-bb39-ba08f6e66e5d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33bd38d1-787e-4b5a-a4f2-7e27c6a8e7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726a6523-9131-4f5b-980e-bb028d45a9c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb74d1f1-d69b-45ee-b18d-d18a0f0f7fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a538b9e5-e846-406e-90df-775ac1afd723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00077e8c-0239-4c58-a082-2ff3ab2146b2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3e11e8-2c21-4c68-9222-c950f1c52d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f24221a3-69a2-4edd-a9fb-41d15d178a15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e641725-b4ea-4809-99cc-1bf78ba19222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f62c286c-8b89-47a7-b813-fcc81fa356f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b854844a-8f68-411c-a9a9-d3d45c31d3ee",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f8a0f6-d7f7-446a-9e44-8f47bdbeb484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d910a463-aafa-4907-a0d5-012410e18df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42cc57a-ff58-486b-a1a3-643315a8ef52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c884da9-bcd7-4653-87db-a8b724409772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16be18c6-682e-4d5f-98bb-569874f5a9bc",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e054fc-b1cf-444d-85c1-2cb50af65f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f01cc8-42a9-4636-b11c-5ee25bc6cc9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772f1c03-4ad2-4164-87e8-3327e077cc73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "867690d3-494a-4e9d-9f19-eef86f2f432e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ddf4a38-68c5-4a59-9b6b-194924031234",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be264fcc-f8aa-4c63-a4a4-84b0d07f415c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b89cd1b9-3559-4656-802b-aac5e8316234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5991c594-2a15-4038-8457-a198c341c8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad520531-a866-46e3-9270-10d2909091d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f846b4c-7690-415c-9ca4-c7d7b47092ed",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba503f13-caff-4891-81f4-4a9e361a20fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd20349e-e037-4500-8df7-5654abe7a0a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced114e9-aa97-4013-ac1a-9f9edb737a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1ccb911-a41d-4736-8fe4-36c758bbdf8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98db1e30-01c8-409c-a53e-50786049df50",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec346ea-4d96-4001-a4a3-6f9e17ec0c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d98eed57-0e01-4b80-a34a-4cca1b59e5cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ebada8-2c35-4e8c-a356-60a03ca47eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9f68144-d68f-4838-a580-32ee31899140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7eeaf3a-afcb-4e6f-a1fe-8bb6791968b9",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "490c8c26-7842-4318-8fae-7a8f18ec4618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e335905-37fa-4b29-b4fc-73f6f007cece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ea7bfc-34ee-49ba-8f6d-80ab6dd39888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b695533-79e9-4712-925d-e9c21db72448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d6fcae-311e-479e-aef2-c9a169f043b6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55a6954-673f-4306-8576-d10135dd24d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fbacb04-1b54-4224-8575-dbcaa81ec18d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75250c92-23a3-4e22-b34e-276b648f3397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eac042b2-ae9c-4e5f-badb-8f9e67774465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0622c1f-7831-4b35-b039-23879b38c01c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5a15f6-384e-468e-bad0-93210bba09ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a96b43b-2688-4efa-9c09-7bbbe2a8e302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c116d3-ab57-4c21-9a16-7bd499b7a1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "993a7d80-d69b-4064-831f-d17f808a13db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb104ff-fce1-440d-a4dd-b3c38a4de21b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5093e789-abf9-4289-a921-cd0cc0daa7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a64a52-9654-4a8e-b377-ee6e2d50b7dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d36aac-6423-4052-a155-0e6c25fd36a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd5b6906-880a-4994-86a6-6a8e2dcb40bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4667c6-2381-47f4-afc5-bd766b0af7b6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "748d82fd-04ad-44ee-930f-bb721ec4d560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8ae0d8f-acb8-4e0a-9b6f-3def4af48379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2af791-3f12-48e4-aa33-65a661823ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfdb808c-a496-4e35-b9ac-12a5d95365d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82fc1847-d2f3-4c78-be79-a1b9814ce045",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8b2fcb-13db-4d72-89a8-2d63e12cda73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c4f2c46-6d42-4721-b0ec-62886eb1ce91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51c2d92-c2e5-4044-9f7b-ebc614da84bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9595019-32f8-4e68-93ff-6976c69478c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f5f535-968e-4957-9410-520dabf6c6b0",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "093ded2e-6533-4c95-987b-bb8cb161b462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6bd24e0-9ec6-46fd-b6b6-5d7d6e14a65a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d54cc9-ba46-4859-93ca-fc7c560c4a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "11466881-6060-4e14-8402-2ef568ea0c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac2ed57-8f57-4914-af61-cad20bf970fc",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0811b634-f15f-4736-9454-384c9962164b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5e874d1-2217-4dfe-99b0-cf028715b55e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62761732-89f2-42d5-82a0-1d14e6bae469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e451abfd-4032-46a2-942d-fc94578dd4de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f8e20c-09a3-491a-9f5a-475c276fc3a1",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c610f58-14dc-49d3-94ea-675c0987bbf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8fde1c-7088-4949-9c38-0c85247f719f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f683d6-7714-4635-8035-5b4c02b351d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "49948083-b704-43a5-a319-d212cbd9eb80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ae29fb-712b-469e-a8bb-03e20ffa0e01",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebaeb37f-5f49-4b3f-af78-43776da269ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "585e320b-eb16-4ebe-a2c5-fc98da7d0ea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac4ec44-2caf-48ca-8a82-069e859a62ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8da588a4-92c4-4a8e-badd-7144d01e6eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd16d1f-00f0-4a81-afe5-7891231b54f6",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f033f3-dc55-49c0-98e5-7e35472fe7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5355b06-63e2-4c9b-b263-0fec3dd9c8f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "775d0146-eaa3-454f-a529-af1a4f41e457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c3eddeb-cf18-4023-a55e-76b28c0c920c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9caa4562-6dc7-41b4-b19e-4618b16284f2",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b03c6e-b088-48d7-a9c7-a1894ad6659a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eefc942-5469-4bf2-96ec-26f3f8f347d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f52041-d141-4bd9-89c1-5e30bf9d6097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ea24fa-6472-472c-8066-462249b0c25d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1dd7bd2-21d0-4935-b066-638faea90c5c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f89f198-1717-469a-91b1-002f60876b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7151cef7-301a-4a34-9a6c-0f0e44cdce4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245d21eb-9729-498e-873f-74b5064c0796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c617ecd-9d31-450d-beb7-d905613b28c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a05d42-e9a0-4f78-b4a3-64f3767a6fa4",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "119246cb-8fba-42ca-a0f0-58e9bee24193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a6a242-daaf-4ee5-96d3-b9f2194208e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c5aa68-4586-4f3f-8579-685250f186ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f280b6bf-9974-4ca7-966d-1c430796eb08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993cdb5c-ff1f-4ed4-8771-301528ae0c80",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "376ab13f-a7b3-4071-942c-6e448ff085fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55101c21-c787-48ca-8241-e8a841cdf659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8cd2b1d-23e0-4a61-a6ce-e25858889e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8feb08bc-f67e-47fc-a12d-6b160869c823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bae644a-eb39-4b0a-9098-fa16a339d736",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b679c58-b9c5-48d8-8a5e-0417521ba6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93bf7de0-c19b-47ce-a28f-fd61b1f16ab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853b5bd3-815e-4355-80d5-10ce882417d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "77379b0a-8f4c-4bc9-ae7b-b1695eb0f29a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ebf1563-3420-458d-9c5c-fc7458bf680c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91870878-2c8c-4e78-bced-ced6b0cfbb5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c27ac7f6-14da-4517-809c-758edb3e90aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8380005-a32c-4a5f-b4c9-da3a666f24a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3181266d-794c-48c3-8b83-aaab6cc05574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662344f1-71ad-4405-a1de-e2e65595f93f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec982837-f9e4-4a5c-9d15-59e131bbef25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "160acdbe-f12f-4712-9be8-c01ba8a29734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d6ac0e1-a067-443f-9c3f-f316b90d9e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "553a32c6-58aa-43fb-809e-77fa47f0319a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8db40b3-81bf-4acc-bee5-7afe812ee54a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2dff5f-3d54-43cd-a1b7-4407fcd8b19e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b5f434a-dc16-4dc6-a350-4ab95f341ba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87fe326e-4891-454b-9a28-a34e6f48f21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "13e69563-2fbf-45c1-8a9d-78ece0650757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "277f9e78-c331-45f5-8081-94a944911f57",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fcdb07a-f907-4dd6-b8cb-cdd7b19adbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12bcdfdd-a32b-41a2-82b0-1b391cccde37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5f332f-34d0-4aab-be98-944aaf5c0b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f245bb9-8766-4c36-ba8d-06b5cdac1ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03761274-0411-4aa3-a97f-4587e570ea30",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85cb0dc-46b8-4008-b344-40fa0eb2eeda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5c34720-85df-4a87-aadd-49b4a4c44fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b23dfc-b4d7-4b4b-b3d7-ef4c0ff55d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "db237262-8cba-4c4d-9b95-ebc7156e3528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba06f8d-44a8-4a05-8664-e34cf6321c76",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21f6972-359b-41c8-b566-033eb6925960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d5eef0fe-08c5-4019-8e6b-50d956d21e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e083dd-9ee0-4349-813c-4cbd5858c0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f9b582e-ab79-4530-a4b4-c16d2903639f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "46c9d202-91f4-4b7e-a372-fca8a1f2b028",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "31235eab-d350-4fc7-8449-39bbe0453b0a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be7176e-70b9-4f8d-92a4-aefa5ed2e90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86d9aefb-dcb0-4e3a-bd96-60bfe72aa569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c050f0-2ebe-418d-89c6-1f74c732c394",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5b9c282-6d65-460b-89ac-ba966be3721e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49423b25-6fc3-4c6b-b213-18687740c715",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce3afb47-627c-4d5a-8875-e123523b7dcd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "98bd9994-2afa-4426-916f-8443c690ae72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b011860-5dca-45b7-a459-7d80b89c1d01"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bfe77cc0-25cc-4f71-b781-3b66579d0485",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c123ca18-117b-4e98-9572-915b8defcde9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c24dd2cf-c392-4dd9-83fc-0d329f1c4fbd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1ec63e51-f4be-44e4-afd3-70ba05780c73"
                }
              }
            ]
          },
          {
            "id": "4e87f9c3-2731-4ca5-b144-627211239117",
            "name": "Positive Testing",
            "item": [
              {
                "id": "af433ba5-de92-437f-a15c-3179b47b7296",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "f430a60f-7520-40d7-baba-1057f2cc376f",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d12318-d0a5-4630-ac2c-fc0296ee9d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "eea6a950-5f54-4d36-9184-366ce8d14788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e796e675-f2bb-4a78-82f6-22d19a184e5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e1316f4-fb14-45e8-9f06-c046170c29b0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a36ad30e-2a98-4b30-8ab6-31bb853eb888",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93783b7a-f47b-4846-915b-0d944462b4a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "81bda0f9-4335-4e3a-a57c-0af16c45d6ce"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bac5cad7-d18c-4cac-8bee-e50cbbd2ceee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "64d0e53e-8e8c-4318-829e-9fc3eb0f6246"
                    }
                  }
                ]
              },
              {
                "id": "d9552605-a3bb-4bde-a91b-f98b1a055f2e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a31a283-7d13-4f87-92c7-24860b668d4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "35f8bfa7-fe80-481b-8388-b2ee08ec7d57"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72016a1d-115f-4a95-b09e-fbada82c04d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c5179abe-5c99-4918-bbd9-1c235356bc96"
                    }
                  }
                ]
              },
              {
                "id": "d7229e0b-9f34-441e-9eb2-f50a84d2a0a0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "69691fb0-f858-4bcd-b93c-7bcf6638a35f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d02da217-5b01-4714-951f-57a5ebdd1e18"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2818b6e-450d-499f-8968-f1c7df5b24d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b31d5642-f544-4187-ab88-22fc17f39859"
                    }
                  }
                ]
              },
              {
                "id": "ae893d47-76ea-442e-9e63-6bae0d8f21dd",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b31b89e2-cabc-4501-81e3-0b8c6e862afe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a3b44217-8599-4059-8dd1-8d624d56dd36"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bba6f084-8a61-4d56-a065-43676941c770",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0b847999-cad4-4de8-b0f4-d8f28197ff78"
                    }
                  }
                ]
              },
              {
                "id": "0df68270-a6ba-4d26-9135-86c2999556e6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28931903-ca02-4c73-8467-037c267284f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7dc4edf7-455a-4e31-841d-35c193312aa5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08af859f-8d7c-4efe-af74-4d67be704f94",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2f9e1b50-ca6d-4407-887f-ee5b8de346d8"
                    }
                  }
                ]
              },
              {
                "id": "f77dbdc8-0da7-4439-b24d-dfd87d46875b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "31b353a7-f99d-4adb-8048-57ef179ea735",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a293a579-2d11-436b-83e2-14dd0894ea6e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b491a94-857b-4886-963e-17b7e3941e6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f0b2d38c-87db-4114-afde-81e89386d085"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7677e786-96c4-4aa3-9220-426f6018fece",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "335db01d-1fb4-49c1-bfd5-96f50dd78396"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "369ea1cc-e7cb-4440-b9ce-7cca5e8ddd3f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2af19cfb-c3de-490f-88e2-6f8638db0bfb"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dad997c4-ac53-449e-b7d2-58e18a7a88ba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ba2ccd0a-9ec6-43d9-a485-6ffae1493e2f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a57af517-ff20-4fd0-be90-f07160ae1a5a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2039b772-1700-444a-bac5-3cb0256fd047"
            }
          }
        ]
      },
      {
        "id": "436bdec7-4b9c-4c6e-9469-2f792725dc7a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "86db10ef-7705-4a02-b736-9a16eda4f344",
            "name": "Negative Testing",
            "item": [
              {
                "id": "482bf884-b202-44aa-ba33-bb359ea8bf17",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "32555d9c-ceda-4f1e-a019-fca79cdc8b83",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fb5de1-6bcd-4eeb-a7b9-bfb8cfc313ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab0b19d-2ece-4577-a51d-1e7af26b0635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f46747-6dc0-4078-9e72-845f565f2a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e674cd6-f43f-4ee0-8d9d-a38391d521d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158717ba-a7f1-416f-b6dc-9067d7ea0890",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97dd20aa-5fa6-48dc-b44e-b2e5e4d2ec9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7346c52f-dd87-4e1a-863a-803dccd9178f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7ced79-b44c-40fa-904c-088a3c7bcf11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7acd1a7c-fab7-4281-b4e4-a09114fcf30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54af6250-60be-4111-b472-78909572733f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9dd8b3-f187-4a54-a324-6ba9fb74ab56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e62ae620-577b-4884-bf51-0e1c5f4468c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8197ced6-97ed-424e-be69-30cb8d20271a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "628313fe-2215-492c-a100-b6f810610b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3492014a-b47f-4021-ba45-4d7a35399357",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7601e50-018e-4943-847b-38e772c489b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e7e9a3-dd64-4d4d-a8b6-febb857e052b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ba77bb-59a6-44c9-99be-73b4bad52fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2cdf1a3-88b0-4bcf-955e-c6baf4830b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36554236-812a-4c15-89fc-0c809069a67b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "554a86ff-9f00-48d9-80e7-0afa9a3e99e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea17574-6b31-4595-a0a0-ed39dd4260d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c2ecbc-0514-4df9-ae74-c8297df21323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a439ebb-4f0a-4987-adca-507b13073e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb21aeb-a9e6-405f-b1e8-cfac1395c332",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1b376d-8a40-4695-b603-0dcbfdd8b43d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a2c5bd6-f3e1-41f0-8f7c-fab48206d172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4373efdd-4e2f-4b65-8ced-6745227cc801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "07464e70-ba1a-4968-9324-046effea5bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67845f1d-17cb-44db-a76c-8a9c0dbd7f5e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9df88d4-0965-4134-b451-def3eee75abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2209066-afe0-4600-bc0e-c03ef55fbee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed70258f-ff03-4d6b-a449-f3e2c9aec857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0c12c1b-8241-47cc-bf33-924cc3ba2d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bf71eb-3226-4582-8248-d09960018c48",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b63b5d-4470-4243-90ca-16eaed32360c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1a1885-f0e9-4048-9b07-809633eca3d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d14d1eb-4bc7-437d-8ca0-de826ae3941b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5aae9a0-d57f-496d-b4fa-eb4e6143e35d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c8cbf6-97b8-47a1-9645-51b436854787",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4759f0-322e-46f2-ac6f-e72e59da71d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ac99080-ece4-4c39-a009-2933ad5806b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51cdae08-0efa-4b88-a6eb-d9add7facb6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e7e1eec-9685-4d76-8271-f4b42e4a1499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780dba7b-cd1f-4ed2-aa45-f707a919e8b9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e00623a-a2dc-4211-827d-73d77bb8694b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "168d8043-84b7-42e2-86c7-f994da1c8f9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deaf7762-874d-42a0-b473-a34885009bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "82e90a59-f7bf-4e88-930b-21c2e2148141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0e033f-417a-44a9-ac76-b5761eb18389",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a56d52-c196-47c1-9acd-0bab05b35164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "486d50cc-e046-4631-b11b-eacbc6566fac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1611c5-39e6-4242-bb83-c6c7f22b8160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6b82d14d-2e53-4b3d-8384-f95ffa16b86c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3c75f1-824b-4094-8ac8-830109a3bd32",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ce0d22-3852-4288-b8c9-3d50e809c289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e4587ae-11e9-418e-9346-5f71b62564b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4d01a2-57f6-4740-87f9-6ea8b367e903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed3c365c-7905-49c1-b6ce-3815a2aaf7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd0574b9-5743-4b59-81d6-bff95205ea6b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e45c20d-65ad-49b9-b59b-86987c0ae581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb98859-7ff3-4d28-a807-a898f02da4a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14fa7798-c1d1-426d-adc6-bebdf23cc0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "688e2ded-c233-4444-b5c3-d3935a9debe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b669a8e-09af-4baf-9583-477c19c24254",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d688681b-f2ce-46e0-beb8-596913206a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5581c2ab-58a0-4449-90e0-6f10ff8f57d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa5c497-7776-44c4-ba38-c4d6fcabbdf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "14a1af8c-1d51-4db8-a465-24d9f5307e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c930ada-8a56-4cee-8e85-ba5fac364b82",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1291fed0-dd6f-48e9-af61-15a2b238eabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb1232f1-fed3-4321-bd47-0b606c342a1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873940f1-dcc8-4dfe-bcde-cd00c042961f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2c34a79-7928-4548-8f34-b2ac688b34b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67aeb636-a716-45de-81dd-28d68fbb8fa8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3a1262-50f5-462c-95d4-548fc6ab5162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99ececf1-4c0b-40df-a27c-6512f18a6583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e5a553-7250-4657-abf5-13ca9144e8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "91251805-40b6-4f05-b1cc-3f2635a73ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6c8afa-5040-4892-81dd-a8f2ece54cb9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ee59cf-846c-4530-b0db-bd849c3e303c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a843a59-6d91-498e-a190-99ff72d00f77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e026f3-9232-4198-b03d-0d41d2b8e0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f38fafae-6b93-4c6b-a33a-1afcd9046fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b39045-56b1-4817-a67e-8a7e3fac72e3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad740514-4622-4bbb-9edf-63878b4a259b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "570f3560-e708-454a-a74a-46990adeb020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dfdebbf-6857-4113-95e0-112ccdd1f782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "19209b77-ed68-4fd5-b022-35423a1693d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb78530-f7cb-4804-b61d-79b917632387",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e79e3213-3fab-4c2a-bb85-630df0cec811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6080a711-285d-4212-97b3-ec62a542e08d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b493fea7-1c39-42b2-8e08-c5b6070e8b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4401a7aa-b2ee-4451-9bda-571be6786f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d73139e-d94e-4336-854f-6f813dc14609",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3378947-6bb0-4a8b-b27b-24d40e246e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9197dad-a75f-4894-918f-27e3705d8cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c768933-b84f-49c0-8f1e-32678ef1e584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d004bba4-1b4c-40e4-ae0a-c20e89b296d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3122e216-c453-432b-b909-654d1c63ba70",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3343faf6-5b7b-423d-9820-b846e58e5acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17d74d73-b720-4496-94e8-520ccab0ad5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d6b5657-df7e-4f96-8469-098c781f28a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "000e0e3c-2e98-451a-8917-12df513bb48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87b8be6-1a83-45b7-a58b-0074ed55713a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9dca45e-7c1f-4cea-bab8-818e93e5aae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fdfea3c-e5c4-4c27-b039-e49d6e2ac87d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad4b06e4-b4b4-4ba1-b930-0f0a619be80b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "271ed22a-922a-4a28-9cdc-f469280ab44b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ccab7a-01cd-4807-ba97-cd5052d92677",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e4f064-1c27-465a-8c1f-d1e07e0b0eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81432bbd-642a-4ea6-a24b-ff9c183efa4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "896e012c-c1c9-4076-b81a-22d8f5e159a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95677de1-42e8-40ea-b0c6-4d4928bea854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60687412-fedb-452d-9a02-ad5fe491ea5a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aad3339-395f-47b8-a76c-8c31850b06ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da2ba972-cfae-4ba2-bb77-c074567e6c41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636801f1-9a97-492b-8707-aa3e32e77da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02445669-2130-432b-af5c-212e47e3a44a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b5de5d-e10c-4f82-8bfb-7f00a1ddfc30",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df121b07-8b02-4f91-bf51-fef68806397c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16224e13-5672-48e7-99df-89782ce9edde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9c2014-69db-468d-87d6-c07a9bd6d8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e680e67b-7f6d-4f20-a6a5-2f7285c2c4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35441b4-f31c-40fd-87a7-b7d5e69b88e2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a3dddf-0bfe-4c7a-b0f4-08403d092166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a2210f6-22a7-4857-adc8-644df3b93f6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c151c7e1-c727-4a49-b643-c377842ce1b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c81b62f2-e62a-4585-af0b-9d1bc711ae38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ee49b0-56ea-420c-96f9-32a1c93ba4df",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "658a1d21-ff9a-4e80-8139-efa9fc78744b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4161d2b2-c253-4fda-88d8-29f2d26bc07f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c505d3d-b65c-40be-9f13-862d387534a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fdba684-c4c3-4b7a-ab08-bde1113cf9da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b200b3-d150-475f-a5e3-3982453fc16c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f09b91-8357-47cc-9897-0c1533c5a993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afe5f7ac-55b5-421b-ae2f-cac774be1bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7baf6206-0a26-491f-b53a-52223d2fcf63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a12e950a-ea79-40ed-a3d6-c9e33ebea4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19afb84c-7b86-4cab-a8e9-6eb7a094aa47",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fee7eef-7bf5-4d38-aa90-1e7f8fb5605a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf7ab881-0f88-4600-a467-c632b1434208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13d0ced-0d61-4a17-8d87-98925926446b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06ede9d8-03cf-4c4b-b257-4495203d00da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f29d349-b1fb-471a-a755-add3e2a720d2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e821cdb-9ce0-4a01-8922-9b45f066dd9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de66cba4-c5a8-4817-a0ca-bf8360cdc90d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb91d3b-f9ea-467e-aae7-814bbc2e24d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa37c97d-7052-4a7e-a4a2-c3dcdea8a121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b51d435-17ec-4acc-88a1-48ac9219f648",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d1efba-40da-4ec3-a243-5ced7b54e7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31bd517c-e42f-4b6e-bb00-04f8509aebe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136996f4-39ff-4b20-b682-bdef976b40b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79704de6-77e3-449f-9ad9-b6f2732771ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e0ef91-45d5-49ea-a187-2f54a88fbb95",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d0b8f3-17e4-41cf-bff7-f65e076f39a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3673621b-a446-4e68-9776-b779231d3804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad833e1-7d1f-448a-ae6b-57cb6b0dc785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69b7ee2b-6dd5-471b-9a89-fc5e1e303f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76906e0a-7d03-4f2a-bf12-6fddd96d3150",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98927d6-d35f-46af-aebc-adb26e2ec06a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40262910-9004-4e54-9f56-f3175247d60b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4613f7a4-54e2-4788-9129-7ee7d0fb181f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "207f2543-2c94-4801-83a7-45a62ea3a431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba50c6a7-51a7-416b-b0aa-f9bb92b2ce1e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f8bfd08-90b4-41a2-ad32-f2ea9422cfc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70307e70-d3d0-40f2-9582-4b94ed0d651b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f19f852-6e9f-437d-90ad-1c34b4462493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95de0675-5810-479f-a8c8-4975349ea53f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed01803-7069-4717-b16b-57095ccb7e2c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7f5300-f24f-453c-b910-b809e5311292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f27269aa-a41d-4827-b529-1a7f78e3068a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec19bbd-2a94-4f4b-b49d-fbf3ef499f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ffc1f72-9c00-47ad-a83f-57806b6437d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2d2f21-ef45-4789-87f8-09a3350beb0b",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b21670-c46b-4596-ad73-ec78d2ce5f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fd6b1df-b3e1-41e0-a10a-93e7f556b8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51eb390d-a446-4344-a4ec-146133e5266c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f927838-ef57-42bb-9e34-25eeb4ea8552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465164e1-5b17-4b08-bfab-595047f5063c",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6bc0de-e762-4f0b-a3c1-2cc85b3a369e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad963ae-5274-4e6f-b304-470797dc1781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5aaa115-6498-47f5-835a-0b07220b5710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64513941-d0ae-4aef-8f7d-97e2dff591f6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ea062395-a42c-4eae-9788-51613236a3b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82c23c9d-7439-4382-af3a-2227debab179",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa068883-c4be-4cd5-8ab3-2b94b13cae08",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9032eb53-161b-4b7d-b547-7c43344e1dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "828f776a-8dd9-45c6-8a00-1deddeaf95e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1da614b-5b9c-48b5-8f29-6bf86916aa86"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aca2c0a4-aae3-424a-9af2-8dea9f6a37b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f34e9c4c-2c0b-406d-9b0d-2a4248f1b949"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "84c5aa95-57af-4fde-87b9-4ff4c1b68fc2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b8497b5-523b-4b21-9ef3-e43db0b4aad5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3ff520e9-8f8f-4884-bd2a-da71dd2f828d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "00b76bca-1076-45c5-84b8-3fa1725c65f5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45b01b5d-f04f-40fa-ba7a-99fd4ffc8d13",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c6223082-988c-4ede-b65a-921e24780608"
            }
          }
        ]
      },
      {
        "id": "744178ca-fb16-4b5d-a61a-dcd74e806d0b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f4f5cb63-149a-461d-a178-0e99001eada0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "34853bec-f8c7-4305-90c4-d5c7736dff6b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2d8053e7-9227-4c83-8adc-4630f6eef1f3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "642a17e7-b3bd-4bb0-bdd5-ef8135d3aae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30b9d94d-992d-4023-8d26-421595ec9e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd54574-d79a-4900-99cb-83e038feef54",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56393224-acae-454e-8130-53b1f73658dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f624881-784b-4919-a0f4-f9ec0fb9e9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdfe31d4-d485-4d2b-a0c4-6d251c515cac",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3deb1d6-113b-4679-8e8c-99be1f34620c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "217727c7-8128-432e-a7ce-bfb757c48f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9715934b-ffe5-4b0b-9ef7-8a7eef65bbc3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5187093-d7f4-44fc-ab9d-e6baca2f0d89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "603f0b5f-65e6-4a85-a3e7-a0619b3b0a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3889443b-9da8-4ea5-a4d6-9cc6d1937128",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb78cbe-49e2-4b9f-93fe-7b303ccf4aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fe89680-58d8-4695-8b21-0aff91bd7810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9086acc3-6746-4640-8fd1-95569c0c0dde",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b50d2bdc-1ebc-41f8-9352-58fc318784fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e2ec12-b31c-4314-89fa-a1a413fbcc4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040a8463-22a8-445a-99e4-a25b711eb0d6",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120f876b-d165-4a54-8962-4fbb1dfac883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47fafd13-db5b-48ec-b6ff-bec48b133b65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "940eaf09-7f2c-4dae-ace6-c452093d5e9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c2f975-0798-4d86-8c3b-d95af190ba2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6affdb-1fe2-413a-bd91-9851c72c6180",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09def311-989e-46ba-b7f9-3b44f4e1d61a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79a13ac9-2992-4dc5-99cf-5b40da4263a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e009abdf-8c04-436c-bfb1-51ad53b22f6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63941dcd-6b7b-462b-b5f5-4f6a66495d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cdbc72-6c06-491c-93e3-ebbe49834686",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7168a8c4-0732-4b13-aa74-d032006e8eba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ca26dcb-84f5-499e-b6f5-f1d45830109e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91fd5ba0-2f13-46b3-a65e-4a9c7640f2b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98c9098f-a06a-43ac-8aa0-89382a52f862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fec40d8-bcb9-462b-843e-af0d7e847764",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c653bf3-7fe6-4409-87c3-3c5e043125bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5423b7d-85ad-438f-a2c2-40f03ec87eae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "829ea0b8-9140-41d7-8e1d-a05f8ce83adf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f66f064-b2f7-41cf-b969-54ba96829770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c637d506-e00c-41b1-946f-d0623e961676",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e725bd-54f6-4bab-8eab-aecd2915286a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd57d8b1-39c2-4fca-9fe9-d59680adc02d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4559d08a-cf6c-4fe8-9124-8f4f9338ac5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4b1fd78-e2c8-4186-82c7-2b5251bfb051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a2ab263-6432-488c-b88b-492c7e6314d9",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6691221e-a98c-4220-bd98-8bc021f6f844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8892864-56ec-493b-a726-d493970fa6ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "500d92e7-4a3d-4fb9-81f9-3e11d86858e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d285506-a24f-4074-be90-ce339e1ce02c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab0b82f-348a-4c84-a71b-4076be9c32b0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56001afb-971e-45fd-a840-ef140904c7c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "842eb4e6-d95d-4396-a499-9b35832e8e0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c123521-0b6c-4abe-9151-31451cc7087c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b4bd41-22f4-426c-9aef-d0454785f1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e96d04-a0a5-41ef-955f-56e70152f9f7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f48d50d-b186-4405-a32c-5c8755b4ae74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "171d85c1-432e-4b0f-ae67-ee89850b0fc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0255c0c3-1ffc-490e-a22d-c7b402da2f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e8cc295-9253-4338-8b0f-ffd90a718fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b38e5a0-b92c-4e6b-af32-4438e0ef8486",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f9bb31-00a2-45cd-ac12-29096e3f23cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8c43273-0f11-487c-9ef3-7bb163c0cb50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "288a128f-f2e6-4b07-b722-2f7dbba8d553",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4962d05-203b-478d-a454-3ab14b9f5c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346417b1-79cd-46bc-936d-1ca63b4f41a4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1f1126-f512-4063-a548-ecc9c50805ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e6ac2d6-7132-4bd4-9470-098c4e9ee502"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d025770-493d-42c1-a54c-ce42d9dc062a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe59ce3-c9df-4905-9005-e34f16463c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b426b95-a7f6-4bd4-9fec-39ee8ef90a71",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3ebff55-6c9a-40a6-a70e-2933b9dd547a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bcb8b8e-db20-403a-8963-9b47d8e2699f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2a4ec0-f995-47a1-b626-29c2f2671fbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b607c812-c0fb-4a5b-b850-4d9c3deeab18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55702d67-8a3e-485b-96db-53891deb75eb",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3addbe1f-e69e-4ae4-b0a5-3deb76a3c14d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd7d36c-538f-4cc7-938a-8e1cf226d828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0afe412-0e2e-4a3b-9c04-f7f942437234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b8b10a5-02a2-4744-820c-ce1f101cde8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "785bab81-0b3f-4af6-b733-b812f9f2f85e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35775ee6-0ec1-464f-a69e-4ff717c5d213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66acea3b-54c7-481b-b7a6-e6934c87bd40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8451b6ea-7dd0-4b1d-983d-d538c3333cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a6408eb-6873-47d2-a0c0-69505f28ed0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc1c4f84-1a72-4e13-a3e4-c31b78769205",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "385ce1e4-d4e9-430b-b97b-576023ad4a8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5790cb62-4ea7-4671-bd73-caa82baa1151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "429c08c8-32ce-46f9-8a50-2811310a939f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53796cd6-461b-436f-baeb-ba817e2849ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72da88b-a7f9-4b19-ab20-292b3cfcb2fc",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4fef93-24e6-4edc-90a6-4b54135a842f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ab37f46-f0aa-4399-a6af-5df9cbd5c252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ae4782-6286-4cb1-8883-feb8d14e42b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb266e6-72b8-490c-ae62-b3b9bebae365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28da60a5-aa1c-477c-b8a5-43e68add2480",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f55a64-ad44-494a-9eaa-9b80f00b9758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97f0943c-f52e-4b59-8e9e-67bff4744116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "573e5d8d-6ba0-4f1d-a79d-63ae268d1b9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46ff34f-68f2-44fc-87e4-415e655cb8ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681e1b6e-b075-4de1-b215-f14f5f503c21",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca03428a-0d5e-4bf4-9f3a-a69a3c53a4a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd960cd-b90f-4177-a10d-3e929475d262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44806ffd-d38b-4d47-b873-1340fa0fb2d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec859dd-021c-4d16-a373-830e91a124e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e36e9d-ee30-4771-9b77-3ea8cf49a4b6",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997fdb4c-7897-4f45-8e3f-c3c96138d755",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15b9198b-571f-4bca-bbea-29bf65057c69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37dccd63-3516-4e9a-a468-1c14e608226f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "216c0fd4-fcaa-44b1-a800-b9a772c3dcd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934bf73b-0de6-44b2-9156-320e3d402fa4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3447292-ba16-4aeb-ab0e-5729c1428003",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30c30117-c828-418b-8272-662a652a05fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3857b18-04df-4f29-902b-0e3f1f2b806f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "178aef0e-95a6-44bd-a69a-f6d4522c11a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07941b48-5e54-4d13-b2ea-42f2712a4f22",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960f38e3-b1ff-4ce9-a01b-7ad7e756fe68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "664832ea-5ff9-4351-8d80-3f42f7aacd34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87a2db8-8438-4984-a0d8-a78f0a6d8547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e09989c-cf8a-483b-8031-685e4c7337e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c01a0b1-b327-4f37-9108-7423e886c53e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21bf9d1b-67f9-424d-875a-fec4207486ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5be8e1fa-408a-4bb6-bba5-76f2113b2961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9f8f11-38b3-4edf-a915-902ea88fc5f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74868a10-bba3-4951-aa38-10d8e88a6687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7bdf9b-d75d-40e6-aaa4-97e71db821e8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd3ceb0-362c-4253-baf6-cc5e7d5e0ca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba40fd03-20ba-4467-bcea-2a5de416847a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc0a5d5d-5030-4879-bafc-8c95ea557530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71a166a5-d88a-4878-9ac0-ed0f3fe9489a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e90282-45a7-4fd1-9765-4f65f8d48919",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd79e0dd-70bd-4373-950c-63f9a6dc9000",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31afc2e1-2ddf-4aa6-bc58-4d8ab75097b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beae5bdf-f971-476d-98e1-8ef7b5975495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22f2d189-26d3-4733-81b9-a8ec6d9a5a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4681a4-32fd-489e-9dc6-f656e98e2f6e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1bff0bc-19b6-4b19-808e-9603840842f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "003fb00f-b120-46d4-8881-cd9f2966358a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "066de98f-ba5d-4ae7-8c09-46d73d847672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "545c8630-87bf-49f9-b2b8-9fe7fab0997f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972653e2-68ef-4791-b812-d0a42d3f56cd",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbad5821-7a20-4acf-b663-3a79167dd3ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76df6f7d-5a56-4d27-849d-5e69db0109de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5ab5ca-4a93-41cb-b247-395855d7635e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a89c5502-36c8-473c-a34b-8dfe76bd8e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4738433d-d9a7-4397-b2c9-6085482bbbca",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4700b61d-55e4-4aa1-b605-a53847059d14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd017798-1d1a-4575-9d75-2b5409b9c555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16eec8ec-45ca-4a4a-948d-9f441ba255da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a5d449f-5fb1-492b-9962-4f2c43fa24dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ffac22-60a8-4d4d-859b-c792bd638874",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5431c22-9454-4c69-b1b6-6b08f91099e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f368c825-f70f-40fe-82c2-1c0b5bd80210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d934efe4-7840-4246-9951-af0b90fb00a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d052e2-efa6-44ad-bf15-9f03491795ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe2567b-ab36-4ab6-bd3d-9ba9808bff7a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09e9cf5-a6cd-46c3-974a-036b1ae2379a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75cca68d-51e0-4799-afa4-431c9dfa03e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d5b7f7-545d-4c96-82bf-67cca317e3fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094afc09-2b4a-470c-b80e-290b21d50651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e273165a-9f68-4965-8f39-01ac4b8c9313",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a11c7c-56cf-42e8-93c0-11af7a9d5a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "234f1caf-6a8c-4948-9755-0049b4eba2f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d655115-758e-4f72-9854-42936b97d262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec44b8a-aeac-455b-85bc-145a79983bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a16028-8728-4571-8429-450e16581b81",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e538d5-7f18-47ee-a15b-732c28ed7380",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b15f039-1a7c-4a37-8ac4-c8e49ba1e4a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5751f0c5-fe75-4f83-904c-05acea6c7819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ee2c189-1ecc-4734-8552-1aba73c03f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a4ea02-af05-419f-aea7-b3c82be4c601",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8fd9ad-95dd-4aec-90cc-73135ab3aef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e85ab9e7-2734-4e1c-8884-dda2917b791f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "432cd2d6-880b-41f9-ada4-43bf7137e83b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f609a53-6ca9-4d25-996a-883d569618c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da542220-2a42-4932-823f-51e0b24fb860",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ddfc5f-e824-4ce2-aa27-d9b0cfab850d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c815c53-dca1-475a-9e12-7d7a9054cdcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c02ccd-bd97-4744-baeb-fa3f1f3ea676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f4b1cba-1ddf-49a4-8d73-d3ea3b75ab59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af440f16-2e77-4f79-b770-4e846b045f7f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19ee2cf-de4a-4a95-be27-35370dd07187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f591806d-8f74-4892-a32e-bc4c68835f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde0ecbe-ef8b-42af-b112-a138a7dfa4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81895df8-f99c-4005-bce4-9b45a48ecabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e2c820-a8a8-4082-9830-e0aa2839789c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962c35ec-15d3-44ff-9a70-97d93a6cc182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf70717a-17b9-4d40-86c6-664fdcc08d32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26c0f04-1064-4805-8693-fba8f7d03526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312f7c04-352d-4fe1-a8bb-10fdcd439d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78428a68-8c2f-4204-a007-39b58cfb33a9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bdc188-6883-4e71-b3cb-921f97acaeae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a26e1575-bca5-4254-b01a-a2869b640836"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a14853b-e955-4a4e-95e4-ca652e641563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dc933cf-59eb-42f4-8956-aca9d108476e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d06be5f-586d-477b-b45e-df17a5524600",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f893704-75dd-4e1d-9ab4-31294b300543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfb905cb-5b77-421f-bc5d-bc9f76f22004"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96ac7d2-9710-4ad9-acda-b4a465be402c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3938dc8-f2c7-4856-ac5d-8c9899284506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69076c0-8b59-490b-81c2-5f40888088d1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875f9603-4fab-47af-8a23-3905b1430f68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15f08eba-a4b0-4a45-a476-3bcaec776b58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2f1bd6-f7a0-43fe-919a-441cc6747a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc80751e-4b53-4145-b9c2-696046ab3063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61830a4b-31ed-4351-bc02-f244b96cba7e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb0fa06-148e-4a6b-ae0b-eb99b53cf3ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d9806b5-8f80-4eab-936f-acd185371ea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd69b034-c77c-4d1d-8dd5-f2402abb64dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c7146d-6386-4cab-8a08-be9845c11713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81bcdd1e-17a6-46df-ba8a-3d61797613a3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae3211e-2792-44f4-8e9e-afae161a8a00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b451f374-80f9-47b3-bb18-27a1e775c143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5050ea-7578-4c23-b566-0e84af1f502d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f90fca2-70df-4fab-8324-6ccb7ce37147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962fb683-0be5-4dc2-b563-bfe37ff1a87d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5f009b-7a99-4451-968e-fc56f6cea115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82181c78-bdc4-425e-b457-3403712a9ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a3f933-e7dc-4d7e-8eff-abc519e39dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "555149b3-0b65-4419-8e2a-e17730c652ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c1db142-5ca2-4cf1-ab89-9604bf9a903e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f19b5afe-9bbb-429a-89a3-cd87f9853cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e62fed-6801-4baf-86e8-f2adb5925e2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2fd43f9-bff2-42da-b854-b60a4a74c855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c8b871-f5c9-4d36-9779-20bff6aa9a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3bcc727-a971-4ba4-8f23-e1810982f1bb",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd2b268-204d-4bf2-91d7-fe101d92ea37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2856a38a-f788-489a-aadb-1ca6afe49d85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3313570-fe83-4c6f-b7f1-5c17afda4a82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c6503f7-bacc-4a18-8e66-893c180a00c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce02165-320f-4501-9dc2-3960ee03ef3f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8004805-4b80-4fcc-9be4-0bdd0551fca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd0ad50c-c335-48a4-b959-1eb57eba28e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9ce119-8a36-4807-9477-642a91414a80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "431dd9d5-93a0-409f-a1ff-ab105cfb1150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27cc3e9-6df7-424a-b7f8-4b3a1879d1fd",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84909ceb-dc24-4ff0-ad5e-26ff507e48cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "938f4de8-44b2-49c7-b6aa-7c3f35a2ab13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e687444-e22c-42d3-bd7f-1395a3d94a56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c123d391-1a6c-4b59-9a3e-a7973d741c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab450a7-7816-43fb-bfc7-5680f0909817",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a52249-523c-40b9-8de4-2abfc03ac387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9056e5f-cace-46af-8726-0f145212199b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff77099-f037-4d57-9a48-51042f88d102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca3d6a9-71d9-4bc7-a8b0-c1b056225de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490eb58c-0296-4515-8c20-d0afb243fd8f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c82038-549d-44ab-841e-f073d8882668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39b544f8-c074-4685-8069-8da6b7b41e7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a968759a-6cca-4441-83a5-7d3c4d7b98b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd2bfc46-f024-4a0e-882f-45f5eef5015a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "173b22e1-9b5b-48cf-9f2b-61e55b127b95",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc5e391-ffb8-44cd-a5e5-95e0ccaab903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f49f44-43de-4929-b9d8-94232abde0ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b453549-0cd8-4a54-aa6a-0cd27a9b077c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30d8aa95-7b8f-4bbc-9851-aad4dd5d8454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3759097-dadc-46a0-b49e-db2731ae0c9b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09786687-600e-46ae-b06c-a47773d17876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d57095d-ddfb-45cb-b153-02a9813e9680"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b5378b6-711e-47f1-b04e-1e2a657e4511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eb4189a-df81-45fc-9b3d-c5c299c6678f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f889766-cc39-4667-be0c-f54a0833b75b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f25a90a-b628-4bc8-8c5a-66ec0f843d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6696f82-dbb1-4a82-b1d1-9f7ebadf8893"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09a18db-dcf2-407c-bdfc-6377d5eb1988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25cefce0-2062-4b1c-bbca-139fb1a04c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28927514-0c3b-4066-a082-5ebbe6009eb1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8e87e2-3648-4b13-bb70-60541eee1322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fad649c8-a1c4-4a89-adbe-8bfee6bd58c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "587b2655-87f0-4cbf-b593-77531be2d0ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5056bd1-4f7f-46d0-9397-739fdcbf1bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6e44c1-83df-422c-aebb-50147cc9be55",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3faed715-cb1d-43b2-9028-20d68f2d4a77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d838bf-0df1-4c9c-a320-5f6cc5fc47ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d63f413-ae35-4d5a-97ea-57d7323918e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6679d7e1-7c7f-4cf4-9429-558aa852e5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6f25af-da6a-4dd2-a8f5-5466317975a1",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a514ee9-63c5-4d74-b742-e407f04b7e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f3b1c0a-ac1a-4490-9c44-b5badf67e06f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9de318-ffc0-4e62-8498-6de9545adefb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "316113f3-3cd1-4fb1-8b88-89105b45c554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd012c09-6f4b-4cca-a400-8f109759b13b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2073f5f8-934f-4db9-a904-2abd021af1f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f6da7aa-cdc8-4fbe-8a9d-0ee4493ed341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "206ee08b-6344-4622-a413-8288a7eaae16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "840b2368-6572-4013-ab31-20ca12acec06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4670b7b9-cdf0-4c58-90f1-545579a50186",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5806a896-9c0c-4a40-8679-8b0cbde91de3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d182949-9b97-4ba1-8b5f-19cb33d8495c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b76bb2-085d-4a43-a690-1ce74429c535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33570587-e9f3-40d7-bf34-8c86c3b35e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62447fb-dabb-43e3-8b96-9e4edf1dee41",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17cf084d-9e07-468c-aff3-64046503b7b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d62db1-8178-4746-98aa-1875c5d7ac6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56bab75-c110-4171-bd0e-cc74b3184671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81fbbbe5-f6f5-43d0-ba49-7c9f2b03fb7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84401e8-d51c-48fe-97d5-4b53dd881fae",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc8b23b-7299-4b21-9b45-d39a7a32e756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7674d8a1-d30e-43ff-94e4-61b9472bde58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "878a50de-bbab-47b3-85b9-b85a5d22a1a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e427af9-91ae-47f0-bd32-d29585be8bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226cb83b-bdbc-42a2-9297-f69097b319d8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe5a43c-e974-4c74-b8c7-462b383c55c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f052cc9-cfed-4787-ba26-6508b67722d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7fbc628-189e-4a2f-a5c7-6ad43c177fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19389891-7968-4a97-8ffa-7d759b7d9cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8389b720-b330-4512-95db-fa050efbb13b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4851ac74-241d-4c99-a297-5f6a9dd126bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42b92482-49a3-44bd-8ae1-6a294769974c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "433ed1c3-d76e-4bab-8990-d0b90a3805dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d6e12bd-1bd6-436e-b5fb-d07755ee388b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f479cfb-e937-465e-8ad8-ac9e57d86bf1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "184fee99-6670-4970-a6b2-8d07476cc501",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78dee98e-7902-481a-82be-a5da32d9bc84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "252afa93-2dbb-4548-b665-c641651f0d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7116ac7-f17b-40b6-b116-803167c8b2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762a61a7-1ee5-414d-b425-dd96b95589c2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3e6dcd-4fcd-4ffe-8fdf-b5f876031e06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf53ee67-c4a4-46b2-833f-b6d82013dccf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb8072fb-ebed-49d6-bc24-a0c1e3e8ebbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d68e2bc7-7ba9-4a98-8dbd-1d38c0232d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eaad744-a120-4297-bad3-9e93fdd7622d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e857c1-8aa5-45ec-b7c9-2e8a14ee79ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f531f5a2-e5ff-460c-82b8-dbc25379a46e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70e61a2-d526-4fb2-a0b4-32a32b24df47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8295876-c85d-43bc-91b0-cbfc6c929fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a70c00-cee2-4356-99ae-51a2f37eb5d8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a219ac-6d6c-4c24-bab2-8516c1ea7ec3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8821de34-11b9-4a36-ad6b-2c036db66f8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d54078-b438-4a28-86e8-d456dfd8b8d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b034241-09a5-4e0b-bd47-fdde981f9ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e6f5413-9d69-4c31-b8e1-d8d3b123f3fa",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6fb8f7a-ae1d-4174-a6bc-0e06ada9105a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c84b5eac-c14e-474a-bb8b-4ea32eee687e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "468d356c-1d99-42f9-9963-4dfb4a040f87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d78bae0c-3ff5-46ea-b11a-0f1da7dc23c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a59395d-7ed7-4d58-92b2-2a74283b4b2a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12588940-8a6b-4a98-afa4-7d4a584f3a53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2b577bd-37be-4a7b-bf84-1108569a2103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe89fdcb-fa6b-4d89-bfee-15626f046692",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f41ec5-7c40-4ec6-b180-77d090a44b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a10c62-87cc-45da-a5fd-985153812f9e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91756020-2a64-43af-89f5-b9172284eb2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a90af38c-34be-4ffe-95a5-7f2e2933cf84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d7e847-44fc-465e-bc12-8567cb2ce97f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0b77bad-3b2e-4dde-b52d-0d8f803b43f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633637d8-4bef-47e1-bb9c-2fdfa55bc27c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f016a437-477e-4277-893e-d6a20d10fe9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5a985bd-8d05-441e-8463-d636bc05f1ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "769e80c0-09c7-4374-bf05-9c336f1e9bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ff45e66-0349-4139-ab3c-e4b38ddf5de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49fa8b27-6ecc-4b46-b1d9-b0e076d3924f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a22484-051f-4fe8-b40d-c32912aaeeb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64a57285-5de9-4727-ab91-8b244812a64a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a07f403-e4c3-43e8-8133-58d11ab47d0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1154644a-b017-48d0-b603-ca4599b22718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0b8aec-27ab-4d96-9c3d-0d0152a9a82d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c8f474f-dc6f-4391-90f8-a570d2268562",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c44aa71-fc42-4abb-9a3c-0add70cd5821"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc49553-84d9-4948-8e2e-27bebd968084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7952c091-a0a4-40c4-a2e9-08a1174349e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73471de3-f540-4c99-9177-5fe0bdd7348e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b53ee2-d2f5-4ef4-b50a-00b95cedea60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "731062b2-2661-4d88-80e6-0443d80af824"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d45be0-8f0b-4d61-a8fe-f3deae226a1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07ff9f5f-0b0a-491b-b96e-53177f55b1fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab29efd-aba3-4020-9f60-5668d3c881b5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca3e19d-bfc0-42d3-98e0-e7cfb93fa3b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae0b1d8-53a7-49b3-aaba-9f0081453272"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc63dab3-0a04-4d0f-bcf9-6ff003f7c08b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce707216-6b01-4a8c-a51d-9dc3dc0e90f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cde7751-45be-40bd-8348-010ac386b07e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1331c3e-e5ed-4669-b76f-a035a078fe91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7abc2b7f-beb7-41f5-a960-109a525a9675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7533bc84-e200-495e-bcdd-2a476278792c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de07e156-8d32-415e-a163-d23139d73694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "384a3ece-e7d6-4c44-97ab-054a46359d5b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58804b8-caaf-410f-9f2b-9a55eb5b18d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78cb739b-62c3-4660-976f-c5caae9fb8ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af3fcab-5f4c-446f-80e1-5bdbad7c6327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c1ee59-1f24-4117-9dbd-3c6a9b585e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731ade66-5755-4503-95e1-0c87d43672b5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4e2629-4b47-459e-b4a2-4fbf3d2c36a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cec0f9d0-5491-4254-931c-3a8412af4937"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad4fde0-fdeb-4844-a04d-63ed1796010d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eecaf647-477b-4e4a-a112-daed5af9b4e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48259d7a-7035-40f9-b860-6446038db5c5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd86b32-ad6a-4818-a3db-540c34b7b7dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23f29a54-cc95-4630-84d3-e32f90436a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ce6bae-2f17-489e-bfd2-de9a0f370792",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a315c4e2-fb5a-4cf4-9104-8e3e593bf827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d695fc-fc2d-4798-93da-dec18ea8eaea",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89bbabfc-fd13-42d4-b033-e510f612f76c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41b4bdcc-92b3-48a3-997d-2c8e38046cb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd0f999-f83c-40bb-a8ee-087743f1afe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "899a1c1a-cfcf-4718-868d-37ef2e0c3f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93181c6e-30a5-43b3-ade5-e36faf5dc1b6",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65823aed-f268-4cd7-aa0c-fdb94bfd2c6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14c6edf5-29fa-4fd6-9007-1c296ac3427f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "732123bc-13bc-4ae0-b114-f4a3793ea732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d0dbb49-52bf-4a0c-9af8-0662144f8d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2505e47f-a6db-4f89-bfe7-dbbf094e51ea",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecacfa8-47b8-45fa-88ce-5923785cb0f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f42176c-102d-4ec5-a97b-2b6b75cab6ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26034712-fa7b-4464-99b0-b9a70f407a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "358f71e1-e932-4f99-913b-15eb4e45a304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789cebf8-c032-4126-9577-744600940612",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4e18f5-50d5-4e88-bb66-5ff30406b651",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a82eb2f-7a65-4b19-9e24-52c296d8f498"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "502d8a39-65e9-4d98-a3e1-05cdae919eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb40fe4b-3968-4f28-9d5e-bb1ae2a93237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebadbffb-2317-4a00-8b0b-c1592cf202ab",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a001f25b-0c5f-437f-b48a-f914dbb5d956",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e48699c9-79b1-4078-ac75-86f523d30857"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3b0c88-de18-45e3-acf6-50d352902ea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c97d91e-03ab-4f9d-96a0-60c10a5e84eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d033bc6f-8be9-4530-97cd-38a660cf775d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce371b4d-4169-4cfb-bf30-465268ddfaef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d865be4e-0242-47ae-ad23-44cfffd27c31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc62634-2c81-4437-9be6-c445ccd5ae0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "220928a9-7570-46ee-b184-516c992bf367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56827eed-f7c2-430f-b3dc-3f812fbd31a0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81fedd00-f359-4b6f-a836-e9cb7561cd5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cf36957-f3b3-4d6f-8b57-2ccebebcb04e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c878055-b59f-41bd-ac18-73668e36472c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f84ec435-4a6d-4699-9275-28c185212db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b3af0b-9108-4260-bdd9-88a6c0475f0a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1903d758-4fc1-47f1-8c32-f55133efa88c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b661cfa-0498-4720-ae70-6624f69418f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "480af9e3-ee15-45f2-8160-7a8256412476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09501946-039b-4af8-9f1a-0f21b0fb18f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be681ec-f69d-4f13-a9f5-900608121597",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d970b426-71bd-4457-8772-1836a941e2c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f183e765-fe0b-4c8e-a630-dc7f4bac9b6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7a7d92-65f8-473d-8c84-8de839a5402b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbec59a6-97a7-4aa9-8078-363fda0830df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa1c118-bb18-493a-9291-fd16b9e1df12",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a4c86e-fb96-4595-9fa7-41a8ab01964f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3d18502-2ce4-4b9c-9401-0725aa5cf1de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "642c79e6-d9b0-46af-92e4-cdae5b2f5743",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a0d2dbf-d79f-4f92-aa20-4e94b1cbbb51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc75d6fd-5ee4-41fc-b3fa-139550f672af",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ffc1a51-8fec-4936-ab7b-f52c87422464",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcbf22ea-c9cc-4a1b-b07d-0c6bb89cadc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1126e060-e77c-44f3-8e9f-62bd66c38d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c65686d-9cdb-4708-9a37-924d00babea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7e7e70-06fe-4f3c-af77-fd10d2d444e7",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245b76d0-da17-4952-82dd-6516364bb3de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f10f323-5174-426c-8625-60f0637f7fe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b559ee1-7af9-4b02-9096-b98cc42d0ec4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9db50aaa-82e2-4bdd-889c-426b0d731ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f9b672-20a5-48bd-9f37-4718e07f4306",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e255cba-7482-42e7-898d-5f83d8c34686",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2025236-2d3d-406b-9ce7-9309c6ba75e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ab89cd-2351-4360-b322-1ccd2d797ae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a1b5c4-22a9-4edd-bff9-94788c8a453d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc090105-0c94-437c-9299-99ae75d46df9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d0d8da-2ad5-4d46-84eb-30026fee7146",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17b84d76-5e88-4a35-8d03-29755c571438"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2217d478-ead8-4836-a45e-c429ee99ebe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3634a10b-017d-4f56-ac1d-c2ddd32da68d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ea2b62-9e95-48c9-819e-bfe0599d8890",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17203f3e-00a1-4f9f-a779-d922e3fd9838",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f787980b-dd73-48cd-bd0e-7eeeb3d29b89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f748f1-5c11-43f7-86dd-25b7a46f2548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86925115-e80c-487e-9540-df0d9ddbffc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641d341a-2a77-4569-8390-cb8d5303783b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f49fd21-fd06-4c27-8733-2b1ef1e5cb87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26b0ccad-fccc-4d5f-a33e-fbe1365f33ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c52bbc-1819-4963-98dc-1c2984f8aa62",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c08f30e1-900e-43c9-baa2-865d9a60d35f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80be2ab0-4d2b-4bbd-9aab-b087f53fed9d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3b2886-5e30-4c42-9dbb-1dc6a01d587c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01c68010-37c0-486f-9a0b-820d6c8a6f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2288e9-586c-4056-9c1a-142b97e04cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "605879cc-ab31-426f-a8f7-77eca16480e1"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d91eab2-e3e0-499f-b7aa-9059b356da40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85cf9b5e-712e-46a6-91c5-c61336ae47b3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd60ea3e-2046-4ebc-ad9b-1c2431f16df6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "127936a4-7097-47c0-bbec-31d119f002c1"
                    }
                  }
                ]
              },
              {
                "id": "ae6ab052-c949-4401-aaff-c9cf21bd2175",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "457accf6-be46-49ab-8458-36295685e65b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87beb029-0681-4f7d-83d6-3bec65a1b6b8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8324f250-fef0-4def-a6b9-55697b5d91bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c62aa1b-76d8-481f-aa60-1e63a101aa09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91162120-1b14-43c9-a057-70bbf6f9350e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "885a3a97-c3cc-48e3-b68e-99363d1ed5d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "176c42eb-ad1d-416d-bdb5-6c3a1f4bdacc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "141a571e-15d1-4d93-8e6f-350db0aa7e12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28817d61-18aa-45ff-a9b4-f2b9bd1cb256"
                    }
                  }
                ]
              },
              {
                "id": "e24e3fb2-2771-4771-83cf-22e71b70a065",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ce0fb4d9-20e8-4c52-988a-c09b712b6385",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b933f7f-598e-4cbd-bcd5-b2556f84e9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "cd646246-c1c3-470b-8ba5-5ecf29c91c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3927ab0c-0e49-4854-a9c9-e0143f30a106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d08c5d7e-d31a-4421-8dad-699dab2af2db"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "30c257d7-f886-4f83-b50b-5444f28b2e6d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7b5f0e84-4586-41b5-a5d4-dd0ce2370fe0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6002f1aa-f031-4b65-bffb-259d9e33cd12",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fb6cc071-6487-48a0-948f-3cb35970d4e0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "727177ec-a712-4163-987a-480c8c325858",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd0e854d-8521-4ec4-aeb2-34c4d4811cfd"
                    }
                  }
                ]
              },
              {
                "id": "8dad5e11-efa0-48cb-a87a-7aa1d766a7db",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bfdc8dd7-8316-4136-a91a-232a8fe4f97c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c9825dc2-6882-4fc9-a403-74bd4d883fab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5cd9820d-aacf-456f-befc-27d0f79a271e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51a08b69-89da-4fdd-985f-ee6f8bb6fc6d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "def26beb-3829-4213-bf34-408150c6bed6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6e0a7ed2-9768-4655-be75-1604d6a32e9d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "47866bfd-e8a1-41a1-b404-a02c83553baf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b18cf40-428e-4156-ada1-97015f3db479"
            }
          }
        ]
      },
      {
        "id": "0bbb6487-84ae-42be-ac32-bdebeb11fec8",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "aa437620-8157-4dcc-94a5-7b467c2f7538",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ad5c9f5-d032-4164-9a19-b09fd9828f9d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9d93177c-2d30-467d-b02a-d2503e0ceefc",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978a7493-0d57-48be-a824-932bdfe279d3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d23677cc-c377-4d58-8bc7-edd803618dea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4a3e44-9860-4d52-852f-c84aa8f033bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44f98f26-8d9d-4d5c-93a5-4976fdb7fc25"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "917d2898-984a-4293-9fc8-c3f2c8e9c447",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71468379-dfe7-4eb6-94ae-15549591ea37"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "73f4d82b-cc8b-46fb-bbc0-3e4c0519875e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd0c155e-0f6f-4ea8-89cc-ae53881d613d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d1354f5c-afc2-4bd3-b300-e01d1512a8a0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "cddff2a9-f061-40e7-a7cf-9a65e0b98720"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "393dacc6-03bb-4999-8d60-5fdced091b9d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e17d9254-080f-49dd-a642-c821692f363b"
            }
          }
        ]
      },
      {
        "id": "04b2d31c-fe10-4ce1-b97b-286569c3500d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ae984747-1ad6-4c2b-bfa0-15ad6de50174",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c43487ac-8853-4611-b181-697d6bc639e7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74bd95df-5ec0-4315-8a2e-53f0085ef7c7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e8bf13-2426-434d-9800-61857c04d844",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73416f42-5221-409c-8561-4dc96978168a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7f403c-79ef-4cc1-90cf-23deec59ddda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f8abbd1-2419-44e2-9658-024c56c969d2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5efa64fd-74ab-4585-b6ba-81c91f02baf3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b932afc-c3ce-40fa-a8ef-c9c8fa18423f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "db9a2a12-15dc-47d3-a9c1-bc529cbe446e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4014918d-0672-4834-b063-7f2877201fb7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "39569b34-fafd-4373-8367-ae7fa2852884",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f544d2a5-5a57-4a71-b211-f7f12ec07ff7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "94369979-a379-4d47-893d-bb6d768e6937",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "28326e1b-ab36-46e5-a31b-b7e9314aa97f"
            }
          }
        ]
      },
      {
        "id": "449f6b89-1c72-412e-b1b2-351a76f73305",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0c157619-cb44-4266-942f-edbacfedf1ec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d4d69ee3-3bf8-499d-9e75-2ae82f001827",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1bcf5e1f-b2a5-405c-9eb1-ea9c3019ddef",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750dfe45-f527-4313-8f2e-fbad7106b25f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3f8032f-5b68-4e69-b2c4-bcb0270ef540"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af70add5-bd58-4ce2-af87-fbb7f617cac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99ad7ba6-0734-4109-98dc-89b5f788650f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a64b89f-4319-4f6a-8bbe-35dbd583aa42",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "328034f7-4bc9-4b6c-9065-ddd9e68715a1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ef92b98-6003-4a72-90da-f2c1a66e0aed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72b955aa-f606-4dd5-a86a-63dbc0cffe65"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8de013c6-6878-4aed-b0ed-9721dde6804e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6d4eedd6-675a-4ea7-af84-59658eb375e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4d9956b-0b58-4a35-a44b-9bf5593c5603",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01f6be8a-a5bf-41ce-b4b0-dd749845b8b5"
            }
          }
        ]
      },
      {
        "id": "9d79af83-87f1-4960-8009-aa8a3bea2d89",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94f48102-a7c6-4e73-a0ce-e3e52c789258",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "290b40c8-d8b3-4a72-bff5-418ba35b3c9f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7faf51b3-062a-4796-9706-effc07c992cf",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8a9e285-a662-4ddb-8726-d027f8391a0d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d23120ae-4660-4783-8bdd-010befb95dd9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 147.94444444444431,
      "responseMin": 11,
      "responseMax": 868,
      "responseSd": 93.34377539848991,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1716251816068,
      "completed": 1716251861875
    },
    "executions": [
      {
        "id": "2c625d37-5ddf-42bc-9639-54e47eaf815d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a754779f-5aad-4c7f-ad57-14f7c1666c98",
          "httpRequestId": "a3658652-24a9-4510-9c6e-c7c11da282ea"
        },
        "item": {
          "id": "2c625d37-5ddf-42bc-9639-54e47eaf815d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5050dfb4-29af-4714-a5f9-89131888f02e",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 0
        }
      },
      {
        "id": "961a51f6-1ab5-4445-bb05-ea2926318be8",
        "cursor": {
          "ref": "9e370da3-730e-41d4-81ad-c87e2ea3d53b",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6473d495-b425-4469-8ccf-5c25c4fd6aaa"
        },
        "item": {
          "id": "961a51f6-1ab5-4445-bb05-ea2926318be8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f086a1f1-9e5d-40ad-b942-60356c5fda57",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "3f9a3cd9-925e-473e-b4da-af3fe401bf48",
        "cursor": {
          "ref": "fd4ea334-8409-41de-abcb-4fb1a519abe2",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "14f9e127-d620-4f46-9c77-e79b24f017dc"
        },
        "item": {
          "id": "3f9a3cd9-925e-473e-b4da-af3fe401bf48",
          "name": "did_json"
        },
        "response": {
          "id": "f1e83022-1d03-42af-91f6-89eacb97c4d5",
          "status": "OK",
          "code": 200,
          "responseTime": 713,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e80e31d-0b19-4fea-bf62-35640f4c0923",
        "cursor": {
          "ref": "ba9ba9a6-4bc8-44de-90f7-fb71a3ead8dc",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f6b528c2-ea45-45a2-85a7-9d152f40b367"
        },
        "item": {
          "id": "5e80e31d-0b19-4fea-bf62-35640f4c0923",
          "name": "did:invalid"
        },
        "response": {
          "id": "e9f87158-7aa9-4e47-a732-35fa4ab1d442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e80e31d-0b19-4fea-bf62-35640f4c0923",
        "cursor": {
          "ref": "ba9ba9a6-4bc8-44de-90f7-fb71a3ead8dc",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f6b528c2-ea45-45a2-85a7-9d152f40b367"
        },
        "item": {
          "id": "5e80e31d-0b19-4fea-bf62-35640f4c0923",
          "name": "did:invalid"
        },
        "response": {
          "id": "e9f87158-7aa9-4e47-a732-35fa4ab1d442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57dac034-ce9c-45f5-b734-429b8ff87e6a",
        "cursor": {
          "ref": "892e773c-83f9-41e2-af86-2afe0c6699f8",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "799633f5-61cc-4128-8f44-f26c33c1db47"
        },
        "item": {
          "id": "57dac034-ce9c-45f5-b734-429b8ff87e6a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8609e3f5-4e54-4ea5-9aa0-d0401092db2a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 383,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede7cce6-67e9-4f31-994c-137e1591743e",
        "cursor": {
          "ref": "a60e0c0b-e0cd-40e2-9b10-2cdf280f23cf",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "fcf255e3-f35b-4f76-9105-d6d3a0e18168"
        },
        "item": {
          "id": "ede7cce6-67e9-4f31-994c-137e1591743e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e06cc006-12e8-4801-b25a-6286212ca4e7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 122,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "417a93a2-1d57-41d5-9161-eb47dd7c6bcf",
        "cursor": {
          "ref": "f6abc387-15d4-4860-8fb3-0f71e429a09b",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b08ca572-9f6c-41e9-9349-9d87a3728d9b"
        },
        "item": {
          "id": "417a93a2-1d57-41d5-9161-eb47dd7c6bcf",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "236a4b24-d973-4202-90e1-22fa98654506",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 108,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6bb03e6-4e41-4291-94b1-8d6393256f30",
        "cursor": {
          "ref": "77a466e5-b11a-4d04-85bf-66b80ba5c5aa",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "22157d2c-707c-4793-9e7e-6fe0901e3bde"
        },
        "item": {
          "id": "f6bb03e6-4e41-4291-94b1-8d6393256f30",
          "name": "identifiers"
        },
        "response": {
          "id": "d03bae28-a788-4c6e-9300-fab3592ceaa4",
          "status": "OK",
          "code": 200,
          "responseTime": 175,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f5efb9-9c65-4789-a842-db6a05779579",
        "cursor": {
          "ref": "f7ae3ff2-23bd-4287-8a7c-bfe58954f0f0",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "782200ae-9462-4779-9698-a047cdce3e82"
        },
        "item": {
          "id": "f0f5efb9-9c65-4789-a842-db6a05779579",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6e91fef7-4803-4861-9cb4-3a007f8f44b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5344aaaa-392d-4c36-9e11-8ee940433e06",
        "cursor": {
          "ref": "6ba6f8a7-3917-4528-83a7-2d83887ed67f",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7f135fa9-caf2-4fb2-9817-0341a83cbf2f"
        },
        "item": {
          "id": "5344aaaa-392d-4c36-9e11-8ee940433e06",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "307d1c30-6c41-47dc-894e-9a93f0d8b706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99bae874-0ce9-4540-99fa-5606e45e9137",
        "cursor": {
          "ref": "8e177c9f-04a1-4d6d-838d-3405c061a4fc",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0c8b56e9-763e-4f91-a458-d330ca88a26c"
        },
        "item": {
          "id": "99bae874-0ce9-4540-99fa-5606e45e9137",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "401bd64e-bca7-455d-a3c0-53cead4ed0f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "614abb83-8bd3-43de-a239-5df5a3bfc1f7",
        "cursor": {
          "ref": "83cf7672-8f29-4d34-8793-707c01de3e06",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "33963855-0f9f-4db7-a641-6e12958406e2"
        },
        "item": {
          "id": "614abb83-8bd3-43de-a239-5df5a3bfc1f7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d36b61ca-8b63-4dcd-91f5-3d7048da4af2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8598e6d1-2336-4cf7-a31c-47ca031f084e",
        "cursor": {
          "ref": "1109e664-95c5-42df-9dd3-912d83be72d1",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "874e2fff-1d9e-42b7-9a41-8625f4740ba3"
        },
        "item": {
          "id": "8598e6d1-2336-4cf7-a31c-47ca031f084e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ae8e9b2f-ecda-4ea4-aece-cca3275b7acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c3f827-014d-4804-ae16-a47bcd40a94d",
        "cursor": {
          "ref": "449075d9-9960-4072-ba0c-022e6351cfc0",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "55448b8f-84ba-4348-ba21-7827883036ed"
        },
        "item": {
          "id": "c9c3f827-014d-4804-ae16-a47bcd40a94d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "109f3aa1-0dba-42e8-8393-ce688076799c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b690f8e-dd26-4dc0-8795-a2eed6efabee",
        "cursor": {
          "ref": "09d09ef4-8927-46d0-9ad3-ff86559916d5",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "58ee41a0-2efe-4f30-a06b-21a2681a62f7"
        },
        "item": {
          "id": "8b690f8e-dd26-4dc0-8795-a2eed6efabee",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5838bd1d-fad2-4684-988a-2efe5e6cbcbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26859d07-e654-43bc-bc9c-44ae12113ce4",
        "cursor": {
          "ref": "26bd9d80-c674-493c-b44a-cd078c6409d8",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "59d9d044-4e72-43dd-a837-1b002c4b717f"
        },
        "item": {
          "id": "26859d07-e654-43bc-bc9c-44ae12113ce4",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0989487b-80f9-4350-a5f4-474ba6e4496c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f790c5ca-6d78-4d7e-9163-99c4dfea41b9",
        "cursor": {
          "ref": "5c8fd67b-4b89-443b-9d0c-8cc2bbef6cd9",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "32f0c547-850e-4179-b910-da476cec0cdb"
        },
        "item": {
          "id": "f790c5ca-6d78-4d7e-9163-99c4dfea41b9",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d0ab3104-d3ee-4df1-b305-09682b98f708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98abe363-53d0-4d30-b2dd-8e85cdb6c6a6",
        "cursor": {
          "ref": "aceca946-678e-4c14-88f0-14b725555117",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "863f9fe4-0934-4434-bc40-adc00bc7e0ed"
        },
        "item": {
          "id": "98abe363-53d0-4d30-b2dd-8e85cdb6c6a6",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "801c9c23-b18c-4c0c-aeaf-2d605bf88263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c13eb73f-e0a5-43c5-b939-8447f7e7f074",
        "cursor": {
          "ref": "c2984cb6-e2ca-4cc3-b9b3-5a03b342fa42",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "51e989f9-4476-4f11-85a4-e1171d23dc74"
        },
        "item": {
          "id": "c13eb73f-e0a5-43c5-b939-8447f7e7f074",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c4dce893-50f0-4ce2-9c8b-47aa03678d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd35b09-f5c9-4ab1-a076-6a1726f7b3d4",
        "cursor": {
          "ref": "7047ac0b-09ce-4233-b40c-a80cc13e48b4",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4f03b69e-f713-4c1e-96fb-c89000f98120"
        },
        "item": {
          "id": "edd35b09-f5c9-4ab1-a076-6a1726f7b3d4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d429cb05-b809-48b0-b38e-5043786ff9c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f4a791-42e0-40e1-94ef-eda314eba145",
        "cursor": {
          "ref": "85d57e8e-b709-4136-9876-10b3bc724081",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c6f5d2c5-643f-4f0e-b181-29259a5356af"
        },
        "item": {
          "id": "87f4a791-42e0-40e1-94ef-eda314eba145",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ebce64cf-769a-4a51-9169-13a770f19c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef9d48a-de00-464e-b748-3e975b76be06",
        "cursor": {
          "ref": "02d6c6ca-376c-4d01-b4d3-0a5a08cbd5dd",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1ee04b90-0d93-4bb1-9593-584f08d160cf"
        },
        "item": {
          "id": "0ef9d48a-de00-464e-b748-3e975b76be06",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b48e8205-25f2-4d5a-a51b-093cdd2b0160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e3d374-afb4-47c3-be8c-81d16c803770",
        "cursor": {
          "ref": "26a7cbee-5228-4752-ae09-6568157872a1",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "26abbda7-4191-4262-91f0-25c3ee914be1"
        },
        "item": {
          "id": "f8e3d374-afb4-47c3-be8c-81d16c803770",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c4b76f59-cdf8-4fd0-87cd-5159ca4d1c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e6d5af5-b60a-474a-afdc-45eeaaaec4cb",
        "cursor": {
          "ref": "3724687d-1bc7-42c1-977f-c2ca585d78bd",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d34cf50d-992f-4394-bce6-45fb932b46f6"
        },
        "item": {
          "id": "4e6d5af5-b60a-474a-afdc-45eeaaaec4cb",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1a21ec07-b438-46f3-b451-afb18c25dc1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8848af99-4b23-43c2-b6ea-1f5699ef40b6",
        "cursor": {
          "ref": "15898fad-a1e7-44cf-bd2a-821c514da3ac",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ca9936f6-2920-44fb-9786-42064e46bbf0"
        },
        "item": {
          "id": "8848af99-4b23-43c2-b6ea-1f5699ef40b6",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "cfcfb940-1bca-47bc-9223-076c7db3df83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5e7adc-1edf-4a8b-84b3-132796a97af1",
        "cursor": {
          "ref": "94ec2450-c6e0-4990-9a3b-0ffa8786be3c",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "72de7c26-5886-44ef-938c-7ac0fde3560a"
        },
        "item": {
          "id": "3c5e7adc-1edf-4a8b-84b3-132796a97af1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "292318f0-cad7-4213-8a18-699d1c45a006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c97dc57e-6aa4-4022-8925-423d55de40e5",
        "cursor": {
          "ref": "9a12bd8e-8398-4347-ba24-44c05233beea",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "32aa5106-9b1a-4eb4-84fe-e5109dabccb7"
        },
        "item": {
          "id": "c97dc57e-6aa4-4022-8925-423d55de40e5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9cc618a4-875b-4223-9e51-bc6a996483e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1351e939-237f-4b53-b842-fc20407d687a",
        "cursor": {
          "ref": "c52a6dff-7b28-4f99-8495-55c235e711da",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f17ac9f0-2af8-4399-8a64-510f009f271d"
        },
        "item": {
          "id": "1351e939-237f-4b53-b842-fc20407d687a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7a7464f4-cac9-4658-a6c0-cd1e644a7cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2746a045-b054-439c-a6be-85c296902a81",
        "cursor": {
          "ref": "874f866a-c275-45db-b5d3-77cbf6d9b44d",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3bf39b87-a21f-46e3-896a-24a52bb3f6fa"
        },
        "item": {
          "id": "2746a045-b054-439c-a6be-85c296902a81",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9350d78a-1c1d-43dd-a280-53c827db57b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29fb53f4-07ab-4542-96fb-91c7ff033fd1",
        "cursor": {
          "ref": "1285f532-30b7-4d3c-a98d-93c48a303c7b",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9b4d9cd3-7b8c-40a6-833c-fb4baa6ef30a"
        },
        "item": {
          "id": "29fb53f4-07ab-4542-96fb-91c7ff033fd1",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9d3a4216-5e4f-425d-8363-7f3d08818d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb3f160-c888-4742-87a3-f8471b51ec96",
        "cursor": {
          "ref": "a6bb8e61-de4a-4485-bda8-bcbd9fd11fe3",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "68179482-d37d-4cd3-98dc-b0e9430412ed"
        },
        "item": {
          "id": "1eb3f160-c888-4742-87a3-f8471b51ec96",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0e5403b5-a480-4f1e-b584-f374447ec2a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "742afa40-7857-4133-af83-bd57e6dcdaad",
        "cursor": {
          "ref": "237e489f-25dc-432f-9332-ce7ee0d5a63f",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3222a5f9-ffa9-4681-a0b2-1071161c9210"
        },
        "item": {
          "id": "742afa40-7857-4133-af83-bd57e6dcdaad",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "957675b4-9bbb-473a-a6aa-f30b1fab5635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2969ceb9-72ec-4482-a8a0-fb156ab7f54f",
        "cursor": {
          "ref": "e09a05ec-0aa8-4c6a-9620-5315bd0846ea",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3033501f-3bd2-4673-8793-b65066bd7f71"
        },
        "item": {
          "id": "2969ceb9-72ec-4482-a8a0-fb156ab7f54f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "22c6d17f-a958-41fb-a912-61550f0ed145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4e4bd4-a58f-4431-8f7e-d24915964ca2",
        "cursor": {
          "ref": "498f8014-dc70-4712-93c4-b3989649a621",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a6a5e0d9-71b2-419e-acc8-fab6149b9b2b"
        },
        "item": {
          "id": "1f4e4bd4-a58f-4431-8f7e-d24915964ca2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3efb4fe4-394c-444f-8451-43e863db3c2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455066a5-d61a-455e-8a04-589484ff076a",
        "cursor": {
          "ref": "78eacd1a-183e-4524-ba8d-593ef7fa9dc5",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2109472d-7949-4d45-b278-22da7be680c8"
        },
        "item": {
          "id": "455066a5-d61a-455e-8a04-589484ff076a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7446c329-5b14-475d-98ec-5f8f36bff2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a120dd-2cf1-42f8-b692-fa5b24c3c94f",
        "cursor": {
          "ref": "37da8b99-92fa-4267-9ed5-70403fe8e2ca",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e76cc079-4fc4-4c76-b184-7e7757053995"
        },
        "item": {
          "id": "85a120dd-2cf1-42f8-b692-fa5b24c3c94f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c2a1865f-c80a-4fed-b6b9-3bd2d9c7b3d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b71a273-8801-4247-a267-b7a56eb1f02e",
        "cursor": {
          "ref": "5ec710a2-12a2-4e16-b798-a6564e720a8a",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "756947d3-09c8-458b-8fd5-f598d4bf3ef6"
        },
        "item": {
          "id": "3b71a273-8801-4247-a267-b7a56eb1f02e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ee9dcd21-96de-49ea-b5d1-e1539c0bcf7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99fc5310-eda7-4fcb-a110-d5b72b8d06e6",
        "cursor": {
          "ref": "964fffdf-3be3-4b37-b389-432e2195c784",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "cc1aceb2-8a5e-4965-ab79-e2371cae9110"
        },
        "item": {
          "id": "99fc5310-eda7-4fcb-a110-d5b72b8d06e6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a5082445-4243-4d03-9d6a-b5e1e43cf866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef91981-ae6d-44f8-ad98-9516e745b3e9",
        "cursor": {
          "ref": "c2b2cab8-c678-4979-9f87-f22ceba5c735",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "35c7a602-7726-476c-b2b5-b1983d6053c4"
        },
        "item": {
          "id": "3ef91981-ae6d-44f8-ad98-9516e745b3e9",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "08721b3d-393e-4b5d-a4bb-67d06c1215ac",
          "status": "Created",
          "code": 201,
          "responseTime": 868,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d8019bc1-fdb0-4c82-9ee0-b5430344d21d",
        "cursor": {
          "ref": "cbb759a5-c3fd-4795-8b02-bbc92e503908",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b0c6b8d6-714e-4ec5-96d8-48036daf0e3a"
        },
        "item": {
          "id": "d8019bc1-fdb0-4c82-9ee0-b5430344d21d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f54baa4f-f07e-49e9-bc82-328f68e0f2e0",
          "status": "Created",
          "code": 201,
          "responseTime": 378,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "13b119b1-7162-473b-8263-a03447b060ef",
        "cursor": {
          "ref": "5cd516fa-04ce-47ad-b414-a6068197d3a4",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8c4629dc-0c88-4a2f-8426-1700010542ea"
        },
        "item": {
          "id": "13b119b1-7162-473b-8263-a03447b060ef",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c213ff43-f5c5-4b4b-bdb8-324b1039abea",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "10945b96-e80b-4429-95dd-94cf640e2636",
        "cursor": {
          "ref": "7f38657d-3a86-470c-87be-ae00ef5c5fe4",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "50ee0efe-e1f2-408d-943b-9c77b73118fa"
        },
        "item": {
          "id": "10945b96-e80b-4429-95dd-94cf640e2636",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f2945530-9d51-4c6f-8ea7-9acafc8fc289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c197e6b2-8ba5-4459-b27b-aee1ca709494",
        "cursor": {
          "ref": "abfaae60-745c-4839-b5c9-f956179a5956",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "03d89d29-763a-448d-bb49-d87fa90c5a6a"
        },
        "item": {
          "id": "c197e6b2-8ba5-4459-b27b-aee1ca709494",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d5eb1c0e-83de-4352-b0dc-3838c3346a73",
          "status": "Created",
          "code": 201,
          "responseTime": 378,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "469051ec-d6d1-403e-8c78-916b13fca37b",
        "cursor": {
          "ref": "62932c9f-f940-4b46-a8b7-e8ad78becf22",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ddb487d8-f95e-468b-95ac-830e21289e44"
        },
        "item": {
          "id": "469051ec-d6d1-403e-8c78-916b13fca37b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "35a791cd-e35b-43ce-8796-399a9f1135d4",
          "status": "Created",
          "code": 201,
          "responseTime": 403,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "58524066-99c7-49ab-9714-a351c50bbe3e",
        "cursor": {
          "ref": "d1239c90-d43d-42d0-9d97-96ee461208d0",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d617dc03-72c9-4a58-bed8-8cab18e43bd6"
        },
        "item": {
          "id": "58524066-99c7-49ab-9714-a351c50bbe3e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e7b7e2fd-3d60-46af-865a-a22667ba521d",
          "status": "Created",
          "code": 201,
          "responseTime": 370,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ea3ee327-865c-44b5-b1fb-b18a21e0c5fb",
        "cursor": {
          "ref": "14ea72e2-2e6f-490d-b2dc-ebfd04ecf040",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "37fe6875-5aa4-4dfd-9bae-c98468d45fe7"
        },
        "item": {
          "id": "ea3ee327-865c-44b5-b1fb-b18a21e0c5fb",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5da6071d-96bd-4ea7-8cd9-f65b1293cc67",
          "status": "Created",
          "code": 201,
          "responseTime": 358,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "11508c62-51cf-40a5-b26a-77db2e3cf233",
        "cursor": {
          "ref": "f18a39f9-d71f-485d-a0df-495e2f0615ce",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "aa897deb-2171-46cb-aa9f-988d9726902b"
        },
        "item": {
          "id": "11508c62-51cf-40a5-b26a-77db2e3cf233",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "907be108-484d-4ca7-86be-6b42f8c76b82",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b3c6012f-5b10-4bf4-b7a0-03bf324ea56e",
        "cursor": {
          "ref": "710869bb-c05d-4b1b-bebc-088bf00b1c62",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0119e0bd-a072-4676-a248-6b8be641eee6"
        },
        "item": {
          "id": "b3c6012f-5b10-4bf4-b7a0-03bf324ea56e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bc0e5098-c876-43f5-8e35-5546762e4a1b",
          "status": "Created",
          "code": 201,
          "responseTime": 351,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b73e1b75-be51-40ca-b1d3-021dbbafaa5f",
        "cursor": {
          "ref": "f5f0244d-ec2f-4946-96fd-51768f21633f",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "53b380ef-7bd4-4015-82fd-a3205a5b9423"
        },
        "item": {
          "id": "b73e1b75-be51-40ca-b1d3-021dbbafaa5f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3870931a-066a-4b39-8fd7-8782746ce35b",
          "status": "Created",
          "code": 201,
          "responseTime": 371,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "725452ba-6418-4d11-9564-3101beb85031",
        "cursor": {
          "ref": "4b2f4740-8359-451b-8304-556f11885606",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0a49d64f-82ca-4459-ab20-7a11151e2333"
        },
        "item": {
          "id": "725452ba-6418-4d11-9564-3101beb85031",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "29495e4c-6824-40be-8eb3-b9560f44c546",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0ec170d0-788c-4bfa-9dd4-52ee40c80249",
        "cursor": {
          "ref": "d69789db-0b10-44f0-88a7-9367c5891b60",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a423ee80-8642-45ab-b6ac-fa4dd397d89e"
        },
        "item": {
          "id": "0ec170d0-788c-4bfa-9dd4-52ee40c80249",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "53b8c5ba-96e2-41c6-88ff-7b6bd76a518a",
          "status": "Created",
          "code": 201,
          "responseTime": 359,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "2fffa6a2-f122-4a47-b681-b8b4945b1819",
        "cursor": {
          "ref": "ec9df9ef-c620-4822-be85-0f8bac72d7f7",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f6b6ab66-4303-4e23-8db7-f58f7b06877b"
        },
        "item": {
          "id": "2fffa6a2-f122-4a47-b681-b8b4945b1819",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "766949e7-8ae4-4d73-8a8b-ef82125b99f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "264d854d-07e8-467f-a442-387761ec4f49",
        "cursor": {
          "ref": "4176ab44-151c-44c0-b742-92fe6b2ab22c",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7244fee3-b6b3-4e55-bc3c-f06e81acb6f6"
        },
        "item": {
          "id": "264d854d-07e8-467f-a442-387761ec4f49",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4cc4cc71-222f-41ad-b562-69e9e6e0213f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feed5167-4b34-4173-b83b-2965ceff4e4f",
        "cursor": {
          "ref": "b3fa97a9-f7f1-4a7f-95fa-51342be25bf3",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "03f37e2e-7cf7-4ee3-8532-17b10b0cae9d"
        },
        "item": {
          "id": "feed5167-4b34-4173-b83b-2965ceff4e4f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8b5dcc78-c209-48bf-8fd8-eb243b8838f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5dda3fc-b2d9-46bf-a3c2-92c068cac2ee",
        "cursor": {
          "ref": "a190c29a-fdaa-4e08-b56f-4fff2b91d5b5",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fb3bdf0d-5e9a-42ce-a0a9-9f3e3f74f43e"
        },
        "item": {
          "id": "b5dda3fc-b2d9-46bf-a3c2-92c068cac2ee",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "11a11964-7d76-41cc-8b3f-23b0924fd413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f1563bf-cffc-4ffa-b74c-7c7c2762a5f5",
        "cursor": {
          "ref": "3871923f-c199-4891-bd05-29f7a18d6eb0",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2a0da8a6-20ef-4f7e-bedc-250d1d68a69f"
        },
        "item": {
          "id": "6f1563bf-cffc-4ffa-b74c-7c7c2762a5f5",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2457faf3-aa44-462c-9fed-c6608f736afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722f24da-c34a-4987-85d2-da19e724a690",
        "cursor": {
          "ref": "8af4c8b7-6040-4409-9767-a4e5bbc27d2e",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b14b54c3-bcf6-4172-a8df-3466a82b5be2"
        },
        "item": {
          "id": "722f24da-c34a-4987-85d2-da19e724a690",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d54a731c-1f94-4dee-bb0d-ed6b07dc84a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608e23b3-dfc2-4aa4-9ff5-ac8c8114cd06",
        "cursor": {
          "ref": "e2c101c6-f8cd-41eb-a826-347f18cd1043",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "326040a9-2b93-4834-b6a1-f9c30cb54112"
        },
        "item": {
          "id": "608e23b3-dfc2-4aa4-9ff5-ac8c8114cd06",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3773a7b2-63d8-415e-bdde-4316f70b6770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73af536-f864-498a-86f1-29a77c8e2fa9",
        "cursor": {
          "ref": "a111c59f-84d4-44ad-b2aa-d8d9fcb597e3",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "419505bf-2dd7-478d-9315-8be7883ac6dc"
        },
        "item": {
          "id": "e73af536-f864-498a-86f1-29a77c8e2fa9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3859d2dd-a207-4c8f-a76a-48b9ec415113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6236e8b7-1372-49f6-a911-ed608722c83d",
        "cursor": {
          "ref": "b14397d1-4978-4165-a87c-b5c32eecb871",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "407e60b9-e4f6-420b-98a8-39c9acf7127d"
        },
        "item": {
          "id": "6236e8b7-1372-49f6-a911-ed608722c83d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9dc6afc3-7933-419f-a99c-b3a97e82cc87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd3df11-4338-491b-a971-f9ac7476a7b8",
        "cursor": {
          "ref": "c670292f-3024-4ef1-a80e-02029e4486e9",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0f23495b-97d0-4984-93d7-58850adae561"
        },
        "item": {
          "id": "dfd3df11-4338-491b-a971-f9ac7476a7b8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "bb91746b-c456-46de-b908-ee68e8dae93c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44836f9c-bfe0-4fef-9ac9-5e5283ea2c50",
        "cursor": {
          "ref": "bd0a3b1e-415f-4a51-ba6f-157e71d712d0",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "35e6460f-0b1a-436b-b0bf-f739692c8a35"
        },
        "item": {
          "id": "44836f9c-bfe0-4fef-9ac9-5e5283ea2c50",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "874b1146-fb9e-472b-ba9f-24a79fbbb805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ffadd8-7ef0-4628-8517-076b903f0a19",
        "cursor": {
          "ref": "e8bc56d1-583f-43cd-82dd-a42010c95cf4",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "67e6932d-90de-4960-862f-9057da5b3a56"
        },
        "item": {
          "id": "f0ffadd8-7ef0-4628-8517-076b903f0a19",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "cf1de920-2a0a-4a2a-9e36-26f7e1552d6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3f7afa-58c2-46d7-a49c-9034cffb4a59",
        "cursor": {
          "ref": "4bc250c2-6fb8-46e9-a929-207eca1f2713",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0939291e-1474-4169-adf3-3d9566c66f35"
        },
        "item": {
          "id": "8b3f7afa-58c2-46d7-a49c-9034cffb4a59",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "47b94b6c-b2bb-4001-be65-3562d8afc39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d56c315d-30fa-4bff-8b44-96a300a8af3e",
        "cursor": {
          "ref": "dd00b6b4-5ba8-4c7e-87d3-558ff2b2ef2b",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "bd31ef19-b528-4e9b-9ec5-ad812b9c559e"
        },
        "item": {
          "id": "d56c315d-30fa-4bff-8b44-96a300a8af3e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "085d4089-bebf-4f2f-a54b-331f0fe0b75f",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "7c4720bf-43fb-44a3-9c5c-4678fee6fdba",
        "cursor": {
          "ref": "cee84a31-a8f6-4703-acba-71c12798af5b",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "31637b92-da79-487c-b08b-a98c60f4bd21"
        },
        "item": {
          "id": "7c4720bf-43fb-44a3-9c5c-4678fee6fdba",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "76a2a9bf-fa9b-477f-b28c-bc53fc174467",
          "status": "Created",
          "code": 201,
          "responseTime": 350,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "f510daff-beef-435a-b389-690520cc839d",
        "cursor": {
          "ref": "9ba0c51c-9910-4093-b0bc-1ac0bf77e14b",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6ba670d9-a14e-44ca-b788-a8cfeac05349"
        },
        "item": {
          "id": "f510daff-beef-435a-b389-690520cc839d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a66b20fa-e5a7-4d96-8a56-0f9e5168413c",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "cb143f57-7fdf-4d94-a4ee-8739ac7aae08",
        "cursor": {
          "ref": "22dc2f1f-0dbf-4a38-ae73-367fd633fab8",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "de3d69fd-c57b-4773-9f86-016f5c972283"
        },
        "item": {
          "id": "cb143f57-7fdf-4d94-a4ee-8739ac7aae08",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "37c07a9c-97af-4408-b271-8e99103c8b59",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "eb881d50-e11d-4666-aa0f-31eafe392d75",
        "cursor": {
          "ref": "66025757-73ee-44ba-9afa-70c9004d9b0b",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "109a8bfc-f297-438a-9541-6c7df49187b5"
        },
        "item": {
          "id": "eb881d50-e11d-4666-aa0f-31eafe392d75",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d8a85742-45af-4e2d-bd97-a20de14ac279",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "18e6dea8-b96a-49cf-bd46-9604e0bb7096",
        "cursor": {
          "ref": "45a1fdf0-1517-4df5-86d1-7eb97c82f8dc",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "045fef5f-0ce6-403c-9381-712eb8af420d"
        },
        "item": {
          "id": "18e6dea8-b96a-49cf-bd46-9604e0bb7096",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "988dd18e-3f49-44b9-bdd8-5186dbee9bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d787580-c5b4-4842-9252-886ebb1da5d1",
        "cursor": {
          "ref": "006c99d4-bf37-41d5-8801-a109b2569b8c",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "05b2542a-13cd-491d-8d03-7405b6fc3ccf"
        },
        "item": {
          "id": "9d787580-c5b4-4842-9252-886ebb1da5d1",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5268c829-2b76-453a-aec3-f10e14ce5428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc2dfcb8-5391-4587-bb39-ba08f6e66e5d",
        "cursor": {
          "ref": "722ce439-386c-454e-b938-79cfa6eb5a96",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "442d87c2-ed0f-425c-a79a-c324a4116a01"
        },
        "item": {
          "id": "dc2dfcb8-5391-4587-bb39-ba08f6e66e5d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "37ee483f-13fb-4fae-8565-954e5566a41c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00077e8c-0239-4c58-a082-2ff3ab2146b2",
        "cursor": {
          "ref": "052a616f-7850-445e-aa47-e3178447adb2",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4fb4ced0-60dd-4c01-9c55-03449eecdff1"
        },
        "item": {
          "id": "00077e8c-0239-4c58-a082-2ff3ab2146b2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d14ecbf2-b9fc-494c-8ad1-b23fb2de98da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b854844a-8f68-411c-a9a9-d3d45c31d3ee",
        "cursor": {
          "ref": "ff7af1c5-2afe-448b-8d84-23b9df3f2e78",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "80b479ec-7d57-44aa-9a48-1802db586405"
        },
        "item": {
          "id": "b854844a-8f68-411c-a9a9-d3d45c31d3ee",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f10a99b8-21e7-4f66-981f-cd39b286b8ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16be18c6-682e-4d5f-98bb-569874f5a9bc",
        "cursor": {
          "ref": "e92a01ae-e51e-479f-afa2-f82ed5fec14e",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3c0b8f3a-6386-46b3-968c-4662b0b7e357"
        },
        "item": {
          "id": "16be18c6-682e-4d5f-98bb-569874f5a9bc",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "59c1d3cc-d206-4636-bba4-727d4952da27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ddf4a38-68c5-4a59-9b6b-194924031234",
        "cursor": {
          "ref": "85e35fd1-42b9-4c8a-a259-80a63e0c8a22",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "72e4707a-2a1d-45d2-a826-e8a5bf33aac7"
        },
        "item": {
          "id": "5ddf4a38-68c5-4a59-9b6b-194924031234",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bb1f6702-7c72-4d42-a6af-be6063f0fb7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f846b4c-7690-415c-9ca4-c7d7b47092ed",
        "cursor": {
          "ref": "b074cb2b-d711-4db9-b2dc-69208de4ccc7",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2d299605-cd5e-4d0c-bd33-8b476c678e6f"
        },
        "item": {
          "id": "5f846b4c-7690-415c-9ca4-c7d7b47092ed",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6e4af6d9-6251-4841-bcd5-f70774e31bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98db1e30-01c8-409c-a53e-50786049df50",
        "cursor": {
          "ref": "298c0ca6-2d32-4fbc-a9f2-3b39fd3cc09c",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ca241503-7d99-4180-8df4-6d5946623d28"
        },
        "item": {
          "id": "98db1e30-01c8-409c-a53e-50786049df50",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c428ef38-2ca7-42e7-869b-8cd653791ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7eeaf3a-afcb-4e6f-a1fe-8bb6791968b9",
        "cursor": {
          "ref": "8dcca2ef-fb70-4aa7-bafa-d98a45e33d3c",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9ab64d03-f920-480e-8940-b43977855278"
        },
        "item": {
          "id": "b7eeaf3a-afcb-4e6f-a1fe-8bb6791968b9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b957641b-b41a-418d-b705-1e75263ccee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d6fcae-311e-479e-aef2-c9a169f043b6",
        "cursor": {
          "ref": "46e34fe2-23ae-4816-9f15-72d9c42c2f94",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b93917b1-74f3-4342-8338-de6d4669da63"
        },
        "item": {
          "id": "14d6fcae-311e-479e-aef2-c9a169f043b6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a190eaf0-91a4-419f-a2db-bd89eede9bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0622c1f-7831-4b35-b039-23879b38c01c",
        "cursor": {
          "ref": "accd3d7c-17e0-45cc-b35e-0c125192f4f6",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1033f709-442c-4efe-a782-17237ad73492"
        },
        "item": {
          "id": "c0622c1f-7831-4b35-b039-23879b38c01c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "25e47117-1123-4fa8-bded-af9ee278eff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb104ff-fce1-440d-a4dd-b3c38a4de21b",
        "cursor": {
          "ref": "bb517fc3-ffff-430a-a8db-c204ffd3d80c",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5a2c9a4f-03dd-48fc-88fe-535b91a01e8b"
        },
        "item": {
          "id": "1bb104ff-fce1-440d-a4dd-b3c38a4de21b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c3aa727f-8ad5-4664-bb4b-566e225f9b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4667c6-2381-47f4-afc5-bd766b0af7b6",
        "cursor": {
          "ref": "7b580dc0-7db9-44f7-af52-0bd81cd002d5",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c462d659-ffff-460e-9a86-ea5f68a026ff"
        },
        "item": {
          "id": "8e4667c6-2381-47f4-afc5-bd766b0af7b6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6d685edc-32cd-4421-a786-f698329e51e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82fc1847-d2f3-4c78-be79-a1b9814ce045",
        "cursor": {
          "ref": "60a38a33-6a7a-459f-88ce-ffc40952f760",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5603a828-ea2b-479e-a725-1fad1e9577d5"
        },
        "item": {
          "id": "82fc1847-d2f3-4c78-be79-a1b9814ce045",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "11ec0258-eba0-47eb-9c47-01a9f002bc6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f5f535-968e-4957-9410-520dabf6c6b0",
        "cursor": {
          "ref": "f08c0f3f-7a44-4c2f-af64-e9caa4889674",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b7980cca-8bd7-4305-870c-105d8cda2419"
        },
        "item": {
          "id": "61f5f535-968e-4957-9410-520dabf6c6b0",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ac237b47-3c5a-4df0-be2e-afb72a73ac37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac2ed57-8f57-4914-af61-cad20bf970fc",
        "cursor": {
          "ref": "ddea74a0-a2fa-475b-8012-a6ed4d9d4835",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "89bdb07e-94a9-4f48-b9ed-919d9b5d5855"
        },
        "item": {
          "id": "4ac2ed57-8f57-4914-af61-cad20bf970fc",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ef7421ae-359d-4fd4-99cc-684382c76c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f8e20c-09a3-491a-9f5a-475c276fc3a1",
        "cursor": {
          "ref": "db5a948b-9b58-41d3-836e-529f9436527a",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "1f708a96-d653-4f96-a461-e48535c312cd"
        },
        "item": {
          "id": "c1f8e20c-09a3-491a-9f5a-475c276fc3a1",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "00f10d9a-3d7b-471b-96f4-d94d0e9bb6cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ae29fb-712b-469e-a8bb-03e20ffa0e01",
        "cursor": {
          "ref": "d41ab2ff-0019-4a36-85fa-d0225b3826ec",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8da0ce65-2f72-487f-8237-e77a2bbfd599"
        },
        "item": {
          "id": "b7ae29fb-712b-469e-a8bb-03e20ffa0e01",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5e41f764-9980-432a-96b8-094f789f8e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd16d1f-00f0-4a81-afe5-7891231b54f6",
        "cursor": {
          "ref": "8d4c5fdb-a6c7-429c-9fb1-ff897d8ed9d4",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f91f90a1-dd5b-471c-b40b-0470a831d2ed"
        },
        "item": {
          "id": "cbd16d1f-00f0-4a81-afe5-7891231b54f6",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d197d59b-016f-45e2-bf82-81b0ca8580b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9caa4562-6dc7-41b4-b19e-4618b16284f2",
        "cursor": {
          "ref": "e09f136a-4b87-481a-9509-39a7602e283d",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "50a9db49-3722-4bab-ae97-68b4de586097"
        },
        "item": {
          "id": "9caa4562-6dc7-41b4-b19e-4618b16284f2",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "806f61dd-8453-4a2c-96bc-c2ecd820ebcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1dd7bd2-21d0-4935-b066-638faea90c5c",
        "cursor": {
          "ref": "7eb14fde-c4c9-4cc3-b182-86b55f28e316",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "eff91144-a1b5-44ae-98ff-ca8af49f0767"
        },
        "item": {
          "id": "b1dd7bd2-21d0-4935-b066-638faea90c5c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "99fcb12f-c2c7-4391-8f6a-12465e8f2ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22a05d42-e9a0-4f78-b4a3-64f3767a6fa4",
        "cursor": {
          "ref": "b2a41fdf-7491-4281-9632-dbc0e304ce68",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "00f4c225-0a7d-4f3a-9e24-cf5e777a8ea5"
        },
        "item": {
          "id": "22a05d42-e9a0-4f78-b4a3-64f3767a6fa4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b09b3ba9-2226-428a-89b6-dbe01bdf804e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993cdb5c-ff1f-4ed4-8771-301528ae0c80",
        "cursor": {
          "ref": "6a86d31c-1f5d-47e1-b87e-8a1a9c281e17",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c6930df7-a777-41f9-96cb-89d0354b3c5a"
        },
        "item": {
          "id": "993cdb5c-ff1f-4ed4-8771-301528ae0c80",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3f1610cf-1e6b-421e-8213-0f70e06b38d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bae644a-eb39-4b0a-9098-fa16a339d736",
        "cursor": {
          "ref": "e50c3be6-a28e-43d2-8a5c-edb8f44edfb1",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3ec27f42-2b13-42e0-9649-db4d90cb08b2"
        },
        "item": {
          "id": "1bae644a-eb39-4b0a-9098-fa16a339d736",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "56c6b9e9-ee42-4124-858d-d80374190f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ebf1563-3420-458d-9c5c-fc7458bf680c",
        "cursor": {
          "ref": "39050cda-843b-45a5-b326-a257b038973a",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "38ab7438-816a-4abc-aa95-39f4e3a8de37"
        },
        "item": {
          "id": "6ebf1563-3420-458d-9c5c-fc7458bf680c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "594b9841-6a8a-4973-bd5d-b9b80bfc7cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "662344f1-71ad-4405-a1de-e2e65595f93f",
        "cursor": {
          "ref": "e7ab8b55-f899-42bb-95c8-7e97c35a81d7",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "54c63513-f7c7-4c8c-a116-09bdc9a25b0b"
        },
        "item": {
          "id": "662344f1-71ad-4405-a1de-e2e65595f93f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4289485f-95ef-45fe-8d00-13931b25e1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8db40b3-81bf-4acc-bee5-7afe812ee54a",
        "cursor": {
          "ref": "07b860a7-8c4c-411a-b865-c1909ac22f23",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c6fa580e-14dd-4d54-acf0-2fd856566478"
        },
        "item": {
          "id": "e8db40b3-81bf-4acc-bee5-7afe812ee54a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5705ae91-51cb-427c-b4fb-8b4f8a98171a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "277f9e78-c331-45f5-8081-94a944911f57",
        "cursor": {
          "ref": "f5ef988b-c5e9-442a-a0b8-242c6c4fdcdd",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "78065143-421b-4e54-8a4e-452c3830661d"
        },
        "item": {
          "id": "277f9e78-c331-45f5-8081-94a944911f57",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "80099a54-d129-4ea1-8f8a-bd816a409997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03761274-0411-4aa3-a97f-4587e570ea30",
        "cursor": {
          "ref": "7c95ac69-5a69-47d4-ac53-70930df9e814",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b452c014-5758-44b2-b87f-08d792cd2ab9"
        },
        "item": {
          "id": "03761274-0411-4aa3-a97f-4587e570ea30",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "fb8b0b78-b816-4afd-95b4-1ef4e4abda13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba06f8d-44a8-4a05-8664-e34cf6321c76",
        "cursor": {
          "ref": "dae938ea-b28e-413f-8b8f-987db51a694b",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a7b76a41-7ed5-425b-80f1-8b4aa759cbbf"
        },
        "item": {
          "id": "fba06f8d-44a8-4a05-8664-e34cf6321c76",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6b1ee98d-970f-4c6d-bc50-45602582088a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31235eab-d350-4fc7-8449-39bbe0453b0a",
        "cursor": {
          "ref": "6c6e1b71-4ccc-4d81-a10f-ae4eb3fc2925",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "82d6482a-1a4f-44c9-8b97-4bef56b83620"
        },
        "item": {
          "id": "31235eab-d350-4fc7-8449-39bbe0453b0a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "85f54184-f92d-4542-a8c2-8428f0d734ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 107,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f430a60f-7520-40d7-baba-1057f2cc376f",
        "cursor": {
          "ref": "81e64929-8d9a-4b3d-b3eb-76e9a41edf44",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b7df6468-41aa-4807-84e7-d91a51f0474e"
        },
        "item": {
          "id": "f430a60f-7520-40d7-baba-1057f2cc376f",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8d0847b2-90b1-4b3d-866c-e9ed20d7c581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "a36ad30e-2a98-4b30-8ab6-31bb853eb888",
        "cursor": {
          "ref": "8888ea3a-b3c2-4e6d-98aa-c5cfe226589d",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "fd13fb33-4eff-44da-814c-22aec8d8311c"
        },
        "item": {
          "id": "a36ad30e-2a98-4b30-8ab6-31bb853eb888",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2297b551-c861-40a7-bcae-87a986682d9a",
          "status": "Created",
          "code": 201,
          "responseTime": 513,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9552605-a3bb-4bde-a91b-f98b1a055f2e",
        "cursor": {
          "ref": "1204f7d3-d20b-4472-8fc1-35423c2fd6ff",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a4d4269a-4132-4f77-9785-a45faea932fd"
        },
        "item": {
          "id": "d9552605-a3bb-4bde-a91b-f98b1a055f2e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f931de0a-e2d9-4177-883d-2f49cfc83843",
          "status": "Created",
          "code": 201,
          "responseTime": 354,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7229e0b-9f34-441e-9eb2-f50a84d2a0a0",
        "cursor": {
          "ref": "d4a4f77a-1875-44f4-a6ef-06ccdce4e976",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "94293029-5929-4fee-bdc6-b969beb48aed"
        },
        "item": {
          "id": "d7229e0b-9f34-441e-9eb2-f50a84d2a0a0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d44a6994-ae0f-4e1c-be22-4c330b94b560",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae893d47-76ea-442e-9e63-6bae0d8f21dd",
        "cursor": {
          "ref": "66752d41-0871-41a3-850b-cfa9b0dc8344",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b3770342-e5bd-4498-aee2-3d56b770eef0"
        },
        "item": {
          "id": "ae893d47-76ea-442e-9e63-6bae0d8f21dd",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bc1a9925-9481-4f93-8a72-dc4e685dfcec",
          "status": "Created",
          "code": 201,
          "responseTime": 349,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df68270-a6ba-4d26-9135-86c2999556e6",
        "cursor": {
          "ref": "b8d0304e-3a70-4b10-8e8c-a0dd6fb902bc",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5c8b1a1f-06ef-4fff-b554-d5221a46a492"
        },
        "item": {
          "id": "0df68270-a6ba-4d26-9135-86c2999556e6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0d2451e1-9904-4f7b-bad6-470bf0c19940",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-21T00:37:19.284Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-21T00:37:19.284Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "f77dbdc8-0da7-4439-b24d-dfd87d46875b",
        "cursor": {
          "ref": "c04ee3d7-3c95-4328-8fc2-5b699f9451d6",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0eb1e579-05c2-4f6c-b9d6-3aa8b849d2be"
        },
        "item": {
          "id": "f77dbdc8-0da7-4439-b24d-dfd87d46875b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "32109d00-188f-4649-b274-e78e93bf24e2",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32555d9c-ceda-4f1e-a019-fca79cdc8b83",
        "cursor": {
          "ref": "674127e5-529c-487d-8274-211218afe83f",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "10a1ad43-dd26-4b02-bccc-ac14d815079b"
        },
        "item": {
          "id": "32555d9c-ceda-4f1e-a019-fca79cdc8b83",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "590df0aa-25ba-433b-aaeb-36345ecf462e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158717ba-a7f1-416f-b6dc-9067d7ea0890",
        "cursor": {
          "ref": "0cdae500-81f8-4bb6-abe9-7ed29e640d2f",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fb12fb68-d8c6-48cf-a027-62302280f2f9"
        },
        "item": {
          "id": "158717ba-a7f1-416f-b6dc-9067d7ea0890",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "38b0456c-2b87-4868-bd77-7fe87ad715eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54af6250-60be-4111-b472-78909572733f",
        "cursor": {
          "ref": "6eb793dd-8069-4b67-a16b-1a8f9923b2df",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c37e77ab-e493-4730-a0d0-a5e931769ead"
        },
        "item": {
          "id": "54af6250-60be-4111-b472-78909572733f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3ce28497-c437-4089-ab8b-a4ed4d2745a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3492014a-b47f-4021-ba45-4d7a35399357",
        "cursor": {
          "ref": "8f6b60ac-700a-4752-924b-573aa7676576",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e8f111f9-789b-4ee3-99ea-017014acded0"
        },
        "item": {
          "id": "3492014a-b47f-4021-ba45-4d7a35399357",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5ea9ea46-71a2-4f1c-a342-ae52e3550939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36554236-812a-4c15-89fc-0c809069a67b",
        "cursor": {
          "ref": "c098e8e9-f0cf-455e-884d-4a0ebdc35f5d",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0e5f297c-8ace-4cc2-aa4e-508c2cbb7cd0"
        },
        "item": {
          "id": "36554236-812a-4c15-89fc-0c809069a67b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1259ecd9-f192-43d0-b5a5-e78c25e8c011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb21aeb-a9e6-405f-b1e8-cfac1395c332",
        "cursor": {
          "ref": "cdb93747-1b14-4412-8657-2b036549909d",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6ccd0be0-3c54-4cb8-9953-ea2f8fb1917d"
        },
        "item": {
          "id": "2cb21aeb-a9e6-405f-b1e8-cfac1395c332",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d6fcd6e7-7843-448c-8bcc-674acec2d5c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67845f1d-17cb-44db-a76c-8a9c0dbd7f5e",
        "cursor": {
          "ref": "60ab4d67-882e-49b9-a87b-3114cbade604",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9be91731-f4a3-4f0a-bd7c-8387bd42719f"
        },
        "item": {
          "id": "67845f1d-17cb-44db-a76c-8a9c0dbd7f5e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d017cc2f-362d-45f2-b0de-1e1f83015cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bf71eb-3226-4582-8248-d09960018c48",
        "cursor": {
          "ref": "95c4f865-deaa-49a1-abd4-a31c200a0639",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8c749f0a-c6d8-4db2-8098-cf3fcf24d652"
        },
        "item": {
          "id": "05bf71eb-3226-4582-8248-d09960018c48",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b430f8aa-df18-4198-ad57-87e9c9af3a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c8cbf6-97b8-47a1-9645-51b436854787",
        "cursor": {
          "ref": "7c1fada1-bfa1-417f-b022-ebc4106b0ef2",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c10b5bed-267d-4ee4-9f05-ba34ce14cc44"
        },
        "item": {
          "id": "61c8cbf6-97b8-47a1-9645-51b436854787",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6e752673-91d9-4191-a147-2c5d553a9b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780dba7b-cd1f-4ed2-aa45-f707a919e8b9",
        "cursor": {
          "ref": "2e5d765f-35f0-49dc-80d5-bfb9d25253e0",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "63ec070c-2580-4360-96d0-63efe96c93c8"
        },
        "item": {
          "id": "780dba7b-cd1f-4ed2-aa45-f707a919e8b9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3e3cddb8-cdd9-4375-8d4d-b05f23c9d15d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0e033f-417a-44a9-ac76-b5761eb18389",
        "cursor": {
          "ref": "8fced0b6-891b-43c2-a572-c57c2a51e41b",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "906387a9-e871-4845-a41c-5e022a81eb14"
        },
        "item": {
          "id": "1b0e033f-417a-44a9-ac76-b5761eb18389",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0b2ff8d2-79ae-44e6-a585-97cd798c0850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3c75f1-824b-4094-8ac8-830109a3bd32",
        "cursor": {
          "ref": "6065264d-084e-4a80-a68a-60611afb1a2a",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "42a946d2-2489-48e3-ac33-f51fe3129fa7"
        },
        "item": {
          "id": "7f3c75f1-824b-4094-8ac8-830109a3bd32",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1d4eeaab-c960-4e15-9cb6-5d05bf3f4a33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd0574b9-5743-4b59-81d6-bff95205ea6b",
        "cursor": {
          "ref": "b7ccaeec-50bd-47f2-8d1a-587cabc25312",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "790be9b6-a6eb-4cff-94f0-a0a058adc5e6"
        },
        "item": {
          "id": "cd0574b9-5743-4b59-81d6-bff95205ea6b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "42dda3a6-d28c-42de-a050-8e6dd9bdc6a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b669a8e-09af-4baf-9583-477c19c24254",
        "cursor": {
          "ref": "43c6a8fc-eb1b-410a-952e-1bf97d013868",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d4ee01ba-82fa-41e3-a686-d0771b1eae99"
        },
        "item": {
          "id": "6b669a8e-09af-4baf-9583-477c19c24254",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f59172b3-221d-4a6c-b5de-fd1ee9b9db6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 135,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "2c930ada-8a56-4cee-8e85-ba5fac364b82",
        "cursor": {
          "ref": "b1d0d415-6129-4ef7-a0d5-6b570358f158",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0f646284-0d7b-47f8-950c-84ee23ff20bd"
        },
        "item": {
          "id": "2c930ada-8a56-4cee-8e85-ba5fac364b82",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4d711181-77ec-4dfe-9292-88cbe476adfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67aeb636-a716-45de-81dd-28d68fbb8fa8",
        "cursor": {
          "ref": "01b16345-c90a-4818-99dd-85807eed960d",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8c27d5e0-069c-46f8-a001-fbd4d09c7741"
        },
        "item": {
          "id": "67aeb636-a716-45de-81dd-28d68fbb8fa8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "be2fa91f-f0ae-450e-ab89-ba9d326053f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6c8afa-5040-4892-81dd-a8f2ece54cb9",
        "cursor": {
          "ref": "332953ad-2a26-4cf0-a567-dc65dd8f8ece",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1c4035d8-3299-4c9b-bc15-e125a9dc2a08"
        },
        "item": {
          "id": "ab6c8afa-5040-4892-81dd-a8f2ece54cb9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "55422dd0-6719-4c96-8afe-4cb7cffed2f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b39045-56b1-4817-a67e-8a7e3fac72e3",
        "cursor": {
          "ref": "2f7e0149-b748-4640-8700-9b27d1e7427e",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e255ee48-f4ab-4de1-9d73-0d175b11b64e"
        },
        "item": {
          "id": "97b39045-56b1-4817-a67e-8a7e3fac72e3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bd471381-7d73-446c-acef-f5b5f88207e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb78530-f7cb-4804-b61d-79b917632387",
        "cursor": {
          "ref": "5f0ad66f-856b-45d6-ab1e-c3c7cfdf4c27",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6e47df47-4d0d-4c08-8224-8e208935c289"
        },
        "item": {
          "id": "ffb78530-f7cb-4804-b61d-79b917632387",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7378717b-97c7-4a39-b375-a77ef62a789c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d73139e-d94e-4336-854f-6f813dc14609",
        "cursor": {
          "ref": "d9146140-6d33-4709-bf02-4cc0a8eb9e2d",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9c4dfb32-1660-41c5-8da8-34e5046dbb2b"
        },
        "item": {
          "id": "8d73139e-d94e-4336-854f-6f813dc14609",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1f613ba3-0851-4989-9ffa-b87ab3f03dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3122e216-c453-432b-b909-654d1c63ba70",
        "cursor": {
          "ref": "812a5a6a-86df-4aee-ac1b-7499d461ecba",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "bc615dc9-08eb-4597-bebe-11fe8d0d135d"
        },
        "item": {
          "id": "3122e216-c453-432b-b909-654d1c63ba70",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0e295966-8413-4add-a108-cf8500700ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87b8be6-1a83-45b7-a58b-0074ed55713a",
        "cursor": {
          "ref": "e66f14b2-674e-4b3d-a160-fdaa441e754e",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a406be89-afaa-4d23-8cfd-61be365778ae"
        },
        "item": {
          "id": "b87b8be6-1a83-45b7-a58b-0074ed55713a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d6777eda-8450-4922-b1d9-92fca5d0963e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ccab7a-01cd-4807-ba97-cd5052d92677",
        "cursor": {
          "ref": "ecb869da-d9af-4c97-9d1e-6d4643640aa0",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "524b4981-408e-4e65-aa33-807f64fd7010"
        },
        "item": {
          "id": "44ccab7a-01cd-4807-ba97-cd5052d92677",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c1b736c4-b3b7-4049-866d-4ce28a7c22fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60687412-fedb-452d-9a02-ad5fe491ea5a",
        "cursor": {
          "ref": "c9dada9c-f3f4-48eb-ac53-04af0259469f",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0cd672c2-7709-40c1-8b99-49cd46d92ded"
        },
        "item": {
          "id": "60687412-fedb-452d-9a02-ad5fe491ea5a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6a63683e-a5f2-4010-bf28-5beb00c32a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81b5de5d-e10c-4f82-8bfb-7f00a1ddfc30",
        "cursor": {
          "ref": "5d43d2c3-0f5a-43f1-aed9-b4aa5a11d100",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "bd852a94-af86-4813-8c6b-f6b058fac3b8"
        },
        "item": {
          "id": "81b5de5d-e10c-4f82-8bfb-7f00a1ddfc30",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a933855a-9b96-489c-87b5-1ecf3c3e39c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f35441b4-f31c-40fd-87a7-b7d5e69b88e2",
        "cursor": {
          "ref": "c1da5530-d328-441e-805f-afc3282e3004",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "22202661-3736-4f16-9c63-464a498f04fd"
        },
        "item": {
          "id": "f35441b4-f31c-40fd-87a7-b7d5e69b88e2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3cbd364c-b117-4aca-9ed0-da16152ed999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ee49b0-56ea-420c-96f9-32a1c93ba4df",
        "cursor": {
          "ref": "dc6db3b8-e147-4720-ae68-0a095304bffe",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f8daee06-03bd-46bd-897f-b57d675fc7b4"
        },
        "item": {
          "id": "18ee49b0-56ea-420c-96f9-32a1c93ba4df",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2acd59a1-2416-4869-80d7-a448766dd051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b200b3-d150-475f-a5e3-3982453fc16c",
        "cursor": {
          "ref": "318557a3-9238-4283-879d-a4e5a3687470",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "33e19ea4-86b5-4ca2-89ef-ba42ae920bd1"
        },
        "item": {
          "id": "a3b200b3-d150-475f-a5e3-3982453fc16c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "01da9579-2c62-40d0-97ee-d7a74a7fbc6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19afb84c-7b86-4cab-a8e9-6eb7a094aa47",
        "cursor": {
          "ref": "f01f683a-62d2-4fe9-b391-631590a495b2",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d249a4cc-abdb-4566-b430-c401c3c32a20"
        },
        "item": {
          "id": "19afb84c-7b86-4cab-a8e9-6eb7a094aa47",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8dfe182b-c9a0-4656-ae92-1ce788b85bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f29d349-b1fb-471a-a755-add3e2a720d2",
        "cursor": {
          "ref": "700f0edf-6677-4411-9656-162802edf4b5",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1362b9b4-0b24-46bf-8c94-bd09160b13d0"
        },
        "item": {
          "id": "4f29d349-b1fb-471a-a755-add3e2a720d2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "af9eb60c-f497-4877-b988-03448fd04350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b51d435-17ec-4acc-88a1-48ac9219f648",
        "cursor": {
          "ref": "2e0067ff-ed99-4498-81b4-858bedad1811",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "920a2cd0-7b92-40d6-af93-636b8206e29e"
        },
        "item": {
          "id": "5b51d435-17ec-4acc-88a1-48ac9219f648",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "360fec33-bec1-4e26-8305-45e863f79289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e0ef91-45d5-49ea-a187-2f54a88fbb95",
        "cursor": {
          "ref": "6abac0d0-a2fa-4a92-83e5-5d13f8236e2f",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "fa49b3d2-a691-410a-8a2c-050e0289d7f3"
        },
        "item": {
          "id": "c9e0ef91-45d5-49ea-a187-2f54a88fbb95",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "c730874a-a4bc-4cb5-a086-92416bcb2b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76906e0a-7d03-4f2a-bf12-6fddd96d3150",
        "cursor": {
          "ref": "e2985933-6d9f-4ed5-b571-fb6a1675b2e9",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1459e520-13dd-4dae-8724-7c9becc78b5c"
        },
        "item": {
          "id": "76906e0a-7d03-4f2a-bf12-6fddd96d3150",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "96aaea16-febc-416f-98b4-12a1a6fbba3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba50c6a7-51a7-416b-b0aa-f9bb92b2ce1e",
        "cursor": {
          "ref": "c3b1d6e3-9070-4c0d-9316-d0e279178cd9",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "43617faa-b6e4-4ec9-acf3-dc13d27dbbf7"
        },
        "item": {
          "id": "ba50c6a7-51a7-416b-b0aa-f9bb92b2ce1e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f2b52b82-e2a6-4939-af32-710e54a0ca14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed01803-7069-4717-b16b-57095ccb7e2c",
        "cursor": {
          "ref": "036c0a29-0596-4536-89d8-e5d9d81ff128",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9195ae01-f096-46c8-9ae0-fe3b71f755de"
        },
        "item": {
          "id": "eed01803-7069-4717-b16b-57095ccb7e2c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "24148402-46bc-44ae-9f60-31477d45fc22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab2d2f21-ef45-4789-87f8-09a3350beb0b",
        "cursor": {
          "ref": "9885de7b-fd5f-4c32-850a-fa3c4131e882",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4be40720-e809-4680-952f-f9b276a171df"
        },
        "item": {
          "id": "ab2d2f21-ef45-4789-87f8-09a3350beb0b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "10972314-ffef-4edb-b489-ec00daaf8fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465164e1-5b17-4b08-bfab-595047f5063c",
        "cursor": {
          "ref": "662f6422-5b86-4d18-8bd2-710af732ae2a",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f3671702-7476-433d-98e4-a3fa4b5eae8e"
        },
        "item": {
          "id": "465164e1-5b17-4b08-bfab-595047f5063c",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "b76ea5c1-430d-49a8-aa11-881cc5a9db9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c23c9d-7439-4382-af3a-2227debab179",
        "cursor": {
          "ref": "0bbaedb0-fd8f-481e-9703-978a829f9fe5",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "129c779b-c88f-47ba-b416-26dbe2985d3d"
        },
        "item": {
          "id": "82c23c9d-7439-4382-af3a-2227debab179",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5f3fa666-699c-4f9f-a540-722dd44d6a6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 107,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d8053e7-9227-4c83-8adc-4630f6eef1f3",
        "cursor": {
          "ref": "a5e702db-1142-4ad3-9b67-d695ea4472a1",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5d6d2ed2-6af9-46b9-a913-9d8f12e04c30"
        },
        "item": {
          "id": "2d8053e7-9227-4c83-8adc-4630f6eef1f3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fa3d8176-7243-4081-b52a-7fd7a069314b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd54574-d79a-4900-99cb-83e038feef54",
        "cursor": {
          "ref": "2f7f7e29-41cc-4f24-b16a-cd39c12e51ac",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c363828d-c18a-4a04-85b2-d5916b7c0193"
        },
        "item": {
          "id": "dbd54574-d79a-4900-99cb-83e038feef54",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f225ce13-9629-4b49-baea-18daa68dbc7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdfe31d4-d485-4d2b-a0c4-6d251c515cac",
        "cursor": {
          "ref": "c1e7d856-25ec-40c6-87aa-c308e17233df",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9e9f9452-90d6-4f33-a40c-6da286fafc41"
        },
        "item": {
          "id": "cdfe31d4-d485-4d2b-a0c4-6d251c515cac",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "250a87b6-0631-4ac1-8585-4a57d7eb89ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9715934b-ffe5-4b0b-9ef7-8a7eef65bbc3",
        "cursor": {
          "ref": "f9f4fe22-846f-4895-b3f2-fb24cab97b68",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "23ac5fed-9d4e-46a5-af21-5fcf0e3ae959"
        },
        "item": {
          "id": "9715934b-ffe5-4b0b-9ef7-8a7eef65bbc3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "facb4fa3-39ed-4b42-a5a7-96617e62cf3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3889443b-9da8-4ea5-a4d6-9cc6d1937128",
        "cursor": {
          "ref": "20c3997e-f717-4783-bd00-5995f649c79e",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d2181539-aaa6-40c4-b456-6dc4b270c0b4"
        },
        "item": {
          "id": "3889443b-9da8-4ea5-a4d6-9cc6d1937128",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5d4102a3-4873-4a6f-b6b2-d9b40d1b8470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9086acc3-6746-4640-8fd1-95569c0c0dde",
        "cursor": {
          "ref": "a516050e-6964-4467-8acf-c0b587e2434c",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0185e299-d35a-49ca-8460-c73f8f503aea"
        },
        "item": {
          "id": "9086acc3-6746-4640-8fd1-95569c0c0dde",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "737b8a27-ba48-429d-9aa5-06889673706d",
          "status": "OK",
          "code": 200,
          "responseTime": 181,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "040a8463-22a8-445a-99e4-a25b711eb0d6",
        "cursor": {
          "ref": "2a21480d-26ae-4ce7-a5a8-05eb3f03fb6e",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ae5966c6-994f-4e3f-a023-1d991cd995ed"
        },
        "item": {
          "id": "040a8463-22a8-445a-99e4-a25b711eb0d6",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "74e18585-922b-4e14-8d67-0bb64b866dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb6affdb-1fe2-413a-bd91-9851c72c6180",
        "cursor": {
          "ref": "c4014908-7669-4f1e-b5df-dcd382b7861b",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f8a3adfa-7734-4747-8db0-852737a4804b"
        },
        "item": {
          "id": "fb6affdb-1fe2-413a-bd91-9851c72c6180",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "202f37ca-fff0-4d6a-9af4-84b7316f20b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cdbc72-6c06-491c-93e3-ebbe49834686",
        "cursor": {
          "ref": "56597f61-d2fa-4cca-9822-4ece7e615321",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "75b56db2-069f-4288-b6d5-95c7850da6d1"
        },
        "item": {
          "id": "e2cdbc72-6c06-491c-93e3-ebbe49834686",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "213abbb7-bafb-4d7d-a553-86726c63cf90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fec40d8-bcb9-462b-843e-af0d7e847764",
        "cursor": {
          "ref": "0ac072c2-8bf6-40eb-904f-b42d40e87925",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "dc8ec600-7ae1-486f-a1d6-7f233b5da4ed"
        },
        "item": {
          "id": "5fec40d8-bcb9-462b-843e-af0d7e847764",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c41b47e0-9675-48a8-9869-359814c5b856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c637d506-e00c-41b1-946f-d0623e961676",
        "cursor": {
          "ref": "5a98dbd4-1cd8-42b2-8908-bfdcbaeb4844",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "dc325ce1-709e-416a-a15d-73c8d1034c66"
        },
        "item": {
          "id": "c637d506-e00c-41b1-946f-d0623e961676",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "68059398-13b0-488d-874f-fd6698399822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a2ab263-6432-488c-b88b-492c7e6314d9",
        "cursor": {
          "ref": "e0322f55-9441-45c3-9d6c-101f07d4928a",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "5382d60c-2b8b-4c15-bcf3-dd70e7ff7824"
        },
        "item": {
          "id": "5a2ab263-6432-488c-b88b-492c7e6314d9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e659abe7-9e4a-41b8-a1f3-91640c175f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab0b82f-348a-4c84-a71b-4076be9c32b0",
        "cursor": {
          "ref": "65e7aed2-246d-4542-b617-affedc6d01c2",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1a3f4e2e-7885-4b22-91a6-363e5f200d71"
        },
        "item": {
          "id": "dab0b82f-348a-4c84-a71b-4076be9c32b0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1cbeff65-a8fa-43c2-a8f8-e4233877115c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e96d04-a0a5-41ef-955f-56e70152f9f7",
        "cursor": {
          "ref": "e9d871c9-8797-4acc-9c8a-ab1581dbf49a",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "663056cb-5252-4dfd-98f3-a03acde39cdb"
        },
        "item": {
          "id": "53e96d04-a0a5-41ef-955f-56e70152f9f7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f9e10d80-d30b-47cb-9504-6a96c0db321d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b38e5a0-b92c-4e6b-af32-4438e0ef8486",
        "cursor": {
          "ref": "eba85629-0cae-4e2d-a376-531b1ca13b46",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4e8f5597-efa0-4e37-b152-632189d65fd3"
        },
        "item": {
          "id": "5b38e5a0-b92c-4e6b-af32-4438e0ef8486",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ce9453c7-9451-46ad-87ce-2899b0beff53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346417b1-79cd-46bc-936d-1ca63b4f41a4",
        "cursor": {
          "ref": "6438e419-55e3-4422-90da-cc220025b5d0",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0a7d6de7-499d-49ce-9c9d-50f5e97dbbb3"
        },
        "item": {
          "id": "346417b1-79cd-46bc-936d-1ca63b4f41a4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "88283ccb-e8ef-4f67-8eda-f18ea4c489d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b426b95-a7f6-4bd4-9fec-39ee8ef90a71",
        "cursor": {
          "ref": "ecec38a9-24b5-4758-a598-18a5d9a20f2e",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "99f35735-3495-4479-8268-06b50622ebd5"
        },
        "item": {
          "id": "6b426b95-a7f6-4bd4-9fec-39ee8ef90a71",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3e4f18f2-5def-4e24-86f3-2923c300c394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55702d67-8a3e-485b-96db-53891deb75eb",
        "cursor": {
          "ref": "34ebe5f7-c54d-460e-a413-9e9a27b5e518",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9e45c8a4-ef95-4363-a527-aa9f288f4a1f"
        },
        "item": {
          "id": "55702d67-8a3e-485b-96db-53891deb75eb",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "717d3464-1cf0-4396-b6bf-7316051f872c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "785bab81-0b3f-4af6-b733-b812f9f2f85e",
        "cursor": {
          "ref": "f4d003d9-48f9-4cf3-99af-4eb04c5f5750",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "cda6937f-a175-4b19-b30a-5c69cb0277bd"
        },
        "item": {
          "id": "785bab81-0b3f-4af6-b733-b812f9f2f85e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f83b04e7-aab5-40c8-a3b5-ef71547f0469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc1c4f84-1a72-4e13-a3e4-c31b78769205",
        "cursor": {
          "ref": "72c04f00-296b-4036-95f2-892c8852cbda",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "76fd5f00-d462-49de-ba52-220dd91fe8b8"
        },
        "item": {
          "id": "cc1c4f84-1a72-4e13-a3e4-c31b78769205",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9160ccc3-24a5-43df-9549-b9f3be8a9b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72da88b-a7f9-4b19-ab20-292b3cfcb2fc",
        "cursor": {
          "ref": "c3db920b-f002-45c8-898a-658568d84495",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "19c05c28-8152-4527-b7c2-5c8590e7dab0"
        },
        "item": {
          "id": "e72da88b-a7f9-4b19-ab20-292b3cfcb2fc",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "bf46382b-e541-4261-b16f-e8e961c3321e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28da60a5-aa1c-477c-b8a5-43e68add2480",
        "cursor": {
          "ref": "c77c8f07-fe0d-46c3-8468-17d3c2bc9e65",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "512c476f-f32a-4bcf-890a-7aea00b7cfe1"
        },
        "item": {
          "id": "28da60a5-aa1c-477c-b8a5-43e68add2480",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d4cd0905-f495-4163-bfd6-eb28ec960025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681e1b6e-b075-4de1-b215-f14f5f503c21",
        "cursor": {
          "ref": "aaa022e2-3f50-4f32-9d80-0b86126a7a4d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3c6e59ca-07dc-461c-aac8-846206809b1d"
        },
        "item": {
          "id": "681e1b6e-b075-4de1-b215-f14f5f503c21",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3c19e665-55db-47cd-95b7-d60d62d8ac06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e36e9d-ee30-4771-9b77-3ea8cf49a4b6",
        "cursor": {
          "ref": "2207701d-be87-4a77-bd92-da6fc6c51d57",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d07208eb-7288-4bfd-94ec-f1a239f9e930"
        },
        "item": {
          "id": "f2e36e9d-ee30-4771-9b77-3ea8cf49a4b6",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f236d838-0eda-42e5-8e21-858c34b087fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "934bf73b-0de6-44b2-9156-320e3d402fa4",
        "cursor": {
          "ref": "e30ca43c-1bf4-4328-a65d-607d2d9ca8b0",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "407e7663-74dd-44e3-b503-d6a27f856f60"
        },
        "item": {
          "id": "934bf73b-0de6-44b2-9156-320e3d402fa4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4c5230e1-5d7f-4939-b25b-8460062f22d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07941b48-5e54-4d13-b2ea-42f2712a4f22",
        "cursor": {
          "ref": "e500f24b-2eb7-4951-b0d6-139037dcd2a7",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9bd6f683-ce6e-44e5-9fbe-7156cd3baed4"
        },
        "item": {
          "id": "07941b48-5e54-4d13-b2ea-42f2712a4f22",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4b1b13d6-4879-45ce-bf29-9f4c86d91403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c01a0b1-b327-4f37-9108-7423e886c53e",
        "cursor": {
          "ref": "fdc0e509-2f2a-45f8-97a4-717c97d5a6ec",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "033eb82b-738d-4939-bce6-e1e02a1cd00e"
        },
        "item": {
          "id": "4c01a0b1-b327-4f37-9108-7423e886c53e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "74b750c5-fc7f-4ab9-86c0-5158ce06ceb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7bdf9b-d75d-40e6-aaa4-97e71db821e8",
        "cursor": {
          "ref": "3eac8d18-f88b-40fc-ae83-e8aa8b0f0134",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1f50041c-e2c2-4574-a20a-3d85f8367203"
        },
        "item": {
          "id": "bb7bdf9b-d75d-40e6-aaa4-97e71db821e8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e175b45a-d197-4cfe-a0e5-a1c949d5f358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e90282-45a7-4fd1-9765-4f65f8d48919",
        "cursor": {
          "ref": "04c4e08d-3029-4894-a1ef-2bda36ded060",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ed826c40-8699-4561-ad1a-33b5534704b8"
        },
        "item": {
          "id": "f7e90282-45a7-4fd1-9765-4f65f8d48919",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b5600137-9691-4a6d-a6ec-d0f47c6777bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4681a4-32fd-489e-9dc6-f656e98e2f6e",
        "cursor": {
          "ref": "e39390c2-873c-42df-9da3-60b7c723f608",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "17de811f-beec-483e-9c12-4930e37060d1"
        },
        "item": {
          "id": "ac4681a4-32fd-489e-9dc6-f656e98e2f6e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "11fb07b5-ba29-49d1-a282-16e0b3c3c518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972653e2-68ef-4791-b812-d0a42d3f56cd",
        "cursor": {
          "ref": "ba6b3090-fe4b-4358-95ce-492db682c50b",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "6bef90ce-8d2f-4daa-979e-b5557ffdf4f5"
        },
        "item": {
          "id": "972653e2-68ef-4791-b812-d0a42d3f56cd",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "799d6325-717d-407e-aa53-a7c466ece01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4738433d-d9a7-4397-b2c9-6085482bbbca",
        "cursor": {
          "ref": "bf78e3be-410c-4b38-ad45-248e298b100e",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f4cb083f-d2fb-4964-819f-eb223ffe208b"
        },
        "item": {
          "id": "4738433d-d9a7-4397-b2c9-6085482bbbca",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "bcba2cf3-4d4c-4c62-abae-266e7824c0bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ffac22-60a8-4d4d-859b-c792bd638874",
        "cursor": {
          "ref": "71cf8fd5-0c4f-467a-86bb-b4c7dab352b2",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0e5365b7-1648-4a6d-8edd-37683c220f1e"
        },
        "item": {
          "id": "f9ffac22-60a8-4d4d-859b-c792bd638874",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1c092fbe-e337-4f97-bb29-8227eb816ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe2567b-ab36-4ab6-bd3d-9ba9808bff7a",
        "cursor": {
          "ref": "1b00af02-6322-414f-ac59-bf7d19454a8b",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5048bd32-3379-4a8c-9cfe-5a27ecba6d7a"
        },
        "item": {
          "id": "0fe2567b-ab36-4ab6-bd3d-9ba9808bff7a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7e841c8d-e933-482e-ac94-84b4f38af9a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e273165a-9f68-4965-8f39-01ac4b8c9313",
        "cursor": {
          "ref": "3acbb324-b4ed-41ca-99e8-d20c3486bf58",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "2717f585-c688-44ba-9ac8-a0fc77aa7ced"
        },
        "item": {
          "id": "e273165a-9f68-4965-8f39-01ac4b8c9313",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c509005e-c893-47d6-b839-1d00fde7a822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a16028-8728-4571-8429-450e16581b81",
        "cursor": {
          "ref": "bcd464ff-3fc0-4915-ad27-a25b5fe4d0d7",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "286249da-6879-4c29-aeca-f179202b6729"
        },
        "item": {
          "id": "12a16028-8728-4571-8429-450e16581b81",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a5613acc-464c-4430-ba36-970e9a46b19c",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "e3a4ea02-af05-419f-aea7-b3c82be4c601",
        "cursor": {
          "ref": "51ec4e3e-052b-408e-8f18-eaaa45b4bcf2",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ba2c5505-8d56-4578-9f4c-46314f18290c"
        },
        "item": {
          "id": "e3a4ea02-af05-419f-aea7-b3c82be4c601",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cb337299-15e4-49f0-856d-9bcc992a987a",
          "status": "OK",
          "code": 200,
          "responseTime": 243,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "da542220-2a42-4932-823f-51e0b24fb860",
        "cursor": {
          "ref": "9778fad2-b857-4a3b-a4d9-2465f807589e",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4daeda2f-e189-4edd-ac04-0241eb8c582e"
        },
        "item": {
          "id": "da542220-2a42-4932-823f-51e0b24fb860",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "65c2b8f7-8b7e-455b-a989-97e40f6a2a1e",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "af440f16-2e77-4f79-b770-4e846b045f7f",
        "cursor": {
          "ref": "fac28ecd-adaf-4774-85f0-dee883ec3aac",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "acfecc16-6a67-4f4d-a97a-554b00db1afe"
        },
        "item": {
          "id": "af440f16-2e77-4f79-b770-4e846b045f7f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d801df05-3d52-4269-bdb9-24d16b41529a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e2c820-a8a8-4082-9830-e0aa2839789c",
        "cursor": {
          "ref": "34bdf74e-508a-41c6-aa4b-caa7c98ee764",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d97c6754-8d77-442d-9d9e-813ef48c9c7d"
        },
        "item": {
          "id": "28e2c820-a8a8-4082-9830-e0aa2839789c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3ac2b14e-c41e-4908-b42d-ca1a20847896",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "78428a68-8c2f-4204-a007-39b58cfb33a9",
        "cursor": {
          "ref": "0c8d9245-04c7-44c1-b4aa-0a7ac62d50fe",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b4910d3c-c6b1-4cfc-91c2-71abf8fa335e"
        },
        "item": {
          "id": "78428a68-8c2f-4204-a007-39b58cfb33a9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "39d5d800-d519-417f-ad48-dc16a8992ef0",
          "status": "OK",
          "code": 200,
          "responseTime": 176,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "6d06be5f-586d-477b-b45e-df17a5524600",
        "cursor": {
          "ref": "07eb6c5c-3df1-4667-b422-ffd9a5cb4bdd",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "62caa730-2505-4218-86c2-4b798182b2ac"
        },
        "item": {
          "id": "6d06be5f-586d-477b-b45e-df17a5524600",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4a1bd3ff-6ffe-48a0-b6c4-35a2e081dc06",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "a69076c0-8b59-490b-81c2-5f40888088d1",
        "cursor": {
          "ref": "b96c8f43-65ad-4961-b35d-8a40b972f61b",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4b0898f4-25dd-4c9a-8d02-51a7ee04a875"
        },
        "item": {
          "id": "a69076c0-8b59-490b-81c2-5f40888088d1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e5128466-d0ce-477d-a4c2-a9b9980789f3",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "61830a4b-31ed-4351-bc02-f244b96cba7e",
        "cursor": {
          "ref": "68e2db5c-dff4-4cfc-9595-836cd1534dd6",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7fa665c4-2cdd-44c7-95e2-49ded4e7c9f8"
        },
        "item": {
          "id": "61830a4b-31ed-4351-bc02-f244b96cba7e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "77f3de2e-5e68-43be-bd2d-bac7bd36ccdb",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "81bcdd1e-17a6-46df-ba8a-3d61797613a3",
        "cursor": {
          "ref": "cd3c9ee7-2dd3-4852-9a39-b4f021740d4a",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bf7f12be-ca10-41b4-89b1-5be0ddaf4de1"
        },
        "item": {
          "id": "81bcdd1e-17a6-46df-ba8a-3d61797613a3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3f6b64f4-4bd3-4c20-b19f-2dcb690b326e",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "962fb683-0be5-4dc2-b563-bfe37ff1a87d",
        "cursor": {
          "ref": "4e5d1eac-7142-424f-8761-eee306d21e75",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "683e6f44-006a-4668-a921-bb76e1acd168"
        },
        "item": {
          "id": "962fb683-0be5-4dc2-b563-bfe37ff1a87d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6ad75152-a5a2-4e49-bc27-31d012d4a929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c1db142-5ca2-4cf1-ab89-9604bf9a903e",
        "cursor": {
          "ref": "32d21465-586e-4817-8e66-9553bd94e078",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e3a7bf75-beab-41bd-b993-9fcb0e361577"
        },
        "item": {
          "id": "6c1db142-5ca2-4cf1-ab89-9604bf9a903e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "557074bc-2039-4338-b567-de792f47d251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3bcc727-a971-4ba4-8f23-e1810982f1bb",
        "cursor": {
          "ref": "62487129-bb28-4780-b78a-772766e1bd2b",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "64d160c0-7350-4ca8-a7cd-7e9f7d2cc37d"
        },
        "item": {
          "id": "a3bcc727-a971-4ba4-8f23-e1810982f1bb",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "26e1a2b7-1d60-4b3a-b14a-9b33faca917b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce02165-320f-4501-9dc2-3960ee03ef3f",
        "cursor": {
          "ref": "d5dc57d4-feb3-4450-bac1-b90e7607e4de",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8ec500f8-ebfc-478f-8bc4-d2083bd88fd7"
        },
        "item": {
          "id": "6ce02165-320f-4501-9dc2-3960ee03ef3f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c10eaf0d-97d0-4a36-8dac-523560464602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e27cc3e9-6df7-424a-b7f8-4b3a1879d1fd",
        "cursor": {
          "ref": "13179a33-bcd8-4c01-80cf-5517be39943d",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "cd68d4a0-a4cc-49d1-84d0-6ca792d86e4b"
        },
        "item": {
          "id": "e27cc3e9-6df7-424a-b7f8-4b3a1879d1fd",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e76f637d-d1d5-4473-8e58-4e3fed1132a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab450a7-7816-43fb-bfc7-5680f0909817",
        "cursor": {
          "ref": "8e4a5c9b-a55b-4c41-88ee-22cd4900d03d",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1d89f066-8863-43d5-bc49-665a1cb94e6d"
        },
        "item": {
          "id": "6ab450a7-7816-43fb-bfc7-5680f0909817",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "79310e8b-e367-477a-ae58-44db7c64db48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490eb58c-0296-4515-8c20-d0afb243fd8f",
        "cursor": {
          "ref": "01dcd239-e827-41b9-bbc7-aa55fe8c74f2",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "63575cdb-5e3b-4265-8d52-6dd7add024aa"
        },
        "item": {
          "id": "490eb58c-0296-4515-8c20-d0afb243fd8f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "04fd13f3-6621-41ee-a0f7-d828872b1b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "173b22e1-9b5b-48cf-9f2b-61e55b127b95",
        "cursor": {
          "ref": "270267b7-98ba-4e5e-809d-d8792bdb0bc2",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3106930f-c3bd-4613-bdf0-c2b5ec8126a7"
        },
        "item": {
          "id": "173b22e1-9b5b-48cf-9f2b-61e55b127b95",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7b509b5c-54e9-4538-943f-08400df6f79c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3759097-dadc-46a0-b49e-db2731ae0c9b",
        "cursor": {
          "ref": "36e72556-a2d2-4660-b2d7-13c6bcf19cd3",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c711605a-dc9f-4e50-8429-b3c2de79ba3b"
        },
        "item": {
          "id": "a3759097-dadc-46a0-b49e-db2731ae0c9b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d42721f8-4df3-49ea-bafd-ca45a82ed6fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f889766-cc39-4667-be0c-f54a0833b75b",
        "cursor": {
          "ref": "8636e533-98a1-4bb9-96c3-896cc286ddfd",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a9f962e8-f527-43d0-83d9-59fbc93cd580"
        },
        "item": {
          "id": "0f889766-cc39-4667-be0c-f54a0833b75b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9eeddc83-6c5d-4be9-870d-fc967bdf086f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28927514-0c3b-4066-a082-5ebbe6009eb1",
        "cursor": {
          "ref": "fce70b0c-62be-466d-8d97-dc07c60f1c44",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2bc13b2e-1d25-44c7-9af4-e7cec27f7039"
        },
        "item": {
          "id": "28927514-0c3b-4066-a082-5ebbe6009eb1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "03da566e-9a24-4758-886f-5b64d960ca68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6e44c1-83df-422c-aebb-50147cc9be55",
        "cursor": {
          "ref": "87129e23-a53a-478b-8029-a054b6bacb77",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1d1735a4-ff0a-46f4-8633-e6371b01e635"
        },
        "item": {
          "id": "2f6e44c1-83df-422c-aebb-50147cc9be55",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "45a20ddb-47a5-4395-a0b0-3fffb299fc66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6f25af-da6a-4dd2-a8f5-5466317975a1",
        "cursor": {
          "ref": "cf880c99-4c03-4eb2-b523-be494e1a6215",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f7258723-fad4-4186-9305-855f44fd6f41"
        },
        "item": {
          "id": "6c6f25af-da6a-4dd2-a8f5-5466317975a1",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3381c699-0c61-423d-b225-defc347d88d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd012c09-6f4b-4cca-a400-8f109759b13b",
        "cursor": {
          "ref": "d0dab35f-33e6-466c-9d77-d420fe59f3d6",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "fa7096a5-f496-4486-b65a-ddf89c006e2c"
        },
        "item": {
          "id": "cd012c09-6f4b-4cca-a400-8f109759b13b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1191f8b5-ea1d-4511-b52c-819c30f4fbb5",
          "status": "OK",
          "code": 200,
          "responseTime": 186,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "4670b7b9-cdf0-4c58-90f1-545579a50186",
        "cursor": {
          "ref": "ae6bb204-e776-46ae-88b4-47f62966cde6",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8cdd16e3-f1ff-41e7-9646-e97d8e8057b0"
        },
        "item": {
          "id": "4670b7b9-cdf0-4c58-90f1-545579a50186",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "10138308-1bcf-42a9-94c3-9903032b546a",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "b62447fb-dabb-43e3-8b96-9e4edf1dee41",
        "cursor": {
          "ref": "80cafb4d-66b0-4359-987f-c6e6c2ae1b60",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "514f2524-32b8-4725-9975-ca4812885410"
        },
        "item": {
          "id": "b62447fb-dabb-43e3-8b96-9e4edf1dee41",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fd355ba9-0eeb-43a0-8090-9aa881acd6b1",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "a84401e8-d51c-48fe-97d5-4b53dd881fae",
        "cursor": {
          "ref": "0f2ef00d-7321-4c6f-a408-2b3e78723a22",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c07b565f-4662-4b4f-b713-bd268b39454b"
        },
        "item": {
          "id": "a84401e8-d51c-48fe-97d5-4b53dd881fae",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a7d076e1-7400-484b-b829-13c3b7519210",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "226cb83b-bdbc-42a2-9297-f69097b319d8",
        "cursor": {
          "ref": "01b73f95-565c-4a32-83eb-62de8a8321d7",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d10e1677-4a08-44f4-937e-c868c330ca2a"
        },
        "item": {
          "id": "226cb83b-bdbc-42a2-9297-f69097b319d8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "140a0d81-2ad7-4fd5-84d8-21c8446d1091",
          "status": "OK",
          "code": 200,
          "responseTime": 163,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "8389b720-b330-4512-95db-fa050efbb13b",
        "cursor": {
          "ref": "5573d80a-896d-4359-a6c6-0602a7345014",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8cd52d71-0c20-4a16-9297-cf394a9a0e22"
        },
        "item": {
          "id": "8389b720-b330-4512-95db-fa050efbb13b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c156dd81-849d-48fc-96fa-26e58c80c691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f479cfb-e937-465e-8ad8-ac9e57d86bf1",
        "cursor": {
          "ref": "dd720968-d89b-4dbb-9e2e-5668e9757a34",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4d3a1b2f-004f-4052-b68b-2468b3511839"
        },
        "item": {
          "id": "7f479cfb-e937-465e-8ad8-ac9e57d86bf1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8d12c1ae-324c-4476-9f96-ad4cb9baf229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762a61a7-1ee5-414d-b425-dd96b95589c2",
        "cursor": {
          "ref": "9da1ba49-ff9b-426a-a78c-2b8c5b3eb350",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "03eabc66-2ace-4901-9afe-792eab8285ca"
        },
        "item": {
          "id": "762a61a7-1ee5-414d-b425-dd96b95589c2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "23152ac4-bf47-401c-b060-0fc96f158187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eaad744-a120-4297-bad3-9e93fdd7622d",
        "cursor": {
          "ref": "d07aad8c-07a5-44bc-a31f-d81ce03e4386",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "bf7e277e-3714-4eab-afcc-fe1543ea77d5"
        },
        "item": {
          "id": "1eaad744-a120-4297-bad3-9e93fdd7622d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "287edfea-798c-44ae-867d-6babdd9a236e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a70c00-cee2-4356-99ae-51a2f37eb5d8",
        "cursor": {
          "ref": "d691e132-e1d4-4374-bcff-9c73c01f8651",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d5748819-9b53-4556-b408-54d2ed48dc11"
        },
        "item": {
          "id": "d7a70c00-cee2-4356-99ae-51a2f37eb5d8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0ca84c78-d499-410f-8aac-6bd6867dea2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e6f5413-9d69-4c31-b8e1-d8d3b123f3fa",
        "cursor": {
          "ref": "7059f9c9-ed09-44e1-8165-67bd37ca57bd",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8706b489-a943-4375-86f5-07659bd11c37"
        },
        "item": {
          "id": "3e6f5413-9d69-4c31-b8e1-d8d3b123f3fa",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "801a834d-b562-461b-be39-3a5e82061bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a59395d-7ed7-4d58-92b2-2a74283b4b2a",
        "cursor": {
          "ref": "7cc7703c-12ef-4bad-b0e0-a108f0a0d7ac",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "282ec021-97fa-417a-afa4-2b0f6ef5d8c3"
        },
        "item": {
          "id": "5a59395d-7ed7-4d58-92b2-2a74283b4b2a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1637c22d-f54a-40f9-8eb8-99e49fd330ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a10c62-87cc-45da-a5fd-985153812f9e",
        "cursor": {
          "ref": "6c2e5e31-cce9-4557-8c8c-4fbf7e913709",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "dd6afb56-d10d-4020-ac4a-4c8d50f1b4e8"
        },
        "item": {
          "id": "21a10c62-87cc-45da-a5fd-985153812f9e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bdcedebf-7e98-475c-b16f-0cf2a8c20266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633637d8-4bef-47e1-bb9c-2fdfa55bc27c",
        "cursor": {
          "ref": "0e78efb1-af95-4249-86da-e25a4674a260",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "29bfaf6d-bfb8-4898-98d7-7636231093d1"
        },
        "item": {
          "id": "633637d8-4bef-47e1-bb9c-2fdfa55bc27c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4e9dc2bc-f258-4fd5-8c9a-570e963b26e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49fa8b27-6ecc-4b46-b1d9-b0e076d3924f",
        "cursor": {
          "ref": "8361edcf-ad33-4b43-8042-a6f8b804b012",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "09fab24d-10c6-455b-81ce-fb6a18437d54"
        },
        "item": {
          "id": "49fa8b27-6ecc-4b46-b1d9-b0e076d3924f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "be7cf295-ab65-49a4-92f4-38c1319bf699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e0b8aec-27ab-4d96-9c3d-0d0152a9a82d",
        "cursor": {
          "ref": "4f8fc766-0402-4df7-9e76-d9e1bb16a4de",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "51199a38-dcca-49ce-9cff-0599ec0011ae"
        },
        "item": {
          "id": "1e0b8aec-27ab-4d96-9c3d-0d0152a9a82d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6442691e-154d-486a-949c-9b8f06a079a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73471de3-f540-4c99-9177-5fe0bdd7348e",
        "cursor": {
          "ref": "adaa20dd-0ec6-4423-a18f-23050c084151",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "cd1f149b-bfd2-4e2f-afbc-db70fd102af5"
        },
        "item": {
          "id": "73471de3-f540-4c99-9177-5fe0bdd7348e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3e5bd60e-c3b0-4ed7-b994-acc8cb9f3127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab29efd-aba3-4020-9f60-5668d3c881b5",
        "cursor": {
          "ref": "caec8098-f5cb-41af-a573-3eac57e34bd2",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b200eb81-077c-4b27-9897-ba6cfe5ff90e"
        },
        "item": {
          "id": "6ab29efd-aba3-4020-9f60-5668d3c881b5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1958c7cc-3e12-4748-be20-b710cee3c907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cde7751-45be-40bd-8348-010ac386b07e",
        "cursor": {
          "ref": "cfdaf925-eecc-4f77-8d08-10a08f8afc6f",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e85b5105-2f1c-4486-91e5-15b3e7274519"
        },
        "item": {
          "id": "7cde7751-45be-40bd-8348-010ac386b07e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7c5baaab-8f43-4bb3-8c38-78ed429e5d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "384a3ece-e7d6-4c44-97ab-054a46359d5b",
        "cursor": {
          "ref": "e02a1c57-e527-4787-bbda-6e801e902e21",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "212e6377-317c-4bdf-a2a1-0a73fe0d2ce8"
        },
        "item": {
          "id": "384a3ece-e7d6-4c44-97ab-054a46359d5b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "7af9dd7c-c56e-4f22-b416-f6225fca4e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731ade66-5755-4503-95e1-0c87d43672b5",
        "cursor": {
          "ref": "8a50e301-7f9c-430f-a93e-db5667602c1d",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "492bdb5e-97fc-492c-bdd4-97a6d0d3b9b9"
        },
        "item": {
          "id": "731ade66-5755-4503-95e1-0c87d43672b5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a84ed266-ebdb-4959-b3c9-86d62af8605d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48259d7a-7035-40f9-b860-6446038db5c5",
        "cursor": {
          "ref": "f2f2fa3f-a554-4321-ad19-35cf8c0e230c",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c594502d-e3b3-4eed-b83d-7ba1323eae8c"
        },
        "item": {
          "id": "48259d7a-7035-40f9-b860-6446038db5c5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "599deb73-7a50-459c-bbd9-9cfb5cef728e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d695fc-fc2d-4798-93da-dec18ea8eaea",
        "cursor": {
          "ref": "f750c7af-b050-4f8a-9c13-abacbe622720",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "61e52b5d-55f2-4809-8371-6b9b1f7e4c34"
        },
        "item": {
          "id": "96d695fc-fc2d-4798-93da-dec18ea8eaea",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0fe052e3-88a1-4357-a130-d423638a0af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93181c6e-30a5-43b3-ade5-e36faf5dc1b6",
        "cursor": {
          "ref": "cf7a8ac8-4b35-4f43-a0bd-5dea688bd630",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "612092a3-fd9b-4624-8762-8d4af5fd9563"
        },
        "item": {
          "id": "93181c6e-30a5-43b3-ade5-e36faf5dc1b6",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5fb8877a-2ec9-4ea5-9bcf-9e57c62b8bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2505e47f-a6db-4f89-bfe7-dbbf094e51ea",
        "cursor": {
          "ref": "14fb10b1-4633-4c6d-b4f6-85ae078cee62",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e167da7c-d0aa-4b1b-bc23-dfd9580ab24f"
        },
        "item": {
          "id": "2505e47f-a6db-4f89-bfe7-dbbf094e51ea",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "dd7a7cb2-bb47-491f-9372-3a623129bfeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789cebf8-c032-4126-9577-744600940612",
        "cursor": {
          "ref": "8405950e-6b3e-4754-9cd8-f718e8df8879",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9ea55a32-8a1f-48f3-89b7-c24d77d98cc8"
        },
        "item": {
          "id": "789cebf8-c032-4126-9577-744600940612",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "dd653cf9-94a6-49b2-b49c-d6dfc761d9df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebadbffb-2317-4a00-8b0b-c1592cf202ab",
        "cursor": {
          "ref": "c74b3ca4-e180-432c-97ba-36de5333d554",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2476d927-81ea-4cd4-892d-adb89af09f6f"
        },
        "item": {
          "id": "ebadbffb-2317-4a00-8b0b-c1592cf202ab",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "55a90b7c-bc40-40a4-adf7-50f3c34ca4ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d033bc6f-8be9-4530-97cd-38a660cf775d",
        "cursor": {
          "ref": "8f856cfd-c6f0-47f8-87f9-d1c6802fa4a9",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6007b42e-1b27-4f44-a52f-a83b03ce147d"
        },
        "item": {
          "id": "d033bc6f-8be9-4530-97cd-38a660cf775d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6c62a506-51ad-4e59-8d42-47f0eb5a3410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56827eed-f7c2-430f-b3dc-3f812fbd31a0",
        "cursor": {
          "ref": "478d91b8-8969-4c77-9b5a-9f8f9aa76139",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f8903103-71f6-4977-87aa-905f3bc099b4"
        },
        "item": {
          "id": "56827eed-f7c2-430f-b3dc-3f812fbd31a0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "58e9aca2-b938-4ef8-a371-98dfec6347c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b3af0b-9108-4260-bdd9-88a6c0475f0a",
        "cursor": {
          "ref": "3c82c4fe-0727-43ad-99d8-c7137f070f47",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "dbaa29a7-891b-4361-86bb-9a48e8d94128"
        },
        "item": {
          "id": "47b3af0b-9108-4260-bdd9-88a6c0475f0a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0b1284b2-531b-4465-9d0e-8208780ae9e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be681ec-f69d-4f13-a9f5-900608121597",
        "cursor": {
          "ref": "38303a31-b137-415e-bd86-b163f5c52ce5",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7cb53df6-904e-47c4-8abb-40f2a58f4275"
        },
        "item": {
          "id": "7be681ec-f69d-4f13-a9f5-900608121597",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8718c875-5cd7-46d1-a794-19959dc80839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa1c118-bb18-493a-9291-fd16b9e1df12",
        "cursor": {
          "ref": "a0976199-a463-412d-b1e6-120e0e92ff3b",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "6fb849ef-e6ca-40fb-9d57-d37a10362b28"
        },
        "item": {
          "id": "6aa1c118-bb18-493a-9291-fd16b9e1df12",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "fae0b0ba-4940-41cd-8409-3167d444c4d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc75d6fd-5ee4-41fc-b3fa-139550f672af",
        "cursor": {
          "ref": "77a20c99-4824-42c8-bc6e-82fa4d248ae7",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a2ac3038-d396-47e1-9d7b-b2d89f18a5e4"
        },
        "item": {
          "id": "fc75d6fd-5ee4-41fc-b3fa-139550f672af",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7ba9205f-f42f-4db5-81e0-c9297939446f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a7e7e70-06fe-4f3c-af77-fd10d2d444e7",
        "cursor": {
          "ref": "d3f02107-5b5a-41dc-a251-f725196856e7",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7a8a88fe-fbf1-42c4-9860-14f4e5d546f9"
        },
        "item": {
          "id": "7a7e7e70-06fe-4f3c-af77-fd10d2d444e7",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "67a1eeb4-c11f-4f40-90f8-c618e9908e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f9b672-20a5-48bd-9f37-4718e07f4306",
        "cursor": {
          "ref": "70c0b553-bfa4-4d01-91fd-40fa252523dd",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "16f11579-6f61-498f-a1c2-8f2662e476e3"
        },
        "item": {
          "id": "12f9b672-20a5-48bd-9f37-4718e07f4306",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6ffa7bb8-70ed-4666-915e-9900e478c468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc090105-0c94-437c-9299-99ae75d46df9",
        "cursor": {
          "ref": "f088baf0-d392-4f9a-a5e1-e73681690d7e",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f11f35fc-b35c-4f8d-9c48-3f276cb348dd"
        },
        "item": {
          "id": "cc090105-0c94-437c-9299-99ae75d46df9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "12cb8af1-f6a5-4e3b-b709-b9acc3fc2dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ea2b62-9e95-48c9-819e-bfe0599d8890",
        "cursor": {
          "ref": "985a98e1-94d0-4577-a1a2-a2e2fe66f12f",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "de6ab168-667a-46fc-9011-8a54e9fd4ceb"
        },
        "item": {
          "id": "f2ea2b62-9e95-48c9-819e-bfe0599d8890",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "50996fa8-8ff7-48d0-8de1-a05a53dd1bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641d341a-2a77-4569-8390-cb8d5303783b",
        "cursor": {
          "ref": "aa5e1e9b-2139-419f-af18-39abdd3e2950",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "547c179f-e2ca-4c93-9472-77c7dceb1254"
        },
        "item": {
          "id": "641d341a-2a77-4569-8390-cb8d5303783b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e785442f-686b-4d6f-8599-afb6615c1bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80be2ab0-4d2b-4bbd-9aab-b087f53fed9d",
        "cursor": {
          "ref": "5f25ff58-64cf-411b-95b3-86401fc99361",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "372965ff-5536-4b99-9e72-10d6b4a49dc5"
        },
        "item": {
          "id": "80be2ab0-4d2b-4bbd-9aab-b087f53fed9d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c87e2f0f-4957-4891-934c-24a0a28c34fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "457accf6-be46-49ab-8458-36295685e65b",
        "cursor": {
          "ref": "50ab2521-54e1-4053-a416-3129a353e70b",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ceccd2dd-41f7-4ec4-9640-43797e0ae2d5"
        },
        "item": {
          "id": "457accf6-be46-49ab-8458-36295685e65b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4f8974a4-fb19-44e7-b8aa-03682e9d8d79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 108,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0fb4d9-20e8-4c52-988a-c09b712b6385",
        "cursor": {
          "ref": "3f36ba98-29a9-4e28-81cf-635a4d117f81",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "07eac822-d44d-4e90-8ec3-27c3f763d9f3"
        },
        "item": {
          "id": "ce0fb4d9-20e8-4c52-988a-c09b712b6385",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "19c93e8a-2a46-4a5f-ac9f-eb04fe7f552d",
          "status": "OK",
          "code": 200,
          "responseTime": 174,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "7b5f0e84-4586-41b5-a5d4-dd0ce2370fe0",
        "cursor": {
          "ref": "22e6232b-b965-4b06-8a04-0b8e0ba40d66",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1aabaa19-3f85-409d-ba4b-c0f6a97ba4e9"
        },
        "item": {
          "id": "7b5f0e84-4586-41b5-a5d4-dd0ce2370fe0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "addbde92-8f2f-4c08-9dd5-0815358c905b",
          "status": "OK",
          "code": 200,
          "responseTime": 170,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dad5e11-efa0-48cb-a87a-7aa1d766a7db",
        "cursor": {
          "ref": "b2269831-e85b-487a-962c-504272938a96",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "65acaa9e-09a8-4aae-8aed-b3190fc78a67"
        },
        "item": {
          "id": "8dad5e11-efa0-48cb-a87a-7aa1d766a7db",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e4033687-521f-47f2-a730-4bb2b2d0d237",
          "status": "OK",
          "code": 200,
          "responseTime": 181,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d93177c-2d30-467d-b02a-d2503e0ceefc",
        "cursor": {
          "ref": "6f435d50-579e-4099-b39e-2fed9a080906",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e5aac0aa-63c3-45a8-927a-f903a1b8e3d4"
        },
        "item": {
          "id": "9d93177c-2d30-467d-b02a-d2503e0ceefc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b2a61dc3-35ac-45d0-98b2-143d3f3d3865",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 108,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d93177c-2d30-467d-b02a-d2503e0ceefc",
        "cursor": {
          "ref": "6f435d50-579e-4099-b39e-2fed9a080906",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e5aac0aa-63c3-45a8-927a-f903a1b8e3d4"
        },
        "item": {
          "id": "9d93177c-2d30-467d-b02a-d2503e0ceefc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b2a61dc3-35ac-45d0-98b2-143d3f3d3865",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 108,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74bd95df-5ec0-4315-8a2e-53f0085ef7c7",
        "cursor": {
          "ref": "84f1d772-a6e6-4681-85e9-a7eb0d5b6132",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "bcdaf515-5acd-4afd-8405-7f474228ac14"
        },
        "item": {
          "id": "74bd95df-5ec0-4315-8a2e-53f0085ef7c7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8cfb9e19-e97d-4a7e-8454-967f67b45e53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 107,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bcf5e1f-b2a5-405c-9eb1-ea9c3019ddef",
        "cursor": {
          "ref": "cc0eb69b-d9b2-4155-86e0-5f32463017e4",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fd99edb3-37ca-4dea-b891-cb8de0f838c8"
        },
        "item": {
          "id": "1bcf5e1f-b2a5-405c-9eb1-ea9c3019ddef",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "768a91be-3f09-480d-af8a-6124a533c255",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 107,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}