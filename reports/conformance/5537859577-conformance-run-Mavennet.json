{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "314ad3b4-6021-4d07-b2b6-23e8a6e38e4c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "006f7a0e-83b4-4f51-9e04-a65c7e478ce9",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4bea65cc-4c0b-4812-9067-78d2346f08d2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "124181b8-e3d4-40c7-a1ff-90747ba04d88"
                }
              }
            ]
          },
          {
            "id": "3338c4e0-0712-46db-a10f-cab93166299b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e96afe75-b88e-4a63-847c-69495a1067a5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ba75d5cd-56af-4c47-b998-bfd4de1ffd8d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b2e70377-fc41-4846-9b97-f11abde056f4",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "10a39b72-36b9-4637-b69b-d62f57f4900a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2686ebcc-318d-4cdd-8571-f6111508a6e9",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cb2e7b0-cc0c-4283-a6cb-3ae6b85e4da8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "63540d2a-ac96-44b2-b4d7-d17e93d4e27b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0947e5b1-5f96-4b29-9d06-b52c9b123682",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "297af109-d946-42d3-9858-1b6320ca8dbe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4885ef96-2124-4c43-b9ec-17afa81d3856",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "da09848b-27a4-4075-b783-e1bd57532675"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81ac5094-176c-4fe6-b58a-b32046e917d9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ad0e4980-8acf-482f-ba34-2e995193615e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "521cbb2d-9f34-4f4f-b8c4-87a7c789dadf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c0e707f7-6d9f-4e0f-9fab-fd86ca41108e"
            }
          }
        ]
      },
      {
        "id": "3dc0d99b-3d5b-4204-8311-112273d5e6de",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1c5cb823-305a-44b3-a870-4ec5faa23e02",
            "name": "Negative Testing",
            "item": [
              {
                "id": "606a707e-1be3-4a98-a4f3-6b3d859a1fcd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d1605e37-4106-4c5a-81ce-889ac1725b10",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5212c2cf-2a89-4b92-9b64-533820e880c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a5e6b60-b951-49d0-8eeb-868f0a1c8906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3eea1d2-6ade-4ad9-beb0-a486128c24fd",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521e012d-441c-4266-b4df-40c5fb5abde7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c7395ef-b4df-449b-b65e-2efc00ceb42a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7d42cb-db54-43ff-a04b-9cdabed17830",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e316ebc-c0af-40fa-b00f-a1345dc43948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b4b94ee-4335-42eb-b245-9c646a1dc3eb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9b170998-5a2d-4e4b-bf21-3aa794ec34c9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "665d6291-fe10-4c9a-8a4f-076979e05565",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1dab66-42d1-4236-8224-ecf887f1d7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2777838b-8304-4478-ace3-a607ce814f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef07041-5874-4e81-9d4d-48558ab5b842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46aa92c1-7505-468c-b28c-9da23aea7f89"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cca42f80-d3d2-43e5-a253-b456f4affb8f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0e6a4b2a-5352-4aaa-84c1-19495f196b78",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "490fec6b-130e-41f9-86d5-d570eb9bba87",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b20317b6-77c1-4cac-9b61-78d3597c9ca0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f87c75c-e8b5-4bac-94c2-4453ea0c28b5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "76c34674-062a-4b76-85ac-c2f3751dead7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "190c6275-1676-4612-b848-2b5e3d33d374",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e63a0abc-b7cd-478f-9874-86ce72488be5"
            }
          }
        ]
      },
      {
        "id": "3e0662d0-0621-44fb-a73b-5fc512427ac9",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c9a0690c-791d-4802-9180-3a927cc21f53",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f700b82-00d9-493d-ac03-49d8b21f6bdc",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8db97daa-1d72-4dee-8339-c565692e9605",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a523b31-675b-4d7d-9097-baf4b820af14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f957a3-89f3-4991-ad56-7e74da13cce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76683284-889e-49c0-b705-8f8f53a48054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8107157b-2d47-4839-86fa-58a09c11233e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe85445-53f7-40dc-abff-62e15d7da75a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a6c23a-73aa-4a16-a5f9-3138a1959548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95cc1f4a-2a03-4211-95da-9eead59f9160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be94f12b-7a4c-4e8f-bf71-4302a95bcded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab3f4942-f8ad-44d7-a2a4-fac22c513908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a5c5ad7-051d-4f4e-9745-33c0c2c690ce",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c136b1ea-49f7-4d08-88dd-86a3d9f95c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf43224e-ec6a-425b-84a2-add489d8072b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418d334e-1aee-4b98-9b23-6d206dbe2419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d16066b6-1f63-4140-9d14-24be740f48f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b789833a-98d1-4985-bc28-e6bf5847b409",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef6dfb9-a4ed-4d00-ab5e-2b16d9e19143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f5dc457-496f-4428-b7ad-d93ea78458b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c7ff0d-5cd3-4363-aaff-06f8dd32e0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8a39aa6-bb5f-46f6-9c34-407751a87eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a96c84-e8a8-44f9-838d-0b94da994cf4",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b131b627-716d-42b2-bf47-74dedf5e9575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "623964c5-0274-4e16-95ce-74a03c8f7d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b238a0db-446a-4218-9769-84b01cd8cb4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98810466-dfe7-47c6-8b36-5ff56c8fc470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41fafb8-c3d2-4be7-a45d-47919342827c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ea96f5-a14c-41d4-b963-fc6b88c6b541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e066c8-2110-4af1-9400-61ae93cfd2cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d14b86-8597-4470-b086-5861b2792d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "834c3d32-8eb1-416d-9c08-a117c68225e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af35d330-3e38-4413-ab0e-b418788a0a0c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "661df096-6287-4fe7-a5ba-5770390cc9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd55b085-ed4e-438c-8fda-e619a391305a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af72b504-cdf3-4f70-91e5-129707204aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d7b761b-9e24-4921-adda-a031b3c0c2ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66fb940-4ce1-4f78-a6c2-990283ddb357",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2eb398f-87c1-4403-903b-ca8dd4073d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82664249-9347-4141-877d-3ef2d68b7c31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1900395b-6122-40f2-aa95-7d8aa0aa47b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "215a553a-58d0-4966-9d60-ccd2171f9a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d543bf-b144-4619-b889-6292cedd45a4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2519afb2-01d5-4879-ad1b-842fb5b77575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed1a62d2-81f2-4f98-b9cd-91386c0ab04a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "478118de-9199-44d8-8a65-b3307f17e58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9bb629d-08d1-4a28-8e84-0b36801cff16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7f0392-d42d-4f16-a000-801538423663",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7a4399-3874-4b49-899d-386067c23016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b68e1da-87b3-4271-954c-c94021105e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b391a49-a65b-4567-b154-a2b03c3732d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33c40f80-b30b-41a0-9332-621a13260e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73642184-9a38-4f00-a9a1-a6f443975b55",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fcd15a-eaa7-44ad-8948-b798ecb2b48f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d8ca3cb-0550-4e16-9f2c-b06d42af62cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f2f109-8427-4737-926d-7f703d5bee9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03f66cbe-6592-4ad1-9ed3-36c4701e7667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5d989e-093f-4b7e-a60c-286004259609",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3822ef-8ef5-426c-854c-3828373d1c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b86c9d5b-4641-4497-9c2b-31320b1b2aeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e34c68f-d82f-4d2a-a0a8-5eddfff095e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9fcff553-24d7-4e51-a5ee-646ad4fd223c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe403ae-3924-4ab7-b269-b6636dee5823",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e13c9d-f387-47d0-a540-1d49fd0c3019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20fb2b80-b496-416a-b650-44e618835c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211d08e3-22a2-4e3f-a3f7-466a7bbf6b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cec100ff-59b2-4557-b8c0-3a7e45f157f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce126c5-ebe9-4dd2-9676-446e8ccd4619",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92921f13-b3bf-4d0d-a77d-a9891df23884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "402cc534-ee1d-48ca-9c58-321818a3d677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8463b070-e5de-415a-8d6d-57960002a4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6973bb80-5729-4b96-97f3-8c2a3ffa83a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686d3d8b-4037-4df0-8e0d-2110964445d5",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77fe2e48-fd02-4f1d-b6fc-c3e141db3623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e666bf2-a9e2-4d72-8050-45e1b5601f69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8664542-cc70-433a-9be7-c1ec45e70ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45a2bc20-824f-4a86-8fb1-0f84639bdc99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd847f1-9e26-4b2c-bb81-8b2170eac5a6",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a26b5dd-b2b8-43d0-bbc0-efd8250ac449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b0a9675-799b-4d2a-88cd-c42738f36ca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6f6f62-24b5-4b90-85ea-2d0c68d8f273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e14d272a-a700-464d-ac02-909d507ca6f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141d056c-36fa-46cc-951e-58b1ad311deb",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8668a731-5390-4a0d-8752-a6f10d09a019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30a9a70c-d23a-46e1-8476-947f13c03fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02f21b5-364d-4d0a-b759-e77a8597cefa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "888923d9-afc4-4d2f-9b77-65023ffdc2fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683816f8-5184-417b-b5a4-7e96dca34e3a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f7d1ba-664f-45d5-9f55-b6662d5ae016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a60410-d2ef-4389-accf-c93ee7e2b55e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73dc948-c788-4c65-be40-130127c347ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d693b0e6-c1c6-4b19-9fb9-2bb04d04e8a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e77bcb-806b-4fde-aa08-298f97778e49",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de4e9e0-11e0-407f-9ef6-46d6cace0a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c19f267-9ad7-4e3c-8a22-fa505afadf1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b72c2d8-d95f-4f6f-987a-560cee55c56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9363c70-9453-492a-ac89-8904cf580760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547825fb-afb1-4b8d-87f6-bcd8f8fd68e7",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af95dec7-332c-4a37-a2ec-dea10df300f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3655e31c-e1de-4112-b48a-1f60d19e4d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daccabcd-9963-4afc-a652-f0d5f039357f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "790fb13c-a928-4699-9702-128baaed7d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95fb168d-fb17-4de5-bbb5-fad22038ba2c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e400f3bc-efd7-42fa-81a5-a695a68bf469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3741cd9b-a4f6-4c45-9780-7e66de292a96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e534e1-8b87-4dc5-83c5-f4e0de608b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cea39a4-1074-4d1f-90ce-2aaea9d8bbe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833d6353-706d-4e14-94af-ed5bd4985af8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a7dcbe0-be8e-46ca-a239-e9ff8e86e7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89b21614-3377-48bf-8cbc-c4587b0eac5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37480e44-4420-4ebf-b76a-ed5aced708cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "14b62bd9-4c93-460c-be3f-218b03fc2c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96983c41-9814-443b-a878-a786b6dfdb76",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c870049f-5220-4f22-9697-e1d21a765911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "870e649a-0f08-4ad5-a7d2-6ab882d0d833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ebfbbc-8f27-4fa1-8890-2144a9063bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8eba2d91-9569-432d-b391-fa10ddaf5e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c02aecf-dea9-47bf-9366-8c8faab0eb6f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4699bab1-7a6c-4e37-ab5d-d550b99d867e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "628b7a47-39f3-488b-b080-0a56987d1114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b195c3cb-b588-4bd4-a07a-e7149e769094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b28f753-b1bd-493e-87ac-105f639673c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a323dc65-1436-4093-ab9c-e04735239b75",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a226e26d-2c6e-47dc-aed7-1d7312e2bafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f2991b0-15c5-4924-80a7-6271b1a2bdee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af897b8-8f9d-48f6-b9cb-d16da2661954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "40eef419-3f47-4e62-89ac-3851ef6d1524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afdfeead-0ad4-4c39-b02c-432d2e7ff3eb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4bdc0a-b20f-44e0-9d81-96e8ae54dca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4fd5fcd-41fe-4740-a1c5-4a3f3fc8b0f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a325e07-fb55-411a-bf31-9335325f5978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a410aff3-2dae-40d4-85e1-94547e925306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fcf84e9-6cee-4c5e-b0f0-6e7a38482a23",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "144af013-cb19-4977-8c93-c25ea7339acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aecd73d7-a751-4f3d-8a61-a724406a24ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba48b01b-1098-49be-b44a-bfb5f103d7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ca9d99a-7ea6-4004-9a27-210f9f563a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad98afb-cc58-4ea6-987b-4901bcb14bbb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f6f373-ac95-4d38-9f9c-fecd37c43a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29500f59-6ecc-47ac-95cd-a2482e7fb790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e340b062-b981-4180-8cb6-74da12444736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d056c4da-b298-4c53-a155-276990e61594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5803af-1a9a-4308-aeec-8dfbfc4b2734",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c43f607-84ae-4832-a4b7-7465b39c2150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac6dcfbd-9df2-4648-805c-5449d72902c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b4fde5-f4ac-40d4-a437-fec74923653e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "02175b5b-5974-47ca-b20d-034807c3be3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2ba647-37d1-4d4c-b216-63fa0c1a0bcf",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a941a196-7f17-4781-9b0b-7265adc9dde7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99205bc2-76e0-42fd-9314-dd6edf1188c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746053cb-2636-4cac-9f0c-64664de8c086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "34fbd8eb-9b43-47b6-97b7-d685e5e7ebe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bce09bf-f256-474b-90d1-0a04b36fa76a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "881dcbc4-288e-4b7e-83f9-d2dc172182ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93112a19-28b9-4de0-b0db-724de3066e0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be978f7a-47a9-49fe-bf7b-89ae049dbaf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a75b71c-aec7-4876-87b9-0e4f134cab30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "930e3498-5c00-4553-b438-bd9e972b0ff2",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269cb3d3-2270-4a7f-bed9-4322047f65cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da82429b-8ee1-468b-a9a6-d660f03e2a02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e929d7-193a-42a5-bd8a-873342c21b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a7636d3-b93f-4a0a-8332-bf3d1812747f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0fc1d5b-e1b7-4d70-8fd6-210ebb7a053d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fbc1e5-85a8-4ea4-8ff3-40cc4ba90d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edca96c7-746a-4879-86aa-1034e8e30932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac10d2f5-37d7-46a3-b7d6-35e338f51d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4421212-9e03-4f46-a701-6f9fbca9e737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0467ffba-f797-4724-b29b-cad8d8b8c336",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74193c41-7f96-4bf1-a8c9-27bb5d6d04a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0af5f850-b3f8-4cce-950d-a6ed5a792523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbae25fc-2b81-4222-b281-0157f2708090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "39867f00-f11d-4ac9-9549-1b0016a58db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1b8f79-06e3-4ed6-8e73-7f5c80a59886",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b561b8ef-42a2-48b1-b087-92a39aa3e3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08bd5776-e320-47a6-810c-a17329ea65e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0483ff6d-cff8-4754-884a-16e59893dc5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f3806066-5c9d-4f14-b4c3-1c64659ee01b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9ddead-1802-408a-8139-27162d8757e8",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c20798-30e4-4a4b-b9a0-85158d9ed433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "671411c1-f4b5-4955-b500-82191608c753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd82aa6-52fe-4cfd-8cec-d63d6e60c371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c98703-a857-413e-8810-9de8971d0911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739a6043-4cea-41e6-93bb-ae74a10572d9",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3364271-0e24-4281-bf58-1983055af68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3e9a480-648d-4952-8b5a-71ecabbb0438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "699604ce-e63c-498f-aa63-408bf8fd41a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "37cd1352-a3e6-46fe-beff-92e1de6bf10e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55cd19b-6905-49a5-a39c-88a22a3f17ae",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae27ce1f-db69-4dc1-995f-8addbc27701e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c30a07-dd9b-4d2d-8df3-f14a08a2790f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0cd09b-8652-4311-9e79-de7075988a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5bfc1be0-bf62-4d33-aad4-f706d89f9f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e782aff4-4d8c-434f-b622-dbd257c624bf",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc5d6e4-9183-4f54-bb6e-01ce27f47486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "917d8ec1-23f1-4bd1-b309-2fcfa40bbcb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44b99a6-495e-4e9f-81fa-987ae413e70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "427da4ba-16b3-4d63-96a2-ae0873c082d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eedd6572-3a4f-420d-b835-af75d54749d8",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff7a3f2-50ee-46ee-965d-e35a98dc8a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5fa73fc-218a-441e-9c0e-d279d877837b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52753efd-030a-4a0b-8a13-9b441d9292a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ab88042-808f-44e7-8398-bd35a6b83c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b0cfdf-fc82-47fc-ab3e-25e6cc933ca2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f0d28d-f79d-410e-90f4-7defe454228b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e054462d-18e6-42d0-8164-ecc2f281c090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca73dd25-0e75-40e1-9c49-b1ed10822aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "770d228a-e9b4-4476-97e4-154ec6bf783a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "decad770-6bea-4356-a4fc-9d397059603a",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df03c2d0-72f8-4d54-a118-10985953f13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6084cf00-1a81-4da8-818f-96d8872b7b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79fe25c0-956e-405b-8670-af3c0e8dbb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c3dafa3b-63e0-4222-823a-7151db71e467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470b60db-425e-4dfd-87ea-88dde8fb9afc",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d1b221-3cb3-4e6e-91ef-dfd081deebf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df608ef-a831-4da7-8cf1-74ae183b5690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbb97f5-fc70-47f1-862b-280680fbc520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c96b9bb4-ed0e-4a28-8dc7-d4c366db4292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8f96fa-5f36-49d2-abec-01898ba0c492",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d96b22f-e93e-4bc5-95e0-bdcee88f0a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "426f85d4-5dcd-453b-bf32-bc1e71efb479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "469779ce-20af-4e18-b614-7c8f26576a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b426d87-dbcf-4bc4-b038-4b3f92fb605e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c090e72e-3dad-4e91-adfe-f6e0155dec11",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a56c527-eb7a-44a3-9793-798646ab6682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a4d6652-3545-4756-8d96-b813315c1116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31fe0932-b556-4cad-8ea4-1b7ca1eafb44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaacede4-1500-43af-90de-36c2e363fcaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79e7a05-9ecd-4c64-9ce9-ed7c698946f5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89de50ad-1d28-4712-9998-d6f9134fdcb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b364c05b-8d26-442d-975e-391ea7a7cc75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a13b61-bdb7-4147-82ae-7fa90721ba31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "684e8f75-7c44-47d9-ad2e-ae35cbe83899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e413cb9-e103-46e0-8709-fae9410d6f5c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56bd88fb-f1a3-42de-be5b-d16b58682ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4069722c-f400-479d-8af5-4ddf735403e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a227c45c-059b-4983-8d22-9fe583f2ef2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a5e4393-491f-4928-8eef-10282ae10753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d5ea25-0fc1-4a64-b608-de1f6d4e1ba4",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5cf86db-cbbd-4e98-a1ad-521604c83e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "533396d9-0ed4-49d0-9fc9-4d2eed779bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f77f2fbd-6aca-494a-a8ef-4dba5dcec549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "161f8076-c4f8-4e6e-85d5-a4c1ffbfa2e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ddddc0-88ac-4eb2-8860-5c2888794bf8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4aa8b5-85bb-4f56-a347-ad1c0614f574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49a8c602-806a-40b4-83ac-42cc24745b07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736f3ab8-000b-4216-ba12-5ec36983c9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bea3a306-8df3-4831-9a3c-f1454037e006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2d72ed-aeef-42ca-9545-8ef3cd57c7af",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8333e58-93a5-4cd1-ace5-a43689528abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7b869a-d50d-4905-9adb-80eedf9c6718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf1ffc7-6c85-4ba0-8cbc-ce53e4cf329e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "16c93c2f-e8c1-48d3-8e78-29d28b183b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2315ef-e4d4-4ed1-8be2-08a5e3040a5f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0bb0917-bae4-4d4d-82dc-350faa55438e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f41e9c47-4b60-490c-8cbe-b07c8e1ff5a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82eee74-4ba0-4636-b619-a02175ab60dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "412579c7-0456-4ef7-9850-7ffa109de7c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1739b70-e5a3-4c85-a18e-79272c09e0a8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8d0a91-cc4a-4e34-875d-f7eec61e4664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4779803f-1e31-4553-866a-ca92b1f087bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02557a1-decf-4700-b0ec-04f3e43e12f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1904be3-a45b-48e6-a667-8c1c4524e2aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f44439c-a490-4188-a45e-03526a35271b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdcaae8-c473-497f-aaea-6b1f0c6388fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8c6e9f-5adc-494c-bcb2-a6283d78c979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e8e28d-7212-4416-b689-c2b378d1b205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0556aa5c-749a-496b-8160-3158171a90dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9193ea5b-a3c1-437d-9f8a-fd6f9f906ba6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "470eca53-7db7-4a6f-bb47-80dfea59bf2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c60c82c-6fdb-49d5-88d6-c1b6bb588f15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6112f07-7a62-48e5-a3a6-5e3febec8c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87d19f03-aecd-489b-9cb9-14d7e7072039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c55c96-c1d6-41fc-bbc4-890cbbd38a3d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d810ea-d95c-464d-8894-f38177c1fcbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab6cc861-0844-4744-b9a8-d5e25922c303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072491e9-57b0-44f2-a82e-4d4e3cb77942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "946a22d0-304c-4c99-936e-485b9c8db431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b472ed-36a0-460d-9402-507dbf4c2197",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9d26b3-2188-4665-a3b9-313884db6419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b082266-7693-47b5-acca-ad7877b7f369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231d94e4-f478-48dd-a76a-a6a1c610d6c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "cbabc62b-c794-4451-9d2b-007d1992be8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf82fdb-f161-48fe-8235-0e0a0183269d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81008ea1-1638-4def-8b14-4c2c52403283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aebbd573-37b5-41bc-a4d8-5dfb64b23c99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbeafea3-d774-4448-b04f-f87fecbb5d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "184d1c2c-b15f-4c8d-bbe3-6c9f8cf5a8a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21f62e6-a7ac-43d8-93dd-f92953b411e7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58bcf6e6-edf0-43f4-a398-0a00ac985f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0934bfa8-2bc7-4f99-bc69-51d5ff2f15c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af82b12-fbf9-4624-bad5-20eec96639e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b78a0b5f-546c-4b32-b3e2-8b65083b2161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dad20a9-13fb-4614-bd91-ccd3c1ca9c3a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7271d726-1efb-40ab-b84d-14b8bd76fca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3deb62d8-61dc-40ee-a15c-7e9911856fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e9521d-5a13-441d-93a5-6b363151bf79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "038df50f-b477-45a4-81f7-0ba5de2d1cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5df71ab-e913-47e4-9361-95db1a307e1e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9de9203-4731-4067-96c0-910e1379519f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8df3d38-b119-4e66-8476-196162d5cff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f05672a-f086-4bfc-949c-b66da88ceb7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "29b9123d-c8fd-48e5-b627-365fe280ce31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b973748e-8d14-4700-aaef-6df53cc79144",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba89ebb8-3761-4ed1-b3a7-18fe1b764cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89424422-9f76-4d1d-bdba-c354d16c0967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70661f0-3eae-4d84-9149-6eec697bd331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "234fc685-d59f-42ef-bdf6-ccf2552bf2ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f86d3e5-7aba-4618-8d72-a74c43bb736d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f092dfc-7f8b-472e-b269-7f2e42cc5416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d59f38e-10ee-4d89-a659-3ecafd9f3c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea99255-f6de-451d-9917-ed524008c7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "50d0c79e-7c84-4352-b6c7-e784c0b329ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deaf454f-326d-4e31-b6fb-cd8cbde84ac3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c377f8-6169-41dc-b0d7-f66cc0f29daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44513d34-cd6b-4893-9d0f-293a2d62f7cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b212ba-1a3a-4f6a-91a3-e04817a34de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9ddc3f4-650d-45c0-91ec-3014b20badc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402c61e9-c48e-4ec0-ba46-fbf758527445",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0315c821-719b-42cd-ae28-9c2111ca4999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34c6be0f-47c4-49f3-949f-ff40ba83fbab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b1cef1-735e-4559-934f-f767a98d81ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2682eca9-c22f-4adc-9da7-db7f2d399936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb2ff78-b2d6-4632-979b-8cdb9214d51e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d148642-5070-4d0a-8f2c-f500816cc930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f50b988-ad47-44b7-911d-ec66b89d459e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c56f36c-4d0e-4e2a-881a-3704a45d2f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebb78375-353d-4314-9fee-e47b013ba082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deedf8b1-021c-463d-8ee8-9e801f31a0f9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684d6edd-5dc5-4114-908d-0e677a2346b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76f8a7a8-0779-45d0-b09c-6b5ce2933b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ccc732-4353-4a51-8fcc-857a4c76623e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "996bd836-d34e-4f67-9950-57b2a7877138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6edc826d-4934-44aa-8130-ecc6203b1f3d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d5cb41-f6c1-45f8-9396-b43c2dfc73df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c69aeaf1-171c-4070-a0c9-e4fc2e619b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d422509f-a21b-44ee-b758-b5ee87e3d165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5caaec52-f454-4b62-b346-767ec285fbc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9b7628-0de0-4955-bac6-048d9012a0fb",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d3fd93-e50e-4764-aaf9-22193e975265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40b2ab65-b2dc-41b4-8eeb-abc7125ab263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46976f0-19b5-4594-a1c2-ee74649bf90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e561e5f4-d988-4b2e-97bc-356425bafe95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb90456-70bc-4581-aeb8-7c30d9bad303",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6872e05e-b8a7-4cce-ac99-89210ee94929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b7b7fdf-c945-426b-933a-846345e1caa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d740c4-8522-4159-bac7-f404e4b23194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "decf8fce-0fb8-41bc-801d-78bed246563b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ceda544-9f38-4179-bfdb-62a09790dbdf",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e68bbaa-d9e9-4f8b-ace5-0d7f63c0d3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80622b24-67f4-4bb2-8ab2-d0b13a781ab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f50ff47-1be9-4faf-9f1b-f47898f214e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d700ec7-b468-4c79-9365-ece871013e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d23542-b3a5-406c-80d1-7cd2065ac2bd",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb6b58a0-e1bd-4831-919e-0e4de0be25d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a66edc6-19a8-4dfb-9678-1c49f552c8f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e763da-6e59-4f3a-8ede-3808009388ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e36bfeb1-bfce-4ba2-96ba-00c809520d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7475a3d-3a5f-437f-bbbd-c229de8f5ca6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccde4bc0-95e6-4a70-91bd-b14033df9a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5927c2b-80a5-4393-a700-18d4dd86eb97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29293742-4c0c-4eea-8ef3-084355b490d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26f34ac7-905f-42cc-bfea-76241ea57dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db40a34-f799-4632-8b8f-a42e4e2f64a4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40144c61-4016-4cd5-b6d5-4821f9f64e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb073e3-461a-44d5-960d-6a1b4211ed74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447f811d-73d1-4df2-bddc-377f2212a10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d81cfd31-246e-46bf-88db-129844e49af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca025991-dd0c-4594-aa0d-4a0a1616ea8c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13eeda1-9e4a-44c6-aeaa-115bd4547b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f4004a-6cb6-4d24-8f39-1dadea87bad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d5a5c7-31e2-464f-897f-f81fc8f0e749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6370a16e-a488-4937-b03a-360bf90da9aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85635404-1b49-43ee-b504-cac2e8ea4f16",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3b56cc-c78e-4c22-98ad-58d8ab23b68f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b640009-5c68-47f2-8231-1b9b1c352576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c697a1a-1272-442b-ac00-055561ced7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f103d51-a8c9-4914-9a48-5a4cf5d3da92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c51596-96ba-4f37-bfff-ace1b084897b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834c9cce-b55b-42f1-bc43-d0b5a6f3228a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa11087e-ec16-4efc-8422-3334f41d2da8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88912336-715b-4cfd-81bf-d7744c48fc30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b2de737-0f20-400d-8091-270374da01d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b115b7e-0956-44d1-93bd-bb0ed9878266",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d239205f-da9a-40ee-8d29-bcf345f18471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297e1fb4-aec0-444a-94ff-4fdbfab7d666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9de6fc2-8854-43d1-90cd-47a88ecd9e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcf93aa4-96bd-4087-8192-695498c55edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dcbd943-55c6-4d5e-8af4-789db4510a10",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9fc0ed3-fa79-4662-87c0-1423800293c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3f17afc-562f-4d27-8c24-9e509fd6e4ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42035b05-d2be-4afd-a59d-eb32d3ddfb0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24e008e4-030c-4a86-b630-6ca1ea54ab97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2797d7f9-7fb1-42da-b574-cca3cf68df02",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a031e5-68ca-407e-af9c-74a0368aaf35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c22d2c2f-92d9-4531-9bb2-570356cb29e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6ded88-5942-4434-b44f-ce789a80e982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a70d6dff-8192-43bb-90d6-fd4c281bfb51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27ae4d88-c4c6-4018-b383-8be88030992f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb790d5-52ba-4a87-a965-f1d90d3a0621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52f898a6-96e9-44b1-912a-7ad7dacbbcdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b29e27-e253-4430-930c-97c1a2316173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5aa5477e-d3da-4ba9-a9a5-a0380072f536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1d6b90-0c3c-4828-9414-690c2e3f4b24",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5433da9e-545f-445a-87f3-330eb9a009f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e3b8ad5-23f4-4f7b-bc0e-730fd28fc7ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a5bd9e-4776-423c-8a31-1f191b1c76ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4a94447-7ee0-43fd-a1fc-77d740aad12a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f8f3bb-f64d-46ff-98e1-6bbf68ee9770",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17edea9-3305-4470-bf16-01114539bdb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bd29530-1e7e-481c-856d-f90761504ca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11f35b9-7aa6-4d5d-9baf-ea608fccdaa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "54446c63-086a-4f65-b7f1-d7affa5feb53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463b51e2-bb20-4b1c-9191-d6a83d85946d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d9505e1-9e80-4188-bc72-b3f3524f6ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d67334bf-fef5-47ca-8bf1-a4c224d21018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da82caf-0d29-4c73-bc66-94df2f24ccf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a979b9e-406a-45bf-8d88-c6643f08e3e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "513b20b9-40da-4d5d-8bee-79bfe570b089",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1afeaf9e-a088-4161-abb8-8fd8ca2fe559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78bb0a88-271e-480a-97c1-9ba087fc9a07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb35414-ed0c-42a9-8954-d391d9c938a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7a8c7e9-afcb-486e-9d00-8a81006f1531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb27729-4b6c-4039-b892-57e77f2b7145",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a554b37-cc73-4ec7-a6cf-e90566cc58f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c48189-6cb1-45e6-be96-f60773afe0b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfcfcd3e-0b28-45ba-8823-ff5c3ef52d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ece3965-d515-40b7-9474-4cbd8c1b6c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "548db82c-82ad-4d96-8302-ca9f0b0c111c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db169c6-11b8-4473-80a0-16aa9c1f8824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4edf9657-4559-40c3-8714-543a5a476406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3536ec2d-8e76-40b5-8105-535a8eec9d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "47969ab0-53c7-413c-860e-bba56c095b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a4d7a1b-f26c-4020-83d1-28a67874b284",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0197eee2-bd04-417b-86ee-7207c8f3093f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17d96818-edb0-4506-9225-06fd715e016e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81b5731-e7ca-4d26-bc89-ef42047969c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "739542ff-d1e4-47a8-92d5-e4b8e7ef0ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79ada30-aec5-4fb9-b771-a17118ed55a4",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22083ec-a873-4050-882e-b2d8d39f32ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63dd0f55-b166-420b-97d5-9f5627ea0879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e06950-bf09-4c78-9e53-8933cbdeef9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5c2a5b1-8b83-432d-823c-7ffdf6df011b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55bf59ae-86ac-4dd6-8f65-88b76090405f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebefdef-a659-4bdb-a4c3-47b5296e4cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812c99f0-a119-446b-b73d-62c35f44a74d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174173d1-aa47-45a8-adee-f6597b82643d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a28f0c84-5f71-42f1-a5c0-e6c2647d1c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4219a9-0c48-49c1-b5b5-4158decba7ae",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4374c770-2970-4087-aace-fd85c167b0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "069d40bc-a979-429b-9afd-6b4da033fda7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c88774-2ffa-47a1-8485-f6f35a806a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "af33db8c-a96a-486c-bfbf-58a4dabce159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19307efa-01a3-4c39-96f7-a10c2a80d712",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f04562-f13a-46ca-9784-3d7478f05b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a14fce4d-05ef-4e0b-9dec-bba5145a39da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d2f208-073c-4e6d-9936-6505606ec0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8851d46a-296b-409c-8ddd-fd7b681649e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a3ef97-f103-455f-8bfc-ed3ec6a8baea",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0492234-d271-4f87-86ac-d289b8455f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "486c5407-4f60-43bc-950d-423ad4f62f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f94b96f-3b6e-48e1-89ae-a75a39ad1ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "01751932-ad88-4e8f-adf7-d4666db587f8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ba36049f-5031-446a-990d-d5b8bbd4e4ea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "05c27e12-4b28-4509-8938-3f8e119dedcf",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "761dce74-3c4f-42c3-8398-32749a85df6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b05221e-48db-459a-9f4f-81379ef462ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9239a1b2-2b1a-4bb8-9057-04e413cbe256",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f2fd85d-6303-4b60-a872-8661584b9cd2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c960e477-6c54-4b97-9cdd-06d6f897ec55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55e22642-ccc4-4e73-bd13-effcc31f45fd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "045ee5d7-7827-4e76-9c2c-e84090aff7f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21312269-bb0b-4b06-a6aa-1cbc8945076c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9ac2ef04-c9c5-4662-84ec-a3a23b4432e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d438e6b9-c6aa-4bac-acea-ce234d382f24"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "478d8444-d996-4daa-a2e5-cf044acd4adf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "500e8bb5-2f44-4dbf-8182-7b59cb28e7a8"
                }
              }
            ]
          },
          {
            "id": "aa6ac3c5-c824-4332-b92b-26cc7b5d788c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "58e7915f-e34c-4f1a-973d-0807ed5a5645",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1450d03-6c14-4a5b-bae7-414f7fe3a469",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0afd2790-dcab-4ad3-aa07-c809f12147d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3219578-a713-493c-bb89-9d5f23643cd8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3d9697ca-ece1-4030-ae5d-d895f57e5093"
                    }
                  }
                ]
              },
              {
                "id": "fe605b16-a9b9-4b1e-abea-8a0a8a771331",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "298750ef-4ad1-4a74-8514-b65ec172fa21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ca20132-d8cb-4d51-8790-2167ce7b77b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d08232a5-8182-4f86-ab3e-dd04d8643ea3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cde633c1-83fe-4af0-bc91-adfea91a95d9"
                    }
                  }
                ]
              },
              {
                "id": "64bae7ba-f786-441a-b7c9-e55f12e0a847",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf633dfb-d41c-4ff2-874f-2d3ee4dd187f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1cb04037-b4e1-42a3-bc31-90215e575ffd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8b53ebc-ebb1-4728-b18a-0d8557759e0d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8b1db4e5-98e1-4e38-a894-f94409c2dc69"
                    }
                  }
                ]
              },
              {
                "id": "3f51345b-f527-49e8-bb09-ac890c50248c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91ee5afb-dc42-493e-a8f8-4fd0618961f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bee20129-05e7-4078-b1b4-30d4d08ae002"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1afe2dfb-ed85-4259-9c4b-be1d738b7db4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "70306887-ff14-46e0-9a82-dbe05c71a5fa"
                    }
                  }
                ]
              },
              {
                "id": "fc4392f0-aab8-4da7-a076-89e16b13c374",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7a51a29-bcc7-404e-982a-209b9c2e6698",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a210e2ee-e22d-42b1-9779-ce9f5b4d6fd1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd1f6b96-859d-498d-a74c-66ce8afdc876",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "103ddd0a-9f65-4551-9624-deb9f45917ab"
                    }
                  }
                ]
              },
              {
                "id": "2fa4bd8d-67c8-4010-9aa8-15a2140c4a19",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d38c277b-f9f7-4999-94e7-cbd15400b158",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d19bb584-74e1-4012-92b1-aff11ba7d4f7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "815ae2e2-ee12-477a-be47-b95e22750599",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fa8a55d3-902f-4f84-84cf-e5bb0d7f68a5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a8ba8513-4cf1-4930-803b-d9425e3e34ef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8a2e7e35-4b19-4355-a55b-b267beef8280"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "345563b5-a433-43d4-961a-905f24549be4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a91d95ca-92b6-42fa-8c74-2dc6527831ce"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be18d379-5299-4438-b980-f0ac77a776f8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a01c08e3-864c-4f49-8675-0cfca166982a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "29a5ca19-2955-4922-984e-43725af6c616",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "669b6e3a-d88b-4fd8-bd0d-fe554be3a899"
            }
          }
        ]
      },
      {
        "id": "8670ec46-3fe5-4977-a69b-729e4d9be4a3",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1720b028-5d14-4336-a4a8-bf31dbdbce4f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b98b48ad-e766-4c47-96c0-e1428bcefd5d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ce7eeba4-a423-40f0-8f44-7e8d3e60a478",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb8fc69-8899-4b2f-96dc-8bb05e34b340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "373734c1-8a6f-49f0-b19b-9ede0d9a437d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cccc3e70-1c74-43c0-93a9-e74ce3aa0e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a07a915e-293a-4f80-8387-afb9ccdbd21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119b06d6-a547-464d-8046-d967cf6d112d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f5cb31-0342-46b2-84d0-8e9256117d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc988f2-b810-4505-92da-9bf20f5ce320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ab05f0-e10b-46be-9875-5f374c1b13da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ded9e0c5-9ac7-4134-9424-bde5760f51b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c92ecb-f53e-4eeb-a333-151927f63aa6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c92be58-a3b0-4972-aa46-34aa5f61c487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38309d03-777d-469d-b6d1-e14a60b464da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc8a463-e640-41cb-9492-15390bdc40b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "02a01c28-7578-4096-94c8-d078ba693a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af56b12a-3b17-4f2d-aaa4-b3e72d533fdf",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58452e79-0c1b-4eec-bb55-99b2dfd2b33d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20bb70a6-8093-4483-bb18-35170604d40c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09a9549-8e5a-4844-ac0c-ad113a4c711b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff9af19a-28ba-42e9-aff5-5d2ecda75d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b426c43f-3898-41ba-a13b-b68c11fc5bfb",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "433326dc-96fc-450f-8457-a4b5f3e82ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "334b6bb8-1339-4881-a09b-d5f8ed0dabce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21de6574-b981-439b-8b54-0b687a78b312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89ed7be3-e562-4c91-83c5-fcf28953cee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b930ce9-a090-486d-8928-c732570dcb49",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6665a814-9ed2-4d8d-bffc-3ea08006a6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98b754de-f53b-462f-bf7c-7b258d74f73a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05217d67-dd8d-4371-a041-601f6920c3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a8607ea-5ed9-45a6-ae69-6cb002f831da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54504dac-82d9-4fab-9795-6521b91738e3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a87b94-adeb-4a12-b8be-53115dd6aaec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed1dc75-ca72-4030-86d3-92f123397f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a85c1a-ddc2-4b86-b893-80da1b1d203c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "08931923-70c8-47d8-b9fe-542d62887b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c7676a-3b0c-45d8-b962-5a2bc54a0855",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b5533f-b15c-4ab1-8874-5680cd2dc788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b677cc9-b0d7-4109-9cfd-3cc1159b9492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec89763c-7a90-4bd9-8ee2-7230a7d98278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7bbce28-f2a4-42f0-995e-b38f2acb74fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1169c753-daf6-4618-9807-4bb7605e44b5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99898d7a-a35f-4c8a-9372-56e1a40b71e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e75f7989-db7d-4c49-be20-65c00a35ed94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c674cb-8e0e-4f25-94c7-7df005885b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e83bdb90-5d61-48c4-94f0-377f29086ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd84f3f9-d1cd-4f7b-8331-fbd9f45afb0d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20394a7e-e158-485a-a8d7-5d853edbd10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35820e52-96e0-477c-ad3a-8d8af5b70027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28de8bd-4574-4647-8b43-bc808f93b238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cafd2f5e-340d-4ca1-9557-485209630b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516e6a1d-4b9a-4089-a51c-22aa379581e6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d850be6d-0dec-441a-8bd5-130d564d25c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd9f715-e2e6-4fb8-8239-8d3d40ce98ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857a541e-dafc-46e2-8be3-375a787d114e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7b549e4a-8ef5-4c0d-bfc2-989d93abf215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "effa2dbd-d1d2-40c2-b0ef-d62045a7b163",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d3d9cda-056a-4832-b2e1-8312088335f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1446aa58-1a42-4f8e-80b9-50100725a98f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b83b42-6326-4245-8144-19831947e8d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "44a99f24-89aa-4b1e-8cff-8e5bcdd6e365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b1a5a8-3417-4222-8363-ff7dcfb634e0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cabee2af-6249-4712-880c-1b3b49165706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "781f5f0c-8643-4e89-9822-ecf4d95d1a39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a13552f-4d3c-4baf-9160-138d965887ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9370936-2bbe-432a-b86c-237e2885a1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c359a05-8f2c-4f17-b44c-5906a8703332",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "338d66f9-2444-4e3c-83c9-ed48e4003f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60f196a6-2eb0-48ed-8ca0-93effcb19636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0ad77ac-b1e7-4b2b-8a3a-aa916dbeff4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7244e51c-4792-40f6-878d-8e99e9908a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf470a86-c350-49e9-8b33-ee51331e5fa1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1249d4-dbea-4256-95c3-3b149579fa36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b59f28a-aa29-469c-99a6-323e22087221"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff33754-9a8b-45f3-a0ed-564a9f35fc90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e24fe006-999e-4c54-904a-08afe0b4821b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee2dadc-2358-494c-adb5-c6d33efa2556",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50080e81-1623-46f0-ae28-7f960c405d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3923acf0-acdb-48d3-9f3d-31ca7ab497cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962915d6-5678-41ba-a8ec-008a7b60cf08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e12cd7db-01e6-4db3-beb0-ac238380d220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27ed1ae-cda5-4229-ac6a-8e423bdb8c7d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9362f364-2854-4d75-9d98-9c1a6c303483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4622d58e-35d8-4a3a-8448-a33418db185b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eafc7ed-d568-4cfa-8f3c-1581bdd20abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e60378f2-b9be-4388-be12-31a4504761b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc0ad4e-c40d-4620-a115-3641624d5975",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a8d8a0-2f76-4d22-8546-89999229b957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "333abee5-109c-4086-a576-8db6fb0a5bb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a49e8a-0290-43cc-8db9-3c8de0b313d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "27654101-0412-4524-9583-0b62fe9eb3c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e815ae-7740-45a0-9e05-491356b3146a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef94036-0004-4553-8da0-0b03e33f9cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d32eef7-5abe-4162-b815-3d42f04df1b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3fe4f0-2548-4ec1-9f63-bc36a5bc7130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6970aeca-72bb-4b51-83ff-a4f8abea7a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cdae783-72f7-4434-8641-14c52223fc50",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eee75f9-c83c-4cc4-81d0-96ef044b7085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c8642d6-7b8b-4550-ab9d-f89ca6f5145d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb66cfd-d980-4860-a1cb-27b94d6121c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07dd7c24-953a-46f7-9ca2-c4341473d1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708b516f-9414-44cb-828b-6344ff10189a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd423b9f-12c8-442c-b8c8-2dcc779c1ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16fe9d31-380f-44af-8af1-6ac837bdb12c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f5bd04-ae7c-452b-9d7a-684337a933f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c42790a-3006-4969-a681-43735c555633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d10225-8ce1-4fb7-a3e0-8be442b71f96",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f1322a-07da-4c65-98a9-5dd9ca8e59f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2088a68-4606-4b70-9bdf-3e76766da59d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a58c02e-9cf1-4b52-b993-f45a4f0435a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "619d474a-2486-41c2-b7bc-cdbccd5d2401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e443c8df-470e-405f-8f9c-b8fc96540a00",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "888a6939-6ce5-4be8-a7e3-d7c703f74842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bfbe156-4784-4755-81cc-c23d22f7154d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9088240-da92-4cbc-b355-0f086466f8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3e2d094-04ec-4bb3-8ae7-a82129e0f37f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb9bb34-7741-40a7-ad83-d1ea8654ac39",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16ad11e-ffc6-4300-86f6-199dba8b4ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be6136a0-8850-4015-84db-6e5b2addceb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e454eb-d552-4166-99b9-0e3b857a2ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8f7e4fe-3af6-4b2d-a7fe-ebc94ffd866b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8fb525-a6f6-47f2-beb3-142e5709f5f2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f358ae2-ef79-4cd0-832f-319184913311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb3916a-f79d-4f61-a764-a32ed538d8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "004821a6-2b92-49d8-a41b-31775b3b22bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03b693c5-94ae-4f73-969f-59308962db49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d12ddf80-8a28-4f86-aee9-6c8d7fcb89f9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db65f4a-f27a-4c4a-9e44-fee66ed38754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "489a95ea-7a24-48de-82c2-8477df8566b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446cd0cd-323b-4b70-ae8b-88193db762fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "380908f5-26ef-4199-9fa7-87b56e0759b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ffca43-f82e-4985-b6e6-1d5c6f0dbbe0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18395ad-5e15-4939-b95c-85f4c6e2d391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73e3145e-0d69-43a0-a04b-0de296a6e35a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2587c6-553c-40fc-afc2-e6e1e3aad356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15d21e38-8069-4936-9181-e0c985dcd5fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987e23ea-f5fa-4482-a9b7-245ab287ac6e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca4ec1e-6641-4c76-a7df-e663babcfb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5dfef03-8531-4f26-a158-dcecf58f052d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247f76e5-73fe-405d-8aa6-be02f410f966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fc97b8b-3cea-42ad-b0cf-10e98b95e4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8636c0-324b-49c3-9bfa-756c652b1810",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69db009-2200-40cf-a9d2-03313587fd68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f383725b-dc74-4745-8b5f-d6adeab043a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43215dd2-3960-443f-8cf1-b43206a7215e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a3f1dd8-b5a0-4255-912e-1d49c385be8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50fbce9-5afa-412f-83d5-82a38b1e5118",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "166bc830-da7c-4c39-9d55-887bf780877d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a773b9ad-8126-429e-b588-df40491622b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ddc564d-3cbc-44bd-8422-1d98dbbe4f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6ff6e0c-2a93-42b6-8934-98867cb674b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53eed2a9-8ec6-4aa0-a504-960d4b88c8c0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80fa274b-5708-44ca-8aef-aff050fc5421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d2382be-294f-4878-9255-3398f5a73b1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71351eed-09ea-4bba-91f4-e3ace7443f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8deed7e8-1f12-46dd-b426-7147fb7376cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9511f554-7933-4eeb-af8e-46653c0aec57",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a86974b-7dc0-4604-8497-4fc47a57fbec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7e5f9a-f16b-4bf7-a0d8-bdff391d6415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce7772ce-2baa-410a-88a0-ff3821d9453a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4f2dab1-b973-4a71-b417-5a5a684d78db"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7029ce44-e2c7-483f-b6ff-d7a35d533e33",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b09d1510-2b20-4475-b8c2-7ef757599bc7",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a79a765-1b97-4582-940a-075a5a33b1f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c4ea93e5-dd50-468b-8ea2-3b952fa30d6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "092edc74-c7de-4044-8b2b-a6be18667e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb99756b-6eb2-4350-b5dc-d0e2903b5377"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f04a587-7271-4549-b237-83bd48c7265d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e43ae79-ac64-4df1-acae-489d1fde3d61"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "33a60a03-39fa-4966-894e-b164dc9a86c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78fb69c4-01ee-4662-bc25-818dfc044c94"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3ba25840-d5fb-413e-80d1-1b36fca4618c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8675021f-7be7-4f19-a684-595c76074018"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "36fc40cc-0f93-478f-bc6c-665c62314239",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "184c251e-73b9-4694-93c5-9cc1cd108f49"
            }
          }
        ]
      },
      {
        "id": "cb2e547f-18fe-42b9-a242-0d629989449d",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "487caaa7-979f-4d18-bd27-675869dfb22d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2c1fd810-35f3-4086-bab9-dbab531ae930",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1d607477-7734-4ed2-8a4f-057e44156a73",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "349bc0ca-0699-4576-bdbc-f1ff047bf724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "716348b4-3e1f-4494-95a9-7a30b9e2e2a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f61b67-886d-4c01-aaf4-b3152312fdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "177925d2-b85d-4542-82fd-dd9a5028da37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6765cf4-fd85-4488-be1a-466cea0eb7dc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73be904-d9a6-4d72-bc52-455181c93836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd6a5ebf-af01-4e43-b27a-06210f5cdff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b33d776-1cb2-47b5-b12c-c95973a8bed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cb47fbe-a90f-4c30-8706-8a085eb2adda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd693f89-51a5-4f7c-a668-a8d34208ac69",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19b5a74-deab-47b4-aef7-a0c714c9f87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cce3655-8b16-4ec8-b28f-a823ac9a24a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45ff32a-e62a-4b7e-b7f2-c19e59d655aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f0630c2-7d2b-4231-840b-955ed198524b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a10d4297-8493-462b-9f46-3e80e9374c8d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24aa1603-6530-40d0-80b8-e1cef5f07377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b97ccfe-0b6b-4949-812a-f7ea105acff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76971bac-5b57-416d-a773-5f052ed11b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f39508e7-83de-4335-b0f5-7bf523beea03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4afb48db-e3a9-4de8-b03b-2c0a91010d54",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca27a72-0cee-4864-8889-a9b7ede490c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a919045-eb0c-4471-9217-f62301e6ac46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3752fdb-c78f-4724-8f6d-e2c075794cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc30664d-67f2-42bc-a1d8-f83d3da7b7fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775731d2-b00d-416f-a8ec-e3a7090c2c12",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae182ac-5f87-4372-96e4-c6358dc85ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e7cdbc-7574-4e4d-9a1d-102d5fcb8b0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d0ff15-d68e-4024-83f2-e4ddbb108469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c3d8f43-28ba-4422-b7b0-965149ee7770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "166211ec-b360-488c-bbe3-9dcb21c42eaa",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07b4e39-91ad-4704-9999-1a5d823cf6c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d022d94-ac50-48ef-8a86-ef9022eaedcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b300a7-5fa1-42a5-855f-1e8cc76d8e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a29081a-6d3b-457d-be6f-044318f9b635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1301988-ae8a-4ca9-bfea-4d4903d87e78",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c9495d-5d1b-42ce-a04f-53b7c318eab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b660c7e0-25e6-49b2-a066-656f781de7dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4173ebb5-4535-43dd-b30f-db80222dffa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29291173-85a0-4f76-9c1c-32779280eb3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3805ef-11d0-41d6-9326-dd7d8ca934bc",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2affcf-5b05-4c76-a1ad-60e9b0460e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98338535-1d9a-4b4b-8676-0dbf41835e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac8728f-2d70-4231-9421-54662cb06b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d536bd0f-b7f6-4313-8229-fa441fdf350c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e37a71c-02e6-492e-a210-e924644c0023",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27aece3b-b019-4096-8c10-baa561b17585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2a72841-1940-4b31-badb-1a8fbaad68c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99dc2b2-e675-4714-8f49-25fba5ab2f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a67c8ab-04e4-4da1-bbed-ddd79aac0157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671579a8-16cd-41e7-852e-d718337c144d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb7c7b4-8816-4923-88ac-ecd4fc7ecba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a3e98c2-84d0-400e-bf6b-6f4c2f02f0c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ae5c85-ea32-4757-9066-e367802b784f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1243fffe-8b9a-4b47-9c03-976beef59e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40840b44-3ddc-4ce4-b0b0-bfda62824c1f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1635100-93af-434c-a92d-af3278d09725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "580e1c21-fa94-4d4e-9850-9dd5238d85ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0357087-7482-4187-a98d-b89774c028a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d7256831-7b56-4df4-aec3-21fa08c78077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ee8123-506b-47f0-a887-7b2bd1d3b29b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4cea920-5e19-4d41-8513-7dc061fec03d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe1d5ac-4c8d-4108-a922-41011d514af7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd30c7f0-bb57-4843-9a0d-84a08aec64db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a45f897-49c5-4600-bb2c-7af27652007b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0eff54d-d5a3-427c-b9bd-30c3c0a5c597",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff131cd7-ac94-4ef8-8552-47ab6f3cb03e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb15d5f8-269a-494d-b28e-5c88587075c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb71f9d2-1e24-45df-9c8f-4bd4cf08d84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "294b64b2-0527-4394-8fac-201da4df6d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36e9698-d7a1-41cb-b65a-6d8fbba42885",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f886c303-7398-4cab-8f9f-481a482c4864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06410406-089f-4bd0-977b-b048bca37bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f9bb38-62c5-477e-9ee7-5fda607bb12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "bee50026-ac31-44ce-b1cc-26acabcabc7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bbf7f0a-a4a1-40d2-9833-aa88fce319a5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a245220-9836-4f06-aa77-d44229ef1e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d347bcc-41d3-4f67-82fa-1a7f0ab0969c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a25c7ee-f93e-48f4-979e-6c2779244c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb2e8eab-b197-4a83-9ded-f45867e759cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6c51b4-4f93-4c4a-9dcc-685495633ab1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6cb2df-e36c-4570-b57e-3a762f91dec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c9284ae-73a1-4cef-8f6c-97e017b916e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec64026-ac22-404c-ad28-88d4c04ab244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e65e9003-6962-4972-bad8-86acbb691b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf0688c-70c2-4cb4-820d-8601a16ce4b0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2635c0fe-cc52-44c8-b35c-9373b5e0fbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97b815b1-63b6-4beb-bf81-ec466b54c1e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0927e631-09a2-48d5-bbdd-44eefcf2cd0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "de98c6e1-8677-4f0e-9c48-cde28f5a4774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b249bad0-e51c-4d77-ae35-eabf7b7693af",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b315b53-5318-4dee-981d-18ff449a70e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bca7e2fc-b7a9-41ae-84de-da579f78dcaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d1133e8-7aac-4b06-893e-abea274b5d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43a34efe-7c34-4ba5-bd7d-a66285069493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0b9bef-1c19-4359-b6ca-b41f53ef4dc6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b813e0c-d9a3-4c99-96d7-58a76bf4e34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7702f9a-fb96-4446-8fab-3bd848bc4648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41ab5d6-a615-48fc-9643-c133af6930d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59bc86fa-2979-4fc2-9617-85e0e8f00f9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab032d5-5747-40f2-8851-e23d6602ef8b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67debf93-a7eb-4471-8591-d5a10470b6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc0e9d0-8a36-49c1-827b-2a392be507c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5587732-c2a8-41de-88f4-d7826bbc2c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9155c2f8-df5d-4c0a-b108-b23ab3d8d2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba2c59a-ef67-470e-b11e-f982229c1c34",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e861ee76-3343-4ab2-b0ef-d4a94b3de247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caebfbbc-f345-44d2-a5a9-23a85426aa10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0517ec-5211-4d66-8197-97dca4f2f3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be7d630c-6939-4ba4-bf35-e3ba44ccebea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a73534c-0e5a-43d7-9214-d6addd24a2f4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d72b80-cbaf-4463-8444-e2550eb70156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e55090-0384-4551-8fb8-954cbc00f8e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af902d83-ebd6-49e6-8000-e277b8028260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b89dde9-0ada-4948-a605-80a4f656384b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd13707c-0efd-4175-a5db-03edac4d3bce",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8221e80d-076d-4039-abb3-0205b7b13a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "155b606b-5d39-44f8-8fca-76a8180dcb36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99639a73-a8a9-4b4f-91e7-4eeb2c21dab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "582e27a4-c5c4-40d9-9973-749bddf00a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5afdeea5-8204-4ac4-9fdb-b827da97d513",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd0f68c-c090-4cf7-9f08-1ead57890f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "309e6e25-0e1e-463d-9427-5cae02b3b7e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367b80ff-aad2-425c-bc93-979af9548ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b66c517-995b-4463-a184-a4c0e4a6ec21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6917032d-a4ba-46e5-911d-a9b64a7ed4cb",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec64fa3-b3f8-4e23-96cd-190bd9b3b721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "496d8cf2-174d-4c65-b787-8d38949eb915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e2e706-d8fc-4580-a667-c5fcc501c6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6976775f-f4fe-4b05-92af-a2b5c66d9d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813c8891-7734-4e7d-9abb-2a531f86a867",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b83e988-0dc0-4d79-9e63-995232525999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "433a8d11-c870-48cc-9625-9e4092f8b0a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a32265-493a-4048-96f4-048a6cbc9a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e69b6194-1217-4656-b1bc-fa3af63b22dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0322d8ee-7532-476b-abcf-e0a436025fa5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2272045-2e20-45a1-b75f-2ca1e3de99c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc49a5dc-2214-4387-b6d2-9d2b7a933de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479f9f21-3fed-4a54-891d-06359caf442d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10325459-df2a-464e-a815-cde997d6a6e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4674b0f8-72b8-483e-b4d9-3d5fa6d43956",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608da7d2-4ce5-4a86-b03e-c2b406fc02a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d176b8d-2696-49a7-9966-81611c291473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e27259-d644-4e63-96cc-732f0fdf45c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95cd7f9b-e74d-4fa8-ac0a-cebb9d368708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffdce069-b72a-4d26-807d-e5d779a07478",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156e4b03-2429-41b6-891b-f83941b06578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59a79435-10c3-48c6-9103-8460f7084379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e40ffe1-05d7-4ad5-81d2-0ecad1f327e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b4d60ff-d6ea-48f2-b50c-2f6b4bfd16f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47837705-b490-4d0d-b8e8-9e195876a7d5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9132ac-c1ed-4fff-b0e8-cbb807a678b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7af7d64-7f63-43c2-ab8f-a1960968673c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb9359d6-4ad7-4969-8329-b76a325d0792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9cd514c-a0ae-4293-8530-a91042018d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7ffb9e-05aa-4af8-900a-02546b8189af",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "833d766b-76c1-4b96-9921-ad4caf1d0d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b0a6d7f-2202-4e0e-9fa0-f63c2e3d6be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c13413f-1e1d-41ad-aadc-fb424c0adbc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a96fb394-c3d5-4001-8c22-eef7284b6ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6b3afa-b980-4ecf-9da4-60df7e33ae3f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "161b37aa-dae1-4f4b-bbc1-81d8efc51209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9ef1d7-bbfa-425c-879b-f6143c3fa8f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b23256-2ffb-4016-b78f-86f292d972bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad63259-61ee-4a8d-a31e-b857b752e54d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e912fbaf-3499-404c-a0e0-0094233a3f22",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d111ef-ab0c-4140-a542-fb2c988f0e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e108c9-117f-4a8f-8c1c-278e20a0e8d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca3ffd7-0edf-4b79-8df6-fbc414ee7603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "280b8768-f5ac-4525-9d23-009000507734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17a1287-751e-4c92-a7eb-5c7fadce94e5",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34b823b-4b9c-4c3a-ae62-5a5330661355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429fc29d-7c74-4368-a212-82a8cdbc23aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d032870-f5b9-41e2-84ed-ed44ea86dd15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02e9c26b-b506-4ad7-a9dd-8ac67474b2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfaee0a3-e84f-461d-bcfd-9ec910b7fcb3",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e059e70-4d5e-42ac-9bb7-c6dee7447e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2395f9bd-7ecc-4fb7-ab0e-bf8c6658a552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f98cabd-bb73-4edb-b8b9-4ea7a09289e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9734a5e-5a29-40c0-a182-8db38598f6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6183b30-bc2a-4fe7-b30b-02485d943c70",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "604a5ec2-3e68-43fe-9843-f3c0351d2559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb7624f0-1060-4284-b765-46b233055ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "318d2129-99ec-4677-a670-9bd08d7e4475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b1f2cba-ce3d-4ac5-93c7-84ad23b13bed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8b147f84-0bcd-4f39-b73f-595314bf5ee1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "57310c5e-c0c5-4034-aff4-7e929971563d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47503cab-6f81-4d90-bf77-c9eca4b15c86",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "554b5e9b-1cd7-461c-806c-43cf68451122"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b810c6-0746-4c48-83d9-f678e616c470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a8c4049-a237-461c-bfec-1d3b9c98f73e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb03a160-8c7f-4dad-8b24-dd6d57d55f85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62259236-dec0-4694-9354-a09f6f3ae41e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d92ec903-0e2d-493b-ab6e-48192552cccc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd8095a3-722e-4910-9a38-9fb1da9b2e67"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f6614a44-b996-4fa8-96bc-ba4ff5603c4e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "de7b3f10-8008-4008-9c20-a9e8abd4374b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1256816e-e425-4acf-ae65-1cea261485d6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "158769f8-6bdf-427e-b4ed-0810af8ec16d"
            }
          }
        ]
      },
      {
        "id": "d6486bcb-36e5-441b-8bb0-1d920355f1d7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "404ed3cb-2908-410f-b01c-3b4c6bd75fcc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "61f4bc96-510b-4849-8115-4aeeaa15272a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "abe7ca88-d87f-4bbc-8c47-8d6fc741e851",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0086f500-aeff-4147-99a0-711b740aab19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cde84b09-6612-43ee-9fe2-c37542fd98b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2a3c30-1636-4e4a-8629-68eaf9d796f9",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e2179c-577b-4cfb-aebd-1138d40fd3a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baf1a0f9-5084-4be7-af3d-b982d496387e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d296e9d-de6f-4e43-b909-c5e6a07b8e6f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d0a3ba-9887-4929-a593-8b130204e04a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d3e78de-a095-471b-bd6b-c552caf452ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98ad4ac-24c0-4a9f-8ff3-80f376d4428b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b296c2a2-e1cf-4ac9-b8ed-caf7bf93977c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d51970a0-bb7b-4901-a10f-43a060e30818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc85ada1-6207-400d-bbda-ed29dd758138",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41862d32-ed8e-4418-9afa-e9934726cc40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39445a21-64d7-444a-917e-937ccb1a7a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "788b5154-763c-45ff-bdc2-4d2b706881a2",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ba6545-b454-46db-9475-3461f6245a75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a437b5c0-f499-499b-9dc2-45081f8e38e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb1abf2-f731-45af-b731-77e331b426ee",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33e4961-fead-4a94-b2f6-b261fceba31b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7f5854d-7fd9-40eb-946d-cb62cc837ab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "916cb0ae-9edf-497d-b7ed-6768d20a5ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "679af95c-6451-4838-8c53-b60edc55c60b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b248e21f-25de-4ef8-8491-cf1461142868",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051bbe1b-1904-4705-91cc-61b4a38cb6e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44e497cd-0845-4347-94c5-f5cf27799e51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6097d316-2eef-4c18-95aa-7fbe1dd93a7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "460f5ac8-756b-4354-b23a-7c35b9ea6146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76be197a-9e27-408e-a192-6f7739fdb016",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf74168d-5cbc-47d1-8976-7b03ce6a01df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a60ba6a-3cea-4e94-bdd6-7f4f319cfc00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39960d98-e4af-4645-bc03-85cab83e202d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80f3b0fd-81cb-4030-8b88-ff75f5af5606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28f25ac-aac6-4fa9-843c-3802f760cc2b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2f5c72-30cc-4234-b028-1d23c78895cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04a1d94c-57ae-4469-ae33-2bfa3c60766a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4f72a2-0776-4c96-b4ba-b4c9ebcaf16a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec5e1b1a-1a71-4328-9bb4-d194d4249331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f236cc-f723-41e7-9aec-5a50f0f5e493",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d70b97-6694-4905-9555-7ce5300f2ab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f9738db-5df6-4d66-94e1-21efb67e5925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33e382c-9e4a-4ec8-9af9-c612099d007f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eec5daa-63b7-41d1-9f45-c096464ec2a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d79c540-b4bd-487c-be9a-d9709ec8f6e8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33df9aa-34bd-4ae4-b41e-feccc09f4a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "018ddd32-827c-4d1c-838a-48b077409fa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "756c7fe8-8d52-4307-9484-7b55b22935fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e0f4d67-b5ad-4157-9672-ef7c996c92bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d331568-2143-42aa-ae57-dd1c70209d6d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14440e99-a2cf-46e8-9cb2-d9a0d4a3f8c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc3790b1-5577-4ad8-9abf-fb5c2503a562"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec9ea9b7-3fee-4586-a0c0-7fb6155a7f40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "551aa8bc-a1f5-4d41-903e-f8f57902ea26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6e8d13-f93e-4085-8ae9-f7f1404f446c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "effb7412-51a2-4cb5-a351-0d0bd8fbdcc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e54b3ca-e8f4-4bb5-a6dc-fc8c4c8e0f5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "979de11d-4c09-4b98-acef-81465330eefa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71ad360c-29b6-47ea-a865-bed91c01cf5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ae106e-287c-4347-91dc-a0b6432bdd47",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d70c5e-0784-4efd-8fb1-3f1822b11265",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1412759b-4444-41dd-a921-12617262745c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6561ced0-3ae4-457c-9b9c-978e5286ed3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c19239-f77a-43d6-8621-f3f44fec73d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "241dd19e-c27d-41eb-b095-139c030669b9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19c5d95-fc68-4ae8-86fd-bd0e7d3acad6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db6ca9cd-77de-4e8f-8408-8ef92d9b47a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acea4b8e-c77d-4be7-94b7-63c3d825258a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c58d2dcb-13fe-4125-96ee-fdbbd63b5c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ecb2ae2-b637-4d60-aaaf-1a27e04218a8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33829844-2df2-4d70-a4ab-ca32dc4d46ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e9d5461-16cf-4f1f-9634-5159c661f879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e51cd1-4c17-4601-af0d-103d5fec4f39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea37edf-0e74-4a2d-b426-d82a85c9c6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069955c8-23b8-43cf-b0ad-44a8f7667667",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2741c86-49ba-4f94-9cbe-03f9de2c49f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f0f54f3-2be6-4cab-aa83-6667c006ce5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f06b8b95-9ecd-48b9-81d8-3a7c7b377d9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c313c03-df92-4c36-ab61-f757b0874c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b82a128-30f5-46c8-a444-a51d5dc0c59c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5995743f-71d9-4244-9ba8-83e382cbb3f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02420336-eac9-4c1b-887a-c8916d8707eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b8bdab-3b16-4d05-a15f-eede7913b776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a05cc0bc-2fae-4bf1-8a62-2028606307c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5509c263-984c-4ff0-90a7-fed7b72e7227",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f23d5c9-7f5c-45d5-84a1-f25db0336aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "010326f2-8aef-4446-86d7-cd07e28a4017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1219ef55-d8e6-4a71-bbaf-d6626e0083f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ea82f1f-acee-40a3-bc72-25845b5ad107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972bd297-ee89-4b80-8e21-f490d2ede5fa",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc26f8c-b330-4d7e-97f6-addade419362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "842dbd13-eff2-4f1b-b1c0-3bf39a7c9090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4cab190-bcfd-4eb5-8716-0e0281ac4ba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa2421a7-d6f3-4cf3-8dca-eecf806ff45c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a88e2ba-5921-41b2-8fde-4ab5d7e51c00",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc3f179-6db6-4fe6-b698-aeb192df24d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d68dfe74-85d5-4c7b-85e5-87f601dee1c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "663bcee9-f54a-4a0b-808d-10ffaff94d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "604b244b-352d-400b-ab87-d04d3fc9e7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f1d6a44-bee5-4b9a-9199-035f6d77a42c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45fca42a-794c-4dbe-88ad-f3164da70b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "883bc75e-3f87-45f2-b042-d52f6de8efdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "587effde-a828-4ee6-a35e-24221ac6c39d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b621b14c-5cde-4cf0-ba9a-6c530e385244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6763e177-9401-4e5b-a682-7bf4760bbf9b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85385fc7-2fc2-47eb-ac57-3678cee5dace",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9c05dcb-9ce5-4df8-9371-dd5db2241fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddda595a-5981-4393-b3b4-0db6bedf9312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cdd6813-c47e-4491-b164-88d2b65c8777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee1a3e0-b9e0-4bee-aaa5-9766f499cd1b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f192538-8510-46bb-a7c6-36d6608e1119",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85586890-02b6-49ae-99f3-f83b84f85c89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f94a6aa-0574-4a06-8d09-949ba2f02391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ad3505-1fb3-4ccb-8db2-774b502e2bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2f4b2a-bdf0-4d62-9409-cc87d634ac80",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acdad5c7-7a1e-4f0d-a751-ebc024bdbf2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed173e76-b1e8-426a-8133-9dfe76a547f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a41acd02-ff16-40d6-98ed-f9dc33f84d8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ba1858-319b-44fe-92c9-ed76ac0eba86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4319dd8-aedd-4cf7-8cf2-aedffafa132b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82944430-8734-48cc-a6c0-1e019726d903",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a1b1af6-a335-4d89-9f28-28a291f871d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e75c67a-fa01-4a8d-9006-9c2e4d4331f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f26b075-f5dd-4ec7-a1f9-6180b9cdc9ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea874fb-3c50-4cfe-a3d4-ce0d99e2c802",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d413a3-1b78-4eba-851d-b753516e0b8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2e4c503-fdb4-45b0-b950-3991c7412204"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb649da5-a6d2-44db-a310-09c70561a6b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8fc07fb-42f4-421e-bb2a-34c0bff1675d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903d2f87-8eb5-425f-a76b-8328695ca5bb",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad218f9a-1ca2-4192-856c-55a908207f3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32ab7b06-c87b-4b73-aabe-bcac301533ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1578a4-d651-46c4-962b-d7d5fc40d079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d7f734-acd3-4a35-946d-3db6bbfb28f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5776ea-97b3-4b78-aa12-ca04d33fd3a6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c284dce-1e03-4198-929c-b45753d1d1de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ae42129-9796-4b95-91b7-130c19f2eab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d14814a7-455f-4170-be77-aa00b16051b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55295bb4-e778-4f7c-8142-20120d408840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f77cd80-2f38-456e-9518-c96d44c9d005",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed68a6f-47fe-4579-9ca4-d2859e52102b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c339e3c4-a2e9-402b-80f7-4dcaf13ef21c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95706ba0-ed3c-492a-898d-f3c6337ce7cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95824561-4245-4cb1-8f52-c1f3199c6af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde465fc-fd64-438f-bf4f-a313744b4848",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62fea0a6-db61-4297-bbe1-2aa981011818",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc66315c-6200-4d70-8b1d-34957ec45999"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82283711-5279-4d89-ab7b-9c1c3135a784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2abdfc4-86e1-4c29-b674-2e1abf50a3a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a7f714-5c2b-45e3-8d5f-3a06f0d9834a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06aea3a-94bf-41c8-9508-0f7349cb3033",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2b31a60-e392-4855-b613-1f4b790e2134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2fb5108-3e23-4ad3-a8a7-3b438d00dd0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e0ce821-665f-410f-9774-5015d17a899a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72241080-dce3-424f-a0f5-4835c90e0c41",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2192a0a9-a39d-4047-9c54-5a791b795fee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e464aaf7-2e0c-4ca6-bbd2-548023572405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3c0c67-6f8f-43f4-9f64-44fbc1e4150f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a8a71f2-e531-4f4d-8472-478b513080e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d875d0fb-caa6-4a7f-b357-cc3d6f060a2d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "affe71a6-3ac5-4f25-a76c-1612440deb05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1345e361-8f2d-4fe8-8e3a-6d28835af90a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b794d40d-02b6-495d-a2f5-b139537dd6ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e39a69de-2f42-4804-8eb2-64d1ae2dc92c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671cad9d-8997-4475-aabb-6e9af171bf93",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a924df-72bd-4004-896d-e62ef42462db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4672bdfc-22c4-4f51-8356-537c40cf0b6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f399ab0c-ff59-4dae-980d-273cb979a05b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5e94b55-5959-463b-b8f5-158c8c1c2555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90e0c94-0731-4e7e-8bb3-c624bdf5dd1f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bc2b4d-f2cd-44ac-946d-e17bdf785229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01f8f5f6-41ba-4418-8354-db4083958da3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "464cdf89-ff71-4596-b947-7602c1c9f2e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e18f0dd-6917-478c-97fb-4a0b87de9a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458cda4f-18a5-4489-a88c-f97d31520acf",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75931bea-e501-4b95-9dd8-bbbf6ef5799a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d4901d-158d-4db8-a5b4-2062ee3ddd03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a97db3-18a8-444e-8175-166bcab38025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "476456d9-6bb2-4d64-8fa2-de73a913b47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af167369-7cf1-4ee4-88e4-df12118e4844",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "726fc404-621d-4ef0-823d-c3cbb7b26a7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1910cb6c-47ad-435d-b1b8-4ebf6e1bc32b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27bef304-9f54-4004-9adf-f2dd4b27a3fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f79ad7-8fcc-45e5-85c3-ef4be7c82f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d57feb-a29c-4d7b-8c97-a81333a4022a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2d79e3-3802-41d5-8153-c6a34a44f460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd018eb5-0fc9-4920-936b-330a613ac43d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c905d0-258d-4fd9-b4b5-0b09e0d5fa7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d69364fc-85eb-454b-b89f-a1cf3c711cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f667db-8722-4f3c-8da8-8547758cb977",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab67cddd-70c7-45f0-a350-43bdeb1a1063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3edaa7a2-daff-4ad4-ba03-f96238df774b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32095ce8-e3ec-4afe-a8e8-ae73b6656aaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "251accee-96de-4b2e-940f-395b07e70d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c489a31d-3d87-47c3-a7e4-13c4c5926c9f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acfb92a2-070b-4f41-96aa-0684e9e058ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5be0c9-f13f-4d65-a4f3-531617411d53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfbb4bc8-143d-4593-83a7-95e1cdb78f1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b15e45-5809-43db-858a-ecd171960d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9715915f-c1ae-42be-a66a-71d0e03c0196",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff865c4f-dffc-456c-82e1-5bf1483ee5b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b6a76db-c3ed-4623-85bc-a48ce7caa950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e906ad21-c531-40b1-8200-9f80472dad69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fbf010a-b2d5-49b6-bedc-48dec9451401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87a6206-5b41-4158-b800-83127f1f3402",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9e86fc-ed38-496b-92e7-da406c6e52f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ff9b57-d961-4206-b6c4-b92960903e9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "563c2b89-06b4-4155-94a1-85171205b643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67553288-f40f-4c29-9d2c-7c65829313c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b109f479-fac5-4d6d-99ba-a418938cc5da",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983e66db-c909-4ea9-80bc-6a6ce8f78d6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb62874f-caca-4b35-9620-7f16c75208b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a003be8a-8756-4ce3-92bf-d4d2c344e58c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0342106a-8913-430c-899c-2c21a2378b02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c49f39-e2f8-44f6-a9c0-cc04bd4c7cda",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1128a25f-b12f-44c7-b1c8-549bbac48a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aedd52b-0a11-4185-a2c1-f6ba244b30dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f37de6-338e-4a03-bd24-c9dc321d7ae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c01013a-3782-41c3-9710-85d4bc3bba64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e126551-ff1c-4cc8-884b-1d28410f6681",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bcb54f7-cc16-4981-ac8e-5d9374a1b9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d8b2d1-9339-4f65-8241-becf9af2b350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a5327a-d960-4f12-b778-7a3d1c0edf09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "727c944e-3f3d-40e7-840c-7ead8722f07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4e59a5-769a-435e-9980-d321bc0ad950",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009c7231-802e-46a7-8ccf-aed8e3d90e9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a18c3d11-6c26-4d49-908b-385ebf9e29b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46548ab-b766-47ef-bd5e-f510e1f252b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b842d4-40b6-4e56-8b9c-12b6002d81dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5acdfd00-386d-4777-a43c-858cf62734fe",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c95b2f-d48b-4b94-933e-276eb9227728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "101f1c08-41e4-412d-b369-0ec14f6f9a2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2f0be9-54a7-4481-9781-594a43d8aa86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f8aec0-8073-4c0d-959b-19853e6ede81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344ddb70-2732-49b2-a2fa-308cb42f1f63",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0700a0b-475c-436f-94ed-c6965301da74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cba2233-c64f-4d57-958b-1e3e2c603e24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb1f82b6-5c1e-47d2-a891-ab14826fa683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c78d80c-0b10-4c50-930d-84bb32eca1b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbc8f70-5f2f-4cdb-88d5-be93e154080f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f7d5ea-1072-4533-acb8-7abaad96ce9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3b3eaed-b388-477f-810a-39b49677af76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bcd3909-2b2f-4da4-a0e9-e214738d0fd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b8955db-8b41-4814-ba4a-1f3192f079b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f696df-dd1b-42a9-acd6-eab24f22ffd6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d961b79e-2de1-4919-b706-055755bf3952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5937e504-f343-4348-b598-758b201f0c84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7556cd4-b1e5-4b18-92b9-309c5c0db5b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e5b3db-2906-46a4-be76-76223d431095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb80147-40db-4df6-a3c2-ac8c30c631fe",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d2a160-123d-4f75-9734-afaa0f27cad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "357e6d6b-3483-4011-a7ae-8cb857d1bdd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45588748-cec2-4234-8762-26c11cab2734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c65f5bea-0da0-4020-b0a4-8c384bd60d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fda25ec-f9bc-473c-b01b-35adc76a2500",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4c850f-6bc0-4915-9b8c-fba052c576a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df99ac26-a63b-4f8f-be2e-ab6cfdd333e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bef44b7-2b3e-4cde-be05-a1278f3fabf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd06499-399f-4abe-a8f6-e0c73893701f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ede4f37-e929-40d7-9664-40828a06d11c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c473abb1-da74-4d8d-9ca3-34a8ad2f3289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3762d72d-f4b4-417f-a6c1-fbf20b4c8db3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c170e4d-b588-41bb-a310-ea8caee8ad52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f7200e0-4f78-4f36-8ed3-dddbdc87c74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74a2677-1fd8-45f8-8ba3-e2ba2fc9bf41",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79438996-953a-4719-b920-b5ea57a43ef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aee9eab-5124-4aba-ad2e-7166f2afdece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "405988e3-6e97-4f39-a217-5a2099315e69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "248e57c2-f2ba-41f8-8ecf-efb9b352a7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f589b4-954b-408a-83b1-0d86076cb15c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "099a63a1-5448-4611-ae62-f0837f2bd952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab2e374-6747-43e3-85ad-e61f1a481d38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68bfaa44-609e-4fce-9e3a-822400587ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "424eacb4-5ffb-4bc5-b024-5fe2a49b7de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c30c4a0-0105-4e7f-a4af-5c21704d10c9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854b0880-a6ea-467b-b419-fa827d047793",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd1b4e92-5587-49b2-8e39-a6eca7d8636a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1256c3d8-126e-427b-bdd8-0c0bfd90b172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d916079f-8dbe-4444-9b8b-0a27211c7edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d08f731-236d-4fdc-98ef-0ae7efa8ac73",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d18ba23-252b-4df0-b4cd-6a0ea14f5f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c37cc87-ffbd-4334-8bff-1322d6aea4ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fafbaf6b-6242-4ca8-97fc-9b7fcf6abc9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09b50c5c-dcbc-4d9d-bcdf-a06815ccfff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a1504b-efb8-4d02-af68-b01a6ce56f29",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4acfeb4-5e5e-4a9d-a28c-40a6e5ad0d6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19f4ec98-9a25-4b14-8d85-aa2672a07304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "760a1de8-4194-4dd7-81fe-593b41371f58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f17db52f-39a8-454c-8f4f-27086d7d91eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f25bb5c-e0e2-429c-b65f-bb74175289d7",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81fcba78-942e-4fc2-b0b8-a1f0a1ef0293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99960e8f-f66b-49b4-a917-a31e87847ff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d03895-597e-4ecf-b329-f775fafb7b88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba785cc8-4538-4607-a8a1-16e53273dceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b889cb-681a-42e7-b7c0-bbd664bc24bf",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2944f2f6-5186-414e-9e08-354dfa92f4e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "842c15c8-9ec2-4fe7-a344-89682c710784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a70730-af45-4de2-a5b3-8a9fae65fb30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bda792ff-a80e-4d12-acdf-45efb759db32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00e3122-1ca7-4df2-b39a-2d5b2c471cca",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245420bd-0bd9-4524-aefc-cfdd50f6d90c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e674d4e5-b2fc-4410-897c-1fe0204820a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "264772f1-82a0-4c44-80d4-bd95d4c183d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17500995-eeda-4bb9-b1dd-c45d8e58d92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654b8a51-94aa-4f81-aab9-6b5854c8ea92",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8804c6a-f25f-430b-9c70-286b32593e80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aec31b6c-a58d-441c-808d-961c9ba01b20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a75cc9-8cef-4c5e-835b-93fcdb7d1373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "480fbb2b-5dea-48e6-965f-ae92eb2535ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70760b8a-0489-41d7-9f67-898e7b608bdd",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e500d0-1b76-42af-85f9-86cc3657f276",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a07520f-5a1e-4806-ac3f-261911594485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea9e053-12ab-4935-b6c4-043fb69639e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84415666-8766-4b4e-b992-0a4404b99fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b248f1b-e994-4d74-a1ee-e7b4392982ee",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9d5d60-a85b-4196-82ae-ce7f55e64b36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2661a04d-aff3-48ac-a676-90d07f5b2dd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b916266d-c3bb-41e6-80a8-075f9ca7c49d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd263ae-c3a7-44c1-b11d-a63f98c9bf16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891b559b-1a8f-4e0a-941e-03ed41f3f570",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6a061b-d308-4456-b170-b674d609bc0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "322a7d56-9ea3-4fba-8ba1-3ff14b410537"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2383e941-035e-4489-a5d2-efffbf72892e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a18cd0ee-e10d-4023-9283-07a213d2976e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0715cb-5bc3-4bb0-8fa8-5c73b97a43a7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8218878a-4217-4b65-8646-26d19a6eb1b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a370ea4b-c82d-4f66-97d3-1cd183bbf527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfcdf0e-e41d-4fd2-bea9-6c745508966c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0e07db7-1423-4ea5-9f3a-43baa6f1c256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5115a79-8561-4bf1-b8df-c3821b50734e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb7be7e-59d3-4d6f-b4c3-b31885500966",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03feac01-2a2f-438a-9302-30278fe8500d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc1925a-556e-4c9d-9507-025fafef5e15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d492c01c-041c-410f-a124-64124bd08d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9f0657-6e89-4f2b-a7a0-03a6dd5c9278",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f2d9b74-2eff-4c44-acf6-f90f61a766c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da8e6f3c-eebd-4ccb-b852-2c348ce22f4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3a0407-7f44-4d8a-8e89-a231c86d60ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "269afed0-ffd6-4400-b914-02ce57421b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d19ceed-49d1-4034-9afa-447c7a714cf9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee83473e-3c82-44cb-a903-c0988ceb942c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dbbb014-9816-4f62-b24d-1dc8990450a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d78b33-7760-4a3e-99ca-9ca7400629dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4449b352-b083-4809-9d4b-72bbbaff6ea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3578c7-f0d3-490e-a0d1-fc5fae1ff01d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af26a5ae-2e11-48ab-849d-4f6588bed3aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02e9de23-6510-4706-b835-135ee04c879d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27511610-d566-4c93-a6a0-8e00a6c735d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "023ba59e-9ec9-4ca7-9879-254c8c6381b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fba463d-058e-4703-b94d-f124fd9dacbb",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1ace8a-4ef3-4e36-bfce-cc378492c266",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c239371-2514-4330-802c-cb4fef5986df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab64af87-326e-45c9-8c7e-4bfb0452db70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf28e8aa-cae9-40fa-a26f-28d6c3c4a408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85845f6f-15b8-417b-a96f-09ef671936da",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c56ce6-be0b-43a0-b47b-4290421f7142",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ffc4d75-972b-486a-99d9-9e9de3adaa09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "582d8f34-d387-4896-90d3-89137af117fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "662f87e4-3a48-4e82-b6e8-640e8b90f271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b0b991b-98f4-445d-9bc1-5751ae4b6c4d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30b3a30-b770-4d52-be40-ec86d9cb0be8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af9ffa03-bef1-4576-aa74-2a527a29175e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edaab3d0-def3-4a14-a5e0-18515e2822f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae18bb86-fc9e-42a5-94ee-d53961d9aa2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c697d6-55c2-4256-acf0-3fde90b973b6",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce941d1e-9608-4795-9ffb-239dcbc0422d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "583dc34c-8c3f-4d4d-8c97-991a47e22cc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e1f725-3400-44d6-9240-522009cc5412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02385f43-ee1d-4130-afe0-626c876d171e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450ab402-a38d-4010-87c5-1fa199326e41",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5aba72-605f-417d-a709-c76d35771637",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d68ac67-b5ec-44eb-8b30-47de3b346a28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59d3d7a-1509-4bbf-8e47-3809fb98bdb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "425f33ec-9f8b-4c39-89a0-2c8751814cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ad2804-a27b-4c02-abe4-22310a62630c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1706d14a-a880-4834-a538-2de68a36e23e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab2f88ca-502b-477e-8e35-e96abe486662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e51e821-d9a8-4611-8be9-5ca1ec329edc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46809e72-dc66-460a-9866-d2d236168aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067e4240-4092-4f41-9978-c8bcf50f2276",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02ecc0b-b963-442c-954a-1d7a5c0541e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "655ff07a-0daa-4d57-86c4-83e238ab501f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea55002-0e37-4c4c-9543-ffce6569aae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b68a41b-6e96-4368-9125-862d54d441bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67e7849-74a7-4a8f-8e3a-4eef987cb92f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1eccd2-e693-4ab0-bd4f-f190d3b182f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6079ab96-8cd0-4d89-885a-72de61210e96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2db39ee-ae0c-40c1-8f04-12c4b52715c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0312ef19-4051-4f3a-bde0-c6ed3a66075f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465124cc-08a1-4938-9bc1-ded3b4a34997",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d55775-527d-42f2-8e8c-8bc5abebf8fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f64972d8-c653-4d31-97aa-e131f6e7829d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "268b3077-5031-4ee6-8f3a-cf589870467f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a60f1cb1-ecf6-4539-80b8-c551326cbf71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e5cc2f-15e2-415b-ae5a-14da2619a5cd",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e11941-7eb8-4e65-a882-67da474ee14a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa65ecc4-18d6-48ea-83e0-65cc65c617a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d86a913-c905-402c-9512-345bf8b0231c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78cbfa87-c422-482b-91eb-932f0a8e36f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae5f769-c7c0-40de-a0fb-091b8472d746",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6aa3a17-8ad6-4ddc-8a7b-00da06162180",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fce852a1-d9fc-4478-8b4f-cff4bd432e44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02a05ad2-d40d-47a6-b810-905d82a1ec31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0667ef24-6c44-48b9-b2a6-cbe76e9c93b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e630f0-9f8d-4bd4-85f1-1d5916151504",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3f3c6d-a68a-43d0-83ce-ed5c1f47e8a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81446d94-d2e6-46f1-80a1-24ba9e16376c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "789efd89-33dd-4595-9c71-c67a4e08a425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feeb7770-afff-4fc9-a857-718981581419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad2438b2-6428-4d78-a9e4-425e61fa963b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f0d4c2-b5a4-486a-b6e7-03de37965b2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60186342-ff2b-4f0b-86bc-3ec1ebacfab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "586b608d-ccd8-4cde-a5de-50fd46f78220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5317182-173b-451d-b895-bf6debab78f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f026a99e-eb8b-4ac1-9be7-100c68b3ca71",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4089afb7-ec02-470f-b1d2-a70837b2ac16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a11f900d-8761-42b3-bf48-ffb715b3480d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "532add84-0e10-4145-b4bf-975d57f518bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12219b31-bc7e-449b-95e8-b5b5885d3755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea69b63-cec1-47e3-ac67-90526709037e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc12053-c5e7-42d1-86c2-a79f671f5c84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f9334fd-ea0b-46fc-8999-108e227619d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9c879c-3572-454d-83fc-3e64afac89a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "225344e9-88e2-472c-92f7-32815893f8a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689f6d3a-2c18-4648-95fd-775026020702",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b81220-e860-4cd4-8455-91a9ad1474ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7192d4e-936b-4674-9542-e424a53c6dc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f59e1e-4494-43f6-8378-48ded057fd3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a96458f-beda-4fad-a517-bb9cb8889163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1bd611-1a06-4717-ad12-097bc1ddee35",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a3469d-0ba1-4773-b4f0-81a66ae666b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba74489d-6e2d-4f12-91f1-042fcc46a831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0a0abd-cba0-4027-bf0f-73dcb039a9be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f28e915-f5ea-4fb9-8d48-d04a2985caed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4dad6ae-8d0b-4512-b145-71b439ff20d4",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0415d3c5-b414-423d-8c74-2823434b27cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd17b2a8-fff0-4127-8014-e7c8ceb98272"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc9b165-d205-480b-8053-7e71e1b72780",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f14e3aeb-cff6-42ef-b23b-8095eb27be8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f291a9c0-892c-4a58-9211-2d121b540f88",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb630a6-860f-411b-a2a0-94110da8a152",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0497348b-20ad-4e58-be2e-068d3fc0a64a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7478a97b-ddc1-4c4d-99e4-b37e8934585f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb3ccd30-8bff-4279-a758-adb5cfbf7a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edba6618-c626-42ca-99c9-1fe436d35868",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1546e7-200d-4e1a-8c40-c30c6435d774",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "540b5bf0-050f-4a6a-8e55-465f187c9e33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e46511-e702-4e72-8ccf-1e2220206e60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd4cde27-ab0f-4fe3-838c-43a8706dd804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad39d96-3465-4a3c-8bea-011b2ac38559",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "984c2b54-bb9e-4f44-ae59-8e46bc22faf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83bbd33b-93d8-44b4-9cca-a0375ad4e601"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58052e21-6a8e-4a0a-ab7b-f6c6348629ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "042c5135-4726-461c-ad93-7194551ec014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87eddf9-d759-4ea6-9202-9ec474b309fc",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf102d5c-84cd-4868-b8bf-f806926194d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48d9ca59-8740-48a3-a0c9-ca8b8c9163fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3d7a8d-3c84-4e47-9222-4d6bbb611d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17a5808c-fff7-4416-b54e-43d4641e30ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334dda2d-842b-4c77-8ffd-0afbcc80ff6a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e80e859-bbe9-462b-8aa3-85a68c5c2bea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a729808f-d9a5-40fa-8191-5a0566660f4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf938176-6830-43c2-9bc1-a440eaa660dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26000c95-4808-4d98-acb4-02bf430647ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32819d4-7425-4e67-a202-0e86178c2d7c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befdd4ea-fd98-48b7-986b-fd4d20dbfb16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9824546-fe55-483d-8c08-48d08c2f7996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce2a0bb-3287-4f7e-8c2f-28abdd2b582c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26044dcf-0866-4bed-940c-ab35a526e1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a070e26-0fe3-4cfa-a262-dcf136178afb",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28edf59-090e-4344-8253-6335205d428b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d16f899-760f-479a-ae81-9aac2e8c2578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd712a2d-6f57-4bbc-9f84-f26af3c4e1db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ebcdf62-362b-4164-84f9-54dee209dbda"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e80438eb-e486-4a2f-b48b-87e4fd643f91",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "948486e5-4f5e-474b-8178-cf80d6911f70"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f6a591f-240c-4395-b3d9-23853e754b01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e05d9eac-ff77-4618-80c1-1b89f844afa8"
                    }
                  }
                ]
              },
              {
                "id": "d864d681-18fa-4f85-b830-f79c0892d961",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f918c52a-620b-4faf-ad05-fc8d467337a1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0058dc10-ba55-4235-9b0f-853b5218df8d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "00213159-6608-4985-9175-66160d2e8011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e630973-c9a5-4a29-97fa-663faa769d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ccdae0b7-0ce4-4654-b6d7-400066cd2d06"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "107add16-ee9c-43a1-9c22-9ef72324eb96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5710edfe-0f95-4fc3-bae3-b48b0727cab0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "084d7027-13e1-4965-b7a6-02a63a48e407",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31e85fa2-8e90-4577-b20a-000e548c5b4e"
                    }
                  }
                ]
              },
              {
                "id": "07ed4977-7406-487e-b03b-c8759c0c974e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "06771306-0f58-49ed-b875-e7b8c62a12b4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "501243e5-17ce-4412-8ba0-e88bb4036883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "eeba13a0-645d-485e-abce-95b3ea01b380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c61823f-910a-4a6f-a4f5-fc28c1bd01f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64badef6-487f-42ef-88fe-0f31f86c7f63"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5c8b9ce5-bdbe-4823-ba95-f79d69d08295",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3232958e-d28a-4170-b242-d7a9326fe29c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f91ea0b7-8ed0-4843-b52d-d410c928ba6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "58dbd29c-6922-439d-9c22-3a95ab34faa5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf1cd6ff-aba2-4110-be7b-31c8e151c89d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "148bc905-36af-40e6-8870-5450085f7514"
                    }
                  }
                ]
              },
              {
                "id": "f2222263-16bf-40ea-86d7-532c9a103f2c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ae91835-59f8-4861-a30b-9ff0138d66d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5fc1c305-69d7-4bc9-ba30-13b5a2c9b0cb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7145b413-59c7-4a8e-98f4-28036d6e3259",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f8834ae-be48-404f-8079-b1742d2fae65"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2be7e45-0aee-403a-8559-8b9d46bfacad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "ba1247f9-d6fb-4c95-9229-7eda6a48ca17"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9c7ef2a4-d129-49f7-9926-b6a2b99438af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "abd2ee26-c87f-4785-890e-88170ba4804a"
            }
          }
        ]
      },
      {
        "id": "22c0a5f8-e0a9-4313-b7c9-1d29397eeba5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a3c61dca-2243-4376-83f5-51eb4f3c0fae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ad9ed8c1-a272-46ee-bb07-e68c56ecaf71",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1bab8edf-4a73-435c-8514-f0adec27799d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc8a117-926d-4d9e-a9c3-9c2246ca6eff",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a7985e5f-2cc0-46fb-be36-4967ab7bd1ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2962e6-9241-4705-a0fa-51dd5bb12dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "715019f1-cd48-45cc-a981-33f46060eb6b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e6e31ed-2390-4b77-b514-58276d22a913",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4eeed32-7b84-4acf-bc90-300b0f707c19"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d563fef-6f3d-4e78-9db6-28b0b8308f6e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eec7805e-a7e6-4b49-baff-ba3f3d2199fb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55666bf4-33e7-4a8a-8ade-72433cd6f764",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "cec7193a-0230-45b9-99d0-d2ca1a9058b4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6403c3b3-512e-4e9d-bb40-db35e6fc71e6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c573776d-5852-4233-9a85-607b8a07169b"
            }
          }
        ]
      },
      {
        "id": "b3c95305-6707-498f-abef-cbeaaf5b7fa9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "997a7587-0933-4c6d-9291-5ea27ed55656",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ea1f6321-0002-4d37-a405-02650e591726",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74ca4cee-3fc1-4bf2-9031-3cd96c98d244",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581b8339-66df-4384-8b0a-69a7620c991d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51c27ee2-9626-4940-9339-32c1facd513c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb44ed88-529a-4497-b7fa-7408a496b5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ddfee9d-9ea3-4449-bc13-1be382bc7855"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6e1565b-9bc7-4b69-96e8-8c8fceb1e34f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63db7e87-a8e3-4822-a22d-957ea1558f9a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b38e4323-ca1e-491c-a563-f19de74bf291",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb03ba9b-f0ac-402e-867f-6f98896b8062"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5683a14d-6ac1-4ed8-b286-07a67ddd1603",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "39cae0df-3c9c-47c3-ab2a-2dd23e8644ef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9c4229b2-659b-4052-b7e4-1f0b6182b088",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1754398b-fd82-4d61-b232-0f870cbccb3f"
            }
          }
        ]
      },
      {
        "id": "66fbedbe-ec79-42d1-8cb4-0087b58cd8bc",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "eeb37b40-b406-4b28-afec-cd582b0344c0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4e251179-65db-4dac-ad81-cb6c686dc9b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9cc0fd3c-d64f-41d2-a265-93d6164e3674",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861ffddd-32c5-4630-a45e-7d1028cf0b59",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec9637ed-0254-41e2-838e-24f912c6aec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc5d1d3-5b56-4d99-afec-1130f8ef2ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c90f2a3-a7f5-4781-9469-d41605bdac8b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03a7f76e-c720-487b-9c2e-a49058dbb19c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72036a26-d812-4722-9d57-017919f2aaac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "06d2f637-2577-41a0-ae05-d16b87db0df0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6591c4bc-c16b-4cce-90d9-466dd128e7ec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a7062884-dc22-4de0-b71a-344877f8cfdf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e877b39e-2bc1-4089-9525-ff3dc3385781"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52c4b3d8-a7e2-49c6-9067-110744e42b62",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d330385-31be-45cd-8c6b-6a522ee27d54"
            }
          }
        ]
      },
      {
        "id": "9744b1be-ef66-4652-83a6-73cacf11150b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "84d82b63-bf0b-4c6b-a209-2c926acdc246",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "28ded0f3-6030-4e07-bd48-2abf90e67615",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "cd58ca84-68e8-4d4c-b42a-3e5a78bc5b85",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba3bba78-1e24-4538-97e5-44db032565ee",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8cbbc73a-6a3a-410b-921b-7864a2356868",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 316
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 69.1549295774648,
      "responseMin": 12,
      "responseMax": 1363,
      "responseSd": 90.60071788530729,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1689209298732,
      "completed": 1689209330707
    },
    "executions": [
      {
        "id": "006f7a0e-83b4-4f51-9e04-a65c7e478ce9",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a2eab1b4-4670-43a2-bb87-6f3cd5378dac",
          "httpRequestId": "6e3c19a7-16f2-40db-b2b5-6380afd0ad48"
        },
        "item": {
          "id": "006f7a0e-83b4-4f51-9e04-a65c7e478ce9",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "71cdee7c-88b1-4671-a9f5-601239f33ec3",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 0
        }
      },
      {
        "id": "3338c4e0-0712-46db-a10f-cab93166299b",
        "cursor": {
          "ref": "26d0e64f-0156-4a53-8a6a-6d3b518ebc26",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "efce8b38-f2d1-4dc8-8e35-8f66d20b2992"
        },
        "item": {
          "id": "3338c4e0-0712-46db-a10f-cab93166299b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "48625c65-af9a-4ea9-a620-166bab6ac581",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 0
        }
      },
      {
        "id": "2686ebcc-318d-4cdd-8571-f6111508a6e9",
        "cursor": {
          "ref": "b258952f-7cee-4f44-af77-611264a550df",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4820f1f7-27bd-4853-b1b2-bc6f08f66d53"
        },
        "item": {
          "id": "2686ebcc-318d-4cdd-8571-f6111508a6e9",
          "name": "did_json"
        },
        "response": {
          "id": "75a663ab-4ec2-4935-afaa-c550209209a9",
          "status": "OK",
          "code": 200,
          "responseTime": 819,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1605e37-4106-4c5a-81ce-889ac1725b10",
        "cursor": {
          "ref": "5505b8e6-2ca9-46de-a397-7f15fa818aa3",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ad9e165d-d5dd-4567-8934-db2c85872dc1"
        },
        "item": {
          "id": "d1605e37-4106-4c5a-81ce-889ac1725b10",
          "name": "did:invalid"
        },
        "response": {
          "id": "dfb20c71-fe42-419b-a901-c6c5fad6a703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1605e37-4106-4c5a-81ce-889ac1725b10",
        "cursor": {
          "ref": "5505b8e6-2ca9-46de-a397-7f15fa818aa3",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ad9e165d-d5dd-4567-8934-db2c85872dc1"
        },
        "item": {
          "id": "d1605e37-4106-4c5a-81ce-889ac1725b10",
          "name": "did:invalid"
        },
        "response": {
          "id": "dfb20c71-fe42-419b-a901-c6c5fad6a703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3eea1d2-6ade-4ad9-beb0-a486128c24fd",
        "cursor": {
          "ref": "882682a1-5632-46ce-b316-970dd3792a40",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "47d493ef-a709-47e6-91fb-81ba2a36165c"
        },
        "item": {
          "id": "a3eea1d2-6ade-4ad9-beb0-a486128c24fd",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "12ce9a2b-5086-471e-b4b2-4bc4954afe3c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 115,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "bf7d42cb-db54-43ff-a04b-9cdabed17830",
        "cursor": {
          "ref": "61211cc2-612e-4070-ba21-c70870794ea3",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "694409db-7ecf-404c-8a2a-afdab98c8cdb"
        },
        "item": {
          "id": "bf7d42cb-db54-43ff-a04b-9cdabed17830",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f91db88b-5fb1-4cc3-acd2-b00829b6a06a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 71,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "665d6291-fe10-4c9a-8a4f-076979e05565",
        "cursor": {
          "ref": "c17fa044-dc1e-4838-a975-bfae2c834231",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ae6b4940-37c9-4c54-82b2-4e0fdde4a978"
        },
        "item": {
          "id": "665d6291-fe10-4c9a-8a4f-076979e05565",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bb296e66-6262-440b-a3bf-dfabaf55117c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6a4b2a-5352-4aaa-84c1-19495f196b78",
        "cursor": {
          "ref": "3c29a80d-1537-4ff4-bc19-01e1ad6157b0",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fe0f5c92-8793-4243-906e-4935638b0dc1"
        },
        "item": {
          "id": "0e6a4b2a-5352-4aaa-84c1-19495f196b78",
          "name": "identifiers"
        },
        "response": {
          "id": "e4054de0-9d0b-4864-97bc-794bd9065e8b",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8db97daa-1d72-4dee-8339-c565692e9605",
        "cursor": {
          "ref": "c0a0bb78-a7d5-4da8-b047-26c719eaba18",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d55c6463-359a-4620-8d66-ceef60101e15"
        },
        "item": {
          "id": "8db97daa-1d72-4dee-8339-c565692e9605",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a7af3cd2-9e3a-430c-884e-8acce231c8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "fbe85445-53f7-40dc-abff-62e15d7da75a",
        "cursor": {
          "ref": "3c665ef8-9e9f-44f3-9538-d0e596cbbefa",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ed8b2863-9e14-4fd7-9969-3e1c50771e87"
        },
        "item": {
          "id": "fbe85445-53f7-40dc-abff-62e15d7da75a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6bb3363f-839d-4c44-93b2-76c68f3cdce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "0a5c5ad7-051d-4f4e-9745-33c0c2c690ce",
        "cursor": {
          "ref": "9fee3db0-17b5-4bfa-ab88-555d3b11f107",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d0cf97ce-d2e6-422c-8393-8e14ba391cd8"
        },
        "item": {
          "id": "0a5c5ad7-051d-4f4e-9745-33c0c2c690ce",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "34049a0c-5b2c-441f-8289-f0dcde56ce20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "b789833a-98d1-4985-bc28-e6bf5847b409",
        "cursor": {
          "ref": "6318accb-0706-40d6-957d-2713597625e6",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "bdbad17d-8ff9-46b6-8945-081133cde73a"
        },
        "item": {
          "id": "b789833a-98d1-4985-bc28-e6bf5847b409",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7a9e3486-906e-4d67-9486-4e51e8dd7a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "e0a96c84-e8a8-44f9-838d-0b94da994cf4",
        "cursor": {
          "ref": "d2ac0937-7c5d-4f34-ade7-d836d095200d",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a050ad7b-e871-4fb3-8639-e579ea302f64"
        },
        "item": {
          "id": "e0a96c84-e8a8-44f9-838d-0b94da994cf4",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "fabce2eb-5b23-40c2-8520-3a0ce3947a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "a41fafb8-c3d2-4be7-a45d-47919342827c",
        "cursor": {
          "ref": "e8c6617e-37bf-4fb9-bfd7-f3134cd54347",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6a26393c-5758-4314-8307-460d437b4e89"
        },
        "item": {
          "id": "a41fafb8-c3d2-4be7-a45d-47919342827c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a9c8b987-8148-4fe0-83b5-a9e64abda9d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "af35d330-3e38-4413-ab0e-b418788a0a0c",
        "cursor": {
          "ref": "5a07e6a2-2eb3-45aa-bed4-05e0b0aa7c47",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6156234e-4780-4806-aa3f-f6a58a1ebe87"
        },
        "item": {
          "id": "af35d330-3e38-4413-ab0e-b418788a0a0c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5afa3646-99ca-4323-9a67-585e08f36f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 215
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "b66fb940-4ce1-4f78-a6c2-990283ddb357",
        "cursor": {
          "ref": "06e2c2db-ac10-4cfb-8a8e-b676a9eb218c",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "68a0b5e7-5a4a-485f-9d14-f1a32ff2012a"
        },
        "item": {
          "id": "b66fb940-4ce1-4f78-a6c2-990283ddb357",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "af9a61a1-1828-479e-808a-b5475adf7993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "a6d543bf-b144-4619-b889-6292cedd45a4",
        "cursor": {
          "ref": "875b38f2-58a1-4498-96c4-fa556f8687b0",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d897cfc0-3b79-4ab9-9380-b70f2baf8e43"
        },
        "item": {
          "id": "a6d543bf-b144-4619-b889-6292cedd45a4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c85c3f5b-1f41-4f05-9a04-3ffd365f1ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "9a7f0392-d42d-4f16-a000-801538423663",
        "cursor": {
          "ref": "3a39e35c-0eb2-4232-b21b-f092950c5764",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "70889756-4dc2-45e5-8731-1e1c5d56f3ea"
        },
        "item": {
          "id": "9a7f0392-d42d-4f16-a000-801538423663",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0faf28f5-5a1a-4788-8fbc-5403706d4346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "73642184-9a38-4f00-a9a1-a6f443975b55",
        "cursor": {
          "ref": "6d5ec186-21a5-4908-9c8c-61ec31c37c71",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0c61b669-8fba-4c15-be95-5faa97320e8c"
        },
        "item": {
          "id": "73642184-9a38-4f00-a9a1-a6f443975b55",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "bfbadc83-8540-4c37-b16c-7a96854d5329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "0e5d989e-093f-4b7e-a60c-286004259609",
        "cursor": {
          "ref": "427af76d-8936-43e2-95ac-3e434a695648",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7b9b85af-4d1d-4139-b0df-bef0bf28967e"
        },
        "item": {
          "id": "0e5d989e-093f-4b7e-a60c-286004259609",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1b4c5514-9a4d-4c34-9921-7e620776aedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "ffe403ae-3924-4ab7-b269-b6636dee5823",
        "cursor": {
          "ref": "92637c06-013c-4e41-833d-f0bb51cb7ae6",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "04bfcd40-3ccf-4764-823a-deceef7ac9e4"
        },
        "item": {
          "id": "ffe403ae-3924-4ab7-b269-b6636dee5823",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ec329717-cac9-4995-a19b-005d1a1264d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "bce126c5-ebe9-4dd2-9676-446e8ccd4619",
        "cursor": {
          "ref": "4d53d0bb-4f79-4b28-ade4-e466173dca90",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "16c5786a-f47c-4372-a8c4-efc4ba016cfc"
        },
        "item": {
          "id": "bce126c5-ebe9-4dd2-9676-446e8ccd4619",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "c8876777-c49f-4144-85b5-b9ccd3ff34dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "686d3d8b-4037-4df0-8e0d-2110964445d5",
        "cursor": {
          "ref": "4b13e93a-c5a4-43c7-b36f-c2db3332c10f",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7411a514-bdb7-4f44-be5c-908a160b3ac6"
        },
        "item": {
          "id": "686d3d8b-4037-4df0-8e0d-2110964445d5",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4d1e2b2b-519e-4d72-8879-c40684d87e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "2dd847f1-9e26-4b2c-bb81-8b2170eac5a6",
        "cursor": {
          "ref": "6be1154d-cc99-4e63-bee0-e19b71230374",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "cb99690d-e1f5-4421-aa97-19dc3c61bdcf"
        },
        "item": {
          "id": "2dd847f1-9e26-4b2c-bb81-8b2170eac5a6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b78fb77e-5866-4aa4-bf76-56b92329de9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "141d056c-36fa-46cc-951e-58b1ad311deb",
        "cursor": {
          "ref": "b3df1ede-636f-4e04-936d-1ea40f5a63e7",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "23c6b100-4247-4e90-9c63-64a06af3f630"
        },
        "item": {
          "id": "141d056c-36fa-46cc-951e-58b1ad311deb",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8723e2ff-675d-47e8-b469-bafd1b222f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "683816f8-5184-417b-b5a4-7e96dca34e3a",
        "cursor": {
          "ref": "6ef24f9c-a481-4642-8b82-cbb6fa027b68",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "92507a35-a0db-45de-8a58-ba289ca67277"
        },
        "item": {
          "id": "683816f8-5184-417b-b5a4-7e96dca34e3a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f2edab86-6e59-4052-8c17-c7742931bf3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "c4e77bcb-806b-4fde-aa08-298f97778e49",
        "cursor": {
          "ref": "c8bb5e79-02e3-4995-8b98-4c792aa5238b",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9597d264-3037-4e76-b635-3a30e6ddecc8"
        },
        "item": {
          "id": "c4e77bcb-806b-4fde-aa08-298f97778e49",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d95eed6e-0214-4ebd-aae5-dfcfcbf01ea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "547825fb-afb1-4b8d-87f6-bcd8f8fd68e7",
        "cursor": {
          "ref": "51ad7cb0-83c7-45d8-a5f1-54bb9378da43",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "445e8376-890b-4f1e-b44c-d290147354a8"
        },
        "item": {
          "id": "547825fb-afb1-4b8d-87f6-bcd8f8fd68e7",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a9c8a953-fe17-4681-8b86-c2d61fee8c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "95fb168d-fb17-4de5-bbb5-fad22038ba2c",
        "cursor": {
          "ref": "3fba8dbb-ea6f-40c3-ade1-d829f8c1d35b",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9b66f779-0e4b-4ddb-9350-afdd24c75092"
        },
        "item": {
          "id": "95fb168d-fb17-4de5-bbb5-fad22038ba2c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e2173fbf-0dd6-455f-960f-5f07ee56da39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "833d6353-706d-4e14-94af-ed5bd4985af8",
        "cursor": {
          "ref": "da9b4e9b-92dd-4c29-b532-ae73bc692d4f",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c7dd0854-2f8e-45cb-a42e-b2b8f460a16e"
        },
        "item": {
          "id": "833d6353-706d-4e14-94af-ed5bd4985af8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e15b63e6-301b-4b55-b28e-e0cb59b8acb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "96983c41-9814-443b-a878-a786b6dfdb76",
        "cursor": {
          "ref": "14596209-6605-4852-b22d-78347324b1ef",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f8d28f63-4ba5-47c6-8f57-42a2ea7dbb9d"
        },
        "item": {
          "id": "96983c41-9814-443b-a878-a786b6dfdb76",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f8847b09-22ca-4706-b190-287892a18e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "7c02aecf-dea9-47bf-9366-8c8faab0eb6f",
        "cursor": {
          "ref": "5b6217ee-4424-481c-8a8a-8662ac7eeb85",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f3630a3a-a512-4848-8e7b-bfbde9287a7b"
        },
        "item": {
          "id": "7c02aecf-dea9-47bf-9366-8c8faab0eb6f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b43b254d-7c8b-47f2-8053-e263d21d5815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "a323dc65-1436-4093-ab9c-e04735239b75",
        "cursor": {
          "ref": "b49f572e-f7f6-4c37-8e59-26564048d4ed",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "830cc11d-1bdc-4293-ac2d-ef958b0b8338"
        },
        "item": {
          "id": "a323dc65-1436-4093-ab9c-e04735239b75",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d6732a14-f013-4b7f-853f-e44d413717c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "afdfeead-0ad4-4c39-b02c-432d2e7ff3eb",
        "cursor": {
          "ref": "c901cabd-3db6-4944-acb4-2693b05884e5",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6cc4790a-9e9d-46f9-b675-7ec340d1d818"
        },
        "item": {
          "id": "afdfeead-0ad4-4c39-b02c-432d2e7ff3eb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f8d3438b-dcab-4193-821e-6266eeb396d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "9fcf84e9-6cee-4c5e-b0f0-6e7a38482a23",
        "cursor": {
          "ref": "315ca29c-4e91-4206-bf6d-deba7b8a2f8f",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2170da8d-8757-4ed6-92e0-13ef05e13c87"
        },
        "item": {
          "id": "9fcf84e9-6cee-4c5e-b0f0-6e7a38482a23",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4791cbfa-2d1f-4570-a59e-3bb4bd4f285d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "dad98afb-cc58-4ea6-987b-4901bcb14bbb",
        "cursor": {
          "ref": "9be7e7cb-3964-4dfd-a3bc-a0f33fffa9ee",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5bece016-bf41-45c2-aec3-c4ad04aa98c3"
        },
        "item": {
          "id": "dad98afb-cc58-4ea6-987b-4901bcb14bbb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c549a124-2747-4883-ae1e-a6aa2cb8b976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "ac5803af-1a9a-4308-aeec-8dfbfc4b2734",
        "cursor": {
          "ref": "7f4941ad-1f86-4d36-9830-c994826010a4",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c971cfe1-71f4-41fd-92d9-790c8f9e3987"
        },
        "item": {
          "id": "ac5803af-1a9a-4308-aeec-8dfbfc4b2734",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "781a5f0d-180a-4831-ade8-b6a194016773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "af2ba647-37d1-4d4c-b216-63fa0c1a0bcf",
        "cursor": {
          "ref": "a679fbbf-b07f-4ad7-a916-909eb538cc82",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8ccfa59b-0955-4c56-a6d6-3e5d9458b86e"
        },
        "item": {
          "id": "af2ba647-37d1-4d4c-b216-63fa0c1a0bcf",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ca262a0c-2826-4878-83a5-99dcfe4cf376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "1bce09bf-f256-474b-90d1-0a04b36fa76a",
        "cursor": {
          "ref": "a330859c-4a0b-42db-9a8c-b9a8ae054de1",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c4d19194-045e-40dd-9551-eb58d154d781"
        },
        "item": {
          "id": "1bce09bf-f256-474b-90d1-0a04b36fa76a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "09100923-bcd2-4751-a4ef-294c906ce508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "930e3498-5c00-4553-b438-bd9e972b0ff2",
        "cursor": {
          "ref": "07fe23b3-6e46-45dc-acd0-9a435ad4e937",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "556b0537-3781-4de7-b292-44b891b4ad65"
        },
        "item": {
          "id": "930e3498-5c00-4553-b438-bd9e972b0ff2",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "cc26d598-09f4-400e-a7fb-bf41c7a35620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b0fc1d5b-e1b7-4d70-8fd6-210ebb7a053d",
        "cursor": {
          "ref": "27156010-e7ed-4ffa-861d-b2a10ee4a3ed",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ed5dc007-c9a7-4cbc-bd7c-90642d7d0a0c"
        },
        "item": {
          "id": "b0fc1d5b-e1b7-4d70-8fd6-210ebb7a053d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "14afd3f7-ea75-4d5f-b1f0-bf1cdf05af4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0467ffba-f797-4724-b29b-cad8d8b8c336",
        "cursor": {
          "ref": "b61938ef-53b0-4b61-bf8a-0c340e78a726",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cd03bb04-54f7-4873-8445-8e8534529506"
        },
        "item": {
          "id": "0467ffba-f797-4724-b29b-cad8d8b8c336",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1c00148f-fda2-43e1-842e-dc12bc17b600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "da1b8f79-06e3-4ed6-8e73-7f5c80a59886",
        "cursor": {
          "ref": "248feb82-a4fd-409e-abfc-811f855c362e",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "47821606-80cd-4f46-a95f-32e946e6669d"
        },
        "item": {
          "id": "da1b8f79-06e3-4ed6-8e73-7f5c80a59886",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b8728a0c-01ee-43ef-a076-6128a414ade0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "dd9ddead-1802-408a-8139-27162d8757e8",
        "cursor": {
          "ref": "7229efaf-494b-4b52-97d8-68bd44cdab20",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "acbc7baf-2dd3-4c4c-b7ad-8a54431a0053"
        },
        "item": {
          "id": "dd9ddead-1802-408a-8139-27162d8757e8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d28d8efb-f11a-4f0a-bbf4-e0a9f2809448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "739a6043-4cea-41e6-93bb-ae74a10572d9",
        "cursor": {
          "ref": "1f599de6-90ad-4d8a-876b-7301af12e694",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "27ccb961-6431-47fd-bf0b-86b18514c32e"
        },
        "item": {
          "id": "739a6043-4cea-41e6-93bb-ae74a10572d9",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2344f3c7-9e73-4409-bd1f-79e82e3c5ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b55cd19b-6905-49a5-a39c-88a22a3f17ae",
        "cursor": {
          "ref": "452b46de-19f7-4bfd-af74-519f04c16ea7",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "354bb3fd-db94-47dd-a074-15f4c9a7b29b"
        },
        "item": {
          "id": "b55cd19b-6905-49a5-a39c-88a22a3f17ae",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "56709857-13f8-4b08-8fc5-5c642b1741be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "e782aff4-4d8c-434f-b622-dbd257c624bf",
        "cursor": {
          "ref": "0faa45e5-89c6-4ba4-91b0-984423e340e5",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "57346b69-7930-49fc-942f-a8bc114178ba"
        },
        "item": {
          "id": "e782aff4-4d8c-434f-b622-dbd257c624bf",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d8f86567-0913-4800-958c-16f93190d210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "eedd6572-3a4f-420d-b835-af75d54749d8",
        "cursor": {
          "ref": "b132c6dd-57aa-497d-962d-51ccc459c568",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d10d22f0-e17a-4fcc-92e4-3290575fe132"
        },
        "item": {
          "id": "eedd6572-3a4f-420d-b835-af75d54749d8",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3421fd12-a0fb-4898-856f-f2107f2a64a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a9b0cfdf-fc82-47fc-ab3e-25e6cc933ca2",
        "cursor": {
          "ref": "49e89164-8b0c-463d-9936-d7e54637f9a4",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f0d7d8d8-8874-4cfe-b972-119310dbb52e"
        },
        "item": {
          "id": "a9b0cfdf-fc82-47fc-ab3e-25e6cc933ca2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f04780ed-330b-4e6f-82fb-163a0f03a6fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "decad770-6bea-4356-a4fc-9d397059603a",
        "cursor": {
          "ref": "3876a2b9-8402-4ca2-b798-44f247b40ca2",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "02548a6a-47ce-41d0-8913-dbc63cc0dcec"
        },
        "item": {
          "id": "decad770-6bea-4356-a4fc-9d397059603a",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e261177a-1d8f-48aa-b306-00b7c8dfd56d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "470b60db-425e-4dfd-87ea-88dde8fb9afc",
        "cursor": {
          "ref": "d31a11fc-a7a6-43b6-abdf-a10cac1db0b1",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2b843865-27e9-449f-94d1-1a215b11a82e"
        },
        "item": {
          "id": "470b60db-425e-4dfd-87ea-88dde8fb9afc",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b443932c-8978-461d-9a32-d90edd764150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0d8f96fa-5f36-49d2-abec-01898ba0c492",
        "cursor": {
          "ref": "7f71d8b9-a4cc-44cc-a414-7cd0325800c7",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d19a8c47-d768-4336-900a-ed3390f6f976"
        },
        "item": {
          "id": "0d8f96fa-5f36-49d2-abec-01898ba0c492",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "52146b5c-1635-4154-b4a7-7f2dc8452fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "c090e72e-3dad-4e91-adfe-f6e0155dec11",
        "cursor": {
          "ref": "945dc95f-567b-4f6e-96b3-219f4c68c627",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "790d8b68-530f-4f43-94b0-f1789fbeb708"
        },
        "item": {
          "id": "c090e72e-3dad-4e91-adfe-f6e0155dec11",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9c2079b1-a1b1-4cb7-928b-ca117d25376e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "f79e7a05-9ecd-4c64-9ce9-ed7c698946f5",
        "cursor": {
          "ref": "7610aaaf-9bfa-4513-9d1b-a01a1ae341e1",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5ffabb95-724e-41ef-8c40-21c71314ba3b"
        },
        "item": {
          "id": "f79e7a05-9ecd-4c64-9ce9-ed7c698946f5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c10aa5f9-9adf-47ef-8423-d6134dcb38a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "3e413cb9-e103-46e0-8709-fae9410d6f5c",
        "cursor": {
          "ref": "e5002280-1be0-49f2-ac12-00f210b474c4",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8eada4be-4111-44b2-8d8f-767172abc018"
        },
        "item": {
          "id": "3e413cb9-e103-46e0-8709-fae9410d6f5c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e1a78682-2261-4a6d-bbaf-ab3f839cba1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "e8d5ea25-0fc1-4a64-b608-de1f6d4e1ba4",
        "cursor": {
          "ref": "d6ae97fa-af77-4d18-a004-d4191628ddae",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f173de37-b3f4-4e5f-90ee-ad376728a8c8"
        },
        "item": {
          "id": "e8d5ea25-0fc1-4a64-b608-de1f6d4e1ba4",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7167177f-f2cd-4500-8f44-e23c33159f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "44ddddc0-88ac-4eb2-8860-5c2888794bf8",
        "cursor": {
          "ref": "36415c65-9d20-42a0-848d-8eaa388a6560",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9d1c050c-380a-47a4-979f-e84787455a15"
        },
        "item": {
          "id": "44ddddc0-88ac-4eb2-8860-5c2888794bf8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4ed6ecf4-3eb4-4480-beec-f17fbfc85165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "3d2d72ed-aeef-42ca-9545-8ef3cd57c7af",
        "cursor": {
          "ref": "db86c88f-f140-4275-a86f-0cbc49131ec7",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "74415e8b-16f3-4780-a2ec-52478a034691"
        },
        "item": {
          "id": "3d2d72ed-aeef-42ca-9545-8ef3cd57c7af",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1e154a82-a6b2-455f-ade5-2f3136c42308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "7f2315ef-e4d4-4ed1-8be2-08a5e3040a5f",
        "cursor": {
          "ref": "6cafca9f-cafa-434b-b608-feed09018e4c",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "cb7c4b47-ef94-4579-956c-1688e0a9a314"
        },
        "item": {
          "id": "7f2315ef-e4d4-4ed1-8be2-08a5e3040a5f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f003b5ab-090d-4a42-b24b-e870c70de2ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "b1739b70-e5a3-4c85-a18e-79272c09e0a8",
        "cursor": {
          "ref": "f053d04a-8c35-4be6-a770-9e3622c093c9",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "70f3cbc9-56b5-43ad-ac00-e1d937306f59"
        },
        "item": {
          "id": "b1739b70-e5a3-4c85-a18e-79272c09e0a8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e4adbe14-3b0d-48d5-8b3f-f15e84dc2fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "7f44439c-a490-4188-a45e-03526a35271b",
        "cursor": {
          "ref": "b1397cfb-3eaa-4c8e-ae9c-812c380f6eeb",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "6ff60029-7eb8-416c-b41d-2b5f97c516b1"
        },
        "item": {
          "id": "7f44439c-a490-4188-a45e-03526a35271b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "97cf9326-0653-438e-a321-be146a180dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "9193ea5b-a3c1-437d-9f8a-fd6f9f906ba6",
        "cursor": {
          "ref": "3720361b-735b-4512-be32-50123299d8e5",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "865abd2d-e9de-4db5-8dc5-00df52c71fb0"
        },
        "item": {
          "id": "9193ea5b-a3c1-437d-9f8a-fd6f9f906ba6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "95b5d8af-2029-40da-a0df-a74707612cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "d1c55c96-c1d6-41fc-bbc4-890cbbd38a3d",
        "cursor": {
          "ref": "7351d169-2709-4794-af9b-0be9ce54c01f",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fb9df051-4b6c-4738-acb2-db58957c6daa"
        },
        "item": {
          "id": "d1c55c96-c1d6-41fc-bbc4-890cbbd38a3d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7c61958b-db51-49b4-908c-3e25a075b7b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "38b472ed-36a0-460d-9402-507dbf4c2197",
        "cursor": {
          "ref": "c211d4c9-880e-48d4-a8a0-5e01c0c52713",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "06f55e2f-f3b5-4f27-a031-ab8e853bf0f3"
        },
        "item": {
          "id": "38b472ed-36a0-460d-9402-507dbf4c2197",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "be7ef763-bc14-4aa1-8935-9adf6c177255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "0cf82fdb-f161-48fe-8235-0e0a0183269d",
        "cursor": {
          "ref": "25562211-1a58-4f9b-ae7c-4ceaa90a56d6",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2635ee0b-85ed-4dea-a97b-e7ee7c6a4f1f"
        },
        "item": {
          "id": "0cf82fdb-f161-48fe-8235-0e0a0183269d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d0166153-1637-45ee-8e30-92e3a407efde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "c21f62e6-a7ac-43d8-93dd-f92953b411e7",
        "cursor": {
          "ref": "eee546e4-bd5d-4700-a708-ff7492d43dc7",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bfebaec3-7f80-4402-9331-8cab403a10bf"
        },
        "item": {
          "id": "c21f62e6-a7ac-43d8-93dd-f92953b411e7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e388179e-094c-4368-aca2-f07cc531eb00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "1dad20a9-13fb-4614-bd91-ccd3c1ca9c3a",
        "cursor": {
          "ref": "205bcfbc-5805-4695-a4f6-4ffa5c9fa42c",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "dbf3c37f-cce2-4f63-b6bb-2b00b13fda8b"
        },
        "item": {
          "id": "1dad20a9-13fb-4614-bd91-ccd3c1ca9c3a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "075429a7-eb90-439c-a110-7960f3816e2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "f5df71ab-e913-47e4-9361-95db1a307e1e",
        "cursor": {
          "ref": "371cb6b0-ede6-4847-baf6-1a7487c192bd",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "8cebd56b-c2da-4c0f-b356-65c98655260f"
        },
        "item": {
          "id": "f5df71ab-e913-47e4-9361-95db1a307e1e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fc7ee13d-37e4-4c5b-ab05-18d6f3706870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b973748e-8d14-4700-aaef-6df53cc79144",
        "cursor": {
          "ref": "4d4b6ec9-28c9-4888-acea-85465f49215f",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "bb9fff29-1ad6-4b4d-9b87-986652626583"
        },
        "item": {
          "id": "b973748e-8d14-4700-aaef-6df53cc79144",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a7de261a-4055-47b8-843b-ddc14862accd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "6f86d3e5-7aba-4618-8d72-a74c43bb736d",
        "cursor": {
          "ref": "3d058ea8-068b-4560-9cc0-2eae6fcd4251",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "dd97c0ec-e3da-440e-9572-eac4b8ab0c03"
        },
        "item": {
          "id": "6f86d3e5-7aba-4618-8d72-a74c43bb736d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7bab6c04-a801-4050-851d-4f71eeeb4029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "deaf454f-326d-4e31-b6fb-cd8cbde84ac3",
        "cursor": {
          "ref": "0d9a172b-2200-4cce-8675-1d838984592a",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "fa00d239-af2e-4f61-b2b1-0c098387f814"
        },
        "item": {
          "id": "deaf454f-326d-4e31-b6fb-cd8cbde84ac3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fe3feda5-8b42-4cad-ae60-a2dc3c331422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "402c61e9-c48e-4ec0-ba46-fbf758527445",
        "cursor": {
          "ref": "9697765e-28be-4b3b-b968-04a10f61b1e3",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "bd65b653-a6d8-4acf-9946-dca4b74ab15e"
        },
        "item": {
          "id": "402c61e9-c48e-4ec0-ba46-fbf758527445",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "77ecd0ee-3e6d-4af1-8426-74cb2afbeec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "acb2ff78-b2d6-4632-979b-8cdb9214d51e",
        "cursor": {
          "ref": "8b59dee2-77e3-4313-b4f6-6dbcae985128",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0bc9f148-ce0e-4be4-815c-d87fcaa729fe"
        },
        "item": {
          "id": "acb2ff78-b2d6-4632-979b-8cdb9214d51e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "72fbad17-5f85-40c9-a096-92b4d91d5842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "deedf8b1-021c-463d-8ee8-9e801f31a0f9",
        "cursor": {
          "ref": "458f7ddc-ff57-4193-ae16-adbed4c2114f",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "20418a44-9aaf-434a-b8cd-a3dc1c68a5aa"
        },
        "item": {
          "id": "deedf8b1-021c-463d-8ee8-9e801f31a0f9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4043c7a5-bb49-40f7-a7a1-9e31ba23f83c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "6edc826d-4934-44aa-8130-ecc6203b1f3d",
        "cursor": {
          "ref": "0a64b4a5-7b90-4286-a7d7-37350dd4307b",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3c20f3a3-eb1f-4791-91be-e2beed41d034"
        },
        "item": {
          "id": "6edc826d-4934-44aa-8130-ecc6203b1f3d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "db965b5b-8449-4fb6-9bb2-4152cf01c429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "7f9b7628-0de0-4955-bac6-048d9012a0fb",
        "cursor": {
          "ref": "bb7c9f07-57e3-454a-be35-21ed2f94003d",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f4afdd7d-aac1-4c43-9d9e-9fde10f88188"
        },
        "item": {
          "id": "7f9b7628-0de0-4955-bac6-048d9012a0fb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "02e2123f-6216-4fb8-945c-aa55cd07864f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "2eb90456-70bc-4581-aeb8-7c30d9bad303",
        "cursor": {
          "ref": "194e3f9e-046f-45fd-b975-231a1cdc421c",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c8a15955-1a0b-4cb3-98b0-12287d41f0be"
        },
        "item": {
          "id": "2eb90456-70bc-4581-aeb8-7c30d9bad303",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "556ec1c0-c6eb-4ba5-b21f-becc7178d486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "1ceda544-9f38-4179-bfdb-62a09790dbdf",
        "cursor": {
          "ref": "23c85653-66d0-4b8f-b606-25620d2a55e7",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ddb94ae9-59d4-421c-a1de-73725233a921"
        },
        "item": {
          "id": "1ceda544-9f38-4179-bfdb-62a09790dbdf",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "34aabde7-9fdd-42d7-82e5-57277bcd3dee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "12d23542-b3a5-406c-80d1-7cd2065ac2bd",
        "cursor": {
          "ref": "1ea2fb62-3caf-4e08-8573-8a60f2f2dcab",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2d0469a7-850b-427f-b206-88ab9b9ecb7f"
        },
        "item": {
          "id": "12d23542-b3a5-406c-80d1-7cd2065ac2bd",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b3090c0e-504d-478b-84a2-670dce40d34a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "b7475a3d-3a5f-437f-bbbd-c229de8f5ca6",
        "cursor": {
          "ref": "5053fc3e-81ab-4660-a076-dfbf18fcc271",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f35bcc83-f9e5-4df5-8cca-d9313ed642b1"
        },
        "item": {
          "id": "b7475a3d-3a5f-437f-bbbd-c229de8f5ca6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a89f080f-d398-4456-b764-4a2449de5cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "4db40a34-f799-4632-8b8f-a42e4e2f64a4",
        "cursor": {
          "ref": "3d2b1ef8-523f-488a-abca-4c15f4899eba",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7d221dd2-e41d-4182-8eec-bcbd6568e4b7"
        },
        "item": {
          "id": "4db40a34-f799-4632-8b8f-a42e4e2f64a4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "99bee176-80ad-422e-997e-88e8d43ce729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "ca025991-dd0c-4594-aa0d-4a0a1616ea8c",
        "cursor": {
          "ref": "42f2f66e-37c7-4ef1-a899-1ca4a724ed8e",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8a7aef10-f30c-449d-9b5d-e36f18a1a094"
        },
        "item": {
          "id": "ca025991-dd0c-4594-aa0d-4a0a1616ea8c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3ec7d29a-d8e7-4ca6-a9af-e01805f579d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "85635404-1b49-43ee-b504-cac2e8ea4f16",
        "cursor": {
          "ref": "15facbfc-5669-432c-8fb0-81d2b3ffb922",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f2fa1ba2-5e11-45c2-b517-c2c89622e43e"
        },
        "item": {
          "id": "85635404-1b49-43ee-b504-cac2e8ea4f16",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3213b9ff-e633-4436-9d9d-27155076d903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "16c51596-96ba-4f37-bfff-ace1b084897b",
        "cursor": {
          "ref": "30c4cb2a-9877-4222-92c4-2b8d73ba38e8",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b288a36a-d089-40a8-83c9-ab0223fa8945"
        },
        "item": {
          "id": "16c51596-96ba-4f37-bfff-ace1b084897b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "52c8364c-398d-4b32-8f82-914d930d9eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "5b115b7e-0956-44d1-93bd-bb0ed9878266",
        "cursor": {
          "ref": "dbbc3894-ef04-47ce-b975-9b5cb4b2d3f0",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "19ed3589-e654-46d2-ac90-19dba8f2e44f"
        },
        "item": {
          "id": "5b115b7e-0956-44d1-93bd-bb0ed9878266",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "21245d38-7f94-48f9-8d68-fe13a26edeee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "9dcbd943-55c6-4d5e-8af4-789db4510a10",
        "cursor": {
          "ref": "bb283d76-948e-486d-9b52-044aa84379e1",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8fe8da8a-76d1-4aa1-bce5-fdaa2f888c86"
        },
        "item": {
          "id": "9dcbd943-55c6-4d5e-8af4-789db4510a10",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e92f159e-d581-4d51-be21-f9b090fb1e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "2797d7f9-7fb1-42da-b574-cca3cf68df02",
        "cursor": {
          "ref": "d24b761a-d157-4ffb-9839-2ff38564b50a",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ce387c18-6f79-45a6-b772-bc1a0e4032e4"
        },
        "item": {
          "id": "2797d7f9-7fb1-42da-b574-cca3cf68df02",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "747fad83-a9de-469e-ad3f-c34e022833e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "27ae4d88-c4c6-4018-b383-8be88030992f",
        "cursor": {
          "ref": "b987a1a9-3c32-42e0-aeb0-5de3328dde19",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2ca69067-1956-4e59-a0c9-37f106601281"
        },
        "item": {
          "id": "27ae4d88-c4c6-4018-b383-8be88030992f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8772d7ca-6b3d-40c2-8ac7-8e63108927ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "2f1d6b90-0c3c-4828-9414-690c2e3f4b24",
        "cursor": {
          "ref": "dfa15cdb-b3a5-4dfb-9bce-02703a085397",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "be2044ab-b564-4947-bebd-5967ac55262f"
        },
        "item": {
          "id": "2f1d6b90-0c3c-4828-9414-690c2e3f4b24",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3b2e194f-f537-4c14-9fce-49d3f60d2e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "b7f8f3bb-f64d-46ff-98e1-6bbf68ee9770",
        "cursor": {
          "ref": "d804fdb4-d189-4e27-935a-f1b54ccc6880",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2540af4f-5881-4dbe-a050-a73d343c1144"
        },
        "item": {
          "id": "b7f8f3bb-f64d-46ff-98e1-6bbf68ee9770",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "591b7afb-98ae-4381-b796-14e697f23425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "463b51e2-bb20-4b1c-9191-d6a83d85946d",
        "cursor": {
          "ref": "ac486b00-cf7b-484e-ae0d-10341959bb99",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1e503edd-cb00-4e4b-9ad2-08a8da78ac88"
        },
        "item": {
          "id": "463b51e2-bb20-4b1c-9191-d6a83d85946d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "044b9033-e54c-4bbf-b0b7-3389347be5a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "513b20b9-40da-4d5d-8bee-79bfe570b089",
        "cursor": {
          "ref": "93f91d7c-d5a6-446e-87d4-34e1effec690",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7db425f9-382e-40f4-8bd5-e6f12f695df2"
        },
        "item": {
          "id": "513b20b9-40da-4d5d-8bee-79bfe570b089",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1fe69242-7a93-4657-8da8-cd0bc800368f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "4fb27729-4b6c-4039-b892-57e77f2b7145",
        "cursor": {
          "ref": "57cd7e67-f106-48ff-ad80-d691f4cff871",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e8702401-58d4-4d46-b997-90e06babde4d"
        },
        "item": {
          "id": "4fb27729-4b6c-4039-b892-57e77f2b7145",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "2a7199cc-8a59-4905-a9d8-3dd06015adbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "548db82c-82ad-4d96-8302-ca9f0b0c111c",
        "cursor": {
          "ref": "696d3199-dd88-4789-a60c-81d62e878208",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "99e70b9e-5fff-4d41-9deb-50bcede0745f"
        },
        "item": {
          "id": "548db82c-82ad-4d96-8302-ca9f0b0c111c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a90e69e8-29a3-4d73-a44c-f2f5d7a55f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "3a4d7a1b-f26c-4020-83d1-28a67874b284",
        "cursor": {
          "ref": "f261acab-85d8-47e6-bc5d-9319df8d7556",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "45abd06e-9a19-45d3-b331-f8deadbc947a"
        },
        "item": {
          "id": "3a4d7a1b-f26c-4020-83d1-28a67874b284",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "cbbb2da7-cd65-4fca-9efd-8262b4e7de81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "a79ada30-aec5-4fb9-b771-a17118ed55a4",
        "cursor": {
          "ref": "988b3629-db3e-4b71-a989-2b9eb4318879",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "cf90fece-d05f-4f52-b88d-66ff038f552f"
        },
        "item": {
          "id": "a79ada30-aec5-4fb9-b771-a17118ed55a4",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1f029ae1-5969-4020-8521-41ae5544a913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "55bf59ae-86ac-4dd6-8f65-88b76090405f",
        "cursor": {
          "ref": "bf5ca823-b124-4c62-ad41-7fbc6a86b6b0",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "18379a6f-bf79-417c-b8bd-a1846a24dc98"
        },
        "item": {
          "id": "55bf59ae-86ac-4dd6-8f65-88b76090405f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6cb6a466-98e3-4e18-a1a0-8f1c5c56d7a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "dd4219a9-0c48-49c1-b5b5-4158decba7ae",
        "cursor": {
          "ref": "b1eceae7-11ea-40bd-b032-5a1bfc23b1e8",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "94da4c7e-5215-4d00-b54a-78daac0ee4ac"
        },
        "item": {
          "id": "dd4219a9-0c48-49c1-b5b5-4158decba7ae",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a2112275-67ad-43c2-b3c1-c6dc1b0541cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "19307efa-01a3-4c39-96f7-a10c2a80d712",
        "cursor": {
          "ref": "9b05335e-38d4-4c3f-af4f-3698ce4a4758",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "574bda44-3838-4dc9-8b16-44e88205b13b"
        },
        "item": {
          "id": "19307efa-01a3-4c39-96f7-a10c2a80d712",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "3e4b3a00-6f84-4529-ba68-dd5c74c6bac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "39a3ef97-f103-455f-8bfc-ed3ec6a8baea",
        "cursor": {
          "ref": "2f93b266-2561-4ee3-832c-8bedff35d77f",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "cb875368-eeeb-4044-bfd6-caf09019f6d3"
        },
        "item": {
          "id": "39a3ef97-f103-455f-8bfc-ed3ec6a8baea",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d5ec0bb2-0c5c-4a04-97e5-0b28a9a95db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "05c27e12-4b28-4509-8938-3f8e119dedcf",
        "cursor": {
          "ref": "919e50e0-28c6-404a-978b-b8ad9b09b2d1",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ee602109-6110-4bfa-8685-0ee1c8a8df9e"
        },
        "item": {
          "id": "05c27e12-4b28-4509-8938-3f8e119dedcf",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a98cafa6-11f5-4bda-be64-d98381ff04fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e7915f-e34c-4f1a-973d-0807ed5a5645",
        "cursor": {
          "ref": "6a528765-2f7e-4052-98c0-b6dfa16c30f6",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b71184ab-5f02-4aac-b407-ecb37a21829b"
        },
        "item": {
          "id": "58e7915f-e34c-4f1a-973d-0807ed5a5645",
          "name": "credentials_issue"
        },
        "response": {
          "id": "166e0efb-9e9f-4c16-a7f0-cd6914b38c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:102)"
            }
          }
        ]
      },
      {
        "id": "fe605b16-a9b9-4b1e-abea-8a0a8a771331",
        "cursor": {
          "ref": "efde44ae-351c-45f0-8d4f-aafd9df8c2ce",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "de22dd55-81cf-446d-ba6d-8e314efaa276"
        },
        "item": {
          "id": "fe605b16-a9b9-4b1e-abea-8a0a8a771331",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "29f7a211-62ae-4da1-9155-07f600d1e8e7",
          "status": "Created",
          "code": 201,
          "responseTime": 1363,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should be object",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should be object\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "64bae7ba-f786-441a-b7c9-e55f12e0a847",
        "cursor": {
          "ref": "d6155262-bdf6-41d4-adda-03c4f68ab187",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "34fa4a8b-ea12-460f-8ded-2bfd7770eaea"
        },
        "item": {
          "id": "64bae7ba-f786-441a-b7c9-e55f12e0a847",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "7f881aa5-ec8a-44f7-925c-1682070160e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "3f51345b-f527-49e8-bb09-ac890c50248c",
        "cursor": {
          "ref": "2343cb60-b6db-464b-9cf3-def88bc3e506",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f96599b9-9e52-4939-8e81-a3cf0121629e"
        },
        "item": {
          "id": "3f51345b-f527-49e8-bb09-ac890c50248c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6f161857-1e71-413b-9861-f2a5a5d7b1a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "fc4392f0-aab8-4da7-a076-89e16b13c374",
        "cursor": {
          "ref": "51214e4c-06a0-4b3f-8dee-3e986f3bb5ca",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "62a9a11d-37d2-4add-9a88-018501c90cf2"
        },
        "item": {
          "id": "fc4392f0-aab8-4da7-a076-89e16b13c374",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8d5a7124-276a-4d4b-b3ef-87bfe7489914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "2fa4bd8d-67c8-4010-9aa8-15a2140c4a19",
        "cursor": {
          "ref": "f12677f8-abba-4293-8aac-d4747e8556ec",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6ebb6aba-e161-43eb-aa12-ea4cbddae286"
        },
        "item": {
          "id": "2fa4bd8d-67c8-4010-9aa8-15a2140c4a19",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "83b18296-61ea-4b3e-9ea9-d729650df5e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "ce7eeba4-a423-40f0-8f44-7e8d3e60a478",
        "cursor": {
          "ref": "bafb44c2-d700-4d7c-b7bb-909be4f00021",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "375cc8ed-256b-4de2-8019-8521b0371c19"
        },
        "item": {
          "id": "ce7eeba4-a423-40f0-8f44-7e8d3e60a478",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c26d49e6-d963-43df-ab92-b9f8ebc33cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "119b06d6-a547-464d-8046-d967cf6d112d",
        "cursor": {
          "ref": "b905ae67-6dd0-44f9-a224-2c2fd7d04025",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0dee4abb-cdb3-4f0f-baa9-ac6e02528fc3"
        },
        "item": {
          "id": "119b06d6-a547-464d-8046-d967cf6d112d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "82c27aa4-23d9-48be-9d14-3aa0fe1ce9bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "b3c92ecb-f53e-4eeb-a333-151927f63aa6",
        "cursor": {
          "ref": "91cea9f1-3494-480d-ab09-d50d4c4c7b89",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "356fc08c-9b61-4b58-a1d9-f34c6f07f163"
        },
        "item": {
          "id": "b3c92ecb-f53e-4eeb-a333-151927f63aa6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a917703e-16a9-4fd5-97b1-1f9c83a32efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "af56b12a-3b17-4f2d-aaa4-b3e72d533fdf",
        "cursor": {
          "ref": "38c10776-93d5-41d1-9b33-4b5a154dc0d7",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "78546e71-6584-4e85-9dc4-5680bce7632f"
        },
        "item": {
          "id": "af56b12a-3b17-4f2d-aaa4-b3e72d533fdf",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f803a986-bece-4068-b142-dee2b7520751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "b426c43f-3898-41ba-a13b-b68c11fc5bfb",
        "cursor": {
          "ref": "ce9229eb-f39e-480f-81f2-1555ff69cfb1",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "296a867b-27f8-4dfb-aac9-a99d9dcd878a"
        },
        "item": {
          "id": "b426c43f-3898-41ba-a13b-b68c11fc5bfb",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "acda6393-96c5-456b-9102-5d8949e22ef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "2b930ce9-a090-486d-8928-c732570dcb49",
        "cursor": {
          "ref": "ad0167b0-ce85-4d7b-84f7-f38b0fa3c6a1",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "97b9359e-b8c5-47e0-bb06-bf6cdfdfec99"
        },
        "item": {
          "id": "2b930ce9-a090-486d-8928-c732570dcb49",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0c04190e-225b-43a7-9626-9fbb2981b6c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "54504dac-82d9-4fab-9795-6521b91738e3",
        "cursor": {
          "ref": "d500ad3f-3108-4cf2-8fde-3227765d4046",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7591f812-54ae-449d-8fcc-45d1b2900ad5"
        },
        "item": {
          "id": "54504dac-82d9-4fab-9795-6521b91738e3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "03222b15-c022-45a5-86bc-2f7315fa2b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "36c7676a-3b0c-45d8-b962-5a2bc54a0855",
        "cursor": {
          "ref": "581c5b13-f52e-40f1-9372-d48f9b695c42",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d735f7c4-1a0e-4d2c-ad20-9dc8ccbbd070"
        },
        "item": {
          "id": "36c7676a-3b0c-45d8-b962-5a2bc54a0855",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b7fa986d-9f80-466c-b446-ba9bda8c1da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "1169c753-daf6-4618-9807-4bb7605e44b5",
        "cursor": {
          "ref": "2536350c-56a3-4901-91fb-8022c681a035",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "cac7b980-9b0e-44f5-b139-3e79692a6117"
        },
        "item": {
          "id": "1169c753-daf6-4618-9807-4bb7605e44b5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5b4f13bf-559e-4b0c-a641-43ea7d4ab3c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "dd84f3f9-d1cd-4f7b-8331-fbd9f45afb0d",
        "cursor": {
          "ref": "054bcf45-4665-485b-bf56-535cae934d06",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "fcf85ec4-6a8b-4ec6-9c40-18a86c4a4c5c"
        },
        "item": {
          "id": "dd84f3f9-d1cd-4f7b-8331-fbd9f45afb0d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b9fbe921-302e-430a-b34a-28208f94e9db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "516e6a1d-4b9a-4089-a51c-22aa379581e6",
        "cursor": {
          "ref": "6347a31b-007a-46b0-88b1-4cc0634c61e1",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "549aec29-dc18-45a0-ad2d-766596ae203f"
        },
        "item": {
          "id": "516e6a1d-4b9a-4089-a51c-22aa379581e6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1ff57b57-b7d7-437a-aae8-0aa46b16998f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "effa2dbd-d1d2-40c2-b0ef-d62045a7b163",
        "cursor": {
          "ref": "8e421693-b0f7-4785-a43a-9a207d68257b",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "cd2f0ca8-ffa3-48e1-b38d-20d60ed42d5b"
        },
        "item": {
          "id": "effa2dbd-d1d2-40c2-b0ef-d62045a7b163",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d29a842a-5ac6-4209-ac07-064c78b72e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "59b1a5a8-3417-4222-8363-ff7dcfb634e0",
        "cursor": {
          "ref": "dbcc939d-9484-4308-b9b7-d42143397a62",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "20c976b7-7f11-46c4-9f1a-c5246678069f"
        },
        "item": {
          "id": "59b1a5a8-3417-4222-8363-ff7dcfb634e0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2d43e05b-e090-46b5-86b3-d512d7c1c487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "7c359a05-8f2c-4f17-b44c-5906a8703332",
        "cursor": {
          "ref": "17df5cba-f264-4df6-a759-c7410e702b89",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2e75445d-5c6d-49aa-970a-f55689e68d58"
        },
        "item": {
          "id": "7c359a05-8f2c-4f17-b44c-5906a8703332",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6654e2d9-7677-40a3-929d-86e6e1cf5311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "cf470a86-c350-49e9-8b33-ee51331e5fa1",
        "cursor": {
          "ref": "6c8eafab-b661-41a0-8764-e4a79a7918d6",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "fc70b58e-5700-43d7-8f0a-427768e2b549"
        },
        "item": {
          "id": "cf470a86-c350-49e9-8b33-ee51331e5fa1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c374c1ac-974f-4f92-876f-49f829acc5c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "cee2dadc-2358-494c-adb5-c6d33efa2556",
        "cursor": {
          "ref": "42b850cd-7e79-4fb3-9d61-c3781e898ad6",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8b3492b2-ecee-41aa-aa2d-cbd69737009a"
        },
        "item": {
          "id": "cee2dadc-2358-494c-adb5-c6d33efa2556",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "30fa2fb5-bd81-407b-b2bd-8a65a905d671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "c27ed1ae-cda5-4229-ac6a-8e423bdb8c7d",
        "cursor": {
          "ref": "7c7c94cd-11d1-425b-8db9-bee21aba1f61",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "77abc687-a079-4c89-9df3-2f7a7317df6b"
        },
        "item": {
          "id": "c27ed1ae-cda5-4229-ac6a-8e423bdb8c7d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3b6170f2-7321-4d23-a883-f28c5941b164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "1dc0ad4e-c40d-4620-a115-3641624d5975",
        "cursor": {
          "ref": "2fe1bea8-80f0-4db3-b746-07fb59709a83",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "216ae7d6-6172-4e96-96a2-704d00651be6"
        },
        "item": {
          "id": "1dc0ad4e-c40d-4620-a115-3641624d5975",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9f33d175-c628-4d38-abb8-2f4ad869c4e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "a8e815ae-7740-45a0-9e05-491356b3146a",
        "cursor": {
          "ref": "0bf02874-5691-4d77-a1e0-648432af2122",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "960b0bf0-ba76-4435-b580-c380aadbea30"
        },
        "item": {
          "id": "a8e815ae-7740-45a0-9e05-491356b3146a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "427073eb-c1c0-4167-8069-d27ae98363c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "9cdae783-72f7-4434-8641-14c52223fc50",
        "cursor": {
          "ref": "35ffe812-c249-4bf8-b221-775a0156a41e",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "fe1d329b-2ea4-43f2-99d4-cc9b12193323"
        },
        "item": {
          "id": "9cdae783-72f7-4434-8641-14c52223fc50",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e13a51ff-1fc5-40bd-a730-0fb3ccbfb363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "708b516f-9414-44cb-828b-6344ff10189a",
        "cursor": {
          "ref": "d48e6f0c-3de6-4429-8134-d915f9c7683e",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "be11d640-8bb4-4341-bf31-036c9b2b80d0"
        },
        "item": {
          "id": "708b516f-9414-44cb-828b-6344ff10189a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2ffb78b3-7301-4dfe-b58f-3cefd6ae7e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "f6d10225-8ce1-4fb7-a3e0-8be442b71f96",
        "cursor": {
          "ref": "d6d04760-0039-4b1c-a949-cad6956b15e5",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "09f35df3-c8fd-4003-ba6a-0d8cee15dc7e"
        },
        "item": {
          "id": "f6d10225-8ce1-4fb7-a3e0-8be442b71f96",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6339fe0c-d023-4c05-b3c3-f3fb963bcabe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "e443c8df-470e-405f-8f9c-b8fc96540a00",
        "cursor": {
          "ref": "36c06b5a-d8c4-46ff-bf55-a19c5f6097d1",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "8e9c525d-4ee9-40bf-9c1a-067d1dfb7a76"
        },
        "item": {
          "id": "e443c8df-470e-405f-8f9c-b8fc96540a00",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5832f785-b315-4dcb-8e1f-64062590c679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "9bb9bb34-7741-40a7-ad83-d1ea8654ac39",
        "cursor": {
          "ref": "65a59ceb-01a9-4723-927b-21708eebc83d",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6dc636ce-d024-44d5-98d7-f99e74a016f8"
        },
        "item": {
          "id": "9bb9bb34-7741-40a7-ad83-d1ea8654ac39",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d518b033-0de3-4ef4-98f1-1905943d5a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "3e8fb525-a6f6-47f2-beb3-142e5709f5f2",
        "cursor": {
          "ref": "227dcbb6-4881-41ac-95e9-9cea69192901",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "40bbd324-2300-4987-8813-f4a74ae41549"
        },
        "item": {
          "id": "3e8fb525-a6f6-47f2-beb3-142e5709f5f2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "452c1199-98ff-4f55-90c2-a1a98c5dca28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "d12ddf80-8a28-4f86-aee9-6c8d7fcb89f9",
        "cursor": {
          "ref": "580d4777-3669-4064-95ab-ef22e40873ff",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7b329ee7-b58b-44ed-8b08-7f8e2a666f13"
        },
        "item": {
          "id": "d12ddf80-8a28-4f86-aee9-6c8d7fcb89f9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e3ce3919-0f0d-45e5-bacd-5f0dac1e6401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "e0ffca43-f82e-4985-b6e6-1d5c6f0dbbe0",
        "cursor": {
          "ref": "5f4c51eb-fe96-4e6a-bf58-f4963540d816",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "bd44c3c2-5b26-4ccf-a5ae-19d7e797cb26"
        },
        "item": {
          "id": "e0ffca43-f82e-4985-b6e6-1d5c6f0dbbe0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "53c33f5e-f9b1-4794-9b8d-d69e94a90554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "987e23ea-f5fa-4482-a9b7-245ab287ac6e",
        "cursor": {
          "ref": "821fda4e-25f1-4d26-8acc-0ff5dfcfaa5e",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "fedf6095-a90a-4f87-9fed-2e5c39182b9e"
        },
        "item": {
          "id": "987e23ea-f5fa-4482-a9b7-245ab287ac6e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4876e89c-17f7-4fbb-a11e-8e8df2d2ace4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "1a8636c0-324b-49c3-9bfa-756c652b1810",
        "cursor": {
          "ref": "df87b76d-aefb-49f8-886c-dff839578c63",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "72eff165-f704-44c9-81d3-06ac8ccbf890"
        },
        "item": {
          "id": "1a8636c0-324b-49c3-9bfa-756c652b1810",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "502b61d4-a929-48d5-9d12-873cfdd65c78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "a50fbce9-5afa-412f-83d5-82a38b1e5118",
        "cursor": {
          "ref": "f5e1639f-5d2e-4663-89a8-a0f168c34b20",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ed759110-55e9-411c-8ed7-65e9dfeea560"
        },
        "item": {
          "id": "a50fbce9-5afa-412f-83d5-82a38b1e5118",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1d86502d-d4d6-4ade-abb9-470460131e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "53eed2a9-8ec6-4aa0-a504-960d4b88c8c0",
        "cursor": {
          "ref": "b4541d6b-104f-4887-b314-f097ebe7dda8",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "09701c1f-c696-4026-ba9a-eb2940041e80"
        },
        "item": {
          "id": "53eed2a9-8ec6-4aa0-a504-960d4b88c8c0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a3f638d4-a117-48d5-b4a7-6c8c6d5fd0d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "9511f554-7933-4eeb-af8e-46653c0aec57",
        "cursor": {
          "ref": "ee871d45-646c-4797-a6d7-9a905af8163f",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "756cdf6d-8c47-4901-ab77-05aa272735d4"
        },
        "item": {
          "id": "9511f554-7933-4eeb-af8e-46653c0aec57",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7bfe84ba-9eb3-481e-9d7c-2c7303000ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "b09d1510-2b20-4475-b8c2-7ef757599bc7",
        "cursor": {
          "ref": "5d1d0315-5151-49d3-8bd8-6edc232e5899",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "321468b3-a6c6-44a6-aff1-cfa7a3520d37"
        },
        "item": {
          "id": "b09d1510-2b20-4475-b8c2-7ef757599bc7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "45babf78-ed07-4a25-ab84-1edbf1cf9e31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d607477-7734-4ed2-8a4f-057e44156a73",
        "cursor": {
          "ref": "19b9a81b-420f-4278-b541-bfad9edf94db",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8eb6f719-32da-472c-a414-739b494ecc44"
        },
        "item": {
          "id": "1d607477-7734-4ed2-8a4f-057e44156a73",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0bd32eef-e0a5-4104-a04a-bd15327ad9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "f6765cf4-fd85-4488-be1a-466cea0eb7dc",
        "cursor": {
          "ref": "808a70bd-f3d9-446e-a3d8-8eb8fb3796e0",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4720722f-b714-418b-bfe1-259adfdc0af4"
        },
        "item": {
          "id": "f6765cf4-fd85-4488-be1a-466cea0eb7dc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "00d606de-69eb-43ee-98f5-c92c1c997462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "bd693f89-51a5-4f7c-a668-a8d34208ac69",
        "cursor": {
          "ref": "9f219939-132b-4ac4-9c68-613ee718a692",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7de6b991-1c10-4203-a26e-814dabf28b83"
        },
        "item": {
          "id": "bd693f89-51a5-4f7c-a668-a8d34208ac69",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "cf0b84ec-0649-4646-a554-032aab04038e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "a10d4297-8493-462b-9f46-3e80e9374c8d",
        "cursor": {
          "ref": "3abb5988-29c1-4992-915d-06fc519826e3",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "38fec25e-3797-477b-8d9c-4780ed97fd8c"
        },
        "item": {
          "id": "a10d4297-8493-462b-9f46-3e80e9374c8d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "edd971b5-4739-4a58-bbd1-a2356a715165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "4afb48db-e3a9-4de8-b03b-2c0a91010d54",
        "cursor": {
          "ref": "55b63b44-3fe1-4a0a-8f4e-de5dedeb5a7b",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0f802e86-3d48-4350-a745-d90a14510804"
        },
        "item": {
          "id": "4afb48db-e3a9-4de8-b03b-2c0a91010d54",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6f7dcd4b-6cf6-4b52-a827-ecc1036e40e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "775731d2-b00d-416f-a8ec-e3a7090c2c12",
        "cursor": {
          "ref": "7282909a-a8cd-4a3f-b3b6-2827f6881423",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8c34149a-5e8a-400c-a7d6-9dd0c0741c8e"
        },
        "item": {
          "id": "775731d2-b00d-416f-a8ec-e3a7090c2c12",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9d6a0518-2c2b-4172-a3bf-9a83c142eb90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "166211ec-b360-488c-bbe3-9dcb21c42eaa",
        "cursor": {
          "ref": "4bf32c4c-8997-4ed0-ad07-ddd050c7a616",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a709c2c0-4f2c-41c6-9bbb-21f7ad2f33ff"
        },
        "item": {
          "id": "166211ec-b360-488c-bbe3-9dcb21c42eaa",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c91dfd90-079f-443d-8f00-8e455ce704cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "f1301988-ae8a-4ca9-bfea-4d4903d87e78",
        "cursor": {
          "ref": "509b02a7-15fc-4b4c-bd0b-aac335a97508",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "16138b8c-1752-4bcd-b697-52293c8c8f0d"
        },
        "item": {
          "id": "f1301988-ae8a-4ca9-bfea-4d4903d87e78",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "896b50db-eb90-4987-8fb3-b1fc06806790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "0d3805ef-11d0-41d6-9326-dd7d8ca934bc",
        "cursor": {
          "ref": "014f3e27-c250-491c-b37d-80921ae3c3eb",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "48b6058d-2f38-42b1-8c66-733274514d81"
        },
        "item": {
          "id": "0d3805ef-11d0-41d6-9326-dd7d8ca934bc",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "30d7f3d3-dd27-4704-b809-7383c4bacd88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "1e37a71c-02e6-492e-a210-e924644c0023",
        "cursor": {
          "ref": "db6b82b0-ebfa-4abd-a9cd-5f3a47cab348",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "74425580-3c54-4b38-afc5-aed721184c6d"
        },
        "item": {
          "id": "1e37a71c-02e6-492e-a210-e924644c0023",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6670b9f2-9d7b-4a43-9317-7b4f8856920e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "671579a8-16cd-41e7-852e-d718337c144d",
        "cursor": {
          "ref": "15265715-0403-475d-a889-9709b89c6d4e",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c271c040-9a56-4d33-a0f5-f9b360de4309"
        },
        "item": {
          "id": "671579a8-16cd-41e7-852e-d718337c144d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b0565149-ff44-44e2-9c29-be0f02c60f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "40840b44-3ddc-4ce4-b0b0-bfda62824c1f",
        "cursor": {
          "ref": "1540958f-848c-41a5-bbc3-0b9e0ce76895",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a3086b93-7bf1-4c1e-b583-b32da4550282"
        },
        "item": {
          "id": "40840b44-3ddc-4ce4-b0b0-bfda62824c1f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bd44e4e8-4b16-4b57-b26b-4ee14186090c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "a8ee8123-506b-47f0-a887-7b2bd1d3b29b",
        "cursor": {
          "ref": "1d353d3b-9f80-475e-ad4a-28b8bd1f9d4b",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f5a28ad4-36a4-4685-981d-8db79b1dd1ae"
        },
        "item": {
          "id": "a8ee8123-506b-47f0-a887-7b2bd1d3b29b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d2cfa632-cd72-4de6-8f63-e09aefdebbd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "d0eff54d-d5a3-427c-b9bd-30c3c0a5c597",
        "cursor": {
          "ref": "f347ca6a-75b0-419a-bddc-fc81dd98128b",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9d263724-d730-4e5a-bf3b-f30ce336dace"
        },
        "item": {
          "id": "d0eff54d-d5a3-427c-b9bd-30c3c0a5c597",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "50627a92-a552-4298-9408-89a95b2fd9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "b36e9698-d7a1-41cb-b65a-6d8fbba42885",
        "cursor": {
          "ref": "98390e24-0fad-41a1-af27-8d9fcb39fa33",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b674ccd5-66d0-4dbc-851f-05f55fb3cab5"
        },
        "item": {
          "id": "b36e9698-d7a1-41cb-b65a-6d8fbba42885",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "26552f0a-6a65-42bd-a665-11fcacf7f22a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "5bbf7f0a-a4a1-40d2-9833-aa88fce319a5",
        "cursor": {
          "ref": "17011ca2-3559-4483-9342-a533094d49d9",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "891cde54-8cf3-4900-a1f4-2c31d4437639"
        },
        "item": {
          "id": "5bbf7f0a-a4a1-40d2-9833-aa88fce319a5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a48b291b-d0cb-4ffa-9ca4-b40f7528aff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "5c6c51b4-4f93-4c4a-9dcc-685495633ab1",
        "cursor": {
          "ref": "23cef473-bcbc-4c33-85d5-ba9ec0f3356f",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b564dc8e-7087-4d23-a11d-fd30e5b983df"
        },
        "item": {
          "id": "5c6c51b4-4f93-4c4a-9dcc-685495633ab1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e459ff7b-3058-40e7-bd16-d55a7e9ee7ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "caf0688c-70c2-4cb4-820d-8601a16ce4b0",
        "cursor": {
          "ref": "b918dcb9-2106-4989-ae45-6be629924fc1",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "db80dec8-34b5-498e-93bb-7f8761413398"
        },
        "item": {
          "id": "caf0688c-70c2-4cb4-820d-8601a16ce4b0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cb467a58-b8ec-41ad-a896-06bdea60d92a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "b249bad0-e51c-4d77-ae35-eabf7b7693af",
        "cursor": {
          "ref": "496a5357-22e9-4dd4-adbd-3dc2cd412780",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "72dd8b57-6fea-448f-8fa5-abfb67d6e481"
        },
        "item": {
          "id": "b249bad0-e51c-4d77-ae35-eabf7b7693af",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "90f5ba5b-b38f-435d-9710-ece3bf96cead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "4e0b9bef-1c19-4359-b6ca-b41f53ef4dc6",
        "cursor": {
          "ref": "7967b4c1-1099-4964-85b2-5e1e09c5814c",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f12ade5e-2396-4c20-8ff0-6987ac64b240"
        },
        "item": {
          "id": "4e0b9bef-1c19-4359-b6ca-b41f53ef4dc6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "74fe257c-b1ef-47c8-872f-9ab757033e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "4ab032d5-5747-40f2-8851-e23d6602ef8b",
        "cursor": {
          "ref": "e1f21735-dde0-46c5-8e2f-b12c3b5f3ac8",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "79b00bf7-e3a2-48f1-aa75-bc579c6da4f0"
        },
        "item": {
          "id": "4ab032d5-5747-40f2-8851-e23d6602ef8b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "52a46e77-a5e0-4a19-b1a0-d65aac0a38a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "6ba2c59a-ef67-470e-b11e-f982229c1c34",
        "cursor": {
          "ref": "bd5c933e-5c81-4b21-ba57-7c2f2f7294cc",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ee388473-c45b-45c2-8c82-820370d2a997"
        },
        "item": {
          "id": "6ba2c59a-ef67-470e-b11e-f982229c1c34",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "49961f61-5a07-4666-a086-ee9bb8509e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "8a73534c-0e5a-43d7-9214-d6addd24a2f4",
        "cursor": {
          "ref": "c185516c-a2a3-4f87-bb7c-74c82f2a401e",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "816d85a6-facb-4927-8335-b9ce0e3e5552"
        },
        "item": {
          "id": "8a73534c-0e5a-43d7-9214-d6addd24a2f4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8ac275d7-bd64-4344-b504-ca357d46ca84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "bd13707c-0efd-4175-a5db-03edac4d3bce",
        "cursor": {
          "ref": "1dfdb67d-8398-48bf-8702-a9f218810291",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4dac128b-b756-4f72-9bc8-1c485decd748"
        },
        "item": {
          "id": "bd13707c-0efd-4175-a5db-03edac4d3bce",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "34bde1fd-4160-4849-af9d-785f600e8769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "5afdeea5-8204-4ac4-9fdb-b827da97d513",
        "cursor": {
          "ref": "1ed276b5-452c-47a6-b537-ed617e69419c",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0ea96f9b-2495-4678-84a5-74304e08df29"
        },
        "item": {
          "id": "5afdeea5-8204-4ac4-9fdb-b827da97d513",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "46a9e2ae-b25f-473e-bcd6-1362d0335d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "6917032d-a4ba-46e5-911d-a9b64a7ed4cb",
        "cursor": {
          "ref": "7c7e9928-9f90-498c-80c6-cf5b022af045",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "990a6510-dc56-445a-8bbd-f02082501efe"
        },
        "item": {
          "id": "6917032d-a4ba-46e5-911d-a9b64a7ed4cb",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "22a73a88-c0ba-4788-a921-003f9b181d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "813c8891-7734-4e7d-9abb-2a531f86a867",
        "cursor": {
          "ref": "121c3c19-ae86-4668-8180-927786187c9b",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "163a9969-0dbd-4f08-a28f-db246257c251"
        },
        "item": {
          "id": "813c8891-7734-4e7d-9abb-2a531f86a867",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "348e8173-91dc-4204-a4ce-1a2e0614f981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "0322d8ee-7532-476b-abcf-e0a436025fa5",
        "cursor": {
          "ref": "fcdb89a0-8379-4a8e-a9db-e10f8ccc7a26",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5cf69676-ff1a-4d28-a67d-21b528979ecf"
        },
        "item": {
          "id": "0322d8ee-7532-476b-abcf-e0a436025fa5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "956beee9-a020-46d3-9128-5d5996259afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "4674b0f8-72b8-483e-b4d9-3d5fa6d43956",
        "cursor": {
          "ref": "4cb77b37-efc3-4ce0-9cb4-43c156fc66e1",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4efab6b7-168b-4505-b69b-be1b29252d21"
        },
        "item": {
          "id": "4674b0f8-72b8-483e-b4d9-3d5fa6d43956",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "95028a2b-e4d1-4a95-8b86-21e715b41e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "ffdce069-b72a-4d26-807d-e5d779a07478",
        "cursor": {
          "ref": "44bd319c-30a3-4733-9b2a-9137edb125df",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2fc2c3e8-28f7-4ba8-8ccd-4b32c2c2a67e"
        },
        "item": {
          "id": "ffdce069-b72a-4d26-807d-e5d779a07478",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6485c86d-2b79-4771-a599-d38c0b304a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "47837705-b490-4d0d-b8e8-9e195876a7d5",
        "cursor": {
          "ref": "ab42a779-e795-4153-8a23-bcdbd070deda",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a23e70a1-9dd8-4c58-956a-ceeb5adfc3af"
        },
        "item": {
          "id": "47837705-b490-4d0d-b8e8-9e195876a7d5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ab52976d-a018-4907-b891-d76d2b84d2fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "bf7ffb9e-05aa-4af8-900a-02546b8189af",
        "cursor": {
          "ref": "33e6beba-4e23-4ae0-b391-ad803218fab2",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "795fed5d-c961-4c11-a316-85fbc909a420"
        },
        "item": {
          "id": "bf7ffb9e-05aa-4af8-900a-02546b8189af",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "17403854-9346-4dff-9280-ca296291bafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "3b6b3afa-b980-4ecf-9da4-60df7e33ae3f",
        "cursor": {
          "ref": "2a25159d-1d69-4944-a90b-9c55adfc69b6",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "50968416-cd31-4594-9699-0e0f48d786ff"
        },
        "item": {
          "id": "3b6b3afa-b980-4ecf-9da4-60df7e33ae3f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "03b5f5ec-b02b-4fa7-be6d-b9358ee1c1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "e912fbaf-3499-404c-a0e0-0094233a3f22",
        "cursor": {
          "ref": "9e81da81-469d-4be1-89e8-d1008a00fcc2",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f6f0d70d-003c-4c25-988d-72dff8bd6cd4"
        },
        "item": {
          "id": "e912fbaf-3499-404c-a0e0-0094233a3f22",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "26557b20-1aac-4ed8-a054-c6b4f0f9a213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "b17a1287-751e-4c92-a7eb-5c7fadce94e5",
        "cursor": {
          "ref": "19562f70-de51-4c67-9f5e-fec65c368b17",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b3b99296-6f29-4189-9e5c-daaf9950b533"
        },
        "item": {
          "id": "b17a1287-751e-4c92-a7eb-5c7fadce94e5",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "170878d1-610d-4dea-9ca5-e1367413feac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "cfaee0a3-e84f-461d-bcfd-9ec910b7fcb3",
        "cursor": {
          "ref": "9174b5e0-7a99-447a-849d-5cb58b2c1603",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c0b0343f-f9e9-4d5b-a87e-f4b34d8c9d68"
        },
        "item": {
          "id": "cfaee0a3-e84f-461d-bcfd-9ec910b7fcb3",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "96266c51-2eac-40fb-9fbb-b0f474553315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "b6183b30-bc2a-4fe7-b30b-02485d943c70",
        "cursor": {
          "ref": "6285c0e6-0b32-4642-8971-01ab210ea829",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "04187553-6271-4724-9672-ccffb37f52f4"
        },
        "item": {
          "id": "b6183b30-bc2a-4fe7-b30b-02485d943c70",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "8877d3e3-372e-43c7-b377-4bf798a44744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "57310c5e-c0c5-4034-aff4-7e929971563d",
        "cursor": {
          "ref": "45d7d0a4-4bcf-4fda-8f3a-295ad768cd4a",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e17d4aa9-f34c-4e12-b1f7-98629dd68af7"
        },
        "item": {
          "id": "57310c5e-c0c5-4034-aff4-7e929971563d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b5d72d44-1c9b-4d84-b861-6b826abf1ca8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe7ca88-d87f-4bbc-8c47-8d6fc741e851",
        "cursor": {
          "ref": "5f5d0f97-176b-490c-9301-5098f51b30a3",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2070c54f-2ee7-4cde-aef4-89f82d40ab50"
        },
        "item": {
          "id": "abe7ca88-d87f-4bbc-8c47-8d6fc741e851",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7648fa80-ad05-43b6-bfeb-ada57d4834de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "5e2a3c30-1636-4e4a-8629-68eaf9d796f9",
        "cursor": {
          "ref": "28a5f209-227d-4ed1-a170-2bd290d2af39",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1fa8d7b2-ad61-4728-9b53-4cf12717c892"
        },
        "item": {
          "id": "5e2a3c30-1636-4e4a-8629-68eaf9d796f9",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "03b36ffa-35ee-4eec-a636-ba8d2950eb9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "0d296e9d-de6f-4e43-b909-c5e6a07b8e6f",
        "cursor": {
          "ref": "8809322f-facc-4809-93c2-7fdbc1bb71f7",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3ede3fa9-d3ac-424b-b155-38f5fa1acbf4"
        },
        "item": {
          "id": "0d296e9d-de6f-4e43-b909-c5e6a07b8e6f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c2a2a3a8-0c4d-47f7-820f-456d25a850ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "d98ad4ac-24c0-4a9f-8ff3-80f376d4428b",
        "cursor": {
          "ref": "9597bb3c-786e-4a0b-b38c-a994d943ae79",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "4c462875-c38b-459b-b3c7-c4ab8014c4cf"
        },
        "item": {
          "id": "d98ad4ac-24c0-4a9f-8ff3-80f376d4428b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5337160c-1d5d-4076-9ef0-011df4cf67d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "cc85ada1-6207-400d-bbda-ed29dd758138",
        "cursor": {
          "ref": "413b647f-bdde-4a1c-bf96-bc980b56214a",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "dd7e3d54-87df-40e5-91a0-7c296ee9f5ea"
        },
        "item": {
          "id": "cc85ada1-6207-400d-bbda-ed29dd758138",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3b5c31d4-4d34-4960-afa6-e22f26bc28fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "788b5154-763c-45ff-bdc2-4d2b706881a2",
        "cursor": {
          "ref": "1ec63a13-6cef-40bf-b4cd-b597f25291d0",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "246f00d7-310b-426e-a9ed-cf1894389ba9"
        },
        "item": {
          "id": "788b5154-763c-45ff-bdc2-4d2b706881a2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "21acf716-c58d-47cb-88a5-e24b6c24e4cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "2fb1abf2-f731-45af-b731-77e331b426ee",
        "cursor": {
          "ref": "b20d764e-7437-4b98-9a9d-4befe7440dd2",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "28a51eb6-e8a0-4028-bd45-299cc1677259"
        },
        "item": {
          "id": "2fb1abf2-f731-45af-b731-77e331b426ee",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a2fee369-d4d2-4c26-9221-8bb67848baed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b248e21f-25de-4ef8-8491-cf1461142868",
        "cursor": {
          "ref": "b27e32eb-b3f9-4be7-9ced-9bc0b7d326b0",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "60bedd94-6cad-4d8d-8aad-44090e8d2957"
        },
        "item": {
          "id": "b248e21f-25de-4ef8-8491-cf1461142868",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "29dcd45c-5c0a-4950-8531-8f0f396d757e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "76be197a-9e27-408e-a192-6f7739fdb016",
        "cursor": {
          "ref": "81450343-d410-4ad2-95ce-0f472c97c1ea",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b3f2a59d-4365-48f6-8cf2-2b7e2b32d2d6"
        },
        "item": {
          "id": "76be197a-9e27-408e-a192-6f7739fdb016",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e0376ff9-0677-468e-84a3-7f95285722c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "e28f25ac-aac6-4fa9-843c-3802f760cc2b",
        "cursor": {
          "ref": "a80e6ef3-8549-43c7-9639-2cd4207edca6",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b69091cb-bbbb-4724-b2f7-17f59191725e"
        },
        "item": {
          "id": "e28f25ac-aac6-4fa9-843c-3802f760cc2b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9c143852-1c46-4f87-acce-7d926d6f879a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "d4f236cc-f723-41e7-9aec-5a50f0f5e493",
        "cursor": {
          "ref": "3eac77be-6ad8-40b8-a791-fc04937b7d6d",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "89ca5503-80b4-49c2-9611-fbeb261bb3d0"
        },
        "item": {
          "id": "d4f236cc-f723-41e7-9aec-5a50f0f5e493",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8c68ca11-7af4-497e-bfe4-d7ee7d72bd62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "4d79c540-b4bd-487c-be9a-d9709ec8f6e8",
        "cursor": {
          "ref": "b8f4696c-895c-473f-a498-4a0955f4d69b",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ab743bea-5755-420f-bb33-eb915b98b733"
        },
        "item": {
          "id": "4d79c540-b4bd-487c-be9a-d9709ec8f6e8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2b554f90-0269-4f6e-8cf4-07146f0f1976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "8d331568-2143-42aa-ae57-dd1c70209d6d",
        "cursor": {
          "ref": "4308aee3-4ee5-486c-99ed-1003bce573c2",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5ab6f369-3381-45b9-8d8b-71f2f8d8ff7a"
        },
        "item": {
          "id": "8d331568-2143-42aa-ae57-dd1c70209d6d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9af7e802-9db0-4eb8-ab2f-84f6ea37d730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "fd6e8d13-f93e-4085-8ae9-f7f1404f446c",
        "cursor": {
          "ref": "5d3c868d-eeef-4dc2-b885-4a9c413b4ead",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "31016d3f-5daa-439c-8e6b-f5361cd8e119"
        },
        "item": {
          "id": "fd6e8d13-f93e-4085-8ae9-f7f1404f446c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b15bf801-11b6-4a22-92bb-63a747a0bbdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "02ae106e-287c-4347-91dc-a0b6432bdd47",
        "cursor": {
          "ref": "23add8b7-2ebe-4267-b157-2477a56878cc",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "42f4200d-6a74-4a3e-b47f-52f7ebe4fb68"
        },
        "item": {
          "id": "02ae106e-287c-4347-91dc-a0b6432bdd47",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d4ea6025-5ba4-4585-b9d2-18b9ce2ec29d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "241dd19e-c27d-41eb-b095-139c030669b9",
        "cursor": {
          "ref": "21294a96-122d-4164-9d62-e0b8a7575b33",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9b96e35d-a890-473f-8c7b-12357fd53049"
        },
        "item": {
          "id": "241dd19e-c27d-41eb-b095-139c030669b9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "525bc40a-4071-4cc0-9b1f-1c04ef8c96ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "1ecb2ae2-b637-4d60-aaaf-1a27e04218a8",
        "cursor": {
          "ref": "70c26094-548a-4e82-af41-e3fe0e7c7e56",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "55c11e39-c465-4d47-91e8-4cff242d4e16"
        },
        "item": {
          "id": "1ecb2ae2-b637-4d60-aaaf-1a27e04218a8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a4252d7f-ac2a-4943-8612-fa653544c6eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "069955c8-23b8-43cf-b0ad-44a8f7667667",
        "cursor": {
          "ref": "74d66cea-2ed9-4a95-b985-8b79cab62871",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6aacd95c-d22e-4e80-a0fe-fa13c9915fca"
        },
        "item": {
          "id": "069955c8-23b8-43cf-b0ad-44a8f7667667",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5ceb60d8-0a0a-4328-8d0c-841d4a6f1037",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "0b82a128-30f5-46c8-a444-a51d5dc0c59c",
        "cursor": {
          "ref": "0684ccbb-827b-421a-b465-0f5cb0e5f488",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "21783476-e750-48c2-80fb-e775f60aa0b0"
        },
        "item": {
          "id": "0b82a128-30f5-46c8-a444-a51d5dc0c59c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2de10841-43a2-4b6b-beea-e171306ce505",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "5509c263-984c-4ff0-90a7-fed7b72e7227",
        "cursor": {
          "ref": "6d973b7a-877b-49e8-83ae-fe40fc75caea",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "94214c64-95d7-4ff3-bac6-bf479ce5a7a9"
        },
        "item": {
          "id": "5509c263-984c-4ff0-90a7-fed7b72e7227",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "872b06fb-2c21-4279-a5fe-394e4829036c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "972bd297-ee89-4b80-8e21-f490d2ede5fa",
        "cursor": {
          "ref": "b50c9f1b-4674-4149-96dd-d6ea0df83b86",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d907c363-7c58-4769-aad6-1954dce63a06"
        },
        "item": {
          "id": "972bd297-ee89-4b80-8e21-f490d2ede5fa",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "433ec460-4638-4974-9be0-3fa7bb46162d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 98
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "5a88e2ba-5921-41b2-8fde-4ab5d7e51c00",
        "cursor": {
          "ref": "af6d25d0-dd16-4726-8884-49bad204c19a",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "518704a4-f196-4af2-8115-fd828c539943"
        },
        "item": {
          "id": "5a88e2ba-5921-41b2-8fde-4ab5d7e51c00",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f15cb4d8-e2ea-400f-a2b6-c7cb3bc122b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "8f1d6a44-bee5-4b9a-9199-035f6d77a42c",
        "cursor": {
          "ref": "ca1dd2b9-e7fe-47e4-b51c-f7c8f2ab64df",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e36a5c13-a752-41f7-8984-2ca4213ef753"
        },
        "item": {
          "id": "8f1d6a44-bee5-4b9a-9199-035f6d77a42c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1ad705eb-2a1b-4e08-baa9-056756f6c3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "6763e177-9401-4e5b-a682-7bf4760bbf9b",
        "cursor": {
          "ref": "707dbe5e-37df-4f21-b79d-c0ceaf824fce",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "231a0140-3337-4def-915c-f2cac0084658"
        },
        "item": {
          "id": "6763e177-9401-4e5b-a682-7bf4760bbf9b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8d680191-086b-454e-b2af-8deb883f2daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "2ee1a3e0-b9e0-4bee-aaa5-9766f499cd1b",
        "cursor": {
          "ref": "21ef9ba2-9f98-4cc2-8b6a-ed9e198cdcfe",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ed8804fc-000b-4d72-ba8c-4efea52c0c8f"
        },
        "item": {
          "id": "2ee1a3e0-b9e0-4bee-aaa5-9766f499cd1b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f039ae95-6192-4bd3-9b64-b2b379502b33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "4c2f4b2a-bdf0-4d62-9409-cc87d634ac80",
        "cursor": {
          "ref": "601f6708-fc5e-4531-a0d1-3f4c2cfb2681",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d2835bcd-69fc-47ff-b441-1d00338e11cf"
        },
        "item": {
          "id": "4c2f4b2a-bdf0-4d62-9409-cc87d634ac80",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3441721e-a977-4df1-956f-41c78e8e7b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "e4319dd8-aedd-4cf7-8cf2-aedffafa132b",
        "cursor": {
          "ref": "faa10916-bd6a-42f4-9681-521ed58f8df4",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "65288360-d9b4-4579-90bb-8ff476ffecf5"
        },
        "item": {
          "id": "e4319dd8-aedd-4cf7-8cf2-aedffafa132b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b7358538-3e43-4d2c-a402-ceb58d63cdf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "7ea874fb-3c50-4cfe-a3d4-ce0d99e2c802",
        "cursor": {
          "ref": "11a3baa5-804c-4c26-a37b-bfde7cd8e293",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f41c4685-2975-43a3-846a-829246c7292d"
        },
        "item": {
          "id": "7ea874fb-3c50-4cfe-a3d4-ce0d99e2c802",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "514b1e51-dda6-43ef-ac7f-ecae19e92f33",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "903d2f87-8eb5-425f-a76b-8328695ca5bb",
        "cursor": {
          "ref": "d8205301-74ca-4e99-ac89-c0f2cfeef465",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "136bc55d-6cdb-420c-8318-7908e21e993a"
        },
        "item": {
          "id": "903d2f87-8eb5-425f-a76b-8328695ca5bb",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4043c94d-9f37-46ed-a315-1960bb857e4f",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "3c5776ea-97b3-4b78-aa12-ca04d33fd3a6",
        "cursor": {
          "ref": "3fa090ee-85bb-4a30-a293-2a87d72a62ca",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b6c247a1-18c0-4f84-aa76-62006b11b4ca"
        },
        "item": {
          "id": "3c5776ea-97b3-4b78-aa12-ca04d33fd3a6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "80c7aa9d-713b-4338-b1f7-18ed138ede83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "9f77cd80-2f38-456e-9518-c96d44c9d005",
        "cursor": {
          "ref": "81c8fab9-f4ab-43b1-b14f-f9f26b6269b5",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "502ba5d7-a727-4464-944d-229a180405af"
        },
        "item": {
          "id": "9f77cd80-2f38-456e-9518-c96d44c9d005",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "42767079-a209-41c5-b5a4-9d16c88a4f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "cde465fc-fd64-438f-bf4f-a313744b4848",
        "cursor": {
          "ref": "b2f2dbbe-e5d3-4efd-8cb2-fdbf928eeab1",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9c873612-c594-4d1d-9169-c0114732c42a"
        },
        "item": {
          "id": "cde465fc-fd64-438f-bf4f-a313744b4848",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "47f12fb8-9a8c-450c-abff-1c1af3baca29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "a6a7f714-5c2b-45e3-8d5f-3a06f0d9834a",
        "cursor": {
          "ref": "13bf1932-058c-4995-abc4-ce0d8b462d4d",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a6e0ebab-a8fa-4b45-8c3a-d04437f5df01"
        },
        "item": {
          "id": "a6a7f714-5c2b-45e3-8d5f-3a06f0d9834a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ab2e7bed-5021-4478-8520-ce5384dffa1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "72241080-dce3-424f-a0f5-4835c90e0c41",
        "cursor": {
          "ref": "6c890cb9-6cda-4984-8aeb-50eedc0f97aa",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "79d1e2ea-3557-4862-8763-c3c49e4a6f94"
        },
        "item": {
          "id": "72241080-dce3-424f-a0f5-4835c90e0c41",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6e7b0e9c-6938-4c53-9964-51c8ac7da1e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "d875d0fb-caa6-4a7f-b357-cc3d6f060a2d",
        "cursor": {
          "ref": "aad0caa2-9470-4beb-a5e4-35e2ca23e0e9",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7f7d008c-8d72-42cf-888b-7d30856d9b85"
        },
        "item": {
          "id": "d875d0fb-caa6-4a7f-b357-cc3d6f060a2d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "cc52839f-1fdc-4735-a36a-a3f937916e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "671cad9d-8997-4475-aabb-6e9af171bf93",
        "cursor": {
          "ref": "af116add-127d-4e38-a5b0-75556176ee0b",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3337edcb-3bf3-4cb0-93b1-23680d71c26d"
        },
        "item": {
          "id": "671cad9d-8997-4475-aabb-6e9af171bf93",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0ad3918b-0e17-40ec-9b49-b14aadbd0f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "a90e0c94-0731-4e7e-8bb3-c624bdf5dd1f",
        "cursor": {
          "ref": "d729af0b-251c-4491-9c28-39cae7bb5c74",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "69e0dbbe-ebf1-4440-a89e-0ae6238ff197"
        },
        "item": {
          "id": "a90e0c94-0731-4e7e-8bb3-c624bdf5dd1f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1046049c-943a-4e62-98ea-8cfb5e152067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "458cda4f-18a5-4489-a88c-f97d31520acf",
        "cursor": {
          "ref": "ba4d7318-f638-4947-bf4c-b28849e6f88f",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "204eeb84-c32e-4569-a6ab-6797a7c321c8"
        },
        "item": {
          "id": "458cda4f-18a5-4489-a88c-f97d31520acf",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0cee9863-e0c1-4982-9113-fd01f6de5471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "af167369-7cf1-4ee4-88e4-df12118e4844",
        "cursor": {
          "ref": "77df4fc7-36db-42ee-bda7-5543d98c16ab",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "931cd981-abad-4a2e-8a58-fde0d82a4347"
        },
        "item": {
          "id": "af167369-7cf1-4ee4-88e4-df12118e4844",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8eb22891-bfa9-4f4c-8a36-18cdca96c283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "f5d57feb-a29c-4d7b-8c97-a81333a4022a",
        "cursor": {
          "ref": "f90e581f-e5d9-4101-8909-70500f793fd1",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d3f79cb8-445d-48f0-b7a8-fc2e2e7945ff"
        },
        "item": {
          "id": "f5d57feb-a29c-4d7b-8c97-a81333a4022a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1d0c0dff-4224-4996-a04f-20635f11580b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "86f667db-8722-4f3c-8da8-8547758cb977",
        "cursor": {
          "ref": "ad83f151-3e52-423d-a091-f0875c803849",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e97a4e49-db3d-46d5-b3bb-bd5f27f76292"
        },
        "item": {
          "id": "86f667db-8722-4f3c-8da8-8547758cb977",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2ace874e-93f0-4bd2-bbd7-08bb58521d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "c489a31d-3d87-47c3-a7e4-13c4c5926c9f",
        "cursor": {
          "ref": "76ef41e6-2637-4e00-8a00-bf6b2edbb5d2",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "824368cc-3e71-4fc6-943c-c175d4514089"
        },
        "item": {
          "id": "c489a31d-3d87-47c3-a7e4-13c4c5926c9f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "01bdb616-20ae-4835-99f6-f14d7554476c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "9715915f-c1ae-42be-a66a-71d0e03c0196",
        "cursor": {
          "ref": "cce0f180-1401-4195-ba99-9ba7e78a51a6",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "14991c4f-0d05-43f1-86c3-e80de5f2a2a4"
        },
        "item": {
          "id": "9715915f-c1ae-42be-a66a-71d0e03c0196",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d9f19cca-6553-4e8a-8c72-cddea57afcc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "e87a6206-5b41-4158-b800-83127f1f3402",
        "cursor": {
          "ref": "a88f0571-05d3-4f47-930c-a25eede92762",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "89a9a339-cb34-4253-8cb2-c17761b33b06"
        },
        "item": {
          "id": "e87a6206-5b41-4158-b800-83127f1f3402",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e10518f5-9e4d-4a49-a1f1-f909332e769a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "b109f479-fac5-4d6d-99ba-a418938cc5da",
        "cursor": {
          "ref": "cbe5644d-93a9-4fd2-8730-b39a94860d74",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "265bd88d-198f-40a4-a82e-ff48d9ddc977"
        },
        "item": {
          "id": "b109f479-fac5-4d6d-99ba-a418938cc5da",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "71466464-ff1b-4c15-b828-fc4540febeb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "f2c49f39-e2f8-44f6-a9c0-cc04bd4c7cda",
        "cursor": {
          "ref": "294a804d-80b1-48e4-9769-9a92545a6820",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0fe84ba0-dd91-46bd-8c3c-1caa2d41bb3a"
        },
        "item": {
          "id": "f2c49f39-e2f8-44f6-a9c0-cc04bd4c7cda",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9708e147-efaa-444e-80cf-6691c5f63b18",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "8e126551-ff1c-4cc8-884b-1d28410f6681",
        "cursor": {
          "ref": "fe1169b8-b7b5-46ad-86e8-e4d886fadc6d",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e13ecc02-bf72-4fd3-ab0c-093934141d66"
        },
        "item": {
          "id": "8e126551-ff1c-4cc8-884b-1d28410f6681",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b75fa839-c9bb-42a2-a394-07354a6af9d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "5b4e59a5-769a-435e-9980-d321bc0ad950",
        "cursor": {
          "ref": "23f461e8-d16f-4e49-a17b-87168c725510",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "734890bb-0649-4946-853b-4e473e7353db"
        },
        "item": {
          "id": "5b4e59a5-769a-435e-9980-d321bc0ad950",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5ee41d6c-272b-4e60-9a22-07ec08ee489b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "5acdfd00-386d-4777-a43c-858cf62734fe",
        "cursor": {
          "ref": "f72ef18e-09ab-4d5a-815b-260ed4bb368b",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d8f63a3a-0693-4097-949c-d26a9f741ce4"
        },
        "item": {
          "id": "5acdfd00-386d-4777-a43c-858cf62734fe",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "fbd3bed8-1fca-49aa-bd6c-f2ed8be7060d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "344ddb70-2732-49b2-a2fa-308cb42f1f63",
        "cursor": {
          "ref": "a39b4f75-f0f4-4b33-a538-fe9660430206",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "67e18f6c-67af-42ab-996d-636b5066139c"
        },
        "item": {
          "id": "344ddb70-2732-49b2-a2fa-308cb42f1f63",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "30119ab8-aa8a-4570-a4f0-f5cfd1be5802",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "5dbc8f70-5f2f-4cdb-88d5-be93e154080f",
        "cursor": {
          "ref": "9400c194-31c9-4f31-b310-1fff43917d66",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f78100f7-3998-4553-b2b6-1c6af6484065"
        },
        "item": {
          "id": "5dbc8f70-5f2f-4cdb-88d5-be93e154080f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "412dbcfc-699b-4521-93a0-2daa3f3506c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "b7f696df-dd1b-42a9-acd6-eab24f22ffd6",
        "cursor": {
          "ref": "2760b4ae-b88c-4492-97bf-8fb764345ca1",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "060757b3-0a65-4f38-afc5-48ba53f7c819"
        },
        "item": {
          "id": "b7f696df-dd1b-42a9-acd6-eab24f22ffd6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6731b7b9-e4b9-4189-a151-ee6989f0fd7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "6eb80147-40db-4df6-a3c2-ac8c30c631fe",
        "cursor": {
          "ref": "c94d0dcf-2677-4d64-9c33-2d7bfd395a38",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "be3d037f-58bb-4058-8b58-8e09407ae839"
        },
        "item": {
          "id": "6eb80147-40db-4df6-a3c2-ac8c30c631fe",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d97beb30-e0e4-49ba-8c1f-118aacdba506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "8fda25ec-f9bc-473c-b01b-35adc76a2500",
        "cursor": {
          "ref": "dafcf95b-f24d-4f65-b239-d8e453d0f8bd",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b4fc8817-8fb5-4394-8e2e-847af7f77332"
        },
        "item": {
          "id": "8fda25ec-f9bc-473c-b01b-35adc76a2500",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "07c75fb9-217f-4395-8dcb-0c552707b2df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "6ede4f37-e929-40d7-9664-40828a06d11c",
        "cursor": {
          "ref": "4153f7d7-0b60-4947-9bdc-598236152503",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2d313827-ce9f-47d7-8ee5-2f7d6c7839a7"
        },
        "item": {
          "id": "6ede4f37-e929-40d7-9664-40828a06d11c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "041711db-1871-4cb8-942c-a8f22f3a2909",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 94
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "c74a2677-1fd8-45f8-8ba3-e2ba2fc9bf41",
        "cursor": {
          "ref": "f945b3ce-4808-4cbc-931c-5790a31b5d7b",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6c47a62c-86d0-47e2-a542-3d30b303e506"
        },
        "item": {
          "id": "c74a2677-1fd8-45f8-8ba3-e2ba2fc9bf41",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4bce9f52-2427-4cfe-8fec-c2061e091fcc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "77f589b4-954b-408a-83b1-0d86076cb15c",
        "cursor": {
          "ref": "98a94193-183a-41fe-a3e9-99cb545f177a",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6ad1da0c-dcd7-4b47-8733-1dd7cb003d08"
        },
        "item": {
          "id": "77f589b4-954b-408a-83b1-0d86076cb15c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "878b14b1-5c02-42ce-bbde-e3212bd1fc74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "2c30c4a0-0105-4e7f-a4af-5c21704d10c9",
        "cursor": {
          "ref": "3627517b-bc29-402c-9f0f-a77872e7090a",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "84348e3b-d652-4d62-bd57-8d1ce47aba68"
        },
        "item": {
          "id": "2c30c4a0-0105-4e7f-a4af-5c21704d10c9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fa9a4f85-21ee-4b63-90a2-8fe9556560a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "6d08f731-236d-4fdc-98ef-0ae7efa8ac73",
        "cursor": {
          "ref": "a9794890-df18-472e-84fe-de54d46b61ea",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5e4c3900-34e5-489f-b864-6082e8f3a7ab"
        },
        "item": {
          "id": "6d08f731-236d-4fdc-98ef-0ae7efa8ac73",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a842c3f1-2f4c-4d64-883a-e4c8f093e326",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "02a1504b-efb8-4d02-af68-b01a6ce56f29",
        "cursor": {
          "ref": "25144eae-4be8-4595-bf6e-a4205147cffe",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "231ae36b-5a93-40ea-8f47-803631df393d"
        },
        "item": {
          "id": "02a1504b-efb8-4d02-af68-b01a6ce56f29",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a2533abb-1a2d-48c8-bfae-70f98b503a83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "7f25bb5c-e0e2-429c-b65f-bb74175289d7",
        "cursor": {
          "ref": "cf9af384-3fed-4a42-bd99-db76ab25926b",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b4edc071-a8dc-4d88-adef-f98114399a25"
        },
        "item": {
          "id": "7f25bb5c-e0e2-429c-b65f-bb74175289d7",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a907fd85-396c-4368-a8d7-a6f9ae85fca9",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b2b889cb-681a-42e7-b7c0-bbd664bc24bf",
        "cursor": {
          "ref": "59420d5d-8b96-4581-8a81-1f1e32c92242",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "957cd285-9fad-4fc3-ac49-434c8919934a"
        },
        "item": {
          "id": "b2b889cb-681a-42e7-b7c0-bbd664bc24bf",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "444fc7e9-ab4a-4e01-98ad-83382e238d13",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "e00e3122-1ca7-4df2-b39a-2d5b2c471cca",
        "cursor": {
          "ref": "fd51713d-82ec-408c-a92f-cfd06b3e6df2",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "fa88bbd8-c1ec-48ba-996e-b7073ba89b5c"
        },
        "item": {
          "id": "e00e3122-1ca7-4df2-b39a-2d5b2c471cca",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ae941a6b-012b-41b0-bad1-17f288edc541",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "654b8a51-94aa-4f81-aab9-6b5854c8ea92",
        "cursor": {
          "ref": "8fc60e38-39c9-4b33-bbba-56878e8cae99",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d5deaf91-fc29-4369-93fb-e3688e2cda69"
        },
        "item": {
          "id": "654b8a51-94aa-4f81-aab9-6b5854c8ea92",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c936d3a5-9aa1-4d6b-82cc-30af4947db49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "70760b8a-0489-41d7-9f67-898e7b608bdd",
        "cursor": {
          "ref": "33c347f3-c717-4c2b-9325-ef7250e94471",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "50708b41-d3bf-406f-a8ee-62d75104e318"
        },
        "item": {
          "id": "70760b8a-0489-41d7-9f67-898e7b608bdd",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d4106317-4721-42a4-8c21-0c051ba45ff0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "9b248f1b-e994-4d74-a1ee-e7b4392982ee",
        "cursor": {
          "ref": "fdfdd881-c4d7-4ca1-851f-a99d2a07e136",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "221bcba1-4289-4044-81c0-2c996f2e52e6"
        },
        "item": {
          "id": "9b248f1b-e994-4d74-a1ee-e7b4392982ee",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "dce4295e-d2ef-4ecb-b472-8aa5256a6831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "891b559b-1a8f-4e0a-941e-03ed41f3f570",
        "cursor": {
          "ref": "decde9e5-f089-4a74-877b-7cde9f5ff430",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "06e05af2-b9f5-4103-b4bf-d5067ce20dd5"
        },
        "item": {
          "id": "891b559b-1a8f-4e0a-941e-03ed41f3f570",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "912b0da8-9c81-468b-a6ca-87219f8be390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "dd0715cb-5bc3-4bb0-8fa8-5c73b97a43a7",
        "cursor": {
          "ref": "61621174-ad25-4d56-9083-19dfafc4cb16",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f2b8ba0b-e689-4dbc-878e-aee3e696720d"
        },
        "item": {
          "id": "dd0715cb-5bc3-4bb0-8fa8-5c73b97a43a7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4c4af868-f9f1-4a0e-ab62-c572caed2b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "a5115a79-8561-4bf1-b8df-c3821b50734e",
        "cursor": {
          "ref": "4ff12141-2983-4a3e-8b66-2d33c9e2d91e",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f91a7e7a-0b00-41d6-832d-15453b058ce0"
        },
        "item": {
          "id": "a5115a79-8561-4bf1-b8df-c3821b50734e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c8567ca8-2432-4712-b4a0-397d62262713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "df9f0657-6e89-4f2b-a7a0-03a6dd5c9278",
        "cursor": {
          "ref": "7267a5dd-2c8e-44c8-bc1c-b227f6f37aec",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9b6eb1fe-aacf-4a81-a78d-0108424b9013"
        },
        "item": {
          "id": "df9f0657-6e89-4f2b-a7a0-03a6dd5c9278",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6f5177d6-0c4f-4799-847d-419f44141127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "1d19ceed-49d1-4034-9afa-447c7a714cf9",
        "cursor": {
          "ref": "0677b9f7-77e8-40c9-bccc-e5401ff0ac3d",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "dbad7360-5e17-4b7f-b15c-5f1fb2096011"
        },
        "item": {
          "id": "1d19ceed-49d1-4034-9afa-447c7a714cf9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b043afe6-71ce-4cdd-9e96-9c17a84244e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "ff3578c7-f0d3-490e-a0d1-fc5fae1ff01d",
        "cursor": {
          "ref": "19709dfc-0023-4d2f-81e4-0d8c86614ae8",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "02af536f-3c39-4194-ba84-4d1a8d34c063"
        },
        "item": {
          "id": "ff3578c7-f0d3-490e-a0d1-fc5fae1ff01d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "cf6e107c-33c5-41cd-ac40-5c6e07ad3012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1fba463d-058e-4703-b94d-f124fd9dacbb",
        "cursor": {
          "ref": "b0f0227a-a432-4b7a-a17d-a6476e2f4f3d",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f25c779c-adb7-4c95-ad08-6bef689fac27"
        },
        "item": {
          "id": "1fba463d-058e-4703-b94d-f124fd9dacbb",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3804485b-e597-4fde-8bda-3dd89c212466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "85845f6f-15b8-417b-a96f-09ef671936da",
        "cursor": {
          "ref": "76c43036-395a-40ef-834f-119d6205a589",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "118d021c-440d-4108-9804-5a230d147850"
        },
        "item": {
          "id": "85845f6f-15b8-417b-a96f-09ef671936da",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "99f44975-8218-4dd0-98da-add78a8a427d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "4b0b991b-98f4-445d-9bc1-5751ae4b6c4d",
        "cursor": {
          "ref": "4bb3620d-daa1-4ce2-a243-513a28508ea9",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6ebaa28b-87b6-4944-8ce1-6fdf0368fb87"
        },
        "item": {
          "id": "4b0b991b-98f4-445d-9bc1-5751ae4b6c4d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8a1de077-7b4b-4f89-92e0-73de57950237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "c5c697d6-55c2-4256-acf0-3fde90b973b6",
        "cursor": {
          "ref": "50ab5ade-06e0-4aac-a242-bd79f906159a",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "dd3d68ae-9e46-41d0-8023-9e9bbb4985cd"
        },
        "item": {
          "id": "c5c697d6-55c2-4256-acf0-3fde90b973b6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b801b0fb-ab51-4eea-9790-c2f6679de670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:254)"
            }
          }
        ]
      },
      {
        "id": "450ab402-a38d-4010-87c5-1fa199326e41",
        "cursor": {
          "ref": "8ea35a5a-ffde-43b6-8e78-47480a748753",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "21cf588d-a745-4254-9be8-b74fbec1c5d7"
        },
        "item": {
          "id": "450ab402-a38d-4010-87c5-1fa199326e41",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fe545dc0-36d0-4261-861e-2b52c4692dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:255)"
            }
          }
        ]
      },
      {
        "id": "07ad2804-a27b-4c02-abe4-22310a62630c",
        "cursor": {
          "ref": "f70625a9-8bfc-46fe-b41f-3aae5d9b4570",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "764180f0-0859-486a-af3d-10d7fdc1018e"
        },
        "item": {
          "id": "07ad2804-a27b-4c02-abe4-22310a62630c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "aeecca4b-eb78-421c-94ca-81d6645f6e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:256)"
            }
          }
        ]
      },
      {
        "id": "067e4240-4092-4f41-9978-c8bcf50f2276",
        "cursor": {
          "ref": "934d733b-c1fa-4643-85b2-71da8124826e",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "83f00b8e-fed3-4973-8eb0-57db87a226e7"
        },
        "item": {
          "id": "067e4240-4092-4f41-9978-c8bcf50f2276",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3505de88-b25e-4cfb-aac4-6a1124eca10b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:257)"
            }
          }
        ]
      },
      {
        "id": "d67e7849-74a7-4a8f-8e3a-4eef987cb92f",
        "cursor": {
          "ref": "1296a74e-5ce4-4a5a-9f9f-690042422946",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "acb439cd-d9a6-448b-9e84-fd46c8ffef70"
        },
        "item": {
          "id": "d67e7849-74a7-4a8f-8e3a-4eef987cb92f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f5be99bf-0c15-4a72-ab43-664fc4cf2827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:258)"
            }
          }
        ]
      },
      {
        "id": "465124cc-08a1-4938-9bc1-ded3b4a34997",
        "cursor": {
          "ref": "080a3cc4-17de-41c9-b1d4-569ad5745a7f",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "08dcab55-a2d4-4cbc-8929-294856c6644a"
        },
        "item": {
          "id": "465124cc-08a1-4938-9bc1-ded3b4a34997",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "fae56aae-1b0c-4515-8bba-e40b6e91479e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:259)"
            }
          }
        ]
      },
      {
        "id": "e4e5cc2f-15e2-415b-ae5a-14da2619a5cd",
        "cursor": {
          "ref": "d3dfa0d2-0244-4d46-9ec5-4fc98834bc1b",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "95117fba-0afe-4ac6-b0ce-5f7556037a07"
        },
        "item": {
          "id": "e4e5cc2f-15e2-415b-ae5a-14da2619a5cd",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f2bb3d68-588f-4554-91dd-8aa6ef3abc96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:260)"
            }
          }
        ]
      },
      {
        "id": "8ae5f769-c7c0-40de-a0fb-091b8472d746",
        "cursor": {
          "ref": "ef9d8378-9292-4d18-a108-b3c64e18f7e9",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "7e09ee36-3787-497b-bdc4-819610460ab6"
        },
        "item": {
          "id": "8ae5f769-c7c0-40de-a0fb-091b8472d746",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f802b756-90c9-41d6-8132-176118f4657b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:261)"
            }
          }
        ]
      },
      {
        "id": "c6e630f0-9f8d-4bd4-85f1-1d5916151504",
        "cursor": {
          "ref": "a2967be6-a2cf-4a35-a6e0-6bbe6d301ec8",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "fec6bb31-2689-49c0-a53b-71916afda491"
        },
        "item": {
          "id": "c6e630f0-9f8d-4bd4-85f1-1d5916151504",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ce88a5b4-8354-4261-9221-9652edfe72b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:262)"
            }
          }
        ]
      },
      {
        "id": "ad2438b2-6428-4d78-a9e4-425e61fa963b",
        "cursor": {
          "ref": "9a265d52-f4b6-4799-b61d-38748aaa70e1",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "4c8ffe5d-0f40-45cc-aac6-0b5793063a1f"
        },
        "item": {
          "id": "ad2438b2-6428-4d78-a9e4-425e61fa963b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4361c0fd-e247-44a5-a722-4ba56e94d7f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "f026a99e-eb8b-4ac1-9be7-100c68b3ca71",
        "cursor": {
          "ref": "3fb97bc6-1e6d-4d48-bbcc-a01f245b0072",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "8f96cf6c-0a2d-495b-889b-31941c6638de"
        },
        "item": {
          "id": "f026a99e-eb8b-4ac1-9be7-100c68b3ca71",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "44bb7f63-cc5d-4719-bab4-aef1e0edf720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:264)"
            }
          }
        ]
      },
      {
        "id": "6ea69b63-cec1-47e3-ac67-90526709037e",
        "cursor": {
          "ref": "dcebee33-e59d-4c74-af78-1035e4d1b8f3",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "4265997f-6a6e-446a-bdff-b003a1f22aea"
        },
        "item": {
          "id": "6ea69b63-cec1-47e3-ac67-90526709037e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "98113d5c-a45c-4ab3-9a83-1b115b574286",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "689f6d3a-2c18-4648-95fd-775026020702",
        "cursor": {
          "ref": "e18264c9-515f-4ec0-b621-b5848679e1f6",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "ca01c440-d660-4074-ae0c-bb20d369aced"
        },
        "item": {
          "id": "689f6d3a-2c18-4648-95fd-775026020702",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a7fbf3c6-ba28-41b2-b105-e6feef710f81",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "3c1bd611-1a06-4717-ad12-097bc1ddee35",
        "cursor": {
          "ref": "e115d3ea-00da-4dbd-bb4f-b81dda97e2d9",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d2316879-765b-4c4f-a902-2a72d9a44372"
        },
        "item": {
          "id": "3c1bd611-1a06-4717-ad12-097bc1ddee35",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8d687692-1ad0-4420-bb80-bc02a757fa3b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "c4dad6ae-8d0b-4512-b145-71b439ff20d4",
        "cursor": {
          "ref": "f3f55c2d-9329-4c82-8713-7b427a4e3c65",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "e747ab7f-010f-49ac-a08d-cf0127d29dfd"
        },
        "item": {
          "id": "c4dad6ae-8d0b-4512-b145-71b439ff20d4",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4f0546e9-e8bd-4631-9933-a36114b8afa6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "f291a9c0-892c-4a58-9211-2d121b540f88",
        "cursor": {
          "ref": "c5f57c11-fa1b-4996-bac5-266c90d4ff3b",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "46a62e31-78b1-40fe-93c1-316d3136d994"
        },
        "item": {
          "id": "f291a9c0-892c-4a58-9211-2d121b540f88",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "95df8592-0c8d-4de6-9cf1-f715ed62d480",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "edba6618-c626-42ca-99c9-1fe436d35868",
        "cursor": {
          "ref": "0ac9438a-489c-4f78-94d8-9083187c508a",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "7288717d-bcce-4a1a-92d2-09f7f2b290e9"
        },
        "item": {
          "id": "edba6618-c626-42ca-99c9-1fe436d35868",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d7f0ef32-d4b6-49bb-a4e3-50d8593bb430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:270)"
            }
          }
        ]
      },
      {
        "id": "cad39d96-3465-4a3c-8bea-011b2ac38559",
        "cursor": {
          "ref": "4bc202a4-2158-4e05-91a8-cc27afae646c",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "3b137c96-b8a7-4262-a58a-e7f2797da0c7"
        },
        "item": {
          "id": "cad39d96-3465-4a3c-8bea-011b2ac38559",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5cf43e41-9a8a-4fb8-b583-b5d0021add44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:271)"
            }
          }
        ]
      },
      {
        "id": "b87eddf9-d759-4ea6-9202-9ec474b309fc",
        "cursor": {
          "ref": "d49522c3-1574-45e6-9c06-428127472936",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "e2fc3891-3872-40cf-825c-e81216c15237"
        },
        "item": {
          "id": "b87eddf9-d759-4ea6-9202-9ec474b309fc",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2ca5a2a5-3dde-478a-948a-e7b52b2797f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:272)"
            }
          }
        ]
      },
      {
        "id": "334dda2d-842b-4c77-8ffd-0afbcc80ff6a",
        "cursor": {
          "ref": "c263f7d1-5094-4b1d-87c3-9ccb2a2d92b4",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "4437de99-c57d-4761-904a-8bd748b2b465"
        },
        "item": {
          "id": "334dda2d-842b-4c77-8ffd-0afbcc80ff6a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a2629350-1da1-4d36-863f-fd901ddd1d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:273)"
            }
          }
        ]
      },
      {
        "id": "a32819d4-7425-4e67-a202-0e86178c2d7c",
        "cursor": {
          "ref": "15033f41-3586-452f-bc6c-9d132c05ebe4",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "920b1f7c-1fb5-44f7-bad4-4037caf0eba7"
        },
        "item": {
          "id": "a32819d4-7425-4e67-a202-0e86178c2d7c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "815bfd14-0900-4e30-8ee8-eb025b4a3230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:274)"
            }
          }
        ]
      },
      {
        "id": "3a070e26-0fe3-4cfa-a262-dcf136178afb",
        "cursor": {
          "ref": "f9eb993f-337f-4d78-a943-0fd974d29c9f",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "8febba91-894d-468c-8649-9a56e71799f5"
        },
        "item": {
          "id": "3a070e26-0fe3-4cfa-a262-dcf136178afb",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9309b1bc-2fb6-4931-83c9-d4e2c892feb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:275)"
            }
          }
        ]
      },
      {
        "id": "f918c52a-620b-4faf-ad05-fc8d467337a1",
        "cursor": {
          "ref": "e7b2f733-5843-4365-990f-fdc536054f4e",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "f66abd51-8e16-4575-ae17-f25d6c7fbbc6"
        },
        "item": {
          "id": "f918c52a-620b-4faf-ad05-fc8d467337a1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "891d6478-0a1d-418b-967b-9290e1448903",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06771306-0f58-49ed-b875-e7b8c62a12b4",
        "cursor": {
          "ref": "f1ae794d-b922-48dc-8097-4d9bc6dce5c5",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "9318b821-99af-47d2-b13e-a2442bc1488d"
        },
        "item": {
          "id": "06771306-0f58-49ed-b875-e7b8c62a12b4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2b07bab3-fe8e-4186-98e9-412ecd9af1af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "3232958e-d28a-4170-b242-d7a9326fe29c",
        "cursor": {
          "ref": "c66a843d-04bc-4632-b663-09c6392584a3",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "ffda0506-9781-4965-8c14-4f4a7c718f87"
        },
        "item": {
          "id": "3232958e-d28a-4170-b242-d7a9326fe29c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "27843f5f-106d-44fd-8313-4ff0ffcd3edc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "f2222263-16bf-40ea-86d7-532c9a103f2c",
        "cursor": {
          "ref": "26068d8f-f22b-485b-801b-b4673c64aea1",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "13d7d176-7211-49cd-a86f-e239f67cafcd"
        },
        "item": {
          "id": "f2222263-16bf-40ea-86d7-532c9a103f2c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "405a6523-0190-4b6c-b9fa-2462d0ccf82f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "1bab8edf-4a73-435c-8514-f0adec27799d",
        "cursor": {
          "ref": "f6709969-5b15-4989-b92d-7c3fbae49ad8",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "df419c20-0a85-4a8d-8443-f04d451cfcca"
        },
        "item": {
          "id": "1bab8edf-4a73-435c-8514-f0adec27799d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e6eca7af-545a-4d36-a888-b6ca6f7c7f08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bab8edf-4a73-435c-8514-f0adec27799d",
        "cursor": {
          "ref": "f6709969-5b15-4989-b92d-7c3fbae49ad8",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "df419c20-0a85-4a8d-8443-f04d451cfcca"
        },
        "item": {
          "id": "1bab8edf-4a73-435c-8514-f0adec27799d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e6eca7af-545a-4d36-a888-b6ca6f7c7f08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ca4cee-3fc1-4bf2-9031-3cd96c98d244",
        "cursor": {
          "ref": "b520baba-b6a9-43a9-b290-025f6ea5d7ad",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "21145318-83fe-4a30-abc2-82b11cb5c041"
        },
        "item": {
          "id": "74ca4cee-3fc1-4bf2-9031-3cd96c98d244",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8b95bdca-14da-40d3-85af-fc2e635a1803",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc0fd3c-d64f-41d2-a265-93d6164e3674",
        "cursor": {
          "ref": "4df6c701-a1f8-43b1-ad11-b25cd99fec73",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "06a908b2-f513-40b4-a225-55fd59d86b44"
        },
        "item": {
          "id": "9cc0fd3c-d64f-41d2-a265-93d6164e3674",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "53d9cde9-5221-4ff7-8068-c2eaa5c481b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}