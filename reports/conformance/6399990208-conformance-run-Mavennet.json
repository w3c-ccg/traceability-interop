{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0311724a-9f73-43cd-a26b-622cc655ff06",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9a9d04e8-a317-436a-b387-556486a06aba",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "32fad8a7-d634-459c-a24f-ec8947fc7064",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5e455e9e-0639-4e30-a082-3939761bcc72"
                }
              }
            ]
          },
          {
            "id": "50b212ef-5998-46f0-bde6-f4c449a4175a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "151a75a2-b566-43aa-a2f6-ac7dfed30d52",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "89e8d231-e2bb-4226-95e5-f9ed6c43bac3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "03d03c78-4bc1-474d-bb71-87b609b9ac4a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1e4fe857-a443-414b-af24-93f53cf54f23",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d423c288-07cf-489d-9533-e6f80090e741",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ed35b06-6fcf-49c2-a4a2-ce5ad781e39a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d2b4d93f-6e2d-4483-97dc-bc3424fde2db"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9d85e213-4567-46af-97c4-12c8260e5942",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aadaa7d8-ecd0-4800-8e7d-0faf38bfb39c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "15f968e1-fc77-4e15-aa43-b1452252a8af",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "60448544-7ba6-4482-a4d3-d4d5f654bf49"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c396a6e-536d-42ef-8d25-aee2ff988de9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8c1b8e8c-ffc4-4a6e-ad60-b8ecb846a20c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e50af581-3b05-4dd0-9d4a-0c626b69c9f0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3825a1d-cee8-4279-9814-7244a85316b0"
            }
          }
        ]
      },
      {
        "id": "5edb84b7-b13f-4ecc-9699-e8915111f534",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "32193ab7-2fd6-4b74-9333-35889a0e2cf8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "abcc5e6d-7c4c-44c3-9d0c-3eedf19d3e94",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "68f71e94-e191-40c6-85a3-d38c49216174",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad144cf-80a1-41cb-968b-34f316ff9774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8853ec2-d66b-4843-a502-2c27fd45eeb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c9fb79-717c-4469-9137-d4acfbbb59a2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2382222-f07a-414e-bf66-394084403b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "664ba1de-ad0b-48c6-b2b2-adb55b083b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130302ca-2907-4aec-9118-65081f7e4dcc",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6b849a-d5c9-40c7-aa72-3e42e32cc000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3699ac2e-05a2-4536-9149-46d177335921"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cb39d908-cb5f-4dab-bb37-084dda095667",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a3eeffe9-c73f-4d2e-8cfe-9094013de678",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d05971d-d8b8-4975-841c-bf663a0fb0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eeea17c4-62e6-46be-9caf-0666f059ffa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53879684-fbc4-427c-983c-6c794da96860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43c96026-4017-483c-8470-3c41995ab7cb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "50adb419-d36f-474c-81e6-c74266c54ac8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9ac9b530-c35c-4253-b024-9265a651542e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d936d0b-2f8e-439e-bd0f-8acf9b80a20e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "87bcfc16-610e-432f-a84d-e4433277e4b5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "63e560f7-df72-4232-b6cb-faf041c0b22e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "3022b47a-48ca-4332-aba9-442411a61ca7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "15d6796e-778c-4936-b248-a47875b389d5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6926c579-ca4d-4ca7-92f7-014e961cbd6d"
            }
          }
        ]
      },
      {
        "id": "e2bf2d91-48b2-495e-b8b6-228573aac835",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ec9c5530-9c85-4a10-98b4-b8f7e2942d4c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "02c70faf-42ee-406a-ad11-6bd797d81886",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8559f53c-da5e-49b3-ac03-cbbd063043d9",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00164885-4655-4204-b7e0-d7f4c517c9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2247204-d514-45ea-8c0f-b7c897323978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea64ed06-1219-4fea-8207-5d2292ad5013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c60b1971-c988-4329-b3d6-1b6ec8879747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba9f957-74b1-4f92-b9fc-7dbd5e081ced",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b166d340-1851-496c-a36d-287e0ad84756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e06648b-9533-4077-af38-ff57d3245417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088e6fbf-b521-4481-a08d-93b481b080f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e181704-0134-4ec4-9c12-3eb35f660d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939c8f8f-f7e7-4097-985c-c87db70dff31",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6c8407-0b20-4d3d-a25a-d76f47ce6223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "132e6ca3-2c8c-4712-92cc-2b416b569553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9c25b2-7005-4da2-b1b3-3aa3bdd4fd38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e16d13c-35ac-4611-bad4-d90bf6c2403f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e8adf2-768c-4b1f-9917-898d4f048747",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02afd22a-124a-47ff-a9ad-e70acccbef05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dac0afc1-34ba-4311-a86d-7bf48b2e73b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0279e3-efca-4e5d-a72e-0196bb11b9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b3fa48a-4204-4fe8-89e4-d2d57bca06f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe9528be-1920-4a62-a232-3cb0e1636552",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feca8006-1f7b-4718-99c6-dfeb1f014c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ceb9b86-1d94-4618-b7f7-cbb959547f9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "225de5e0-a9f3-4885-84de-91e4f8d4d4d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa8bdc8c-e6cb-4661-8414-8890a36709cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5163e745-a834-4017-a6ac-1081b5c2ec5b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5671ce1-ebff-482d-a8e5-d588bab19e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc9a95d-7648-4c22-a339-85cd621b099e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51206719-d91c-4013-89c9-cfe11fe79de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8281093-2a6c-4895-9b28-d6b996d7474d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4250d5f-49c3-4c2e-b398-4b8f356c38cf",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9613d7e-e629-4dc0-91b5-5ecfae6a9d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "388e0e74-bda1-4a86-85eb-a1dba7ef2bd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372ab9d3-8026-43ad-a5e2-e99dd31a522a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "edbc69c4-7d19-4f63-9820-51cbbbb2ba6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279ab4fc-3df1-44c1-9e95-60ed4a458155",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f3f14a-881a-4801-b84e-e0391cf70ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5770d86-f59a-4185-92c2-9ab12801af78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54d7cbf-afd5-45ea-ad90-4a8991c82950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7fff383-242e-48d5-b0f2-7385c48ab2b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a86b25c-e58b-4d93-8819-054bc82a513e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a63b80-9a87-43b0-90e8-33cfef119d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed199588-0ad8-4831-8558-e86d81ec409e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc3ac3c-67a8-4621-b591-c4c143459261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45996a48-89c5-47d6-ad3a-c2707d71ae57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945b413e-edba-4ab5-9bef-c8afe9b52332",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a35b67-31b9-49ec-b69f-6ca9e476b3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a611067-d8eb-4e8e-8062-8669515160d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839cf3c6-2448-4c5d-a4ed-898fd56d1702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4e41369-fa63-4d3e-9117-d37a4f5fd97e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4e2860a-6a70-49f7-be13-0cb6f30878b5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be0a102-41d7-49b9-b783-28f289a4b2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc17c554-544b-4367-8723-1226f2ee650a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ad2c86-6d96-4362-a02b-33bfc1b162b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "627b153d-d8d9-41c0-9512-7a8d929ac9c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89f25cf-7361-4382-b4a6-01988069c1d8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32099415-ea3f-4c6b-bfbc-e2e98bc8699a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28e0459a-a1c1-43dc-b533-a728b6bc1ac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b676e6-76d4-444a-93d3-d1f6b024df52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "567c70d6-59ac-4862-9f05-c53e4d265009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9181e83f-1fdc-4328-9c8e-d3b7de707074",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d12b17-1319-4731-99c8-90d053e77a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "779afe27-5cb4-4008-bfed-494ee523a68f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a44fd024-9b63-4a4c-965f-cd95db9e44a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a66a28a9-3be0-4a56-ad13-a552d54b45ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67f4921-8e5b-4b00-99da-83a2453e1486",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94194598-97c9-4e42-9c0c-61e3255d0727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71ab9c19-3b5e-4432-bad5-80d0958aa840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf7d227-96a3-473f-a904-55af0482c3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d09fdb1c-1bee-453a-81f0-735e62a9701c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0bcce27-c5ab-43c8-accf-01f357a71390",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab26dba7-2993-4318-9a15-8c6ff1ba16a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "727c0f40-2488-45a8-b44b-104f76de4e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b8b35f-db9a-4a55-8215-aec9677d6717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5b5cfda-4c4d-4ca3-8c48-f2b1a3d2ca5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d724bd7f-d321-4f23-aeb8-658c64dd57a7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f5d1ab-de4f-4e2a-b106-714a33d5e3d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e97c03e-31ab-4c05-8b90-b558a1762aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff452f2-4859-4291-a65f-a4236ff3db32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8d300cb-b855-42e8-91d7-2709cb893a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3532b643-2ac9-4ad5-bded-0707db702bc9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d181608b-1821-4318-805d-4019c165ffc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44eafca3-fdaf-4816-8af7-d3075ebf1113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ee87af-1e34-4184-80e5-01881c9c2814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83cbb53f-7aa0-476c-b851-dffe4363ff8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39701cd3-e405-4326-8f8c-d83623351f26",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5448a1-ad43-4508-a2b4-c45dca6f3174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c95f001-6e10-4f2e-bf7a-9ef7735e4c6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842e82c0-3d7a-4569-baac-ab7849217c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffaa0e8a-2e07-4d80-a164-e5ef2ffcf8f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17137255-ca8a-4e1e-9284-9ec3885e185c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5def163-2f00-4592-8d54-9b005e94dfd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97caa58d-4370-4851-9f5f-cdccb57450fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f1f80f5-621b-466d-8397-9ac08b3626f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfe34849-d066-4be8-8e01-c02a0e93033a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7bb3e90-8725-494e-9a29-3f56ee77857a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50e187e-593a-4d3e-9b8a-f16b9f76704e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01478fc1-129f-4185-8bc6-0cc9a770e5e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1cad07-25c3-4224-a195-0a3c34ca12f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c69c6767-52ab-4a5b-ac44-e341c9faf2e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49e799d-c089-4278-b4da-3283c3f6d79a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e11a3298-036a-4319-8de7-bfabf541f144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17514bb7-8334-49af-a414-052231ba3caa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd09e87-f7f2-4f03-8a06-4f03addafd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f759a1e-f7d0-4767-a342-f5297f2f8e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ecf32ed-6097-4e54-8038-7428f4829a77",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb10d15a-0451-4a04-8a19-5838ae39bfdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e0b5cfb-c980-4980-9ef3-7d4d118b5a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64d9258-a04d-4511-872e-4d1ec91cc041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c5f376c-72e1-46b6-8254-0bcb4d6bbe13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a0f56d-ceb9-4cdc-8dc2-295068fa629a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9408aac6-6397-48b8-b547-c8b5690eb065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48682d02-55ae-4b14-8235-8ccc9789088c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa9acda-c6c6-49c8-9cad-495f0d4671da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb79ab2c-6f00-470b-b67b-151121aceb64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85e67e0-0545-4671-bd70-42c2c7a08be3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c953f2-3069-4140-833f-f48b97104c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bee05c2-5cba-4b3c-9bf6-482a763c29ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb943f5b-7afa-4ced-a8ba-e9bf715f372e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3323edea-e946-4d9a-a050-18180844ad55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd14601-573a-4f51-b17d-6637ee419dc2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9ffcae-8144-4b2d-8590-9793becda815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e7508db-607b-457e-a108-c01ca8e1f548"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f871d3-244a-4fb5-83a3-ee5b74f717ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8569b8d7-097e-4019-9403-dfdc4d1cd8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e964ca23-f107-476c-8592-8b035a563c6a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce4c770-dc72-4a0d-a413-3958b72ea9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8540ac5-2813-448e-8c27-755fb0a050d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3858680e-bb4e-44fc-ab41-9731316a369c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "57bf304f-85d0-4ac5-8e3f-a8a98fc8d307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b0ce38-63a8-4f5a-ad15-966d36c6ffad",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "273d5ba9-e489-4619-9840-2177f87d3f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c651d3b-6065-479b-9605-26e0f7040acd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e74fee-e9db-40c3-b5c9-fce13a982633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "57312ef3-6a5b-4b4f-9248-0866b20b84c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cccb329-b42c-4d3d-93ce-84ffa14651d0",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84130cab-989b-4fa7-80b0-aae0dba96b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "998636ba-bc38-46c1-9aa6-80d8cfb01e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb63bb00-df80-4147-b95d-15db209e6192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "327dbdf4-c969-4a49-a962-d79a96026f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f24e3cc-2bb2-4072-91be-fedb75bcfcee",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3f5bcb-1a92-4fc4-8044-ce76fd6e8ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deb61d3d-86b8-4452-b8d6-6a1b587df0b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ca6747-f6b8-45e9-a797-b14a07a9da68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ae5cf7e-c45f-4c57-83d6-861fe885d36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085ac86a-e36c-456e-8e40-cdab1a54010b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040c6360-0d72-4356-9c11-24102164d725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58232098-6c8c-4373-ac43-bd71b94c6e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f4a447-9f70-45c9-8b3f-7bfcf6517186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc127424-6b50-45d4-8ad8-e059ba49da29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20678527-ea67-4585-847a-2cfa4b0239f8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a100028-5228-448a-a9e3-113673b0ab79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4a395b7-f066-4d75-9b4a-59875df756d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b6c48a-7e10-4d40-8739-efa034aced4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd9434b-9e35-484d-ba16-18b37546a905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b1d61a-e7cd-4338-b6f6-bce150d25e75",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e32b10a-6a81-4ee1-8c35-535e53b16d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7384b14d-5989-4d6a-b91c-2524041ed196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb69b06-3d71-449d-a012-bcf2f330548c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d21e438f-fb41-4f16-a703-bc73c6d0c126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f97620-aa36-45eb-b5ff-87f587a266ce",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26724f49-c7df-42c9-bb1a-465d04f0d509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e13eb66-65a4-47e8-b7d2-1ffd82ca5831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8cb235-4f42-4b3b-8707-dd1e69d43c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82881cb7-c6cc-47e5-bc91-079a5807ac70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829cce30-2106-43ac-8d69-d0ba73426dd5",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e35f29b-f5a8-4931-979a-0bf4bdb00a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54aee9fd-675c-4d4b-8e47-53fb8f205683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5e33b6-8d55-4a01-b632-45ed7255a52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe7b6945-c8b8-4c15-ad8c-81a147013bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ed30e9-f7c9-4eaa-8db2-89e3b448720e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da204b89-f9b7-4507-9f0f-16eadcfce5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9d4f6f3-3bcd-402c-b148-5f0375d22cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e43fc6d-e785-41c1-a2e1-adbc36803b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "28964da0-af07-409e-b51b-0aa2a3f0ab7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d664736-535a-4562-9f3b-d743cb98b570",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09bcadc2-0930-4499-b202-b676537742ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c4dc62f8-637e-4297-bbc4-673b0e12a38c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4cedbfd-7b96-47d1-a6d7-277da689bb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93248c94-8101-45bc-9993-78f59301568e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c3aab0-c32c-477f-85b2-353d687c9e28",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6237afa8-e428-41eb-a41f-4ff20ba972c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7c2b785-d417-4997-8b50-149fd541f681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ad0209-c65a-4c0d-a5b3-320e557fc4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "781570f3-2a0a-414c-8c01-4d2a0fa43d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd98de6-0d04-47e3-9f2e-8d185c9f81db",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5857eb2-c62a-45ef-a993-da39f5cd41a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f790bcb4-2443-4253-914a-4f88044d07ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d57f1b-d72a-4004-bb25-a0845a6b1773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "23f9b383-49a8-44a6-baa7-80b62b1fc8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86df587-f876-40e2-81d7-3215bf4805a5",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5531c78c-72a3-4380-944a-4c93bdb177e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8d27a13-f807-42cc-b60e-73cc3e44973d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee89391-ec82-4996-aff4-1e2c3eafd0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "aad56203-875f-4848-9223-dbb5bbae81c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d047db39-8a2e-4f04-9d0b-8343f0a5ae28",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669151f7-bf54-4570-a805-5bb9a5ee5f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84c5252f-5a02-41bf-a2a5-17c96a9cc858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e074937a-3279-49dc-870f-5023d501848d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "56f8b89e-4c4f-4871-995a-5b93623eddea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9d6883-b5cf-41bb-9ec6-97246445aa92",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56adaee-f1fe-4c75-8255-2b0bdb7611f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdc84525-f73b-49a2-a23f-05540df94c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3219f80c-39ba-449b-974e-e641d89e3207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8885cafa-2056-4da9-a6b5-141cac1dc2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5371e5-236c-42da-b08a-1e76b4ba3d65",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7a0717-a29d-43b2-9e04-eb2f6cda8082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f5805e-ab88-4967-8197-3d5dc199bea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11265cc8-b734-45a1-85d4-d9dd15f4114f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6eddb729-7e76-4489-bef2-58d3e0e36fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e3e1f0-5c6e-4696-97c2-b9bab1a60955",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "706f6bd4-ac2c-459b-bbfb-0cd80d0eb321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89bbd04b-ad83-4898-94bc-3cb09b89bf6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915f1fd7-f44f-4261-b47f-985ac6700956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0de55cc8-1fc5-4d5f-8a50-7671c2ce0dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3a0aed-27ef-4dab-b523-ea183b690191",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b733dc-4723-4439-834d-410b867d55df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b941ca4-3cee-4107-9a8a-4e7a9ad6aa1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2aa4db8-6e2c-44a1-b691-d8036aacd616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9401d2d1-3819-4a2e-97e6-8edcd2479b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9566c9a1-421e-446b-a7fe-1c08045a6d66",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef064c0a-8729-4abe-8449-f28177a9c56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "720189e8-9213-4650-a947-347f41c4a238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15244e8-6ec8-4a02-9c21-7dea0dda896c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1761527-c70a-4236-b0eb-c73c4c518e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc7c891-8bee-4bea-ba19-670a66b3785d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22222992-ac56-47fe-bc41-51abe581b9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "927861e3-35cb-4f0b-86b2-d06ea554dd92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c78a99f-1dc5-49cc-9bcc-f64585c7b62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa28b4bd-8540-45d0-b9df-9ee4cffa311e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db61557-84eb-4627-b7a5-ba36a30e4dce",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4e1949-36c7-49b4-bd54-f8bf98f28d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "546d69ed-0d68-43e1-8d57-24c84ba303d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc47d23-7604-4d35-902d-f4fcfe2d0a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "766073be-0e56-42d1-abb7-5a65ba0dd8d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec5a9f2-e9a1-486a-8fd8-3e936fcad90c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5e6b74-85cd-4a59-a552-191cb21a1f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5acc66b1-1ee8-4b4b-a4f7-ff5cdde9abba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe84650-1e88-45c2-95c2-ad79ccc741bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d9376c6-8696-4643-b2c0-812b6ba2b227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00bfd47d-4801-4a99-9e29-39d6701847af",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef897b9-ef0c-463b-9070-faf6a340980c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07cdf1bc-7d60-4151-ade7-d21c2fbae517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d96dd6a-383d-4ea9-9791-86cc296c02a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "63131abb-5837-43ba-aed7-b300e7156fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14719d91-1df5-4df9-a30f-658bfce32aba",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4ec5f4-e99c-431a-84ba-0b415ec080a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2218fccc-f7d2-40a4-b2a8-a2fe430c0ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc215f2-2229-4931-bb04-36e03fba5554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "771430aa-65c8-431c-968f-a998520b30ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "787fdb48-16d1-4bad-b24f-7509a57feb1f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28829a0d-fa88-40f3-a6a8-f55e599bba78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd88e72-9017-4eb8-8bbe-4ea9c8cc30f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b46683f0-2944-49ee-8547-b1984768e8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "14349845-de25-4eea-8c59-ea74d27aaabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f016dd-ba05-43e3-bd15-d5a2fca0b1f4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce823747-ec75-4c03-aa56-6946a6bdfe26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7414e2d-dd52-4a3a-8c98-7287f918971f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befaf1cf-cbfb-446b-b983-53b1aef6a423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb6d3de-3f60-4639-853d-7931857dd6df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87415d9-9d87-4549-8b9d-f670a335f768",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "755230ef-c803-48d5-a03f-f005e0e97e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cac45ec7-7abd-4821-9323-b2ad9de9f990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0175a5f0-9120-46a3-8fce-17ac036f874a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "433c46bc-4261-4dbe-8f71-af27f29bdabb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ba63b9-6eab-478f-b229-23a8eb4b2f3a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd959c0a-3441-4729-8ef3-10bfebe56c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01dc293d-242e-4a72-8c87-c50c55c4397a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8986c831-b55f-4f33-b267-0aa4a8f27ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e2a1257-8ae8-4e7a-97d3-9b7915f97f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3145493a-6cc8-4ff8-b835-16793ac9d7aa",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8eb502-8620-4f18-8eb8-f48955162fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de0838de-119e-47cf-aefa-f12621508128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b6d4dc4-ecc2-435a-8335-d487d930faae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d78eb2eb-d419-4046-b786-be53d00365c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd9123c-8995-4fc5-a8bb-3c1bc7680c7d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd230ebf-0bff-40bf-b429-6238028c6516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b140b945-ffe0-44cb-8168-85acc8045c45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d282ed6-4c62-4cd9-a5d2-ab211375c896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1811a93d-578c-42cf-b35e-6428f3e111b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1460bf-3650-4cb2-b81f-6da8d8d0dd77",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22392900-1570-4b0c-b039-462eaf783130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8028d4d-778b-4da1-b820-8e5494e70303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d295125b-8804-4d83-8ee0-270b121eaef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2ad256c-01a3-4714-a18e-8641078dd2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd7ec2e-e7d9-42bc-b16d-d2327aa8f75a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e342aeea-1e31-471d-8d52-4c6631142d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4507884d-1990-49df-afbf-0769edee50c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7c2449-e7d9-4de8-895b-cdc790890e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad6f6336-7fc4-4259-8464-e0db198d1258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd3eb40-54a0-4dd4-b9a7-611a00887b24",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3790dc46-9bdb-43d2-ad62-8cf97e227e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "608cc7e5-2dea-40e4-acb3-1c964b21dbbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2762333b-4a9d-4c10-bebe-f9b9235a83e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e53baa14-fac9-4229-9a4b-94e69c3262c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b26d942-7f20-4879-b6cc-b103c4688d94",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c86458b-eb06-4382-9ff0-bb1c9f3b9481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24a983ad-91f1-42b7-a0ea-960b5070adcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08acfddb-372a-478a-957f-ed881747708d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae5e7bd8-42da-4828-94f2-49a1ab8924c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9adc50c7-d6f8-4b38-abde-4fea3583100a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98adbb53-3f58-47b6-9e01-b69d99eac707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe23a6b9-b3b1-4a75-99a1-502b9fc283bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0480846-9c1e-4e17-a216-9f8cd8a0209b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "04c1c932-a42e-48b6-92ac-e49ca2903945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed1d74fe-59ce-424e-b6bc-59a995cb7dd0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0381911e-ba17-42a8-a24b-83ea127f7d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd493e5f-8001-480f-85e4-b4ba4a619f58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe62460a-f845-4447-825f-b3c092f2da15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b5cb54b-ce13-453e-9aac-35641c4142ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98576dc-6bb3-4b59-8d45-dd092f9a353b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5963c3b9-216b-4950-8270-4b45fb0abfd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da4858ab-4827-4800-9443-4f1bb0e18e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53645e07-8aca-4679-8e50-eb3bf5b33faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "948d901f-4fbf-4dd6-a705-d7cfeaca428e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06e26eb-981f-4216-bc32-84f4142ba1be",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "286c2a90-c563-4fe3-8f3c-c00fd6a8fc85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4270ad04-4364-47d9-800f-fb6a6bd936d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ae6977-c615-4fe4-9d5f-8a0ab3c5284d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1b8419e-0fe9-4cd4-bda2-fdf0d95c29a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7160c12-3b9e-4549-9d45-7435bfcf9d9e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "050985c5-db13-4f86-ae48-43aede7d1283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ca50a8-ac83-4171-8397-06f246406483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b537bb5a-bb0a-4c8a-8c57-43376a6784b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "80c4b387-b12c-4817-bcd6-a765a6438221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8190e6db-0b2a-4e3f-b5cb-20f72f9196e0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3c2fb6-1222-43ec-9195-ea691061ecd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad40b23-9d65-4324-b242-cc7ae0cad4f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b7a53f-cadc-4171-9322-06f96753d79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e73b93c4-d6d1-4172-b8de-04563250f43c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08bc854-f4d0-4d1e-b8ad-a2b844cdcfd7",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c84caa-9f76-4b2c-b7e0-e076b8b4b3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e25beb00-01b5-4b04-99ec-4772c4a25749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f693ab8a-465e-418b-a966-4024b0b44b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d594fadf-321f-448a-9be3-87d9a6f33555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34f7148-cfae-425c-a4f0-835fb12c643c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e38c456-1fd8-4e24-9d47-dcf1c6be275c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a310d12-c617-4e73-9f2a-4ffd34029369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2d9387-27d9-440d-b096-a631c228080b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d39aa5f7-c32a-4f40-b3a1-4475d7764f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da7781e-32d4-4c9e-9127-d4db83e3c7bc",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53cb2a2f-bce1-4f1d-9660-22a5e4bc2fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c13474-aad3-4110-acbc-3464733c7c46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d68b273-46e9-4440-bbcd-12014bd95b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "daac15a7-0598-4cbd-9a2a-e56b33da0227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389b3934-26a2-4306-b68e-26bdd1396cc8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca6e471-f73d-40fa-a4c7-bc16a783761e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b551aa3-b904-4286-bc56-6cebb7507ef6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e86c862-2f42-455c-9e56-67405341d337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0905ab43-454e-4d83-b2f6-da61c626fe57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c2665c-5aa0-4189-bb4f-a2fdf5962c16",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4084a363-64c5-4c6d-832a-df94b22905af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "699209b9-3a25-4f05-a499-1ad25a097331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d20ade-01e9-4c6e-8e04-59a28ffef30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d87cd2a2-e0ac-4953-97fd-56aaf0543561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911ef3ba-5ae2-4814-9ebc-9d91806617cc",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0bb9fd4-0292-4e50-9f3e-77a63f1a1f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b9d88a-71e5-4ba8-8787-5b46ce813e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52297dee-892c-44c8-a6e2-889524d985c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "21813c5e-8682-451f-84be-fc954a19248b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2d9bc4-9991-48e6-b696-7bae4e82845a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9377d5a8-2cfb-4c76-8257-471b87b4d669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e19f7dbd-97fa-4b48-9aec-1f2d64ab72b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6f6524-7331-4d24-811f-fe604dd13228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f85356e-4574-457b-9b73-639c0819725b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d90afe3-beba-4643-a646-8193693a5a90",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6938b3-f2ae-48f1-ab92-8bc010332212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f96c7d00-0212-479b-b03c-9a2bd9bddfaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6d83ba-f4ff-4c00-98d3-be7d1c796158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eec2d3a0-0e05-4339-bba1-a5bb6cb260ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d648e7-5418-4347-ae51-ded5e27afa7a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49557e25-5567-4b8c-a47d-a67b017d1a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a37f620c-ef28-4d2a-8b1d-b7dd68679552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5881e748-9fbc-4d4d-8d15-881d4106bb4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bc3c23f-cb0a-47da-a27b-1a34a8c3b32c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60671998-9ddb-49eb-9f9c-1006d3b31493",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e373d646-ab6b-4349-bb50-e2c9e0ec4086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c9c03ad-76bd-4bdc-9adf-adaec58ddda1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb24e9bc-93e5-4dc7-beeb-928af63091c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e9c71aa-c0c7-4956-8597-d88f647f8d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ccef6b-2a83-4019-9b2f-28454bc2867b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6efc3c1-7f2b-46ac-8c24-989a4aeb1fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c8735c-8d59-4632-9582-b2c83484ea48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f8c2e3-4007-4431-afa6-4c22e209ec06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0af693ee-701c-4e3c-8555-880b0373e8f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02b1a01-08ac-4016-8800-774f7d6d190b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "382138ef-fc5c-47aa-ac09-c9fd1d539a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62bb0949-49bb-44c2-8ed3-063682a1c87c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691b2784-fe23-42e3-90ac-f8f206f6efc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8dd33fa-a9e9-490f-8ad7-6cf973ab50eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9314bf-7ce3-4cbd-811a-79392083aff1",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6466f658-0951-4531-b446-f9a5eb30b638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79f6e040-df04-4c17-8a3a-d1ffbfeb2406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48549503-a250-4074-934e-f90d8e6e2616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "199a8aa8-6555-4cd9-b561-4b620fe108a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024c2b97-24ad-4ecd-8ff4-d6fa8155f9ef",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b068923-1c71-4d89-9ea7-00e3c3e34ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e79318-3a3c-4dc0-8a2b-21d1119d4f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765f8b4a-1074-4e62-8869-74be2670c5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3fcc5fb6-580f-4c6f-a203-667b9c8f7b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02d6187-363e-417b-bdd1-086234d537b2",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "062b410a-5b1c-4849-9b32-566dd2042f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dfc0a8e-780e-4281-bf78-7b9175bec558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a0cdac-6d67-4ea8-9266-f606c30be5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fd6f318-643d-42e7-a85c-dd06280dce3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac68dde3-2b55-478a-86a7-1ebfde7fe7ec",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b16e59-bd34-4a3c-bb25-0519ea55ed18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de949de6-d11a-4bbf-acac-d6529f7ba42f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5de466f-c47a-4f36-94ec-3f75fe33eb50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8ea94c5-e906-4a85-a9f3-ad16024af1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e57700-16e8-486b-aafd-0219e6987e42",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30b6713-d1d7-4d75-850b-226c4b75736e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e9bb13-780e-483b-b5c6-8336466df6b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675fbf66-128b-46a4-bda0-0ebe01ddf8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d4d71b0-0d8e-47c5-85ed-cdd99235860e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a12ebe2e-d03e-4cf9-b0da-97631c171692",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9516ac-30f6-4cbb-a533-b2562b44c025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a55226-1bbc-4500-a7f1-2c26301577d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55d7acc-de06-4b7b-8926-3efb318a8c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f7a2898-aabe-4055-bc0e-260fa5e1445e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65c5678-0ab6-45ac-b1fa-6df0ad83997a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "343f5f1f-4b42-465d-93d1-02d6009effee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72a09a6f-0404-4d20-9e1b-ea2a7e4067c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd97a46-2771-4297-a36a-800c0ad48f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ba04504-cf69-40d0-a0af-206a64a7dbc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48bedda-587d-49f7-b5ce-536b85e3dc31",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f121cd8-4e1e-4d44-ab72-efea8b192962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "141ee3c4-aced-4a51-88a2-ca09801784df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a432817-d6a6-47e4-9ace-51818cdee247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "71e09d40-2491-46ef-bf17-51273ce0c69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f1cb87a-009d-42e5-98be-a87d16b84850",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e06633-949e-465a-b18b-f303245dfea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f607c2b5-525a-4b02-bf72-9c2f5e3d3aec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58adea8-431d-4152-ad48-1791cb93f536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "951088b3-3ca3-4c01-8c8e-678f7e04bc45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7559fe1-c023-4b0f-aca8-5e3ef770cd85",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c799853b-a49b-4920-a16a-6e11a91c35d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab44c139-d8fc-4fcd-9e5f-99c5d7f0cce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff09fdb5-4288-4c17-981f-f1806690abd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b81e77fd-8a64-4407-9127-03e7214be471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c68f606-2b5a-4ad7-bf6e-2a1de823ed6d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71dbf771-4c38-47b7-9595-e2d726b32519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e053a03c-d797-4714-b88a-ca9d0e4f6287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36153af-74f8-438b-8f15-8e917de10669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e905303-4a63-4912-9ecc-6df14a132b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7028dd4d-9d68-4a7e-aa4b-805dca47ac07",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac838985-2991-496a-b648-05cc6b6b7af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eeb8d46-9195-4312-9513-07579e68843c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52689c92-d891-4f57-a411-27ccaaf76dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d859e1c8-72fb-4bf5-bad7-56cc9aba7582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e359db-7317-4eef-9262-03d159d3a295",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db7104e-c5af-47f5-97c0-0e23b012a5db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "929a92ce-04ce-408b-a0ad-670970aa1ca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7e0733-d404-4a1a-885b-b7a3297eb009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "93643628-c6f3-4b85-b83b-0263005d202e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef66f16d-92ac-4c7a-9d00-711e02cce36a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09951a7-aa40-4414-a05e-5c25670700ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f20aa000-a1a6-4c48-af7f-10d84d6d75c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac2e3e4-4af5-417e-a5c0-f45c88ff2865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e5322fd-cbc6-45a4-8255-855bded8ebe5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "29047ed9-b4b8-497d-a7b5-dbd193f228a2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6f2883d8-7f86-4235-b4bc-19b3ea65c0b4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87506d51-cb9e-427a-82d3-5ed4c5885831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8043e49a-af7e-4bc9-8952-9d10abddbc7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1f58b8-b4b7-4cdc-b0ad-4ccc54c33541",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70d9a9a1-64e7-49a5-80f4-7056f9c43a4b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3bf4ec99-59c0-4e99-ad10-2dfc2c1531d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3ed17a4-1564-4a64-93ac-bf3b05fab15c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1d06bb9-2b70-43c0-9ef5-df2297b75bb0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f501f62a-6377-451c-9f2d-f14379a56b92"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7ff0819d-4e89-4b3d-9b75-a2f302c87d10",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "60139bd0-1397-4dc1-8d48-423c5b175044"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cc108073-f0a3-425d-b518-cb13e23dce69",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cd364a8b-9cd6-4041-9d64-f1262047701e"
                }
              }
            ]
          },
          {
            "id": "379a827c-603c-4780-aebc-53c164f6138b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fdc70317-8c58-4bcc-9629-9fd83c7700ae",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe4dc9b2-d2da-4ec1-b161-4353349aa52b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a4aed304-ef4f-408b-95ad-5ce9afb2e0ea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "727a15f3-68ce-4f75-804f-8169ddb3ec45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "778e3d74-695d-4b10-a411-7782994d1509"
                    }
                  }
                ]
              },
              {
                "id": "b3e5b4ac-c25b-4868-bafe-49e81d21003f",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b690be4-6d59-443a-9ae2-19970921ed41",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3d23fa5a-59c1-4257-ad53-777f16d27772"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59fcea8d-c656-4369-94d5-d27111698bfb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8d15841b-dec0-41bd-a416-6cbe71d1d56b"
                    }
                  }
                ]
              },
              {
                "id": "c6fefeca-7e11-4dc8-98b2-c2b0fda74743",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ceb8697-b4c3-4ae0-8e78-ef88efcf56df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "60a40240-042f-4776-92ad-ed3b07494ce6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5d16e5f-afd0-4f5b-b7ca-c894bc6fc9b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f6d9e5fe-4fec-48be-97df-ff8d42bee40d"
                    }
                  }
                ]
              },
              {
                "id": "d7427422-8e4d-4c27-b781-55db00374115",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9562ee5c-a8ad-464a-9c32-fed0c4c0d0e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "46f77f71-5e3c-46f9-9840-45681384951f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fa58dcd-20d1-4828-9448-a2bda404a213",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c16b5903-0779-4cf5-8ece-12846683b877"
                    }
                  }
                ]
              },
              {
                "id": "8520ddec-f511-43c0-afda-c49966f61cb5",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7fde9845-53e2-4573-8269-1c6e8cb113bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6066e9b0-ad1a-45f5-ae15-3629c3efae89"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfee1b64-4237-4364-b73f-6fd4ad2131e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b50549a2-5e62-4a76-8875-ba9d8fd6e16b"
                    }
                  }
                ]
              },
              {
                "id": "4160ab26-fe2f-4805-bdc0-a2e398d0989f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a45c23d1-3fc0-48bb-bb9f-0a442452107a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc0212ac-0903-4ca5-aa66-e4b7995ee287"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30a1c7de-5053-44b8-bc7e-de86159ed885",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "489efc6e-ae1f-4d7a-bdb1-e44946461ba9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f8cf06cf-9c71-4e93-9449-64bb10baa7e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "03a23b1f-fd04-43bd-9bb5-92a4b631359c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6c1c710f-de26-46da-be24-4d13b1478671",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "35a12ffb-0fe6-43c5-9c46-5ae6433a8772"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "958b7513-a11b-4350-b9fb-f423b3fbb953",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ba744dea-2669-45d7-b6a1-9ddb015aa92b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec744410-1c8e-4e50-b131-60e3002a254f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc58998a-5623-4b04-a3c4-b943f92a54e3"
            }
          }
        ]
      },
      {
        "id": "089d1f66-c8ce-40c2-a340-2095148dd827",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8ba3b100-6a6e-4eb3-8dc8-1c6baf7cafba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3e788491-93bb-4316-8683-912ad97349a1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c0ab3e44-0f6e-45fd-9122-88dfdd50750c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3f4b7e-a405-4d0b-86e0-18cb68fdfd53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fedf235-1dac-4e0c-a38f-e570d91b1dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b04001e-65a3-4b8a-a3b5-c39b1af7f87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "33b306d2-91d9-4f08-abde-3f5ae24a651e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44781ede-1a7f-4391-a316-0cba95fe47f0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5342640d-b9d8-4923-885d-4dc98c11b6b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d575fbb-1bbf-457b-9740-a3f1b04719d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d6090f-eb84-48cd-9e97-d10e606cc26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf74506-90a8-4e99-ac7c-fc08bf18aefb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2454499-f7d6-498e-bf23-7222111e2ca3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f18444f-a9f9-46aa-a66d-daa4e686730c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae67f966-8742-428b-aa00-4b3e7a238cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac82b50-a675-4313-a18f-a8355c65a1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac287784-6418-46b5-ab19-982de082de72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6a512b-4609-4884-bee2-3d67135f3cfd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b4459c-0161-4ca5-9b5e-a5115647b0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e755658d-2f68-4a43-a544-f0806bf02580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3c2fd3-5857-415b-91b9-dc9b1596a4ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af35534a-445e-4551-ab14-771749c663d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb304c2-b1ea-4619-b57c-e11bb700fee8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d0d401-a08c-4763-bec7-8b9086f31b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4287b20-969d-4281-8745-ac5f069e8c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873ae7ec-d290-4999-bed8-55f4b1e6c261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b339301a-8640-4fbd-bfd2-fda8365867ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7743164f-e1af-43d0-a5a5-1450dc8f630a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c82b52-b4cf-48df-beba-f6b1d235c33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86367026-0629-4dba-892c-a0c8abe3b32b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52bb904b-f398-475a-aee1-a2b25b761748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f60e41c-5819-46ec-9254-e9c06eeeb928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb5297f-68de-485b-97d4-6059772d202c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78b28d7-0229-4be2-ae68-a7246c63f826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4206b637-c792-4399-b10b-0201762130ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d169f0-41f2-4ed7-8c20-0b3febb74db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a9ea956-4e37-44b3-8351-df5587aab0ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05dddec6-fe89-41ee-bf8f-2aaff146d50b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41507ae-4abe-405c-b26e-ac5af48ee791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2a7364f-a9d2-450f-8f68-91f64daa821e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6b35f6-89ea-47fe-ad6e-a17ebeb3b64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "252128ac-1cf0-43a5-bb1b-83a578d72731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "257b5c66-7e7d-4e1b-97b7-4289ecdd61be",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea34447-b390-4f32-b96d-553e1ff0851a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "691e0dc3-063c-4340-b963-db6c081d361d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fc4730-cdba-43dc-ad0c-5b9486d90f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5aaf13d-afef-476f-8c79-9eeef815d460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a69fefc-8389-42fe-9cc1-db97257f07da",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "869aabcf-54bc-4f95-b528-12151f73e2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c3f8a7a-c7c3-48a7-a860-38515461ee74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4426dba9-3469-4a66-94d4-d4b61ec13414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63685cdc-48f6-412f-b426-86bf53a32311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3f8ad3-7d1a-4538-a6d9-c6833756b216",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae555977-311d-4a15-bca4-4d08c3dfade4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b8e478-cf94-44c3-b92d-be59101cfed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5c3a20-3e49-4bbd-b700-3eddb0ccc825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0f13f927-176f-4859-8dd5-92a72499d418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1362a97d-24ca-416a-9c5c-98781378d884",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "160ade07-8b6e-43c0-adab-5d629dfef1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9425e0cf-f21b-466a-a261-b6277d567539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9105ff-399e-4650-b96c-7c1a50825f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fc494ef7-035e-4274-ba40-90aeee9f016e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad737802-480b-4fd4-8d23-614e4d215e08",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e697e434-eecf-49b6-b5a7-7aebe460c0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4a64d9d-ba8e-47da-bcc5-85204d344097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4f145c-1cd5-4990-9de1-7c23a8f390ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2cc05d8-83ef-4bae-8b33-6c9c286aa86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa5f3486-65de-414e-8f9c-ebc8f9495a79",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "894ba4ef-18be-423a-bb1c-02616bfa71c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fede6e3f-644a-4bba-b165-b0ceddcaf9f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "501b9691-681f-4fdf-8e81-0716939775a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b642d1c-a3ff-4c48-a0a9-5411a403c874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45581b56-1cc0-4f73-8514-9d9be512fbc9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e64e821-7bc8-446f-8153-141d550dc131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc73c6f9-477d-4d04-8996-821344aa60f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bac7047-0850-475d-aba7-63a3c87d1b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c96684-0894-4143-9f30-154ea6fb1dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db623203-26ed-4c90-9dfd-8e2c0ca259ec",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8cb4a4-03f0-4752-93ab-795c66361280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3a62caf-501c-4312-8784-f75c0fc9356c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f42507fe-4506-4f10-a643-029d9a3bbeba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "43746d1f-07b9-4717-b628-ca766b3a5467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df51f8c-8c98-42d6-ae78-a67522b3475c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02eb48f-c9b6-46a9-b6fc-2800e4dd7451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b53cc25-08a2-4572-b474-0b8aef755dd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeccce4e-d62a-40c4-9a21-e2aa3fc0f1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c35d29e-d484-4747-b19f-ea0eac77ed68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "debf3e98-a43c-43bc-b0f7-15f61f0135a8",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "833e4907-b976-4d08-a649-53538cc22ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b583a71-0302-4fda-aa3c-8b0b23085bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b2bbf1-befb-4bd1-b70d-e87dd2b29c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2985f47-d043-4fb9-882b-1a66eb2f1191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24644966-146a-4259-a0de-717804c1e419",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63dd76e-ed0a-48ab-b6f3-8d8292906a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c04d674-b07b-42be-bfe4-e0f66e4c66f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3bfce63-1f1f-4587-a794-e8b7d313d483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ccf06bf-32c3-4339-93e7-f2178a07ceb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e06a96-88e2-4c4a-87d2-ce3e0da3e1b4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e13796-6564-453e-8a66-6d69141a6833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "878c33cb-4f4a-4ec9-976c-d418c19c7997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9dbe45e-df9a-4585-a7e7-e1d859976862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4503ffc4-ef9f-4345-b6bf-8f75ad3c39a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5840b5f0-f1b0-488e-9b78-9a23fff96daf",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f259984-33af-4782-82ca-95a475f6c608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2797d1ec-70ea-42d8-917c-6fb36dfe0a48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb099830-816f-4329-a88a-c0a87e024007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7b0ea0c-8e26-43aa-8d9a-c7d8f1fd833f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da708a9e-87ba-4162-9efe-c77b5ce8c829",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90fc128-b143-4908-9fce-c2896068b64c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f2c3aad-edab-4259-9b9f-99587e468361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c0b6fe-173b-4c9c-95cb-fb60d2ecfb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b858058-8819-46b9-aa51-f1d830bf6723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b12363-d36c-4cbf-bc20-38cfb3be60cf",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "413c08ef-afa7-4f6b-9791-d4fd12436f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e72651-c6b1-4ef6-9764-07991bdaad4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953795bd-bd18-4f4d-8707-cd6170493c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0386a394-024f-4875-a414-6c1aee2c3d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae440be-768e-4aff-a043-09efca9efa72",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "700f19db-d61d-4e87-b28a-0c1d4afb028b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd37b59f-8739-4d51-8cc8-4a5f1feffbf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad243b0-1b7d-4f6b-b912-dcc7092d269a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "910afe99-9de6-4621-baa5-f8edabefb1cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef705715-3afa-49f2-bfef-47477f191942",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5e7968-99af-4844-9fca-63f6426dab5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cfb179a-5ce8-42c0-bdd2-f36ac9f3c007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec061e4-ad60-4da1-be4a-762dffde7ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b16e910-44f2-4cbc-80d1-eeee07d91544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6a8f15-cab7-4d41-a58a-cabb77bb982f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07182d9-0d5b-4d59-beb0-60bfcf981086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc7aadfc-2ca6-4334-9320-93a61f973886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf13458-8af3-43e6-8272-1ba84837deb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c78a2ce-359b-461a-9604-c206e8897f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10637400-aad2-4690-b390-c5247ba1fa59",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db7e9db-397f-4399-a8dc-0d2d88bc2162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13cdde0f-97ed-4508-9620-bc965b0fa0d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98af6b79-4298-4ee7-b554-ea44c6540a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51639780-634a-4401-83f8-2da49c9b025f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e37a5f-ff61-4deb-9587-470f884dcd40",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "630d4f20-008f-42c5-a1fa-ef2714952709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11af3b20-f6f0-451f-be0a-79e090309bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7799b68-1e0f-4456-a0b4-bbdd1a7e6f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64e5937c-a436-42c5-89f4-5e742d1d4ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea95727-add0-4dca-8aaf-edaa226b53b4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72123434-f261-4e50-b636-ac9822ee392f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8853564-67b7-4a2b-9a20-b0a9d82aa32c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13553c9e-8bc9-4f63-abbc-89536c2590fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d59f392f-4065-4752-88e1-aa283b4e8eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b9246c-489b-4c46-aa85-e3a6165f4849",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d04903-3ee0-417b-96eb-a589a1b69977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb9d857-2858-4189-ad60-0df379e46340"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359bb20c-3593-47a5-a1e3-57b022398f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "279138ed-9a34-441b-b5bd-5b9fd92c1610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45cf3989-de42-434f-8a5c-c9ad34820e05",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a41eb74-5da5-49f7-8969-5f5caa28df95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95286f26-e9e3-4d57-bb64-31fd78656cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc23118-16cf-4545-ac14-cc8dc93d9025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4e2ed45-4305-402d-b6ed-d9a69ab5d799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a689ff-cc7f-4b58-969f-27b05aa4b1af",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c73ebf-6a81-461c-9070-048330c3c74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3435ba3c-2297-483f-874e-5fe2770d4b1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e1eb80-a2f8-4cc1-ae4c-b05fbe9209d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0cb4bb0-8107-44c5-b9d9-bc3ae524acaa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "87f7ff3a-ae03-425c-a9a8-1205889fc662",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "28b59956-4679-4e8f-9184-36f096d41a6e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c90b2dc-c0bd-41ed-b194-9e24a6243642",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ae0b36-55e9-437a-aaa2-17170a2f6ed4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2c1897-626d-41ee-b69a-6ce692686a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4df64d12-e73c-4e15-9774-c02131a9255e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96a7c4de-1c35-4986-85b3-87a3c363cc69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b93b497-fa9e-4f12-8905-8c3ac24b0fd0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "90938eb6-151c-45a1-89e4-34e24d1a01ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b6a7f54-fa59-4894-89eb-4e8dc9276cd2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d5edea5f-5353-43da-971b-3cd214c772a7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dd3d8d41-bf30-4d29-83db-0a8d9a7b6a25"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "abe3dec6-0e41-4660-af77-cd6050c6d7af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ae4c137-5f1e-438c-8e35-dbc7341c1fd0"
            }
          }
        ]
      },
      {
        "id": "90bc4617-5ef8-4ff6-a75f-200429f65b3f",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "c041545f-a356-48f4-9696-3f18f4ca53b0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7a1c545d-aee9-4eec-8e4e-3336ae6101cb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "23ba2c4d-87e9-4a60-8783-ca8f36139243",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca524f9-0c4b-458c-b098-2b1ec427e762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e3f3195-32b2-402a-82f3-dc9ffe94f25a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc7b8d2-1c17-443e-96d4-ba0ec448158c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bafa559-1834-45c4-9514-95363723ce29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f66fe2d-ba6d-4aa5-bae4-7c7fba8691a1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "700ad2dd-6339-40ea-8441-a34a9c2ecdbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "117eeb19-fc73-40a9-a659-3cbc95eee7c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e081ce0-91d3-4d69-8fc8-ed27396e2178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dc13720-066c-40b9-9291-21ec714fa473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f18b0db-1ce1-494b-a0fb-2c561c47be3e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a60c1c4-6986-495e-8e06-8eb5b7990300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b86937d-bc24-4a4d-b063-68aa17688acd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34f6676-2d82-4c49-b852-f2134dbd2787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d71e9e31-e9b7-443c-9ca1-0276564270b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3067fc-5770-4ed0-a360-54214a0f916d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75bb008-836c-4f54-ab92-26befe62356f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0894af61-c592-41b3-ab22-e55f9dd17680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df17767-cf0d-4b8e-91fe-b2fce11588d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b48290-8eb8-4617-8584-b8ff83a532c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa038d6-d2b9-498a-87d7-498b16a220e8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52fcc822-4807-4fd7-b31b-05c6bb70df08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4abad28-d7a1-4129-9a29-58bdc7da1347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825ddb2e-13ad-4e6d-9b32-2686cdf02941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "491dd60e-8b3b-4a84-8298-e9c14d487d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5232ff08-fb96-4f50-b3fa-531028ded501",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2041c86f-a6de-494c-a8c2-b6a2fc31ff83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40abed2b-87c8-4f04-ba93-28afde595199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5300838-3547-4e61-8a07-b6dce7701953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "03e52950-fc0f-49f5-ae4d-4591eb8ae08b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eef7d5c-c2b8-4271-899e-862bd59858fc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db36a99-cb06-4962-b060-ed98d93d1510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ec79b1-acb5-475e-920d-c400135cc5c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d4a2dd-77f4-4d30-b753-3862f4200a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "125b46bb-c08f-4b8f-aaa5-ef3f3028beaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b10e7f5-d198-43b8-a407-52a5bf178a2a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f9b00f-2928-419e-b53d-8d1c576bc856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f3bd6e4-77ba-47bf-8b7f-5704d1bfb03c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ff47dd-907b-4f4e-a372-c02d0f458232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f25c46f-0a4d-46af-a460-f5c4f06ade2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "095f6a32-efe9-455f-b1cd-8748e39337a7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41fd38e1-e32b-4db2-a8f8-45412e5a82ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b341654a-e485-4e79-b79f-08833d719e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09539dbf-1cb7-45c7-97ff-f4445f3bd38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "69c86fb0-0a8e-41dd-b6e8-03204b4484c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e88260-04a7-494a-8204-b46ac3dcdc6f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f967be0e-8a67-4870-8790-a32eb9ca4d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d747d0f-3d71-4bcc-ae51-5a3d896b0c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ad70e4-ea32-4b95-848c-35406e4a75fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "443323fa-2288-42e4-bd36-4ed9991445c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db36ad3-f4bd-4c28-a9d4-dc85cc88ed2c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "610a46d1-7b88-4050-aaee-f95be11440b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4652238c-b557-4058-97bc-533f62b74968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c94a947-3425-494e-b29d-24960615e6e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "38b0bb41-c096-48b1-ab9e-a675c514f006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa30072d-c6ec-4c11-924d-f5406360ee53",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2e02d6-7413-4b93-aebf-7115c0570584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27095f31-d7f3-4efc-99d5-20bb5da6aaca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "089f09fe-e5e5-4881-af90-73e2df49c301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a4368721-efff-4a54-b577-b43681097b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f72c06-4f51-4845-baef-eda09c8281e3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbad4159-ce8b-4a6d-9bf7-ea5af48c1757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d82e731-f98d-4c77-b4ae-8f6df49be2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01f3f82-ffa8-464b-a70c-34c61bb64cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a14ab9d-c462-4e1c-8b5f-73f93f87d385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd537452-14f6-4b10-bacc-c48d8592f5e5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba01a7e-500a-4e0c-9d47-77200ac5f942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d470d81-362e-4c58-9d33-9b6ebc644afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061b8e73-b97c-4319-90b4-0969af95fc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffaabccc-6b6d-491d-ba6c-ed3568c64d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6a19a6-4286-4b93-9b0b-12773cdcfa4f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "403c6456-8bd5-463a-b943-424ff3591fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e1ea99f-5dd0-43d2-a413-2657defc4c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4315ba7b-e791-4bac-b964-cbf7dfae51dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a978caa9-6dad-4c56-85ef-bc580186b23b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e5cc5b-84b7-4ea7-9c95-3af5b192586d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd86503f-0705-4079-bdd1-70e37ec95bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37cd354a-4962-4bfe-9f30-8d477ac8f460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315b2dea-bd1b-49ae-80b3-ef278945df8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4cf59e2-65fd-41b4-9ea0-e8a0a1b0a68a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf9aae7-f135-4910-a82d-a4577f0a606a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46fc3ac6-bf72-4333-b408-0f153adbea34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a1cbe2-5fe8-4cd7-b168-7e7cf57959ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551e7250-0f09-45e4-a364-a2e16232af3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "53924203-5c6f-4fae-9a4a-78f3407eaca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8a8515-774e-4ba3-b96a-f088ea52ca8a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70428eff-5728-4934-9ce9-433ed034811d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "158609a2-c96f-43fe-94ec-90b10a0ca759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72aa7445-5068-4303-bbd0-ff637c226555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "87b988f3-a04b-4592-a36a-3c0dc302636c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170c8bd0-aa79-4510-bcc5-4ea6104ad80b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb5a5452-d17c-42a0-94d8-120601d18f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b89c60-3710-4014-85bc-7ce6d20c7ab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326d8b7c-7733-4cf6-aea0-8b058dfaf6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6cdb887-7a4e-451c-9034-84c723f62536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632c4d1d-f921-4d1a-8d52-7fa39c0eb7e9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9990ed-2a74-4856-bb3f-34db562b34e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ced2641e-5445-4c74-826a-a830fe06fbf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1304e3b-80ae-43f0-8086-dd0a50916fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d18fe65-279c-48c6-91c7-9b06c13439cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "677876e9-b460-4e71-8fad-005fe180c2bf",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "864fa01c-7d42-47ca-9ffb-2b9ac3759d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "208ecdc1-5e62-49fe-9211-79e271a909fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc439dc-9daa-4f84-aa7f-7d83ef2e8aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea35313f-0698-4ad7-9820-20754e69646a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d93623-69bf-457d-83ac-dba360d6cbf5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba82640-c481-49d5-ab30-05866ac3702d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95492318-690a-4001-b3c4-01b46826d599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef4e7bd-a6ca-40e0-936f-8d9ca10362e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce6d696b-e554-4706-b2e2-151b5f5b361a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697df171-4d1e-443a-913d-e3cb6dd73562",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8f36a2-3f6e-4677-bd94-771ff18e0bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01de7cf9-5701-465e-889e-ca5cc14537b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714a202b-339c-45de-8509-6df5b917b4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97c546cb-ad3b-4583-9f3d-e3756124e1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c55b4b99-22bf-4afd-8f3c-fd8bb03b04df",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "123f8a1f-cedb-4474-9a03-730c98e94017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad16c4e-a1cf-4718-90f0-27b2a85f8008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f2a825-4b08-4b55-8d66-159319d8f5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e3c2d23-ff55-49c0-85f6-1d607f5043e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0fac17-77d0-46c2-930d-397c1b0d202e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0563fd8-a92e-4eb4-b28e-91684623d590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0549900-08a0-4700-8d34-e9ee9fa6d96e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd86077-9dc5-4132-9d99-7c21be1f0748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc1ea3ec-5dc1-4b71-9f21-13a008de96f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ce569a-3799-423a-96db-31be8e8aeb19",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8db91c5-9a2a-401e-85d4-4d5651d392f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c48353b3-3f70-42e6-b683-0d0f50b6d529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d36461-2bd4-4b0f-9242-b12e396df226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bea006e-360e-4aff-81d4-06f2d984aafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ad93df-2768-4b99-8a8f-bc6d25e9a417",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d083d1db-551c-49ed-ac8d-684adf1056e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dfe663d-ee6d-4583-aa60-b3f1df85058d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e72ac4-5b04-4120-9b6d-48ac27a2094e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78fa1995-af7a-4eb6-b728-a3afb007bd7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c375bf06-2635-4281-8d60-eb068b8d23a6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d700c7e-ff59-4477-8862-6cf62b9d1514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1201e2b0-3eb9-4e12-b486-7b9fc552802d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4cfcdca-295f-47f2-831d-5df25d186c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b51e2d1-a595-4a47-bdff-2c790d463ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18d2012-faa6-4aa0-910b-7992a17df937",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0974977c-bcc8-4f87-b7fb-13bf1a9b8239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc9fec1-2791-4fb1-9c2c-c648be0da7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a72f21-813e-4b63-b9e7-4ee480d10ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38041b41-085e-4bf2-a2a9-14b7eda07cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0103fc5d-22e8-4bf1-acb1-925e88903202",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "477d2267-b9ee-46fa-a42c-b723100e751a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3943c80-cc5a-40c3-a8d5-9dd475c852ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71b6e01-f457-4fa1-84c2-7d6f840c3763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a033b8e0-cb36-413c-83b0-d7cad63822a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8020c66-a5da-4072-9548-631b6f7fb5aa",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57640f8-4bcf-420a-bedf-1c131ce698ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb67b79-a3e1-44eb-8d60-18534a49b887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9649e0d-07db-4114-be90-918c6237b892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "369068c8-01f3-4ff2-8224-ab06048c61f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10f9c66-b0e5-44b0-b551-4a7a50b679cd",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a840651b-5fd9-4ace-955b-65a339f001e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d86534a0-3372-44a3-a1a6-b14b79839e27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd77b933-95c3-498d-a4ef-89f094d5a1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9f51bb9-062f-422f-bf08-18d3f03af180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bade296-9ef6-43bc-85d2-0417b4137d0b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e49ef90-06a1-47d8-a230-9a988c31a698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "621a2d10-9be4-4d74-80eb-78da6c41a49e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a65c11-d8de-45fc-8ac9-12a3308c8852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e2c9062-54b3-48d0-9a87-73585e7003aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be6890fa-cd88-41dd-82aa-cb5324496cb2",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e31eaf-f803-4328-81ee-725f1c8827e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a0aa20a-15f7-433c-8977-8a46705cf61f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4920a4c6-9e5e-4d6c-9f3e-823db2f142a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "796372cd-5ef3-4063-9b28-3b47ed7a8eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c149789-4051-45bf-a0f0-70106126e855",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c204e84b-564e-4e1b-ae1f-e02d27010011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e278b1-f5a4-49e2-aae2-456abe020bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55798b4d-cd19-4e69-85e8-53184c514bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81bff222-7e63-4563-bc64-17edfae0b6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663223bc-2314-40f8-8883-65070d3111c2",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc3855b-649d-4c4a-9cb1-23b788da116a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dc7014f-d13f-4c8f-8926-e7591f6683d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9766c08b-ca31-4188-b317-b643d334b37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2691004f-138e-41f2-9a2a-45e82d76fd7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3b505f-756a-4afe-a63b-688a187253af",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ef6e7a-3b4d-4c0e-ae78-9600a0920a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41301225-80b5-4ff0-9541-68b907c96281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e873407d-b78a-4622-824a-994575bb3cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2edff53-2def-48c3-a72b-89428704a81c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "16f6ddd4-f90c-44e2-89f3-9e4ac7395b4b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "503a0329-7c90-4bea-a63b-b8a8007856f1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d0aacd-fab3-4a28-868b-bbdef8278f1f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3a1916b0-e946-4b18-bd26-b2b301be7dbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6140143b-a9ae-452f-992d-5bb977e4c1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6bc5dbf5-49cf-4cbf-95a5-21de1bfa3f4a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d71cd0ad-f405-46ed-bd86-54e544c781be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "982a09a0-e6c3-4aa6-a0fa-d6d55066d7f1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e21d71b-ab9e-4b35-b1ce-b05ac6866c6b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6447f9ad-5708-4c59-9556-574218752b82"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "64cde28d-b28c-421a-ae58-848e1707c689",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "78c49459-fbf4-4dd4-9e67-7c1a3d8ea5a6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "065b8774-fd3a-40c9-a2ef-f9c7cd3fd5ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a1b6974-a0c6-4113-9fc5-0901f2c824f6"
            }
          }
        ]
      },
      {
        "id": "15dbfbbd-deda-459f-a301-d2564f88ac87",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c39e51b4-18c1-4c3e-9a4a-3fab5e50901d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cc596d77-ed54-4e32-a87d-7a554e8547e6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5943f1f5-8d40-46e2-9b17-3559c2e1b095",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a196a230-4961-4dc6-bc7f-282526e45f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97f8ec48-8285-4081-871a-3c57f63ab8d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9557af63-5554-4422-9985-fb12950b0192",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "476cc678-592c-475b-b5e9-919007daf8e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead56b1c-352b-4938-b7c7-c4aef9471600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81df4ff3-38fa-472b-abf8-832a413acde1",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de55dc5-f846-4cfe-a1e5-fc850706024c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25d097a5-d927-4d82-b259-9e73e6041f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db000b72-8773-4b16-9309-dccda44123b4",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed24b71c-03bf-40bb-bcfd-b84423bba2ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f271aebd-eebd-4891-911b-91f48e3baedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67fa2764-a45a-440a-b2ef-aa52a0a7fa08",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "530b396a-02ad-42d9-93b6-0be6dc62e082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e100ee32-7e42-47e4-94de-a260561d6804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01717e7e-d194-4d3a-8591-77ee035c1df0",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76611af-4d97-434d-8d13-036184ab7e7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c672615-e26a-4921-8368-1f798c5cbcc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41643e11-68c8-4863-b159-50b54eb328dd",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee26fa8-0c86-4359-a32f-fe6133792274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ca1633-53cb-4f9b-9e86-9760e5969f7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7028c7e7-65f2-4c7e-b324-753f2d2c19cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdf1be38-b989-4cfa-b15d-95d7b6e4c2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c8be2e-6da5-4c8e-9b81-64b6a58119f2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e398bd1b-ec2d-47b2-9871-493701df7601",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cff53cd-0c19-409c-93c7-b62990a50a02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48238e23-8a6e-4875-841a-0f4bc827f389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "797011ff-6df1-468e-bb86-206b9635e40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b9e7f0-bff3-4844-805c-26947b151125",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a88bd97-1c78-43d0-8574-5119d39d9a6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cb20b8a-fa15-4e24-a98a-b4c47d7d5099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "427430a5-e451-4fb2-94ec-8598c00619a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b88a8b-f387-4ebb-990a-16d34f7eb63a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a31e53d-ae12-48e3-bee7-158e255c4b70",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53196ee2-31a9-4271-8443-d33503d55e61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fc8b1f0-56df-48a6-9f63-dc54838b4247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7a7444-16ce-4c98-868e-0ce56287415e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51dbe2ea-7bfd-4799-b6c7-4db7c9dfc0cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84bb8d0c-7203-44b6-8227-f6b851b586ab",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf09fce-72fd-432a-b138-28ad4416fa1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8094294a-6464-4a62-9f29-62287b684c02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "054bc7ce-dbc6-4162-ab9d-7ab135d93b20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd16174-5816-415c-a2c2-1a6d69ac750d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf963f0-aa06-44da-bd74-8212f38d9f9b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2ca2fc-186e-422c-88c0-d6e6c820e593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b038a13-d14c-4d88-8508-9547891a764d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f81768e-ba30-4c69-a98e-0909af9c0024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e95acbe5-54cf-496f-8259-81c6714ead43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93edc492-1046-4f1b-9f6b-29d3e5ee0165",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dafa259-b375-4533-b71b-1465def2e499",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a693fef3-884e-470a-ac3e-a513a66ee029"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5bb537-451e-4f63-b8c7-a7cd0dd262bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a580e8-e51c-4e96-85b1-61cc37603c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c662cc-6a8b-4bd2-81ae-80a8ca543a2f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1e81e1-7d3f-4ae5-bc76-494bc8df6c06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a7e90ed-fdbf-4184-a54e-0f53ec2893b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8b4d62-2426-4e1a-b8bf-4642cc87d309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b185c5a-b8f7-4fd2-95cb-40b4a6a8aeee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e731b571-fd2d-4b64-8fec-bf7d515d04c6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc36b53-c9be-4f39-b81b-3b4778459dc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "699ea58e-1b95-46f7-a4e0-6970396ddaaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9d5609-a482-420a-912f-2ac09d8debb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76dde643-87ab-47f7-a586-636570d59b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c98fd30-48e7-4b6c-8c6d-24932ed1a9e6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd86842-9420-4033-820f-b6842223840b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90b17adf-1b53-4581-915e-38d964628e60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e84bbc-a070-49b1-8f62-2818f97b9bd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed98e593-c8f8-43e6-899a-7e4762da040f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d294072-7f6b-4afd-b2ff-ac1bdfbd84d6",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f97a31-4ab3-49bf-b25e-924d48b09fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c749c71a-ce35-47fb-9ad3-d7c1bd7b28d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f84aaaf-f681-4f65-a14e-59c367cf839e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1628d43f-d7de-40c1-9529-ad555bee6d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aade5451-1488-40a6-ae65-7574037c5a5e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f7bd55-9c0d-45f4-8500-555465a4621f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4249613c-265a-4e75-b594-feab88465781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe9ef23-bdf0-47eb-a7a3-512a1180f661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ba4cafd-2bbb-4b62-8e0f-e6e08c0fbb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c792ee5-b59a-4ece-a00b-f154a472c5d7",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5759572d-b393-4162-9995-df11f026aff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d952984b-d26e-4f14-a8f6-1a8d8b21fecc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97502a6d-6e88-49ac-8369-fdbf0f676dec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4693a2ed-8db2-4bba-a0b9-cc5294970ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d768526-55f2-4fdb-874a-aa4f04433dac",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4be3e89-5f56-493b-a1e2-2c4b4349d58e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f062cb8-5992-4bcb-9dc6-b06e8154cd6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c311e0f-75eb-47a0-8154-d7501bfd0e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4de16ae5-863f-48cb-9f3d-007404fe4939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664d8d4e-5ba4-4913-862e-0b8b59c92df8",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df31e3e1-b62f-4b3e-8197-71854eec9385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b6c0071-29a8-4c69-964c-6c97a53172eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d6f679-22b0-44ba-9f96-69a508202656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35bdba67-e649-45e0-98be-f24bbd604364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "431d0f02-15e3-4c29-8e54-24564a77301e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed02b3db-28b3-4eb7-9596-7923eb2101ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "defa8a1c-51a6-461d-9b1b-688d7efbf39d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83fb0db4-ac19-449d-a947-de2a38b67e87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd45b340-d3f8-405a-9d8a-92a5494f4349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61290916-d9ee-4a03-99be-467d408eff78",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb61a92a-b7b5-4e3b-badd-dac99b77ec0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "811aa930-8f20-4935-a43a-4ce61fddcef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "563a1e1c-7a31-427f-ba85-05ae1c79cd47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d47cc9-5af2-4fe9-8417-b4acb9060b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7157dad-3530-4b30-a412-fd79bff643b4",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8030f898-0e6d-4da9-b20d-3cc10cdcf04c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d89fc90c-4c71-44b4-aecf-347de273127f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5b9271-784e-4396-b5fe-39a329699a73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e4b44d6-6965-40ea-a196-87fe32263702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2814313d-511d-4e31-ad13-1dfff70d0a84",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a5bf5e-710f-47df-8910-e2fcbe4894b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a8c7861-f838-49ce-8f87-c47036f3f7fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dbbd1d6-b044-4a79-a450-9fab4b94f236",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f865bf1-e0d0-4200-a097-15306bb62d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479dfa26-e78f-40aa-91fe-a598d8a0f277",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce303136-7472-41b8-bd86-e7e6bc7b06b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "086df8ff-5637-46a0-8fe6-2e05cdede2ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d4cecf-6739-44ac-af37-0ce64058db30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e57a17-a835-4b28-9472-8a72e46a10c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d85d7a9-c323-4954-a590-3c4e456303be",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35f8213-a07d-4eaa-9ebe-86180eed7e90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35d8c59d-3143-41c1-a341-786c053df65d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e85f8d-c302-4e53-a6fe-16eed75f2ba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61f1a187-d053-4b97-8d28-ca9d7be79c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8216d803-cbf4-4b70-ae47-ed2370263180",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a08c61-e98c-4dc3-b1ad-1cf2fa317dd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b61aebf-8b1c-48ba-8082-d81d95a34780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0f4129-ee90-49c8-aaff-89caca635db7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af6ada17-16ac-4497-b9bf-a1e3b9cb6d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c730c013-8962-4e91-b38d-02d96b93f530",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8856cf6a-dbf1-4c1b-9a01-7d0c43e659c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9247231d-60e7-4eb8-aa4b-b96f5af9997d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bca5c47-7dad-43bb-9706-6e2abdbd9626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f02a5a22-7e30-41a1-8ebf-f08221c96bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc9bc55-16cc-4389-acab-fb4f35faac65",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e5b6288-3ed7-470c-b859-507c12ab3750",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a1f34fc-363a-4404-8a5b-2e7e6c55537b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf4d9a6-00f4-4242-8c63-066df87bf255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05897d2b-02fb-4c78-af4f-66e375cd3ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e02c53-adf9-45fb-a2ef-1e8add59664b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9629d39-c47e-434e-b925-62b6ffef67fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af1c176e-5857-4107-8bc0-86007ec123ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c925ae7-813a-4530-9821-fe01f63c62b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "191356b8-6584-4e3e-bf48-f70b90746cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dda5fd5-de2f-42e6-b618-ed95ee4746ed",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add7bf0f-c844-4aa0-ba12-29a410590002",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f0fe479-9919-429d-90de-891e7564c7a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a423abb6-8d2f-4abb-af79-00132e6ba4ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de05992b-bff6-472a-82a0-1b433a2a5eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea54ca3-7211-4e76-a857-b1b4b96562f5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f372805c-bfee-43e6-919e-a4556dafa0e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23ac2dce-4ead-491d-b7e9-11c210348c67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c435c29b-e62a-4900-98a6-b8810df94335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6daa94c8-8610-4e2b-81cd-19fc95d02468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf3ff25-229e-49cf-a11e-64b58e32120c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8850c6b-c403-469a-868b-293e492c8a3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d778be76-dbbf-49a3-a0e4-6b1e03e6542e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c6dd10-d9df-41fd-986b-6b1a205708cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54cfc1f3-e83b-48c7-983a-230e76848f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f49a4f0-ee02-4721-8e1a-de0cae1f5dd8",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ccec9d7-3eda-4519-a0c7-3581e6832802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b9e033-deb5-477d-8cef-3a8f18cfde6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c829be-4fce-4cc6-a170-96a2f1c27a95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a11e282d-d87c-4ea9-987d-894aacd6681d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078e53ad-9550-4e69-bbe3-cb3732308cda",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a472cd-cf80-4f8d-8d7b-4ba577b978cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e24b6b-f4f5-4736-b736-e0c4d8492669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d0d9914-b5fd-4827-8dd3-0f98fd97c10f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff75d29c-c86d-416f-addb-984119857a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66276cd8-171f-4859-b50c-7020c80b8e12",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce1c5d2-55e2-4c8e-9899-18c9594be964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1cb5516-17da-41e3-a592-7ee67e380881"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2c5ae5-6f91-4f12-8bed-ca6f0e355976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c9333c1-2fa0-439e-8631-6350837eb59c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "716b463f-872e-45a4-a88f-db33fca31beb",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd34c0cb-73fc-4477-b948-c109b12794f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "591a387f-36d5-4107-a7f4-45fdfb410adc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57958a8f-785d-4be3-a3d9-607f40508568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198499d8-c21a-4236-a2a9-189b3212cb22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd341264-c475-4e75-9be5-a03ba697563b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a21f25-3d9f-46b3-9988-3c283117951a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a63766e-d66d-46c8-8668-316e23202254"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc248256-203a-423a-afbc-68c51059e86e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "292be3f0-dc80-4ef7-9734-39be8f3f067b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc005ca-f841-47b1-8939-55fa8f0c2725",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6550b1b1-161e-4b8d-9021-510f9e9c2b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50620994-4264-42aa-9b98-393a0b71e173"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e007070f-166f-447e-a3c3-04ee932d3478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "444404c5-8ea3-4b25-bbd7-5a894a4732ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea26754e-49b1-4244-86eb-cdbd841b05dc",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90ba6d1-b0f8-4a7f-9fca-68570fc2d734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c09feb77-e11f-4983-95dd-c3b389c8fb22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d13a3d5-ab56-4123-bd6c-036b5ac87432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec84bbd3-c1e0-42ae-bf39-240188604e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0f9dfd-a59d-44a8-b454-072e8b689c07",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d82e8f1-3767-4656-a707-d69c31a9c958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2573d3b-c2e6-4c67-a336-6772bd49792b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb7f5ae-2d41-4984-8a7b-f14db2debfac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8713a041-8960-4914-af73-a40b9017da05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acbc6b65-3971-4302-b6e1-f631cefec9dc",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0dcb9c-063e-4a47-92c1-06a0edd7af2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1beffaa-fd6c-4aeb-82bf-7d7893c8c7c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "346402d8-ce6a-46e2-888b-8b1fd0f27548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9b7df2f-53d1-4371-a7f3-1ca0545fe0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41153bd9-8be3-4191-b13d-07dce634dae1",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ccd35d-fe40-42e5-894f-772f2c01db8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e319427-b35d-4889-afd8-1202df578683"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "200eb879-601e-4352-90ba-6eb60d2ddc73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa651615-9a14-4bfe-9df3-4fad908e6d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abde4ba6-c0f5-4a00-9f09-195471a3f44b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1094181b-3538-4e33-b941-c51b5f91bdf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc423076-b996-4604-8b8e-1865a88dad17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eefd5e4f-b3cd-4086-b1fc-43d0ebe3678b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e26484-4a5c-4a05-b16a-cf0473fe1a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cca793a-f48d-4c11-96a8-6a77c39cecb7",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1afc4d3-6f5c-4507-9daa-111f53f8f6a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6560069c-f595-4a0d-b3da-9a92dfed2656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4fe85c-954b-4cfd-a7ca-b453ec3d5790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1990360-61f4-4359-9ac1-239713e68f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa188c2-5030-4475-bca7-0546a9631ace",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e3a9786-f1f8-428f-8e4e-3bd8084da827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33c4cb70-8ceb-468e-b151-b697b190ed53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4bc9e2-e34a-47ca-b1a9-b27f72d55a62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2fe0144-d03d-43aa-8053-fc950a315d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6619c313-4273-44b2-94c7-099a54416aba",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759f9f2d-3cbc-4245-921e-d8bac16dc79e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32aa01d0-9b80-4eea-bd80-6de015d42c3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9da75b6-cacf-4b03-b60b-c5852fdd221a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "953a5167-ecb8-497f-a553-6f468fc6374c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd61d18-48e5-4e8a-8086-21697f3043bf",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684de87c-6dda-4f6f-8150-9aa54725ce34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84c0a4b6-4471-4301-8138-b3c5585e885e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e374a3d4-8b84-4fda-8df6-8c1e766ccf0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "021598eb-f700-4380-8381-a6b6c5fae243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64172d82-c0e7-4732-a984-5900a9e1ede0",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c20d986c-e787-4feb-929a-e3b6b34698b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4598a5f8-cf8c-4c2f-be8d-2f4fa06e25cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecea9c0d-938c-4f9e-936e-9c312b732f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13af3ede-a053-4512-9586-c23fb500363c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e14fa4-2e1d-45e3-92b8-24386668a752",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1697d600-ae76-4c02-834e-5fb038afcc50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "becb7f71-be54-4c3a-a484-21f72f1b8d85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ce10b3-af8e-48aa-a132-b9fc1491ca8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0328c7a4-5b10-4b79-bae7-05af23189e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899b1a3c-4667-472a-9077-7b3c8e1bc150",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704e894d-2af5-40a9-9f90-ef65b54832b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08edf25d-95be-4140-befa-6aa8b85dea0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed43bcc9-8967-41e3-9b47-fdbc09e593cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a8e1ac-4a30-4243-ba8a-997426b35d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab16a57-8c76-40d6-addd-1c902b99c4c1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6ab49e-7957-4748-9551-1d5b348db0a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f533201b-c821-407d-bb5d-99ba51903cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac5ba72-1821-4a4b-b452-b350da614462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54cb399d-0954-4e81-a9f3-ad957e7cda63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0378cb3f-5b3f-413f-8cac-c200c7e1ca02",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0257feea-2843-4b50-ac6f-00018367234f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5e1dd13-46ff-4d32-9d47-2326f1feb319"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5bed3e-49ea-4b1e-bbe6-c8316bca4563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0144ffbe-0164-45f2-9731-9ad92f2f33b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7bdfb7-9b77-44db-90ff-e01449a9a941",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee443739-144a-4f6a-a635-dd76943ec3cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bae2c96e-fc0a-469e-ad52-1378bf9e8f72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "370f099e-a628-455d-bab5-e62ad35d0283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d22533bb-da62-4ace-9cae-bc5c493e7ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fac9b8-a900-4f01-8e8f-0ca3cebc7548",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9850d0a0-5f69-4c6e-b445-e66cb455face",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5387ceb-5a70-45a7-bf0d-0c4ddf34923e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22939f5-98fa-402d-8702-d882147e0187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afd9c456-6911-46c5-bb79-dbfe89902739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9b5f90-0d03-4d96-a645-c8a0c938e6f5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e288b8-84a7-4ab0-bce7-b099faa4cbde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae479348-77b9-459d-988b-f6f2a4650e07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe6c94e-bb72-466c-ac95-5252aa6403f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01bc3735-f148-41d0-a56b-2bd8451ba0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222c85ca-75bc-4b49-ba99-5fe46fcc38d5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4087e0a-deaa-4d80-beef-f47ae2bc3c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e222fecd-b97a-4270-907c-93e8513d8131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dea2b49-a536-4bc0-baf9-dc50c6868d7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "361a1d7a-985c-448c-88ff-fac3cc5fdc92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f45a396-9edb-4622-87ad-631209905ed3",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bb1c9f-f095-41e9-a13f-96f3b3a706d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39aac6ff-a6fb-420a-b01c-79ba09c46332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d232d192-5152-4a40-bbe5-331efe428baa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "287974ec-c498-4f84-bbf0-26edde3746db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f5493a-4646-4946-a47d-2124881e62de",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5bbaf0-41d2-4d39-b733-eaefc04dd5fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc704457-5617-42ce-ad04-056baae46860"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0aa98b-06a8-4f71-9d3c-e22ae4800728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b3ff147-af93-4977-abdc-f1a62a1c1544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98bbf9ec-f9da-4895-9cad-1e0ed854f225",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48fb35f-f2ad-425f-bd2a-0c2a18a14d7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db2d0a23-ebb1-47f2-9cd1-de3323afe092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d2c4ee-87aa-451e-a606-824cfea450c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ac0e085-e8eb-4f86-a32c-3f4448b8f6cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd09df16-d4a6-40f6-8910-fd23faab22de",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8b97bd-10b5-4a45-a4a5-17972ba4f760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9bfd61-9042-44cb-baa3-2f20d8f45372"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aaae82e-8cc4-4b15-863f-1874a1467484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb934f7f-6017-4271-9e2c-4108bd03b858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0fb9dce-3efa-438a-ad4f-e153abc0bddf",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25ea4ea-d1fa-43bd-81b7-26601da4b6cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d85aa6d8-0712-4486-981a-17044823761b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d5d5d9-a5c1-43a2-854d-bf5bd7646a3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14aef98b-6481-4062-b291-f6ca13cffe90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc480152-180d-4211-be54-2e47e2edff2d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c316db03-69c3-4289-843a-cb5b266da0c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bca1fddf-ccbf-4fd4-8e47-e5ae03481bc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2277b10f-b412-4945-969a-c3e3d21f48e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95401680-c569-46bf-80ba-76bea5b866ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84241006-c115-40fe-b09c-ccff20356212",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e279472-46f5-4f33-965e-3e4ef1578fc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e68ca4b3-d139-4807-8158-f7d3bcfb509d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "298c662a-572b-42a5-ac44-a0dcd331bf4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4cd1b4c-8870-408f-a332-5bc697e507df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4635748-a5d4-4b02-ad64-757b23b15dac",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be2a7b5-90a3-4c7e-a763-4f92351ddc96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b676fa32-04aa-42dc-9205-6df63f592658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e896cf2d-1d6d-4678-b5c9-5f6ac2c7b1bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89f1b3f-ddbe-4abd-82ae-43a31ddfc27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c838290-e804-4c9e-9a12-93570232fc56",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7148b29d-be9b-4f2b-96ce-5ad6a82f57ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f21d7184-11bd-45e2-accf-e773fbf3b8ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6776dd65-7445-46f7-957c-77591b32d3df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b994c2a-271c-496c-91a6-6458411da62a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a06dcc7a-0abe-4dd6-8364-32df98cde5dc",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0372636e-b5a4-4e05-a6f3-8484203b608f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae57560-9b26-4c2b-8e1a-22918a0f6cb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7457982a-8460-4a9b-ad29-df2a43a4e9bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0abfdd-f45c-4f40-8a73-a6cfc30cb367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad6ed85-0269-4179-933c-90f5d5f8e3c9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a697beb7-a91d-4a26-95de-7dc920b78fdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baf53e45-816f-4407-bab7-dbe44ccac2aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5203c037-3553-4551-8324-8ece027145d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02dd83cc-b1b1-4daa-8721-835013e5f1aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6c95ef-98fe-403f-b264-4c0aad17e009",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca02262-bc58-48ee-8b14-02ae283f6be5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a00dfedd-c3fa-4486-b0bb-c3f634131b59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feaf8696-4b4c-45c0-829e-efe367fd6ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae75533-f717-4d4e-a1d3-0f2d927f7746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f472b87-08e3-4b5f-8d5a-b8860adfb74e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8ac86a-94b4-4e65-8f46-828e929b19eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48cf6df0-8876-443a-bb75-f12d10180434"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e56328-82e4-482e-b0eb-34993c3e4439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7b9150c-9b05-4771-872a-878b61cdb274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f431b2c-d64b-40fd-8b63-e41555141be2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61646c94-8533-4dd3-9640-e3ff711faaf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5fa145a-d589-4e05-9e37-beb72927e722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee02b040-efa4-4830-9479-21caffce56a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa9a4738-a426-4f94-bf96-689456e03a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c03ccaa-0786-4ec8-b372-1f8ff255daf5",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1c7201-0fa8-4d4a-b1f2-9b2e612769f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db5d50fc-f1d7-414d-9367-f63af8eb6799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65109288-a9d8-455d-8dad-64f11c729658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38148926-7eff-475d-9bfb-fbf317d0a314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8f791f-ebf3-4daf-b8d6-005eb000c607",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe560b79-bdf0-4982-9080-a5a78b2f0b80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "590bcf85-c09e-4ae1-9129-d9038fad3ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0bb4886-ada2-4538-a69a-29b9d1b455d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8efc0539-674a-4678-87b9-f6b1870dfa98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee603f7-5e1f-4a22-bca7-75501a1916f7",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71273911-1999-4250-a274-00f4e446e2ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39d003a9-4753-4cb4-b514-f946d0a3697b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f99cbfd-61f8-4ddc-adb9-74093d0a9117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b8d26ab-c95e-4bdb-84c0-56db1cdf2f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0bce0c5-815a-4578-814b-21887d86ecc4",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a919cb-16b8-45f7-9afa-8796a6f33bce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41405d04-fb21-458d-9f9f-094ffda288d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab94ea5-76db-4d17-b207-1fc630af4a87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e8dc76-c7e6-4ba3-9270-79bad1bf5fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b017e0-d104-46e4-8b3c-c3f55103676f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e08d94-31c8-4522-b8c7-0e31dfb92141",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9358946f-f4e3-4286-8e02-dc7292e84ae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d426c13-1b94-47df-929b-a3b4525c1ef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675e83c0-8ba3-4dcc-97fe-1d5d44e64352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1752e6d7-8df1-439b-a98f-73be45dcea38",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f287599-fee1-4b84-bee4-9917f6ef3424",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d6204a2-cd4e-4ba8-8c3a-9589566dd2b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa10cb9-2c64-4959-9691-c23234b9ab89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28031159-bb47-4e37-bd5f-d7e35e4b2f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e8a396-78c3-443d-a618-bb8d2def23a4",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f57739-f911-427f-91c6-2ee207fc8681",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0cb9b9a-b3fe-43fe-b4cc-c3ee78dde5c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61437900-4b0d-4a98-a9f7-7436a78f4005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b98b808-6e4d-44e7-922e-1d045204c348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c5d697-f113-403e-8bf8-b99bbceeceb8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac92c7fb-1d0b-4b36-9415-6d16853495e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab51ef79-1e64-487a-9d4d-2da9beebe9e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5b8c29-d27a-49ac-8a7d-e7916792e9c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f57c4d0-4b39-4f9d-8f88-3c880effb511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd3c86b-64e4-4d72-aa2f-ca9b2cc7a838",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "664ecf3f-427a-4cc9-ac8e-8a0c91d59749",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b17781f7-1240-454a-820f-b6f3077f13c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "027843c9-e2ab-4c39-916f-b72d3518ba54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7def6080-a3f7-4d16-be50-00b92b1f7fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeba2320-164a-4cc1-b623-b54dfff45ddc",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "305fedea-75d7-42f4-8875-c196a872648c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eeec4f48-dcf0-4fd0-b004-37863b3952ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc438fcd-c1f8-4ecf-8f91-5242ba26f122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "843b0db6-9ce0-47eb-b0c5-17352e28e5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a53970e-4070-4a82-92e8-25bc1d662eba",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709d3ac4-0caf-49ed-98f6-c5ea2bd25d70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53c21b6d-b351-444f-ae85-95399f023897"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12b7448-fbe5-4e96-a2b3-7eb112c377f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f6690ff-eb16-47d6-a9ac-eebf1fa08f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f132f14-54b6-402f-95c8-155dc62f708a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8543657a-b3c3-4a62-8dce-7e56202fe19f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e3d6793-a69c-4ecf-b350-00cf637b77bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc3743b-ebfd-4733-b294-66aba705f4cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d337055-5b3f-4ff3-8f74-06dbcdc95dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9e42fcd-aed7-4eb9-b046-eaac72685e7c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8275bdbc-1e95-4bb5-93ae-f08a76aa3875",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ce8c5ca-7bd7-499f-8c9b-9acda781ffaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd9e5da-1939-4ace-a464-9273df4dea99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41b69ebd-d79b-4944-97ad-54264d0f62dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0fcf6c8-29c4-4e93-8859-bf0b497ba6f2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e224951-ef03-4f77-8388-d508337abd3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8a498c5-88a6-4bf2-8515-75523bea8856"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db23660-7383-483c-bfcd-d706b9db1801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fc3d916-68d5-4dcb-b68d-bd1522260124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1de2776-cf75-4cb8-8901-338602ed3009",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0deff9af-3e44-40b0-9942-9928bc95a887",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4793b59a-6423-43fa-b832-135daee05bdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f499b5-189c-4a23-ba3e-2298bb207fb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c99e427-862d-4de2-8217-a7865d7e5769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e634ce-323f-4ad2-a848-7606915be76e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a923e142-2676-4679-b685-4d7361e30df0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d820fb00-b51d-438a-a1ad-e78f67784f14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e221d05a-9fd7-47ba-9300-3325af3340c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09c120cf-d163-4f9c-89cd-b92f88838b05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763ac9a5-8423-4eca-898c-3854040c352c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "396cd8f8-7acc-47b9-a17f-b55bca477443",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "094910dc-bd6c-4c62-ace8-1fee18c79b99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3a78ae-9d44-4004-94b7-6ed98e032e15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33b29364-1e2e-4a66-89f5-7fcc66e2d7fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75a035b-d9bb-4743-9251-7a6acb5fb5eb",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56132ba2-ca4a-4595-9f75-d57233f9feff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da3816af-1239-451e-9b10-ec38b729239d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3204dc0b-fe17-4fc4-b2cd-ae61f560ebda",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6fafce1-59e0-41a8-a126-9e5854f66041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10b97cd-17e7-4cb2-a319-7229c7fbd196",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dbe7335-7626-4c6d-8c05-8298ba85dbf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae258893-70b6-49c6-856b-1824f369da6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3941ab-0de9-4094-a66f-87c8c97773ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33c1c08e-4aa9-4002-99be-8e9ff834bcd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91b0df9-8dd6-49de-ab45-57dacfd737f0",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b113165-ec31-4cd0-8659-efd56caf9f33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52711911-b102-4cce-a54c-fc4ab7eaf194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb54f786-9385-45ec-8063-38ed6f9ed560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fea8e31a-c8da-4c9d-ad49-06a9d757ae45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645ad2e8-9f66-4806-aa37-c95e818d4f12",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb83baa4-f44c-4e57-acf9-73f1d086aa95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbbcffff-00af-4eb0-9a74-434540a60613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc86c3eb-46dd-422a-a2d3-99049e06c61a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7626be34-4c1d-4a7f-9e99-a7963ea75cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd7b66dd-b98c-41b9-8b9b-3f631b66597b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d17b46d-cdaa-41f9-8ee8-6c3a1240491a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e8315d0-a32f-400b-83a3-46bf63c473f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3cd8fae-104d-49ba-b9a0-43c420508bb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a64fced-e99b-4aa2-b6c7-42188662bbfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd00e70c-17c7-4260-988e-ce66c833bd63",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df3c3fc-36fd-4709-9af3-6d0434d2ad56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9e7553b-f66c-452a-a7f4-57987c9aee1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80adf8a-ed67-4720-ac75-3b053afc96e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fac6014e-468d-4ab7-8868-d61ce9de71dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d1711da-6040-49e3-8159-3da34d465523",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71acfdf9-072b-4fb4-af18-928af34b0ba0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44526758-2e8c-4751-a529-25ea0a506703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f006297d-cf86-4011-99b5-ac3133448a9d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "846ba88e-2a2b-465c-ba68-34be59077970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa5269a9-21b2-4a6a-a82b-33a6cfc93b7e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b06529-2830-4b2e-9aff-30675e6ef583",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e5f25a6-ceeb-4af1-a389-482ee99785b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81bbc7ad-5cd7-4aa7-a831-dc8fe92bf47c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2817c46e-e791-4b76-8f8f-84fe0c52dde0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40bb8433-43a0-4d45-a237-daba39c2b040",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99c1423d-4dac-487f-b2fc-202bf6096b92"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "978444c3-411b-4a1c-be9a-699a52e1e415",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aaadfa15-9042-4b33-a9e2-746a43446421"
                    }
                  }
                ]
              },
              {
                "id": "2d931666-3e69-43bd-b5e5-55da3833e585",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b8b90fcb-6d95-4e3f-ac96-c407362f4e42",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d2f3c1-b8a0-412d-b1de-5bfcd066182c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5c8b1bd7-08da-4202-ac88-df4b5b4c24a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7295da-ff0d-4e42-b51d-2e3c4fef1817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "27e094d3-5567-420b-ac73-9c02eaccc499"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a83635fd-3c0f-4395-ab5a-d61a636c88f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef3af5d3-1098-4dd8-9bc6-d0dbb40ab976"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "02a14f80-70e4-49dc-8e5d-cc3cedf077f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2ac14ef-34aa-4320-aa94-6fa117030a92"
                    }
                  }
                ]
              },
              {
                "id": "5ddbdd24-5370-4a1f-9b34-cfa570d5db7d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "644c0529-0e35-4015-84c1-24909ab9b0c7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eec8425-2822-4979-b210-5d8e50380097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6e96c473-646a-411a-ae0d-6a5fdccfd783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ead53a-dc00-45b8-b67a-65389bfa8533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf828c1a-7863-43e6-91cd-4d2f0b9e7d58"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cf51ef45-ea0d-47d6-92d3-1ade4fffe9eb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "afdbae63-cdc0-4010-a207-a51852a571ab",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15ce1dc4-c9f3-47f2-8483-37bcbda4b854",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b280fe3d-c3aa-4048-b881-842a4c916038"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40f70151-9ce0-47e7-8748-168905949b6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13b80553-c3ae-467f-a77a-5401621babd6"
                    }
                  }
                ]
              },
              {
                "id": "b7dfd140-36d9-4725-b0be-f522cece028f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f963c75c-df59-42cf-94aa-c480b510cecd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0bf54913-5575-4c5f-a6b6-6983ed5169f6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "517c1d06-d796-49fc-b52d-a478d19e8132",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc2c70a1-b74a-4bb0-836b-5447e589f98e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "76d57b56-728c-478e-b190-b0a31b4b5f92",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "62dfa5b9-54bb-4db4-bd33-5228a748c29c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0a18c00-eb03-4e50-ad83-c143328ae5d7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "640446a1-626b-4258-96fb-b095bfb23775"
            }
          }
        ]
      },
      {
        "id": "6a3cf7e4-c158-454e-8dcf-2b58e8fac3a2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "2da3a6b9-e1c3-499a-bf79-8855fdd15d68",
            "name": "Negative Testing",
            "item": [
              {
                "id": "63775cc2-dc22-4134-90a4-ce9690ed23b9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "34227585-e9d0-4657-a9ef-ac17e0d61d3b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d794537c-6e1a-4c1c-883b-6fade3289ace",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d61fd2f4-97d2-4c57-af4e-e6c04a0860d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87494cfb-9e20-4bd1-acef-807545feea84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce33a119-f992-42c3-91b1-00d2fc434f84"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a77be39f-b0fc-4c3e-8587-d4dd2ad0cd4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4145b9a-80ed-42ae-9537-f540f399223a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "822ae40d-2352-496e-8625-54bd69aa968b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a6df1a0-8083-4dfa-a9c3-a9f938d5e457"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85f4c864-3a4f-4b65-82d1-5026643cc343",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "11984ce0-fc75-4a72-ad1a-119c59880f96"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ddd55b2-3108-4b02-9e09-5329d30b2ac7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ad9d72c5-857b-40ee-a311-78b285f39371"
            }
          }
        ]
      },
      {
        "id": "b3024c3d-4d64-44ed-bd3a-8f8fbd237dcc",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "61b33610-ac0d-432c-a5e4-a6873ef4e259",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fff7c60f-a638-4cbc-bbea-38d3112e32c4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7ee7e99-1abc-4492-ada7-923c53d8b61b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f40cba-160b-4452-bd16-aea285000da1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd23fc3a-590f-4f70-8fff-64fcf8d15b37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3428d6ec-ae13-4492-a252-4df25e5bbf9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ddbb9da9-b7cb-4fab-8817-5dba7884f3d4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ae3552a-10e2-4ce7-ab84-285a81773b64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43543c6e-0a37-4eea-bb5e-b5a207699587"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "828bb7bf-0565-43ba-b321-83b2cbf77dbc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f735425c-5db4-4b18-8959-1a7cf516e8ed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4d0ef82-e228-4c2e-8b38-5b0fd9271eb5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5d33fad6-4f8a-45b1-b4d3-86ceb7b70c2c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e151bf0-abfd-4f47-a55d-4d18732f956a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4cdcac80-3165-4547-925c-4b4f025ba9ab"
            }
          }
        ]
      },
      {
        "id": "5175273c-fb04-4943-9670-d811d373f1bc",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3d72be74-d2cf-4210-a4fd-0d33feecf275",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e4a43b6f-003c-45c3-8fa9-17e474341403",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "619c30c9-aec3-4e83-833f-edd2299211b8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64acf510-89db-48e6-8a88-358d9104adb1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38d092a7-641a-4c5c-a95a-68a2a63b1106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1435c14e-40d3-4254-8ca3-3f15a34cc411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b185970-9769-44eb-b639-1539db2cfc63"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec0fac06-910c-425c-a924-81f5cd01dbe0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a19a2bab-1a8c-4edf-ba67-bfd21354953e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf2472cd-3f06-444f-bb06-bb366bdad5e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ed987a0-81e8-4450-8298-1710ed6136dc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ca92c8c-1902-4f63-8b8a-740f4209fa63",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "64daf8cf-be6c-4813-820e-ec886ade920a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a25fcf57-2bde-40a2-9c7b-0e12c57f21d7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9e652923-474e-4449-82c1-9981ffb2e038"
            }
          }
        ]
      },
      {
        "id": "6f048fcd-e7c7-49b0-a202-c902e733e6e1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6584991c-e403-4ede-9c47-68021f1a9a69",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83913647-920c-4240-92c2-2a98189f4a29",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5300775c-23e8-4da7-b395-30570975418f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d9a5493-709f-4295-8ff5-9821c590f21e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "24330b76-10be-41f3-abed-e05dc8891acd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 79
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 3
      }
    },
    "timings": {
      "responseAverage": 117.10320284697507,
      "responseMin": 8,
      "responseMax": 1258,
      "responseSd": 132.9084185150124,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1696379651497,
      "completed": 1696379699968
    },
    "executions": [
      {
        "id": "9a9d04e8-a317-436a-b387-556486a06aba",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1fb7fa71-6664-41f8-b8f9-0ccfec36520b",
          "httpRequestId": "10f37e48-1212-410a-9942-99cf9134565c"
        },
        "item": {
          "id": "9a9d04e8-a317-436a-b387-556486a06aba",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "35542bdb-c5c9-4abb-8852-eeaf4d684ff4",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 0
        }
      },
      {
        "id": "50b212ef-5998-46f0-bde6-f4c449a4175a",
        "cursor": {
          "ref": "84eb3e52-c897-4ae6-95fd-c6fb08ba19dd",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "af3ab897-cef3-4756-b3a5-f6a2261aa620"
        },
        "item": {
          "id": "50b212ef-5998-46f0-bde6-f4c449a4175a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6c7d711b-ee2e-42e8-b053-f463644efb7f",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "d423c288-07cf-489d-9533-e6f80090e741",
        "cursor": {
          "ref": "938bebc1-599e-4555-91d1-11aa59e4d708",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6504b151-7e32-4f3f-8323-bca4d5ab08cd"
        },
        "item": {
          "id": "d423c288-07cf-489d-9533-e6f80090e741",
          "name": "did_json"
        },
        "response": {
          "id": "00f86580-60eb-437a-9fa2-a2877218afb5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 269,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f71e94-e191-40c6-85a3-d38c49216174",
        "cursor": {
          "ref": "a88a7df4-7a89-431c-b2f5-fdba2d23d8b3",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2e8d0f02-591a-41c8-84b0-f1a70db25328"
        },
        "item": {
          "id": "68f71e94-e191-40c6-85a3-d38c49216174",
          "name": "did:invalid"
        },
        "response": {
          "id": "74871eed-090c-4a1e-b48b-263323166b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f71e94-e191-40c6-85a3-d38c49216174",
        "cursor": {
          "ref": "a88a7df4-7a89-431c-b2f5-fdba2d23d8b3",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2e8d0f02-591a-41c8-84b0-f1a70db25328"
        },
        "item": {
          "id": "68f71e94-e191-40c6-85a3-d38c49216174",
          "name": "did:invalid"
        },
        "response": {
          "id": "74871eed-090c-4a1e-b48b-263323166b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c9fb79-717c-4469-9137-d4acfbbb59a2",
        "cursor": {
          "ref": "fd9259ae-8858-494e-a2f3-b6363f33475b",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d9308dba-403f-4b89-80d2-08bb6114749d"
        },
        "item": {
          "id": "a2c9fb79-717c-4469-9137-d4acfbbb59a2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "691da320-b1a9-4b85-acb6-5b9aa6e588b4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 236,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130302ca-2907-4aec-9118-65081f7e4dcc",
        "cursor": {
          "ref": "744c5b5b-acb0-4c65-9fa4-9dd18171dc9f",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ad397622-2ceb-4495-ab52-1dc1caf91b26"
        },
        "item": {
          "id": "130302ca-2907-4aec-9118-65081f7e4dcc",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0f3947d1-8c95-49aa-81d7-6b36fc9e3f12",
          "status": "Not Found",
          "code": 404,
          "responseTime": 99,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3eeffe9-c73f-4d2e-8cfe-9094013de678",
        "cursor": {
          "ref": "413815e2-c660-4d1e-8e98-1175727d4d0d",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "892588b5-d987-474f-881d-d4956a1ea77b"
        },
        "item": {
          "id": "a3eeffe9-c73f-4d2e-8cfe-9094013de678",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5f28229e-0a27-452d-b3f8-9bf531e88814",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac9b530-c35c-4253-b024-9265a651542e",
        "cursor": {
          "ref": "b691c30b-03a3-45e4-960c-1edbafa4bd48",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f8ec60a2-5ec0-4b20-b36d-c06b9c5a4066"
        },
        "item": {
          "id": "9ac9b530-c35c-4253-b024-9265a651542e",
          "name": "identifiers"
        },
        "response": {
          "id": "1f3b2791-a55b-4bcb-a6ca-cfef705bd4ea",
          "status": "Not Found",
          "code": 404,
          "responseTime": 131,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8559f53c-da5e-49b3-ac03-cbbd063043d9",
        "cursor": {
          "ref": "ea433bfe-bc89-4810-b3d5-bf7c58dd354c",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8e11f8a1-7141-435d-88da-1046410a5fae"
        },
        "item": {
          "id": "8559f53c-da5e-49b3-ac03-cbbd063043d9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0cc65513-c2af-49fb-8694-2b08209c2714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba9f957-74b1-4f92-b9fc-7dbd5e081ced",
        "cursor": {
          "ref": "774489c9-e52f-41c3-b166-0e9fe1643eaa",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7676462c-e7db-44cf-8e49-87c349229373"
        },
        "item": {
          "id": "cba9f957-74b1-4f92-b9fc-7dbd5e081ced",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "46bf8845-c00e-4582-a35f-aab76d3677d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "939c8f8f-f7e7-4097-985c-c87db70dff31",
        "cursor": {
          "ref": "0b5877a5-6336-4165-8180-3b9259fe502f",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c1b85c1f-b5f4-4a78-a15e-a2e679e3f7d6"
        },
        "item": {
          "id": "939c8f8f-f7e7-4097-985c-c87db70dff31",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "87ad101d-c9c9-4844-8f01-e63f9b4a1231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e8adf2-768c-4b1f-9917-898d4f048747",
        "cursor": {
          "ref": "f1a8a97e-46e5-4778-bc00-17ae6c82a495",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "fd7b69da-f90a-4db5-8fdc-88b7a94d6f41"
        },
        "item": {
          "id": "85e8adf2-768c-4b1f-9917-898d4f048747",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "06462509-c478-456f-a1ea-895a25c4111e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe9528be-1920-4a62-a232-3cb0e1636552",
        "cursor": {
          "ref": "7e74f4b9-0fea-4184-b45b-f3bc9b63c69b",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5c8215d3-c11b-48a9-8cab-08a2cb05fff4"
        },
        "item": {
          "id": "fe9528be-1920-4a62-a232-3cb0e1636552",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "62b0cf44-02a8-4001-91da-ac74c8ab4956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5163e745-a834-4017-a6ac-1081b5c2ec5b",
        "cursor": {
          "ref": "27cda7b9-b15c-486b-a869-812694761794",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7187e66c-52fb-432d-ba8c-575e104733da"
        },
        "item": {
          "id": "5163e745-a834-4017-a6ac-1081b5c2ec5b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0c8beb79-efbf-4d16-91cb-29b4c5eb3ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4250d5f-49c3-4c2e-b398-4b8f356c38cf",
        "cursor": {
          "ref": "97cd11fd-b7c9-4f27-8666-4d4c041f8b22",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "40d7d45d-f29b-4dba-8ee1-c414f20d57dd"
        },
        "item": {
          "id": "e4250d5f-49c3-4c2e-b398-4b8f356c38cf",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f2e29407-067a-482d-b731-8809e36561b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279ab4fc-3df1-44c1-9e95-60ed4a458155",
        "cursor": {
          "ref": "f1bcf72a-e8b7-4003-ad0d-c3f71b8f0f3b",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c3efd742-0f0e-45e3-9974-bce27f17a7bf"
        },
        "item": {
          "id": "279ab4fc-3df1-44c1-9e95-60ed4a458155",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c56c57bb-755c-4bf0-9ae5-c4a1123c9e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a86b25c-e58b-4d93-8819-054bc82a513e",
        "cursor": {
          "ref": "5042ebbd-d7bf-448f-8d14-7b6a428d5100",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a95d448f-6970-4488-bca6-d345dd85b4a7"
        },
        "item": {
          "id": "4a86b25c-e58b-4d93-8819-054bc82a513e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d998d24f-4f18-4d8b-85a9-e4646796b40b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "945b413e-edba-4ab5-9bef-c8afe9b52332",
        "cursor": {
          "ref": "ec7eabdf-b35c-418e-a6fc-1a7ab89755fc",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "daf6abba-e404-432a-8372-3eeabc11b93c"
        },
        "item": {
          "id": "945b413e-edba-4ab5-9bef-c8afe9b52332",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c78eac43-b446-4ce2-9e47-358b01b17313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4e2860a-6a70-49f7-be13-0cb6f30878b5",
        "cursor": {
          "ref": "ab8c7d5e-164d-4b3e-81e2-8f094346b706",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4d7787c2-f0d3-46f5-9bc7-348a44859a7b"
        },
        "item": {
          "id": "a4e2860a-6a70-49f7-be13-0cb6f30878b5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4fb00158-c0d1-4e0a-983b-ce0315b186dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89f25cf-7361-4382-b4a6-01988069c1d8",
        "cursor": {
          "ref": "b63ccf67-2b02-48da-b2af-b6a70e03de4f",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a3a8c1cb-c81e-4b50-89d9-c75c4447d386"
        },
        "item": {
          "id": "e89f25cf-7361-4382-b4a6-01988069c1d8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a928d237-d9f2-4481-a248-0aa1aaabae0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9181e83f-1fdc-4328-9c8e-d3b7de707074",
        "cursor": {
          "ref": "09accdfd-29ec-4613-8e55-e765fb7ba5b7",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "85bf556b-da41-463a-abf5-6b82837526e5"
        },
        "item": {
          "id": "9181e83f-1fdc-4328-9c8e-d3b7de707074",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d789bb91-a978-4d78-8fc5-9c4720019d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67f4921-8e5b-4b00-99da-83a2453e1486",
        "cursor": {
          "ref": "00b3e424-c26b-4c0a-92f6-2b5c5e60656c",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1fedcb8a-3190-4cbe-9421-840961c84fb5"
        },
        "item": {
          "id": "e67f4921-8e5b-4b00-99da-83a2453e1486",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e8a7d6cf-766c-474e-a0f5-21dd095a6274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0bcce27-c5ab-43c8-accf-01f357a71390",
        "cursor": {
          "ref": "8850b9f7-f9d5-42fe-8650-d93d73c784b6",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "83b6ef02-bb8e-4255-8281-6b1bb41d5654"
        },
        "item": {
          "id": "c0bcce27-c5ab-43c8-accf-01f357a71390",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "04bd0454-f664-4a54-844f-b2cd04b0af44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d724bd7f-d321-4f23-aeb8-658c64dd57a7",
        "cursor": {
          "ref": "84cb2e8e-1849-47ce-b73e-73417b70e8d0",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "dc37451f-de88-493d-94b6-4daf1bf83620"
        },
        "item": {
          "id": "d724bd7f-d321-4f23-aeb8-658c64dd57a7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "db43a9fe-fdf8-4207-9bdc-6705f5337240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3532b643-2ac9-4ad5-bded-0707db702bc9",
        "cursor": {
          "ref": "3bb11df6-1059-4f7b-95a8-1d98ee77ec46",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3a3714d1-cb2e-4af8-8737-4792267a46e3"
        },
        "item": {
          "id": "3532b643-2ac9-4ad5-bded-0707db702bc9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4eb2f558-8eb8-4b31-9b6d-4672f73a3b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39701cd3-e405-4326-8f8c-d83623351f26",
        "cursor": {
          "ref": "25a09c61-4e04-4d97-8883-0af19f3fd59a",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "20d47913-4e08-427f-a0b7-4acbd3d7fda3"
        },
        "item": {
          "id": "39701cd3-e405-4326-8f8c-d83623351f26",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2caaff0b-bd9c-42df-b3d1-54605261aac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17137255-ca8a-4e1e-9284-9ec3885e185c",
        "cursor": {
          "ref": "5d6dea1a-c403-4094-8056-81c7509b4a85",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a2be0438-0b2d-4b4d-a594-34217f7a37c8"
        },
        "item": {
          "id": "17137255-ca8a-4e1e-9284-9ec3885e185c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2f15fdfd-849b-4a04-b26d-a04fb44b85b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7bb3e90-8725-494e-9a29-3f56ee77857a",
        "cursor": {
          "ref": "b43ee47a-5e18-4345-b9df-9448ff4d28c5",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "29fde9dc-d785-436e-a4ca-794875fe664e"
        },
        "item": {
          "id": "e7bb3e90-8725-494e-9a29-3f56ee77857a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "351ff72a-7de3-47c9-96ca-8eb254fb4e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49e799d-c089-4278-b4da-3283c3f6d79a",
        "cursor": {
          "ref": "2d15ed55-ea0d-47dd-a900-8072f3429a3f",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6bd335ff-a443-48e8-8b98-a14840ba3099"
        },
        "item": {
          "id": "a49e799d-c089-4278-b4da-3283c3f6d79a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c0d141c4-662e-42aa-8290-89ad9b8bd0cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ecf32ed-6097-4e54-8038-7428f4829a77",
        "cursor": {
          "ref": "bd1ce005-f669-48ff-a07d-135ee238b136",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d3fc92b1-d683-45c8-a0ad-9a71a526aa5d"
        },
        "item": {
          "id": "4ecf32ed-6097-4e54-8038-7428f4829a77",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4a58c6b0-0343-40e1-b836-ea032864f0b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a0f56d-ceb9-4cdc-8dc2-295068fa629a",
        "cursor": {
          "ref": "993760f7-e571-4159-aca7-728facaad18f",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "cf648a93-af3d-4288-9f88-bd56234b42ee"
        },
        "item": {
          "id": "c5a0f56d-ceb9-4cdc-8dc2-295068fa629a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3878dfe8-fd7f-437d-b34d-3005277b00fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85e67e0-0545-4671-bd70-42c2c7a08be3",
        "cursor": {
          "ref": "824c9f79-5dfb-4a80-bea7-da45caab914e",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "bdfb9238-474c-4569-a8b2-5153c6f432ac"
        },
        "item": {
          "id": "a85e67e0-0545-4671-bd70-42c2c7a08be3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ae9c743d-c0db-45d6-b3b5-42c0a6070a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cd14601-573a-4f51-b17d-6637ee419dc2",
        "cursor": {
          "ref": "3fdc606c-cf15-4f69-aa23-79386ccfa413",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d628eaff-6ce6-49ab-8e1d-9aeed59731cb"
        },
        "item": {
          "id": "1cd14601-573a-4f51-b17d-6637ee419dc2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "22eb9348-0f19-4347-a557-4bad071264aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e964ca23-f107-476c-8592-8b035a563c6a",
        "cursor": {
          "ref": "748d177f-8a7d-4d94-a9cf-439a9db24ca1",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ded1ae06-946a-4250-a381-25a1d06d2016"
        },
        "item": {
          "id": "e964ca23-f107-476c-8592-8b035a563c6a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "cec83fa3-a6b1-40fe-ae77-077ff18be558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03b0ce38-63a8-4f5a-ad15-966d36c6ffad",
        "cursor": {
          "ref": "a73bd499-c938-44d4-b83a-c9c27ac72ed2",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "791f7e54-44a3-4cc1-9c13-a65c58e9af50"
        },
        "item": {
          "id": "03b0ce38-63a8-4f5a-ad15-966d36c6ffad",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "171b5c1c-3475-4d39-a9d4-9b3e943f550b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cccb329-b42c-4d3d-93ce-84ffa14651d0",
        "cursor": {
          "ref": "2b2faf0b-1537-49fd-9f3b-da5a37aff49a",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b5d9ec3e-d836-4980-8319-1c91a168ae72"
        },
        "item": {
          "id": "6cccb329-b42c-4d3d-93ce-84ffa14651d0",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2f90783b-03ea-4f24-9ae3-d86ad1fa3186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f24e3cc-2bb2-4072-91be-fedb75bcfcee",
        "cursor": {
          "ref": "4d47b518-a22a-4fa7-b65d-6c565f9556de",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "243f1e3c-ae84-45fe-a731-40c52285dbce"
        },
        "item": {
          "id": "5f24e3cc-2bb2-4072-91be-fedb75bcfcee",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "10be9903-9ff9-4ca1-885b-bb76167daa2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085ac86a-e36c-456e-8e40-cdab1a54010b",
        "cursor": {
          "ref": "5e5a64b8-a82e-45e3-93fa-b8ee4adf3bbc",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f1d211f5-a0f6-4506-8bee-513fdcb58c5f"
        },
        "item": {
          "id": "085ac86a-e36c-456e-8e40-cdab1a54010b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "236bd495-061a-4d39-ab6d-2d5ef1d50267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20678527-ea67-4585-847a-2cfa4b0239f8",
        "cursor": {
          "ref": "0016bd3d-ecd3-41f4-8750-73bbc669180b",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6a83d37a-a382-4a6e-981d-9c4e893505d9"
        },
        "item": {
          "id": "20678527-ea67-4585-847a-2cfa4b0239f8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "db2983d4-49b7-430b-adbd-11f204f5e1cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 113,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "10b1d61a-e7cd-4338-b6f6-bce150d25e75",
        "cursor": {
          "ref": "d16859d2-c99e-488e-9427-f91d52105177",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f1eb614c-a635-487c-826e-2fd3f5041f18"
        },
        "item": {
          "id": "10b1d61a-e7cd-4338-b6f6-bce150d25e75",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9b7e45b4-0fb4-4805-afab-73bcfdc9d9de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "40f97620-aa36-45eb-b5ff-87f587a266ce",
        "cursor": {
          "ref": "e3c61250-0c3f-4f1d-a748-240ee2c57e09",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e4af0d92-0fad-45f4-8c35-467bc11db8d5"
        },
        "item": {
          "id": "40f97620-aa36-45eb-b5ff-87f587a266ce",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "601f0a4a-df82-4de1-a5ef-406b74e7f315",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "829cce30-2106-43ac-8d69-d0ba73426dd5",
        "cursor": {
          "ref": "70a490d6-2d5a-47cb-b45e-897d83fca577",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "824a217b-8062-422c-90d1-a60b782205cd"
        },
        "item": {
          "id": "829cce30-2106-43ac-8d69-d0ba73426dd5",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "bfa44cd9-f2c7-42be-8219-a1c9c4178b51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ed30e9-f7c9-4eaa-8db2-89e3b448720e",
        "cursor": {
          "ref": "91adc50f-19dc-4221-b326-a37626073d23",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ac55e817-d790-47f2-9570-2559d76506a8"
        },
        "item": {
          "id": "60ed30e9-f7c9-4eaa-8db2-89e3b448720e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d27dc5d1-719d-411e-8502-cee5b88c09b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "0d664736-535a-4562-9f3b-d743cb98b570",
        "cursor": {
          "ref": "67b936d9-c42f-46ad-b870-5c36790405a3",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "09b92a24-6f21-4d8e-9237-f27cc0dd5dec"
        },
        "item": {
          "id": "0d664736-535a-4562-9f3b-d743cb98b570",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "91dcccaa-6545-479d-9bc9-72214eb7ff23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "12c3aab0-c32c-477f-85b2-353d687c9e28",
        "cursor": {
          "ref": "11bee3eb-4408-4510-9276-a8f74b968937",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "947bda24-fdeb-4848-b065-0a8859ce9b00"
        },
        "item": {
          "id": "12c3aab0-c32c-477f-85b2-353d687c9e28",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0694c238-6cfd-4423-80bc-873f128fca90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "7cd98de6-0d04-47e3-9f2e-8d185c9f81db",
        "cursor": {
          "ref": "942b942d-7ad5-485b-9b17-badee4d8b6e4",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4c9a999e-57e0-4d82-8383-716a071fa12c"
        },
        "item": {
          "id": "7cd98de6-0d04-47e3-9f2e-8d185c9f81db",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4ffdc8c0-7c78-4633-85fe-cda8b94f6f06",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "e86df587-f876-40e2-81d7-3215bf4805a5",
        "cursor": {
          "ref": "1f1916cb-99ac-4b8a-a251-fdc7d2a0222b",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "237f616e-8bd1-4605-92ac-1d2d07db022e"
        },
        "item": {
          "id": "e86df587-f876-40e2-81d7-3215bf4805a5",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b6b6aa52-3bf7-4a84-aaae-068f5405b68f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d047db39-8a2e-4f04-9d0b-8343f0a5ae28",
        "cursor": {
          "ref": "fc3125a8-5b2d-44e3-a3a5-28535fe9eaf1",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a4a3c659-792d-4a49-b0b0-ec333e7c1202"
        },
        "item": {
          "id": "d047db39-8a2e-4f04-9d0b-8343f0a5ae28",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e1abb672-b207-4ba8-9234-109a6bd22b59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1a9d6883-b5cf-41bb-9ec6-97246445aa92",
        "cursor": {
          "ref": "676cdce9-4414-42f2-adf9-f0717e1fd590",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "38a3926b-7625-4deb-bf04-3293e3c91cfc"
        },
        "item": {
          "id": "1a9d6883-b5cf-41bb-9ec6-97246445aa92",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "fbe5ba1c-255c-4092-b0a1-631a5e62bfc6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "9c5371e5-236c-42da-b08a-1e76b4ba3d65",
        "cursor": {
          "ref": "88f0a9eb-4267-4805-b0e0-9e0cb96717f7",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b4f72d59-17cf-4389-aa92-43af6b251eb1"
        },
        "item": {
          "id": "9c5371e5-236c-42da-b08a-1e76b4ba3d65",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "112f5ce8-8df7-4cb5-bf71-abdb66c47b83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c6e3e1f0-5c6e-4696-97c2-b9bab1a60955",
        "cursor": {
          "ref": "0f8b270b-6d63-4ecf-8a7e-b0df00fa7890",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4e11c354-35b2-4c16-9d1c-055fa08ce8a5"
        },
        "item": {
          "id": "c6e3e1f0-5c6e-4696-97c2-b9bab1a60955",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fb11171f-021d-48d3-a427-5e3bb525c308",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 104,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5e3a0aed-27ef-4dab-b523-ea183b690191",
        "cursor": {
          "ref": "c4128f2f-ee98-44df-83a5-9dd377b0b6c4",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6ae53f9d-e19f-415f-a9a6-fe02c7873b69"
        },
        "item": {
          "id": "5e3a0aed-27ef-4dab-b523-ea183b690191",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "12900b72-6faf-4e30-8345-3e03f1046fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9566c9a1-421e-446b-a7fe-1c08045a6d66",
        "cursor": {
          "ref": "94620f21-2d5a-4896-bea4-1d17376fa481",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "35656c23-fad1-4592-934d-4bd91fa6d082"
        },
        "item": {
          "id": "9566c9a1-421e-446b-a7fe-1c08045a6d66",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "964c40ce-d2b8-4af3-a150-8718ad15e13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc7c891-8bee-4bea-ba19-670a66b3785d",
        "cursor": {
          "ref": "c930b78c-e999-4921-a492-ff178b82073c",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "baa7dd19-f81f-4d79-9868-04ab1331e297"
        },
        "item": {
          "id": "ddc7c891-8bee-4bea-ba19-670a66b3785d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "36520268-5527-4a42-86e7-4725bfb4665b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db61557-84eb-4627-b7a5-ba36a30e4dce",
        "cursor": {
          "ref": "4de83800-0208-4de9-a48b-6310e91c7c98",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7ec6943d-5124-450f-a6f7-f5ba00a72fbd"
        },
        "item": {
          "id": "8db61557-84eb-4627-b7a5-ba36a30e4dce",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e77886c2-a2f4-4f5a-84f1-4c6510350775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec5a9f2-e9a1-486a-8fd8-3e936fcad90c",
        "cursor": {
          "ref": "efd54d9f-9a7f-4891-ad86-23ce34f848db",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "71b7ee96-a395-4f65-a3e0-42f44107dade"
        },
        "item": {
          "id": "8ec5a9f2-e9a1-486a-8fd8-3e936fcad90c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d4033fac-ffc6-4fb2-b213-76c84a6fce37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00bfd47d-4801-4a99-9e29-39d6701847af",
        "cursor": {
          "ref": "3f3b41d8-8b96-40a5-a006-1935632c7e57",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2dd890a2-517f-4c9c-874d-ceeff938eaa5"
        },
        "item": {
          "id": "00bfd47d-4801-4a99-9e29-39d6701847af",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "89851919-8c7b-4ab9-b048-75d04b319eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14719d91-1df5-4df9-a30f-658bfce32aba",
        "cursor": {
          "ref": "4ef0f743-3564-4aa9-a14e-a1be869a3dc4",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5c7448c3-4df2-4f07-9b0a-7db18fb04f28"
        },
        "item": {
          "id": "14719d91-1df5-4df9-a30f-658bfce32aba",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "84253683-92df-4161-80db-2485292935c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "787fdb48-16d1-4bad-b24f-7509a57feb1f",
        "cursor": {
          "ref": "e7d3cc46-3ae5-481e-a202-a81c043940ef",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b64fb1f9-b5a6-49f6-9b29-385f08fe44b3"
        },
        "item": {
          "id": "787fdb48-16d1-4bad-b24f-7509a57feb1f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cb56d443-60b0-4af8-970e-ec18e9681a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f016dd-ba05-43e3-bd15-d5a2fca0b1f4",
        "cursor": {
          "ref": "3fc8b0f1-de57-4d3d-8727-854e1a41005e",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "dcc3c166-7952-4ecf-b70a-5d4ba0cc2045"
        },
        "item": {
          "id": "f6f016dd-ba05-43e3-bd15-d5a2fca0b1f4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "75ee528e-c8e7-4db9-aaf1-09538a9c905d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87415d9-9d87-4549-8b9d-f670a335f768",
        "cursor": {
          "ref": "1cbdd9c3-7551-488c-937f-a56decf29876",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ee4d1934-4afa-4468-95e9-61e913d36c19"
        },
        "item": {
          "id": "e87415d9-9d87-4549-8b9d-f670a335f768",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "117ed746-86db-4afa-af37-d58197d1f443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ba63b9-6eab-478f-b229-23a8eb4b2f3a",
        "cursor": {
          "ref": "bf37ee48-2f63-477f-a2ef-515f414c1a51",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "63007ef5-d82e-4d1c-8d27-99813fb6e10d"
        },
        "item": {
          "id": "d5ba63b9-6eab-478f-b229-23a8eb4b2f3a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ff327744-cb8a-4195-b49b-6c6a72f9491d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3145493a-6cc8-4ff8-b835-16793ac9d7aa",
        "cursor": {
          "ref": "47a1ded8-46e9-442a-b192-a89b46057944",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "eccf6761-6604-455b-9f33-087857ee6b7b"
        },
        "item": {
          "id": "3145493a-6cc8-4ff8-b835-16793ac9d7aa",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "62792604-d33c-44e9-8b64-1963182957fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd9123c-8995-4fc5-a8bb-3c1bc7680c7d",
        "cursor": {
          "ref": "747e1b7b-d3c1-4984-839c-9e8ab6d1a3c4",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7e8290b7-12ed-4654-9580-9a3850578497"
        },
        "item": {
          "id": "dfd9123c-8995-4fc5-a8bb-3c1bc7680c7d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "713cb953-a5a4-4d46-a26d-4662788f4987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1460bf-3650-4cb2-b81f-6da8d8d0dd77",
        "cursor": {
          "ref": "8aafdc31-247e-4f12-93a0-f16349be9012",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4441270d-90b5-4284-8b84-72aa17cc4a08"
        },
        "item": {
          "id": "2c1460bf-3650-4cb2-b81f-6da8d8d0dd77",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1bf1ceed-ee43-4dfa-9e1e-75b253a72816",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 108,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "fcd7ec2e-e7d9-42bc-b16d-d2327aa8f75a",
        "cursor": {
          "ref": "b108f09b-df1f-4aa0-b832-7e81a6f8fd40",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "01d913cb-8291-4f9e-8374-e912ae4add3d"
        },
        "item": {
          "id": "fcd7ec2e-e7d9-42bc-b16d-d2327aa8f75a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "40459795-3100-4f92-95fd-cbd555d42b91",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "7dd3eb40-54a0-4dd4-b9a7-611a00887b24",
        "cursor": {
          "ref": "30d96509-1653-4c84-84a3-9d6eb510e149",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b149356f-ca96-4269-be96-ebcfb1e7e10c"
        },
        "item": {
          "id": "7dd3eb40-54a0-4dd4-b9a7-611a00887b24",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e96fd4e5-0385-48d1-af8a-178f111c2f12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 105,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "0b26d942-7f20-4879-b6cc-b103c4688d94",
        "cursor": {
          "ref": "cad6640c-b0f8-47a7-a2fb-6853aec79f27",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "05f4efbf-abd5-4ad1-bcc1-87356e29f465"
        },
        "item": {
          "id": "0b26d942-7f20-4879-b6cc-b103c4688d94",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d086ce8e-d4f6-454d-9e9b-9fc11d23b15b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "9adc50c7-d6f8-4b38-abde-4fea3583100a",
        "cursor": {
          "ref": "30abddc8-b42f-4a94-8972-ddd62d52522a",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7f86f0a5-bc93-49b9-bbed-72bc9f51f946"
        },
        "item": {
          "id": "9adc50c7-d6f8-4b38-abde-4fea3583100a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "49a4b4c1-3511-47f8-8e17-432e92e19359",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ed1d74fe-59ce-424e-b6bc-59a995cb7dd0",
        "cursor": {
          "ref": "a60a0a61-0e0c-4cdd-996b-16b6e3c738b6",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a2e3ef4a-5e7a-4558-ab79-063f0950ac55"
        },
        "item": {
          "id": "ed1d74fe-59ce-424e-b6bc-59a995cb7dd0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e32cbf59-bb54-48e8-af36-dc0f3574d309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98576dc-6bb3-4b59-8d45-dd092f9a353b",
        "cursor": {
          "ref": "a2d7fff5-49e7-4a0b-8d34-25b2d388e320",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "757542f4-9313-470f-80b2-cd8ed934584b"
        },
        "item": {
          "id": "d98576dc-6bb3-4b59-8d45-dd092f9a353b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "34315877-9b30-4cb5-9f7e-2b967b18e319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06e26eb-981f-4216-bc32-84f4142ba1be",
        "cursor": {
          "ref": "cf5c4e4f-d5ba-4ef6-9cf1-a3d8e1b75cae",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "884f1816-a848-45fd-bb6a-b4725e497532"
        },
        "item": {
          "id": "b06e26eb-981f-4216-bc32-84f4142ba1be",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7de94059-b49e-43d2-b244-5087c5d177b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7160c12-3b9e-4549-9d45-7435bfcf9d9e",
        "cursor": {
          "ref": "43f9ca2d-1197-4987-97f0-a99494994772",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4cf3a7aa-ef16-4a85-b262-05f76e53b5ef"
        },
        "item": {
          "id": "a7160c12-3b9e-4549-9d45-7435bfcf9d9e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "474a24fb-a0a0-4643-94c0-c3917e3cae54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8190e6db-0b2a-4e3f-b5cb-20f72f9196e0",
        "cursor": {
          "ref": "7a6eeafc-1ca6-4519-bee0-5a34d44cd232",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "96dce1ac-0a55-4bd6-8808-f18075a3eb2c"
        },
        "item": {
          "id": "8190e6db-0b2a-4e3f-b5cb-20f72f9196e0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "915aaaea-0f46-4b2f-901a-6dbab5996b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08bc854-f4d0-4d1e-b8ad-a2b844cdcfd7",
        "cursor": {
          "ref": "111d2efc-acb2-4337-9f46-9ca8a17d53bd",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d1b6101f-1f6b-470d-a9a9-127e85d7ed55"
        },
        "item": {
          "id": "a08bc854-f4d0-4d1e-b8ad-a2b844cdcfd7",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6efd868f-5d02-4c71-800f-c8d82c2a6338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34f7148-cfae-425c-a4f0-835fb12c643c",
        "cursor": {
          "ref": "25cd3ace-b37a-4735-ae49-00611944dfb6",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "db40b457-495b-4cd7-8d66-fee8aa6f11b6"
        },
        "item": {
          "id": "e34f7148-cfae-425c-a4f0-835fb12c643c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b98d160e-4ae7-4d7f-b5f2-706005de89d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da7781e-32d4-4c9e-9127-d4db83e3c7bc",
        "cursor": {
          "ref": "1add4f6c-018f-4843-b3ed-e84492b0c0c4",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e5c96316-641e-404a-8e9f-50358c36925f"
        },
        "item": {
          "id": "1da7781e-32d4-4c9e-9127-d4db83e3c7bc",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c18a5381-77bb-4090-adc1-d2fcccacdb3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389b3934-26a2-4306-b68e-26bdd1396cc8",
        "cursor": {
          "ref": "6dc3d17b-a745-4d51-8e38-6434b29718e0",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "abbd6d38-619f-4d86-95b7-1189445dc04d"
        },
        "item": {
          "id": "389b3934-26a2-4306-b68e-26bdd1396cc8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b62a367c-9ffe-4280-ba63-6018342879ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c2665c-5aa0-4189-bb4f-a2fdf5962c16",
        "cursor": {
          "ref": "de88b191-0980-4ab3-a4de-ace554b19fa5",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "01da2f29-e9c3-4e28-8edc-01f61f322840"
        },
        "item": {
          "id": "35c2665c-5aa0-4189-bb4f-a2fdf5962c16",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "025fdb0d-37a0-499f-8272-d7fc15163bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911ef3ba-5ae2-4814-9ebc-9d91806617cc",
        "cursor": {
          "ref": "68b27edb-1ca1-471c-baf4-ee1a5eee7fc2",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "89854780-e807-495b-857c-6a05459999e7"
        },
        "item": {
          "id": "911ef3ba-5ae2-4814-9ebc-9d91806617cc",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2937f688-eeee-4ef8-b5b8-e44bca6fdcf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2d9bc4-9991-48e6-b696-7bae4e82845a",
        "cursor": {
          "ref": "8b097a7f-a721-4b9e-8f23-1a8514a8c428",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a401bb45-b76e-4d65-9f45-462d8cca49b2"
        },
        "item": {
          "id": "be2d9bc4-9991-48e6-b696-7bae4e82845a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1080cd82-413d-4b6a-b54e-9f5e9dff0837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d90afe3-beba-4643-a646-8193693a5a90",
        "cursor": {
          "ref": "6c9233d3-d830-4dfb-a684-27103ac2156e",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b4f3ff31-6818-445c-ae20-b3332d6da946"
        },
        "item": {
          "id": "8d90afe3-beba-4643-a646-8193693a5a90",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "74a23e8b-ce63-462e-87a6-626ae0766e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d648e7-5418-4347-ae51-ded5e27afa7a",
        "cursor": {
          "ref": "b252bddc-6ac8-431d-ac1a-c1edaf98681c",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "16918540-ff93-4cf0-88b3-6829cb313d15"
        },
        "item": {
          "id": "57d648e7-5418-4347-ae51-ded5e27afa7a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "aaea85f8-54f7-4f80-90b4-385ebe567c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60671998-9ddb-49eb-9f9c-1006d3b31493",
        "cursor": {
          "ref": "2408844d-cac1-41e9-be4e-815533a61dac",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fcccee2b-b0ad-4443-a84a-8182876025d3"
        },
        "item": {
          "id": "60671998-9ddb-49eb-9f9c-1006d3b31493",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "97b4aee9-94cc-4189-8b53-146317b40f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ccef6b-2a83-4019-9b2f-28454bc2867b",
        "cursor": {
          "ref": "658c3ce5-3dfa-40a7-8b2e-d4c99b3c7635",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0c2b257f-c246-4362-9717-f44a3c523f84"
        },
        "item": {
          "id": "25ccef6b-2a83-4019-9b2f-28454bc2867b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b47ef98f-c7a2-4395-ba7a-14f05d4afaaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02b1a01-08ac-4016-8800-774f7d6d190b",
        "cursor": {
          "ref": "2f394b97-4432-4069-b66b-24e5cf91fef9",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ccfc97dc-98f4-402b-a198-5c65d5e1eaa3"
        },
        "item": {
          "id": "a02b1a01-08ac-4016-8800-774f7d6d190b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e01a4dce-7993-4ad1-a4ce-02d57bb4373a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9314bf-7ce3-4cbd-811a-79392083aff1",
        "cursor": {
          "ref": "93fa2ead-f296-446e-bef7-580d0a5c2347",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "acf71225-ed47-4c52-be69-4018b2a25a11"
        },
        "item": {
          "id": "8f9314bf-7ce3-4cbd-811a-79392083aff1",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "fa324434-affc-40a6-8618-f33d111383d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024c2b97-24ad-4ecd-8ff4-d6fa8155f9ef",
        "cursor": {
          "ref": "05192a3d-afa9-4eeb-9269-cef166d52b04",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "db014246-3ae1-43db-81c2-fa7ee7662953"
        },
        "item": {
          "id": "024c2b97-24ad-4ecd-8ff4-d6fa8155f9ef",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f8707763-6928-48d2-8aaf-893345cf2cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02d6187-363e-417b-bdd1-086234d537b2",
        "cursor": {
          "ref": "94cc791a-0b19-43e5-9022-07192e728a40",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b3d73505-d265-4eee-8b25-240ee52e3fc0"
        },
        "item": {
          "id": "c02d6187-363e-417b-bdd1-086234d537b2",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "fd5e0b1a-38f5-4274-9063-e1a8148b088c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac68dde3-2b55-478a-86a7-1ebfde7fe7ec",
        "cursor": {
          "ref": "a6c59922-38e8-4eb0-ac00-98af258d7fc2",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "bb9e3ccf-43f8-46b2-81d3-0682d14005db"
        },
        "item": {
          "id": "ac68dde3-2b55-478a-86a7-1ebfde7fe7ec",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a91fa3ad-c8ee-43ca-9727-920cbfa55637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e57700-16e8-486b-aafd-0219e6987e42",
        "cursor": {
          "ref": "05d6dc2e-3918-4896-afb5-231b01cce33a",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d80cf1f4-5740-4d16-b869-9dbdd7abfa0d"
        },
        "item": {
          "id": "05e57700-16e8-486b-aafd-0219e6987e42",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c0053397-f00d-4ea5-bb93-bf946f0fc30e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a12ebe2e-d03e-4cf9-b0da-97631c171692",
        "cursor": {
          "ref": "eba9183e-628d-4970-a405-2ebc9f7db9ee",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a4589000-2d3e-4156-af63-a6d0ba6adad7"
        },
        "item": {
          "id": "a12ebe2e-d03e-4cf9-b0da-97631c171692",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "673fa94b-f623-4728-8775-dbd899a92c47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65c5678-0ab6-45ac-b1fa-6df0ad83997a",
        "cursor": {
          "ref": "6713edf2-86b8-4742-ba99-c4f3cc4270bf",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d969d786-125e-4a95-a6e3-9295f65887b8"
        },
        "item": {
          "id": "d65c5678-0ab6-45ac-b1fa-6df0ad83997a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9ebcef80-be5f-4522-a3c9-aa89e750cc46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48bedda-587d-49f7-b5ce-536b85e3dc31",
        "cursor": {
          "ref": "0b168089-4e61-46a2-bcd6-1c0512d0d346",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "137b3c46-6f0f-4a31-aaed-efdd1b47e17f"
        },
        "item": {
          "id": "d48bedda-587d-49f7-b5ce-536b85e3dc31",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3ffde0ba-1030-46d7-a2bd-ef5951d3e6f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f1cb87a-009d-42e5-98be-a87d16b84850",
        "cursor": {
          "ref": "15ab1815-84a7-4c26-90c9-79612b3be384",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ae797d62-604f-40f7-a299-b4a00568b452"
        },
        "item": {
          "id": "5f1cb87a-009d-42e5-98be-a87d16b84850",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "cda6342f-be61-4a77-a83f-6f8d8b97349a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7559fe1-c023-4b0f-aca8-5e3ef770cd85",
        "cursor": {
          "ref": "bea75371-a616-49d4-bb6a-c53b84b615b9",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "1f418948-b792-4f62-9107-5737c72c01ac"
        },
        "item": {
          "id": "d7559fe1-c023-4b0f-aca8-5e3ef770cd85",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "39acc5b6-5414-49c7-8fdf-f1428316821c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c68f606-2b5a-4ad7-bf6e-2a1de823ed6d",
        "cursor": {
          "ref": "ac3fbd74-21cc-404b-ab92-26dc8e198d11",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "88cddd17-3866-44df-a27b-61b57caca22c"
        },
        "item": {
          "id": "7c68f606-2b5a-4ad7-bf6e-2a1de823ed6d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "56089745-3e7f-4e8a-933e-bb59ebadbe2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7028dd4d-9d68-4a7e-aa4b-805dca47ac07",
        "cursor": {
          "ref": "4840f676-a789-4151-8dbb-ceffc72f1e34",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "89ed9ee6-4ab4-4e43-9ebb-cde57108b82d"
        },
        "item": {
          "id": "7028dd4d-9d68-4a7e-aa4b-805dca47ac07",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "77b7d740-c930-48a2-8294-3d85e7dbd590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e359db-7317-4eef-9262-03d159d3a295",
        "cursor": {
          "ref": "9a163a6c-c922-4b14-b84b-5eecac4372b7",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1c771ed9-5766-4700-8bb0-1097a3872800"
        },
        "item": {
          "id": "f1e359db-7317-4eef-9262-03d159d3a295",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b349a94e-21e5-4c6e-af9b-24a29dd04190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef66f16d-92ac-4c7a-9d00-711e02cce36a",
        "cursor": {
          "ref": "4da53afe-e99f-4ae6-9bd0-e030bfeb6cab",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c18c2101-6991-4f7a-8315-2857919d21f4"
        },
        "item": {
          "id": "ef66f16d-92ac-4c7a-9d00-711e02cce36a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1ca9a937-066e-4043-83fd-795d93faacd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2883d8-7f86-4235-b4bc-19b3ea65c0b4",
        "cursor": {
          "ref": "1dec51c5-ada7-4ba3-8541-4b46745e3d41",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "704c5558-5a45-4c58-8600-bc44a5dbecfd"
        },
        "item": {
          "id": "6f2883d8-7f86-4235-b4bc-19b3ea65c0b4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "82ecc668-93a8-408b-bce3-34aaf8e2dfbe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc70317-8c58-4bcc-9629-9fd83c7700ae",
        "cursor": {
          "ref": "29f878bf-7acb-4e1e-a52c-b2aadd1c793d",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "38179211-e0e7-4d8f-b33a-ea32bda0ae5a"
        },
        "item": {
          "id": "fdc70317-8c58-4bcc-9629-9fd83c7700ae",
          "name": "credentials_issue"
        },
        "response": {
          "id": "85c57c8a-44c9-4243-8d59-c0763fd1d379",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          }
        ]
      },
      {
        "id": "b3e5b4ac-c25b-4868-bafe-49e81d21003f",
        "cursor": {
          "ref": "e7744f09-5ed4-4057-a21e-4a0877fe785d",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9ffe43d3-41c2-4bd1-9b0b-be7c2a2bafca"
        },
        "item": {
          "id": "b3e5b4ac-c25b-4868-bafe-49e81d21003f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "09085261-75b3-4335-b12d-52a8a65d8240",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "c6fefeca-7e11-4dc8-98b2-c2b0fda74743",
        "cursor": {
          "ref": "bf2735f0-516b-40eb-a254-db01908d2e9e",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f5e27cd1-8a15-4584-ab81-9d878b3e32b3"
        },
        "item": {
          "id": "c6fefeca-7e11-4dc8-98b2-c2b0fda74743",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3ce4f57a-558c-4643-a1e3-007a4e4e48a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "d7427422-8e4d-4c27-b781-55db00374115",
        "cursor": {
          "ref": "86e70085-fa58-4e46-9824-7abcc625bd67",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "10332624-e8bc-4cbf-b7cd-ddd7ec2754a3"
        },
        "item": {
          "id": "d7427422-8e4d-4c27-b781-55db00374115",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "fadfe3a3-8d9f-45ee-9ba3-750cfd3d838c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "8520ddec-f511-43c0-afda-c49966f61cb5",
        "cursor": {
          "ref": "73ccd972-6da7-4990-9f3b-adf8df57dd22",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7b33a185-dee8-4e5f-b720-2da0db2afadc"
        },
        "item": {
          "id": "8520ddec-f511-43c0-afda-c49966f61cb5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1d562cb4-3b6d-453f-bd8b-be77c2d5c397",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "4160ab26-fe2f-4805-bdc0-a2e398d0989f",
        "cursor": {
          "ref": "300b0298-1f5f-4fb8-894e-ea85b5e08f5c",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "142be9c2-c39b-44fc-8cb7-2004e006f212"
        },
        "item": {
          "id": "4160ab26-fe2f-4805-bdc0-a2e398d0989f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b88a45c4-e354-4569-a936-cbee087f085d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "c0ab3e44-0f6e-45fd-9122-88dfdd50750c",
        "cursor": {
          "ref": "65375123-8361-4ba3-90bc-70365f687e03",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "97008817-9bed-4a8e-8694-41bc74cf8aa4"
        },
        "item": {
          "id": "c0ab3e44-0f6e-45fd-9122-88dfdd50750c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3bb4267e-fead-4c83-babb-353e38606748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44781ede-1a7f-4391-a316-0cba95fe47f0",
        "cursor": {
          "ref": "d0b14fcc-1687-40a9-84a5-3a918eea75a2",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "69d632b3-af35-4aa0-9c36-a34bd43b0052"
        },
        "item": {
          "id": "44781ede-1a7f-4391-a316-0cba95fe47f0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "29655125-f05a-4e3b-ba11-bc2b942d02a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2454499-f7d6-498e-bf23-7222111e2ca3",
        "cursor": {
          "ref": "84352c46-f24c-4a9f-acf3-b65bb645fbab",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d73e60ce-5854-4eb9-aca5-4ce76124073e"
        },
        "item": {
          "id": "f2454499-f7d6-498e-bf23-7222111e2ca3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5e2aeed4-9f7f-4da0-9c58-b8bbbc33c853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6a512b-4609-4884-bee2-3d67135f3cfd",
        "cursor": {
          "ref": "0f7b33b0-b681-4a4f-827b-fc2f55895325",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "786e3779-61de-4860-bdc3-152ec98e0ffc"
        },
        "item": {
          "id": "8c6a512b-4609-4884-bee2-3d67135f3cfd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f41f5ea9-0ccf-493d-89a7-762beff8e87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb304c2-b1ea-4619-b57c-e11bb700fee8",
        "cursor": {
          "ref": "7802abbf-13e1-4dd9-9d14-0a562cfd91a9",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ffe0db0f-2302-44d8-ab39-6d2bf9001485"
        },
        "item": {
          "id": "afb304c2-b1ea-4619-b57c-e11bb700fee8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8b4efbd6-0f8a-4485-bfff-33add00dcd6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7743164f-e1af-43d0-a5a5-1450dc8f630a",
        "cursor": {
          "ref": "6c3c2b9b-d53d-4758-b5ab-e82a95ed83d3",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f7671254-f6c6-4b41-8a25-ae231f8ebbc1"
        },
        "item": {
          "id": "7743164f-e1af-43d0-a5a5-1450dc8f630a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a74a26a4-5734-49f0-987b-395920048a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb5297f-68de-485b-97d4-6059772d202c",
        "cursor": {
          "ref": "8022379a-2c41-4155-8d30-817c437aee3b",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e611e5b5-62bf-44a7-b6d8-255a7208afdd"
        },
        "item": {
          "id": "9eb5297f-68de-485b-97d4-6059772d202c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d184b042-3123-4a1a-9092-dde680f180b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05dddec6-fe89-41ee-bf8f-2aaff146d50b",
        "cursor": {
          "ref": "010e6df0-6353-416c-a097-98550807375e",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "dee5666b-0ae2-46bd-89ec-8c2968a94318"
        },
        "item": {
          "id": "05dddec6-fe89-41ee-bf8f-2aaff146d50b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "55a472ad-95c7-4f1c-aeb9-e1e654d10f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "257b5c66-7e7d-4e1b-97b7-4289ecdd61be",
        "cursor": {
          "ref": "4c081653-2796-41ac-9f4a-7a038ea25e20",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "80d74fd0-254b-4d8b-b204-cc33e0fd071a"
        },
        "item": {
          "id": "257b5c66-7e7d-4e1b-97b7-4289ecdd61be",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b151caaa-1b2e-41c5-bdff-90afb8639b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a69fefc-8389-42fe-9cc1-db97257f07da",
        "cursor": {
          "ref": "e56a5b96-4b34-4213-b4d5-ebc05013d388",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2509ebea-e7c8-416e-bdd4-3dad506c4e25"
        },
        "item": {
          "id": "5a69fefc-8389-42fe-9cc1-db97257f07da",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "47f26495-ad54-4528-a1b6-585e0834e79f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3f8ad3-7d1a-4538-a6d9-c6833756b216",
        "cursor": {
          "ref": "a00bebc3-e8e9-4419-af24-c97655c024db",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a3abac64-51a2-47a9-b754-207088caa7bb"
        },
        "item": {
          "id": "2a3f8ad3-7d1a-4538-a6d9-c6833756b216",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f5a47a4a-4207-4602-8822-0b171ea7b82b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1362a97d-24ca-416a-9c5c-98781378d884",
        "cursor": {
          "ref": "344e8313-9e18-43e3-868e-f79e720181ea",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f24f5e9b-69e7-47fb-a302-b5259151d2a2"
        },
        "item": {
          "id": "1362a97d-24ca-416a-9c5c-98781378d884",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "939998b5-3b03-4f02-85e8-8c5d42fa82d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad737802-480b-4fd4-8d23-614e4d215e08",
        "cursor": {
          "ref": "950505ee-801b-4c5f-b45a-27c900826d96",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d3e69cd2-285d-4372-9a98-01df5d30df06"
        },
        "item": {
          "id": "ad737802-480b-4fd4-8d23-614e4d215e08",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a4b2df7c-1bb3-4dd5-9e46-166e134f13aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa5f3486-65de-414e-8f9c-ebc8f9495a79",
        "cursor": {
          "ref": "f7fc7a78-1864-46f4-9bd8-2f1d7b5a5233",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "744d2723-a8a9-4358-9199-a4ad1a649bce"
        },
        "item": {
          "id": "fa5f3486-65de-414e-8f9c-ebc8f9495a79",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5dbf8324-da47-4d7c-ad9a-50793217c29b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45581b56-1cc0-4f73-8514-9d9be512fbc9",
        "cursor": {
          "ref": "399fa7c1-2b4b-423e-bd52-dfd44737792e",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8653b618-743d-434a-8c53-8b6497c2d1a3"
        },
        "item": {
          "id": "45581b56-1cc0-4f73-8514-9d9be512fbc9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "414697a0-5950-4a54-8fa7-94ae209759d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db623203-26ed-4c90-9dfd-8e2c0ca259ec",
        "cursor": {
          "ref": "c7b8b3ed-7c7a-44c7-8bca-ca6af0bdf130",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0570e4d6-f3fe-4cb7-bf74-40550b38c44f"
        },
        "item": {
          "id": "db623203-26ed-4c90-9dfd-8e2c0ca259ec",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6a4bec84-72ad-42cf-8b69-a7d25c78edc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df51f8c-8c98-42d6-ae78-a67522b3475c",
        "cursor": {
          "ref": "32ba33c4-669a-486d-a7bd-5957a042d671",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9895bb6e-4282-4f2d-9c43-45d768a65005"
        },
        "item": {
          "id": "1df51f8c-8c98-42d6-ae78-a67522b3475c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6c26adab-a1a3-4c2c-ab01-372c95cedd2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "debf3e98-a43c-43bc-b0f7-15f61f0135a8",
        "cursor": {
          "ref": "e08a2191-3723-465d-a881-0cf8673c7d36",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "bc0ed8e7-94cf-4d07-80e9-fca5281e5b09"
        },
        "item": {
          "id": "debf3e98-a43c-43bc-b0f7-15f61f0135a8",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "278c7679-40b9-4849-98b1-82a76e96a9e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24644966-146a-4259-a0de-717804c1e419",
        "cursor": {
          "ref": "5a81140b-16b1-4da2-9d7c-c8781af0c145",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "372aa21f-b3be-4597-94c0-2a594f229334"
        },
        "item": {
          "id": "24644966-146a-4259-a0de-717804c1e419",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bec06ee3-a9c6-4333-8a29-01c7c071bee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e06a96-88e2-4c4a-87d2-ce3e0da3e1b4",
        "cursor": {
          "ref": "6d2de9b7-74a1-456b-ae65-0f8aa8a13d1b",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f4d262a3-6a07-45d2-847b-c5f085f8016a"
        },
        "item": {
          "id": "03e06a96-88e2-4c4a-87d2-ce3e0da3e1b4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8a48bafb-80cf-4fd1-8f97-80912d193fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5840b5f0-f1b0-488e-9b78-9a23fff96daf",
        "cursor": {
          "ref": "ec4630b8-cf7e-46f2-9145-37ad29b6621f",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "43ef2ff6-0396-4a1b-addd-a24c90dcf00b"
        },
        "item": {
          "id": "5840b5f0-f1b0-488e-9b78-9a23fff96daf",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3e9f2d17-9f22-45ae-b792-64359fb27289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da708a9e-87ba-4162-9efe-c77b5ce8c829",
        "cursor": {
          "ref": "aa41bf2f-bb68-4f7e-b55d-3cf0d32dedba",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0179cc00-d2a1-45a4-bf86-43d199afd35e"
        },
        "item": {
          "id": "da708a9e-87ba-4162-9efe-c77b5ce8c829",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "72b86cbd-085a-46e1-a8f4-a1dd78675440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b12363-d36c-4cbf-bc20-38cfb3be60cf",
        "cursor": {
          "ref": "4fff6284-f9ff-41a1-aeb0-b40a25059b80",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b36d5386-9462-467d-84ba-f17af47c0b99"
        },
        "item": {
          "id": "72b12363-d36c-4cbf-bc20-38cfb3be60cf",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "10ad202d-eed2-4835-8b3c-e0d39738bdce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae440be-768e-4aff-a043-09efca9efa72",
        "cursor": {
          "ref": "33e505f3-82fe-4ad0-a262-7d6ac0f5f33f",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6ab681d6-35ca-4f8b-8a20-63abf67aa448"
        },
        "item": {
          "id": "dae440be-768e-4aff-a043-09efca9efa72",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1a8d1a43-5dd5-4f9a-8edc-a5f8dc989a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef705715-3afa-49f2-bfef-47477f191942",
        "cursor": {
          "ref": "1a4c9c0a-d0e5-4fe7-b652-757e7fe354d4",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "851f6d5f-8c43-4d72-9ca7-418c56b67adc"
        },
        "item": {
          "id": "ef705715-3afa-49f2-bfef-47477f191942",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "86778ced-27a2-4a9e-b48d-6a17b69011a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a6a8f15-cab7-4d41-a58a-cabb77bb982f",
        "cursor": {
          "ref": "98bbfe11-4c6b-44b3-a546-6e6cc491090f",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "45be2af4-69a8-4f67-9644-a9d2362e63b9"
        },
        "item": {
          "id": "7a6a8f15-cab7-4d41-a58a-cabb77bb982f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "295688e2-0d67-4832-848d-bf1b9da00d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10637400-aad2-4690-b390-c5247ba1fa59",
        "cursor": {
          "ref": "e77a30d4-fa1c-4582-b775-5514b34c0037",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "58c0f3f3-8618-448e-911b-26eb4dadcd35"
        },
        "item": {
          "id": "10637400-aad2-4690-b390-c5247ba1fa59",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "477b20a9-e66b-422d-b0f1-82f216a44c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e37a5f-ff61-4deb-9587-470f884dcd40",
        "cursor": {
          "ref": "71f7f2ef-24cd-45d2-9d12-677446017dfe",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f54e03ec-5ce1-4482-84c8-d5908d06263c"
        },
        "item": {
          "id": "57e37a5f-ff61-4deb-9587-470f884dcd40",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "94cfbb16-b596-4047-83d4-798fd08e3cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea95727-add0-4dca-8aaf-edaa226b53b4",
        "cursor": {
          "ref": "c6751798-d5ec-471e-b8aa-5bc011a0be37",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f038bbac-c60e-4768-ac22-9b2d27ec16ac"
        },
        "item": {
          "id": "7ea95727-add0-4dca-8aaf-edaa226b53b4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3992d8bb-2ef4-44c4-963c-6aa82b68c138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4b9246c-489b-4c46-aa85-e3a6165f4849",
        "cursor": {
          "ref": "82dd61ca-3139-4b46-bd2a-f72c42b574bc",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3e27586d-b899-45b1-b6e8-b89a212edf07"
        },
        "item": {
          "id": "f4b9246c-489b-4c46-aa85-e3a6165f4849",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6d0cede7-a9ad-4a22-acc9-c9ae3ce4da32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45cf3989-de42-434f-8a5c-c9ad34820e05",
        "cursor": {
          "ref": "7c9f9eb6-ea17-4216-975d-878d546a6adf",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d8cc79b1-afd9-4bfa-8fb1-c6347a81e66e"
        },
        "item": {
          "id": "45cf3989-de42-434f-8a5c-c9ad34820e05",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "284de5b5-f76e-48d6-9e1b-979adcda8d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a689ff-cc7f-4b58-969f-27b05aa4b1af",
        "cursor": {
          "ref": "9d4850a9-8375-42c3-87d6-bd8bbc36664b",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "01c97c32-b744-4f9f-b4f8-25736a8b0333"
        },
        "item": {
          "id": "67a689ff-cc7f-4b58-969f-27b05aa4b1af",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "df849d86-6b36-4cb5-9e18-fc4b6deb91e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b59956-4679-4e8f-9184-36f096d41a6e",
        "cursor": {
          "ref": "48809556-2d66-4585-89e0-06a99a8bec16",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f1dc3d0b-a4b6-4d0b-8f52-98a6242b8263"
        },
        "item": {
          "id": "28b59956-4679-4e8f-9184-36f096d41a6e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e8fbf0c7-4851-4cc1-93ee-ab644bb54185",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ba2c4d-87e9-4a60-8783-ca8f36139243",
        "cursor": {
          "ref": "e3311293-c71e-4bb3-b876-d194bc65bbe0",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1e1b2dc0-8d5b-43b5-bc39-369d56296489"
        },
        "item": {
          "id": "23ba2c4d-87e9-4a60-8783-ca8f36139243",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5f8b43b8-fb1c-4789-b4ab-da6bbac71dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f66fe2d-ba6d-4aa5-bae4-7c7fba8691a1",
        "cursor": {
          "ref": "ec27a0e9-dec1-4d43-8f76-52e38c4783e0",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "509de264-f690-4061-bf2d-3253f19585cb"
        },
        "item": {
          "id": "3f66fe2d-ba6d-4aa5-bae4-7c7fba8691a1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c332fe2b-ebf7-4a21-81ad-77dcfeed1265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f18b0db-1ce1-494b-a0fb-2c561c47be3e",
        "cursor": {
          "ref": "669490d3-52e7-411a-aab6-dfd788766ce8",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "bb6a6dc1-d478-4323-948d-012d92515e95"
        },
        "item": {
          "id": "7f18b0db-1ce1-494b-a0fb-2c561c47be3e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b36c8f5b-fbd5-4e22-89ba-114c7517f2bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3067fc-5770-4ed0-a360-54214a0f916d",
        "cursor": {
          "ref": "df058650-f071-4004-9b75-8ce8ed365164",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2c07c7fd-11cf-4d8a-b8aa-c0493faafd15"
        },
        "item": {
          "id": "2a3067fc-5770-4ed0-a360-54214a0f916d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "dcd70b7a-b324-4253-a42a-c44237fbd766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa038d6-d2b9-498a-87d7-498b16a220e8",
        "cursor": {
          "ref": "657f6b3a-ee7a-4b6f-91de-78f7ebb2040c",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "cd5d95f5-1d4b-4924-90d1-d921ff7736e5"
        },
        "item": {
          "id": "6fa038d6-d2b9-498a-87d7-498b16a220e8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2f81570c-b122-429f-a402-2ead1177fb86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5232ff08-fb96-4f50-b3fa-531028ded501",
        "cursor": {
          "ref": "cd1bc08e-6c6d-4404-87ec-8959ce20b42f",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "68199722-7428-458d-b154-b4d537e18033"
        },
        "item": {
          "id": "5232ff08-fb96-4f50-b3fa-531028ded501",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "74521ae0-27fe-43ec-b884-ae0960391829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eef7d5c-c2b8-4271-899e-862bd59858fc",
        "cursor": {
          "ref": "d011b64f-c67c-479b-bf4f-38d5f026e55b",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "cefa7870-1651-47ad-9d86-57705dd45352"
        },
        "item": {
          "id": "2eef7d5c-c2b8-4271-899e-862bd59858fc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ff927b17-e9d5-4581-a651-e604df69660c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b10e7f5-d198-43b8-a407-52a5bf178a2a",
        "cursor": {
          "ref": "3bc02a2e-6bdd-4e16-8b36-510fa844a039",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "333516c1-1783-4c44-b4c9-79562b35dfe5"
        },
        "item": {
          "id": "2b10e7f5-d198-43b8-a407-52a5bf178a2a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "14297d71-5ae0-4fa2-bbb8-03c995951a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "095f6a32-efe9-455f-b1cd-8748e39337a7",
        "cursor": {
          "ref": "c49af9b9-978f-4421-887f-0ec32f630ba1",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5b16f92e-2c78-4e7b-ac58-56d9b62c24ff"
        },
        "item": {
          "id": "095f6a32-efe9-455f-b1cd-8748e39337a7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "76dc8ee5-ec58-46cc-9aac-052a66b6f6b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e88260-04a7-494a-8204-b46ac3dcdc6f",
        "cursor": {
          "ref": "bb80d2cf-d892-45ed-a709-a154542c4fba",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "59508b71-0411-47c3-9fbf-c7394661281f"
        },
        "item": {
          "id": "d3e88260-04a7-494a-8204-b46ac3dcdc6f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ff5d2e9e-f585-448c-8b97-ea6953f9d6b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db36ad3-f4bd-4c28-a9d4-dc85cc88ed2c",
        "cursor": {
          "ref": "83840805-e487-4d55-993c-b24b889a5b16",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c6e29f15-6dad-4fb9-9167-6d2cf58c082d"
        },
        "item": {
          "id": "5db36ad3-f4bd-4c28-a9d4-dc85cc88ed2c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fe98e767-2c84-4d45-ad2d-c1f8ffe03ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa30072d-c6ec-4c11-924d-f5406360ee53",
        "cursor": {
          "ref": "87b5b3b5-74d6-4faa-9984-186b1d49fff8",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a061f5e7-7cb1-42de-a431-12d33df7489c"
        },
        "item": {
          "id": "aa30072d-c6ec-4c11-924d-f5406360ee53",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6ba8ac38-4b83-43b2-9742-751d9f0b290e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f72c06-4f51-4845-baef-eda09c8281e3",
        "cursor": {
          "ref": "5739e83d-91a5-4db6-8355-2ed515fc2a74",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "3dbaf84b-076f-4290-b68a-4fccf68380c9"
        },
        "item": {
          "id": "63f72c06-4f51-4845-baef-eda09c8281e3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e0b5c494-518a-419f-a349-67734a1e13d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd537452-14f6-4b10-bacc-c48d8592f5e5",
        "cursor": {
          "ref": "dcc856c1-948b-4d20-adaa-c469cdfac5c3",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f8ecf171-aa01-46fe-9315-b41961f167d2"
        },
        "item": {
          "id": "dd537452-14f6-4b10-bacc-c48d8592f5e5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c53107d3-bd4a-4b1c-b722-11e6fda752d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6a19a6-4286-4b93-9b0b-12773cdcfa4f",
        "cursor": {
          "ref": "9f37d56a-f1c4-4eef-94bf-7e5cade7f994",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b115a48d-9cba-40b4-a734-5d9cddc2f98e"
        },
        "item": {
          "id": "9f6a19a6-4286-4b93-9b0b-12773cdcfa4f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1c0e8bf2-7e0c-46c9-8f39-53d783d71efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e5cc5b-84b7-4ea7-9c95-3af5b192586d",
        "cursor": {
          "ref": "61dbf36c-f95c-44c8-abdf-cdf6757aa915",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "da7b21f1-ffd4-436b-951d-7699c2f69c55"
        },
        "item": {
          "id": "e2e5cc5b-84b7-4ea7-9c95-3af5b192586d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f24d53f1-cf0d-478d-a09d-c04913b73d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf9aae7-f135-4910-a82d-a4577f0a606a",
        "cursor": {
          "ref": "292e797a-3591-48c3-a8e3-7f1bf653cd53",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "420a3ced-420f-4ffc-b31d-58bc3c9a42c8"
        },
        "item": {
          "id": "7cf9aae7-f135-4910-a82d-a4577f0a606a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "da0d8dc4-3fc8-4f2e-a736-cdd619d14da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8a8515-774e-4ba3-b96a-f088ea52ca8a",
        "cursor": {
          "ref": "f10c5bdf-b88f-4d02-a8be-c3b7da2c161b",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "efdc7f5b-ac65-47dc-abf6-06fcf4f946a6"
        },
        "item": {
          "id": "9e8a8515-774e-4ba3-b96a-f088ea52ca8a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "40b1ec0f-ddf7-4778-b2ba-e7214fc85261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170c8bd0-aa79-4510-bcc5-4ea6104ad80b",
        "cursor": {
          "ref": "c25642b7-9067-4a7d-93c5-794ed52ee2e0",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "360aa22d-1b28-4784-92ec-6babad8d21bf"
        },
        "item": {
          "id": "170c8bd0-aa79-4510-bcc5-4ea6104ad80b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f596bdd7-0802-4aae-9bc0-6b20ce979e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "632c4d1d-f921-4d1a-8d52-7fa39c0eb7e9",
        "cursor": {
          "ref": "875cfa60-6bcc-4bb8-bfa0-f7a733e55307",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "98619090-244e-4ba0-8e7c-8bdd42f9e05c"
        },
        "item": {
          "id": "632c4d1d-f921-4d1a-8d52-7fa39c0eb7e9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "399ee77b-66cc-4bf7-a53b-5752d0593be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "677876e9-b460-4e71-8fad-005fe180c2bf",
        "cursor": {
          "ref": "3c0e07cd-afcd-4448-9cc8-601ba4c66842",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "10844cce-3cbd-4904-aaf5-9d39c4c02575"
        },
        "item": {
          "id": "677876e9-b460-4e71-8fad-005fe180c2bf",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f9bb010a-2c73-4bd8-bb8c-179a8e4758da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d93623-69bf-457d-83ac-dba360d6cbf5",
        "cursor": {
          "ref": "f40eb155-692b-4c59-b976-f5c788bf2b0c",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6c6ddcc8-3659-4f76-9983-a18e54c9421b"
        },
        "item": {
          "id": "e9d93623-69bf-457d-83ac-dba360d6cbf5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f035742c-cd56-4deb-b7be-b5ca0dde8037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697df171-4d1e-443a-913d-e3cb6dd73562",
        "cursor": {
          "ref": "756811fe-125d-44c7-b5b5-eaad80ec738c",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5cf8c75f-d53a-4d4c-8829-e10f3fede607"
        },
        "item": {
          "id": "697df171-4d1e-443a-913d-e3cb6dd73562",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c32dc181-172c-48ae-8588-48a7a6dc8f2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c55b4b99-22bf-4afd-8f3c-fd8bb03b04df",
        "cursor": {
          "ref": "c907f048-d72c-4d58-b2e9-37c4ee131e14",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e22c6646-30f4-481e-a5ed-319f6a9ded39"
        },
        "item": {
          "id": "c55b4b99-22bf-4afd-8f3c-fd8bb03b04df",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "026e712a-a5c2-443b-b007-86b47e7c70c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0fac17-77d0-46c2-930d-397c1b0d202e",
        "cursor": {
          "ref": "d6116e2c-08a9-44a6-94d1-86b7fb4f6fea",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "962d88ad-f4a3-439b-88fa-80667d0611d0"
        },
        "item": {
          "id": "0c0fac17-77d0-46c2-930d-397c1b0d202e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "08d203ab-5e0a-49ec-ba33-464e8d1ca8e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ce569a-3799-423a-96db-31be8e8aeb19",
        "cursor": {
          "ref": "d433ecd2-f466-444d-8923-c5138b49318e",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9d3f7848-894c-4309-ab73-fafc6d16a932"
        },
        "item": {
          "id": "50ce569a-3799-423a-96db-31be8e8aeb19",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5a81fdc1-3260-418a-a855-5a474a8082bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ad93df-2768-4b99-8a8f-bc6d25e9a417",
        "cursor": {
          "ref": "aaa02521-60ed-4060-9724-264179953bc6",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "3a753dbd-c758-4473-9ff2-5315a20912c8"
        },
        "item": {
          "id": "21ad93df-2768-4b99-8a8f-bc6d25e9a417",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "75312005-8078-4626-96be-6d23b366edd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c375bf06-2635-4281-8d60-eb068b8d23a6",
        "cursor": {
          "ref": "960a8b51-a5bb-4d3a-aa94-87c2dfcdd0e5",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "70841f00-1b3f-4bae-9f4b-84b41c494695"
        },
        "item": {
          "id": "c375bf06-2635-4281-8d60-eb068b8d23a6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "219fdc43-8b1f-4a9d-af11-a8b3333f3142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18d2012-faa6-4aa0-910b-7992a17df937",
        "cursor": {
          "ref": "96d042e1-3b50-4d97-a436-4f3cb049246a",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "fbf8bcd5-c5ab-4eaf-80e5-0ed3fbf51602"
        },
        "item": {
          "id": "d18d2012-faa6-4aa0-910b-7992a17df937",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "43750344-8440-444b-a8d6-2ead930f4414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0103fc5d-22e8-4bf1-acb1-925e88903202",
        "cursor": {
          "ref": "fdd32770-2e9c-4952-be7c-5d8b60a189da",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "167d05f8-6de1-47b3-9be7-523b5f648bf0"
        },
        "item": {
          "id": "0103fc5d-22e8-4bf1-acb1-925e88903202",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f4a8c2d1-d83a-41fc-80ee-2a8cb3dd8524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8020c66-a5da-4072-9548-631b6f7fb5aa",
        "cursor": {
          "ref": "0eb91955-b826-48ec-88a1-c5dd0321a68f",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e97871a2-19ca-4a9d-a05b-518ecbf3f0d0"
        },
        "item": {
          "id": "f8020c66-a5da-4072-9548-631b6f7fb5aa",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "19f8fe3d-42f8-47c2-bd6b-4bb1d9cc95a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10f9c66-b0e5-44b0-b551-4a7a50b679cd",
        "cursor": {
          "ref": "914cdd05-df71-4fe7-b545-6e64aa6a89c4",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "cd904455-12df-407b-b225-edc67f1b2368"
        },
        "item": {
          "id": "f10f9c66-b0e5-44b0-b551-4a7a50b679cd",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "b2aec6bd-0406-4142-a09f-d1637c9dfffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bade296-9ef6-43bc-85d2-0417b4137d0b",
        "cursor": {
          "ref": "e9dd3802-7047-4f5c-b5e2-24e1eefac06e",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "92100469-bd0f-4d6f-98d5-5ada6d66f4c8"
        },
        "item": {
          "id": "8bade296-9ef6-43bc-85d2-0417b4137d0b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "c763dbef-3e58-499e-b54e-826d517e0a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be6890fa-cd88-41dd-82aa-cb5324496cb2",
        "cursor": {
          "ref": "f7a6c2b6-be56-4e5c-b231-4376e4956b64",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c2af5d68-6eb9-46a0-b5bd-453819076f0b"
        },
        "item": {
          "id": "be6890fa-cd88-41dd-82aa-cb5324496cb2",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "3547db25-c1fd-4192-b125-85aabe3dded2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c149789-4051-45bf-a0f0-70106126e855",
        "cursor": {
          "ref": "e47a76cf-ed54-4ef8-bf73-4e4c643997ae",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1be6c8aa-9b41-4c3e-b6ff-eedd0f11a17e"
        },
        "item": {
          "id": "9c149789-4051-45bf-a0f0-70106126e855",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7e7c0c2b-cf58-4ffa-9242-03572dabf430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663223bc-2314-40f8-8883-65070d3111c2",
        "cursor": {
          "ref": "7bc9593a-2028-4ac5-b814-8e309dd6b8a5",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d26035f7-537b-4b40-bd30-1349223bf606"
        },
        "item": {
          "id": "663223bc-2314-40f8-8883-65070d3111c2",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "cec38f1d-166f-40fa-915e-d85f9b7d6537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3b505f-756a-4afe-a63b-688a187253af",
        "cursor": {
          "ref": "1298cadf-f0c7-4463-9227-f15f0061d0b3",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d4267ac7-d9ef-4584-83ac-5b21ef7fa024"
        },
        "item": {
          "id": "cc3b505f-756a-4afe-a63b-688a187253af",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "73e83cdf-c09d-4064-a5a3-e562e9da2360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "503a0329-7c90-4bea-a63b-b8a8007856f1",
        "cursor": {
          "ref": "ba8bd4d3-fa4e-445c-800e-c403a500fe8b",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "6f92736d-ae4f-4e4e-b4b9-0ff7370196b5"
        },
        "item": {
          "id": "503a0329-7c90-4bea-a63b-b8a8007856f1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "56e166c8-a373-4900-99c9-b1372733e573",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5943f1f5-8d40-46e2-9b17-3559c2e1b095",
        "cursor": {
          "ref": "b741ff72-65dd-44f4-94ba-1bf5f7c4db51",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "5d8ec569-9f7d-4718-8daa-49920f4ab4a4"
        },
        "item": {
          "id": "5943f1f5-8d40-46e2-9b17-3559c2e1b095",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3f2483e1-6b64-4145-ab8f-ce055eed6a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9557af63-5554-4422-9985-fb12950b0192",
        "cursor": {
          "ref": "9feb025a-bcb1-4d62-a7c1-000803cab69b",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "6866ad1f-f9af-4afb-b58a-4694e3db32ad"
        },
        "item": {
          "id": "9557af63-5554-4422-9985-fb12950b0192",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "308899a4-ed13-4d84-8971-c3a14f50d7f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81df4ff3-38fa-472b-abf8-832a413acde1",
        "cursor": {
          "ref": "f7784da9-8fbd-4e6c-90de-b9b3a7d2f5f3",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "54e7e5b0-70da-4021-99db-cc94b51c5d0e"
        },
        "item": {
          "id": "81df4ff3-38fa-472b-abf8-832a413acde1",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2c1574ba-f505-4f5e-9966-321b58ffa2f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db000b72-8773-4b16-9309-dccda44123b4",
        "cursor": {
          "ref": "308658c3-496a-40d0-be8f-58fcff0c8560",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "177d8e20-cd9a-4402-ab18-2627e28c340a"
        },
        "item": {
          "id": "db000b72-8773-4b16-9309-dccda44123b4",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1de95adb-46eb-4555-8d41-844a1857b836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67fa2764-a45a-440a-b2ef-aa52a0a7fa08",
        "cursor": {
          "ref": "17a35176-5524-4249-8f32-07c588c70883",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "6bb1699e-9cd7-4f11-a963-2fdc1cd46282"
        },
        "item": {
          "id": "67fa2764-a45a-440a-b2ef-aa52a0a7fa08",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "01a205e9-1f78-478d-a638-2772fd03b397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01717e7e-d194-4d3a-8591-77ee035c1df0",
        "cursor": {
          "ref": "72174b67-3356-4c74-a1d1-e15c27035536",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "057ead17-e81a-4297-85bd-9eb4012a5cc2"
        },
        "item": {
          "id": "01717e7e-d194-4d3a-8591-77ee035c1df0",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "dee38529-b399-4b0c-9bfb-b88f31878e21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "41643e11-68c8-4863-b159-50b54eb328dd",
        "cursor": {
          "ref": "26faedfa-485f-4d5a-853e-d5a0bf2c5a6d",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "01aa5b79-fa0e-4ef8-ae79-ca5dd32b06c9"
        },
        "item": {
          "id": "41643e11-68c8-4863-b159-50b54eb328dd",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "05c6d5b2-a0f2-42cd-afbd-eb2e3590893f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c8be2e-6da5-4c8e-9b81-64b6a58119f2",
        "cursor": {
          "ref": "ea40a986-a304-42e4-a5f6-129e0eba4381",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3eb97216-45f1-49cc-986c-5d30cbcecce3"
        },
        "item": {
          "id": "75c8be2e-6da5-4c8e-9b81-64b6a58119f2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5743fb08-d087-4432-82a0-a3631e50fc12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b9e7f0-bff3-4844-805c-26947b151125",
        "cursor": {
          "ref": "75d900bd-92e9-42b0-8ab4-0e14ee86fe74",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5f01b557-cf52-4c31-a3dd-809f71accaf8"
        },
        "item": {
          "id": "b8b9e7f0-bff3-4844-805c-26947b151125",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d4eda862-3563-41de-90e1-736c18196e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a31e53d-ae12-48e3-bee7-158e255c4b70",
        "cursor": {
          "ref": "5d7e39ca-86bb-4c7f-b631-dd4cd8c39d4e",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4913f2b1-2b79-4624-915e-91546208a65d"
        },
        "item": {
          "id": "6a31e53d-ae12-48e3-bee7-158e255c4b70",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7d6d2d6a-63e5-4d11-b75c-4eecb55d0ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84bb8d0c-7203-44b6-8227-f6b851b586ab",
        "cursor": {
          "ref": "f90f8d57-810b-4636-bf93-efad99ba576b",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "29069d5c-bbd5-4d8d-a452-e024e2c9598d"
        },
        "item": {
          "id": "84bb8d0c-7203-44b6-8227-f6b851b586ab",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "991901bc-4dfc-43ba-9ed8-96be840f924f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf963f0-aa06-44da-bd74-8212f38d9f9b",
        "cursor": {
          "ref": "7e879d47-07a2-40b4-bca1-8f93c4a023dd",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b9b0e57f-fa32-4c08-82e8-69826bfd57b7"
        },
        "item": {
          "id": "baf963f0-aa06-44da-bd74-8212f38d9f9b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "941bc0d2-29a3-4e6c-ae1d-3282945c5200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93edc492-1046-4f1b-9f6b-29d3e5ee0165",
        "cursor": {
          "ref": "618b3d2d-5049-4f48-8395-4ef92ae865c7",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4b892a88-9672-4a7f-b7c6-1b2a89d48bbe"
        },
        "item": {
          "id": "93edc492-1046-4f1b-9f6b-29d3e5ee0165",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a216e2d5-aa30-4344-863d-376bbe3e8893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c662cc-6a8b-4bd2-81ae-80a8ca543a2f",
        "cursor": {
          "ref": "b8582579-3112-4abc-afcf-740742b0d916",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f4c4da43-db89-4f2f-9a83-7292def17005"
        },
        "item": {
          "id": "27c662cc-6a8b-4bd2-81ae-80a8ca543a2f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "570e2dc8-9946-4730-8f30-231ad545dd16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e731b571-fd2d-4b64-8fec-bf7d515d04c6",
        "cursor": {
          "ref": "97bda57d-40fc-4d4c-834c-f82f8ea63eae",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9322e791-352d-4154-8a7d-5b7ba91423b3"
        },
        "item": {
          "id": "e731b571-fd2d-4b64-8fec-bf7d515d04c6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "bba9e31f-6478-413b-84bc-cfff94b2389a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c98fd30-48e7-4b6c-8c6d-24932ed1a9e6",
        "cursor": {
          "ref": "70773a45-f6c1-47a0-bba0-df96e9c8d727",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d1859e37-9622-4a94-a717-054521937637"
        },
        "item": {
          "id": "8c98fd30-48e7-4b6c-8c6d-24932ed1a9e6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e9834e6e-7ab3-4409-8c04-ab26bf30155e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d294072-7f6b-4afd-b2ff-ac1bdfbd84d6",
        "cursor": {
          "ref": "0c26eb1f-9b45-4dd3-a004-4d727a8be315",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f46e863a-59b1-4168-82d7-6c34c12e2166"
        },
        "item": {
          "id": "0d294072-7f6b-4afd-b2ff-ac1bdfbd84d6",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "422e2cb4-e0d4-431b-9fa9-8aa8bd13558b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aade5451-1488-40a6-ae65-7574037c5a5e",
        "cursor": {
          "ref": "5f25e5cf-7453-4c89-a1e9-0b0964cb358e",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9ac0a071-9744-416f-a633-ffd41dc7547a"
        },
        "item": {
          "id": "aade5451-1488-40a6-ae65-7574037c5a5e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "71c9c690-32c6-4eac-8f16-48c75748a90f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c792ee5-b59a-4ece-a00b-f154a472c5d7",
        "cursor": {
          "ref": "2ef5ec1e-405b-498e-9e47-92e6d0c004f0",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "68b963eb-df7a-41b2-b614-035110e72bea"
        },
        "item": {
          "id": "7c792ee5-b59a-4ece-a00b-f154a472c5d7",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "60fbd322-2164-4102-a359-bf3ea6265d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d768526-55f2-4fdb-874a-aa4f04433dac",
        "cursor": {
          "ref": "b329450d-f3e3-419c-9cda-72d1007465e1",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fbe24a37-8ad2-468d-a91f-c9a22b88b09a"
        },
        "item": {
          "id": "2d768526-55f2-4fdb-874a-aa4f04433dac",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "fd81548b-48d7-4e20-8348-bab435373666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "664d8d4e-5ba4-4913-862e-0b8b59c92df8",
        "cursor": {
          "ref": "e448e80e-e410-4957-b4de-3b08d8b5273c",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b51ddbef-0127-44ac-887d-35a6d7c4d4f2"
        },
        "item": {
          "id": "664d8d4e-5ba4-4913-862e-0b8b59c92df8",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8c6eecdb-0116-41c0-bf03-8f0f7daa7b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "431d0f02-15e3-4c29-8e54-24564a77301e",
        "cursor": {
          "ref": "8aa676d2-fa4a-49c1-9a80-355049db4dd6",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "93e6705e-c37a-480c-8170-07f310accb52"
        },
        "item": {
          "id": "431d0f02-15e3-4c29-8e54-24564a77301e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "be4d0a03-c32b-458e-a7e4-6c3b11720097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61290916-d9ee-4a03-99be-467d408eff78",
        "cursor": {
          "ref": "cdebe843-4d5c-4170-aa63-a15197272cf0",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "26666416-4209-48ad-9f00-439fe6c49fe6"
        },
        "item": {
          "id": "61290916-d9ee-4a03-99be-467d408eff78",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f8242802-f5c1-4305-afb6-e2da64ffdf07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7157dad-3530-4b30-a412-fd79bff643b4",
        "cursor": {
          "ref": "896e159a-1c35-4535-9fd4-d7376fd67882",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ae173684-2584-4846-b9e7-122fb4b5ccc8"
        },
        "item": {
          "id": "f7157dad-3530-4b30-a412-fd79bff643b4",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a44b9d88-8423-48fa-8894-1743ec11a806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2814313d-511d-4e31-ad13-1dfff70d0a84",
        "cursor": {
          "ref": "d7ee1863-9a83-4410-837f-aa0d0f3d665b",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "168e7778-2952-4d9e-ae29-6adf2b7607fd"
        },
        "item": {
          "id": "2814313d-511d-4e31-ad13-1dfff70d0a84",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "81e4d580-2d7e-4350-8b5e-c30e42b09b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479dfa26-e78f-40aa-91fe-a598d8a0f277",
        "cursor": {
          "ref": "e4ab2d6a-0536-47e9-ab8d-511441dbe457",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "45540fff-189d-4ea5-9aab-c2c941be9ae2"
        },
        "item": {
          "id": "479dfa26-e78f-40aa-91fe-a598d8a0f277",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "90e8ff8d-f283-4176-8270-5a4082189a26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d85d7a9-c323-4954-a590-3c4e456303be",
        "cursor": {
          "ref": "c212124d-20bf-4e6f-871e-270b6e6bdc9b",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "84160e50-e534-4f01-ab46-380262daaaff"
        },
        "item": {
          "id": "1d85d7a9-c323-4954-a590-3c4e456303be",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0b23d51a-2f3f-4576-95e9-40d4fe96b279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8216d803-cbf4-4b70-ae47-ed2370263180",
        "cursor": {
          "ref": "6e84292e-0ef1-4e28-894a-8aeb04f87482",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8b29c606-0fc4-4e18-8552-93fb3d4b3502"
        },
        "item": {
          "id": "8216d803-cbf4-4b70-ae47-ed2370263180",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d5edaa27-f799-4076-a98d-0ec512c889f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c730c013-8962-4e91-b38d-02d96b93f530",
        "cursor": {
          "ref": "39eed1f6-3d44-4f54-972b-9963979b9894",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "91299a68-74ad-43d5-b2a3-d0f88369a7fa"
        },
        "item": {
          "id": "c730c013-8962-4e91-b38d-02d96b93f530",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a708e40d-0d8e-4381-aa89-0d78a2549ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc9bc55-16cc-4389-acab-fb4f35faac65",
        "cursor": {
          "ref": "1340d614-1c20-45fe-9cbc-93a70b280d37",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "237fbf03-9573-410f-95eb-b32d98ec9666"
        },
        "item": {
          "id": "1fc9bc55-16cc-4389-acab-fb4f35faac65",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c97bbd24-c1b5-4f3b-950f-713a8772f747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e02c53-adf9-45fb-a2ef-1e8add59664b",
        "cursor": {
          "ref": "e654e92d-3cf3-46a2-b728-e0bdcc8a801a",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "fa6af053-c02b-4ed4-a14c-a9a042b0982d"
        },
        "item": {
          "id": "b0e02c53-adf9-45fb-a2ef-1e8add59664b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6862a6e9-7bad-4fcd-a5cd-38a79822f442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dda5fd5-de2f-42e6-b618-ed95ee4746ed",
        "cursor": {
          "ref": "4a1d7967-a8ac-405e-9e67-931cca655c5c",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "03f1bfa4-6261-4f7a-b410-52adfb3fda8f"
        },
        "item": {
          "id": "0dda5fd5-de2f-42e6-b618-ed95ee4746ed",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3be93c06-1b7c-4e74-937d-2e07daa9e892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea54ca3-7211-4e76-a857-b1b4b96562f5",
        "cursor": {
          "ref": "4b3646cc-7b05-4d12-bc2a-ac4dea88702c",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a4ff5397-123b-47e4-9de1-8b5fe49f2210"
        },
        "item": {
          "id": "8ea54ca3-7211-4e76-a857-b1b4b96562f5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3598e74d-73d2-487e-8f8e-77fa87af0887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf3ff25-229e-49cf-a11e-64b58e32120c",
        "cursor": {
          "ref": "4055270e-89c1-4250-b51e-48721fe6ccc3",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "77408e94-6f92-4049-ae6e-212cd9b2aff5"
        },
        "item": {
          "id": "2bf3ff25-229e-49cf-a11e-64b58e32120c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "264c4c76-892f-4c9d-af55-b87e7cd1973d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f49a4f0-ee02-4721-8e1a-de0cae1f5dd8",
        "cursor": {
          "ref": "0985643b-7823-4e99-bc5e-cae012e0053b",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "fe1e1024-1c74-4930-9d3c-c2cc0a96fb21"
        },
        "item": {
          "id": "7f49a4f0-ee02-4721-8e1a-de0cae1f5dd8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "eab5dd72-46ba-48fd-9b76-045e742bd884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078e53ad-9550-4e69-bbe3-cb3732308cda",
        "cursor": {
          "ref": "299446c2-d038-4aab-9df1-f9102e0f1d03",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6ac8bfea-5b43-40db-b6d0-dc27e23effee"
        },
        "item": {
          "id": "078e53ad-9550-4e69-bbe3-cb3732308cda",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9ce84302-abfd-403b-97c1-910c30a2623e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "66276cd8-171f-4859-b50c-7020c80b8e12",
        "cursor": {
          "ref": "fac86693-9a52-4c18-82c8-79db62840dd7",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e9778394-23dc-4ed1-b1d5-164b99242dd2"
        },
        "item": {
          "id": "66276cd8-171f-4859-b50c-7020c80b8e12",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7be453b1-442f-42e6-a5cc-9d9085950a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "716b463f-872e-45a4-a88f-db33fca31beb",
        "cursor": {
          "ref": "31d403a0-1ab6-4140-9a9d-bda82a4a7c45",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4a5f19c1-9c36-471f-aefd-7264cdf5fdcf"
        },
        "item": {
          "id": "716b463f-872e-45a4-a88f-db33fca31beb",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "66d81d08-51cb-482e-8525-4114e1d6771d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "cd341264-c475-4e75-9be5-a03ba697563b",
        "cursor": {
          "ref": "5d12ce8d-b7b2-42ff-beee-43700df5201a",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a157cf51-240a-4fe7-972e-393caf849f7f"
        },
        "item": {
          "id": "cd341264-c475-4e75-9be5-a03ba697563b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "aff5f8df-82e8-4a79-bd6d-25e601af6309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc005ca-f841-47b1-8939-55fa8f0c2725",
        "cursor": {
          "ref": "74619e8f-0b5f-4b7e-b9ce-d693a7093f4d",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3317cd15-7353-4811-b7af-1f896e67206e"
        },
        "item": {
          "id": "bbc005ca-f841-47b1-8939-55fa8f0c2725",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "193f4522-7801-45e3-9da7-b8318455f45f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "ea26754e-49b1-4244-86eb-cdbd841b05dc",
        "cursor": {
          "ref": "15c1d366-7f5d-41c5-aaf8-f8356b54d106",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "cdf3d7c3-f09d-479d-ad15-8cf0df7a314f"
        },
        "item": {
          "id": "ea26754e-49b1-4244-86eb-cdbd841b05dc",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "863422e1-9ee6-4718-bce3-f1fecdf97950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1258,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "2d0f9dfd-a59d-44a8-b454-072e8b689c07",
        "cursor": {
          "ref": "5e572e1a-2f61-4075-85ba-004bc92f8def",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8e689ddc-96ac-496a-9a26-82772a70bf45"
        },
        "item": {
          "id": "2d0f9dfd-a59d-44a8-b454-072e8b689c07",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4ca4a473-6b69-418e-a27b-24977c4b2b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "acbc6b65-3971-4302-b6e1-f631cefec9dc",
        "cursor": {
          "ref": "4c2027d2-029f-444e-b192-d8b6a7756aaf",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f922d751-e713-4fd4-8756-359876e85e19"
        },
        "item": {
          "id": "acbc6b65-3971-4302-b6e1-f631cefec9dc",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5a5651f1-0d0a-4ce2-a25a-bf0d71a39d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "41153bd9-8be3-4191-b13d-07dce634dae1",
        "cursor": {
          "ref": "0d10ff03-c8d5-4aac-aaea-7ec4211f3811",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4eb92ee6-f7bd-480b-9203-1c49b41b23c7"
        },
        "item": {
          "id": "41153bd9-8be3-4191-b13d-07dce634dae1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "efc4872a-9f85-4424-b40e-0c01496fc3a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "abde4ba6-c0f5-4a00-9f09-195471a3f44b",
        "cursor": {
          "ref": "4244eb8a-a42f-4a11-89c6-74822963a041",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d85ba21c-5e8b-44b4-a0ed-2eaa1f3ebc89"
        },
        "item": {
          "id": "abde4ba6-c0f5-4a00-9f09-195471a3f44b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "62801200-cff5-4eab-9c2f-d518ef104830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "3cca793a-f48d-4c11-96a8-6a77c39cecb7",
        "cursor": {
          "ref": "4fe290ad-9c01-4f89-8530-804270d6e806",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7727adb7-44eb-4ad0-aeda-1a7164fd8041"
        },
        "item": {
          "id": "3cca793a-f48d-4c11-96a8-6a77c39cecb7",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c70be339-fd33-472d-9728-e7d7e3cd01e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa188c2-5030-4475-bca7-0546a9631ace",
        "cursor": {
          "ref": "26bd28d6-a246-41e9-ac3f-b2088dbd79fd",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e2bb1993-bd43-4a9d-adb5-cb9d4cae7ebf"
        },
        "item": {
          "id": "baa188c2-5030-4475-bca7-0546a9631ace",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5101d500-bd6f-4702-9d1a-c9b33118ee39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6619c313-4273-44b2-94c7-099a54416aba",
        "cursor": {
          "ref": "88c01e66-b250-472a-969b-818944485f29",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "86e611ed-0b5c-4c79-a56a-09ba5aa6ad5b"
        },
        "item": {
          "id": "6619c313-4273-44b2-94c7-099a54416aba",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9171f94f-f79c-4bc2-b8ff-bcc2ffa6e1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd61d18-48e5-4e8a-8086-21697f3043bf",
        "cursor": {
          "ref": "7be55a8f-40be-4854-a8db-b738baf411ac",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0c0f56f1-ee40-45a7-b09a-5d9f6948ba7a"
        },
        "item": {
          "id": "5cd61d18-48e5-4e8a-8086-21697f3043bf",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "006565af-72e1-4532-b7e7-487127e66bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64172d82-c0e7-4732-a984-5900a9e1ede0",
        "cursor": {
          "ref": "63bcfff0-ffb1-4424-969c-b1818e71ce6c",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f0a430c4-8607-4aff-9588-aace8fbb7a6d"
        },
        "item": {
          "id": "64172d82-c0e7-4732-a984-5900a9e1ede0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "22d42a47-2ddf-44e3-b8c3-f525697764d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e14fa4-2e1d-45e3-92b8-24386668a752",
        "cursor": {
          "ref": "ae204eeb-82b0-43b4-b86f-ea8654ae2dc5",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a8915693-910d-41de-988e-d0cff6f72dc9"
        },
        "item": {
          "id": "89e14fa4-2e1d-45e3-92b8-24386668a752",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9ac5b0fa-418f-405e-860f-ea492728186b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899b1a3c-4667-472a-9077-7b3c8e1bc150",
        "cursor": {
          "ref": "7f3a90e8-4500-4cfc-b718-c59ddd6d61d9",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "edc1d9c4-fbe3-47a5-86c7-30c086d77146"
        },
        "item": {
          "id": "899b1a3c-4667-472a-9077-7b3c8e1bc150",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7ddd86af-7996-4f6f-9bdd-b02a38937888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab16a57-8c76-40d6-addd-1c902b99c4c1",
        "cursor": {
          "ref": "536fb209-9bbe-49c0-9e24-824d1a8cfff2",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "bc9da21e-f9a3-47a2-a884-d3ed61c19edd"
        },
        "item": {
          "id": "fab16a57-8c76-40d6-addd-1c902b99c4c1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "337a7d69-fcb0-4d16-9543-54da2b13e4a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0378cb3f-5b3f-413f-8cac-c200c7e1ca02",
        "cursor": {
          "ref": "a2197e16-9ae6-435f-8627-37386b58697d",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7a26784f-8016-43f9-b41c-7280421dd760"
        },
        "item": {
          "id": "0378cb3f-5b3f-413f-8cac-c200c7e1ca02",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a3da0e77-cbb0-42b5-a847-b41080e744c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7bdfb7-9b77-44db-90ff-e01449a9a941",
        "cursor": {
          "ref": "87bd2845-5790-49b1-a972-00657a0057a3",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "dcbd951a-8fc8-4982-bde6-571f488d025a"
        },
        "item": {
          "id": "1b7bdfb7-9b77-44db-90ff-e01449a9a941",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7c1b98b0-6dde-455b-8917-d8762e7b5fc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02fac9b8-a900-4f01-8e8f-0ca3cebc7548",
        "cursor": {
          "ref": "9375328e-25e1-4f52-970a-03a75c9a5b2e",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6c90d98c-08c3-4ff7-bf3a-6bc52f5907a4"
        },
        "item": {
          "id": "02fac9b8-a900-4f01-8e8f-0ca3cebc7548",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "45483712-e904-47fa-8f7e-c4032184180b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9b5f90-0d03-4d96-a645-c8a0c938e6f5",
        "cursor": {
          "ref": "a547fba2-aaa4-4c5e-9e1c-294b31b51515",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1b238887-0145-4112-ad4d-aa5d59907edb"
        },
        "item": {
          "id": "bc9b5f90-0d03-4d96-a645-c8a0c938e6f5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9f128f18-606c-482b-b155-42347fbcbdef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222c85ca-75bc-4b49-ba99-5fe46fcc38d5",
        "cursor": {
          "ref": "97483cd1-fd2d-477d-8e7a-3f22ba031e4e",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "df45ca11-9779-48bf-9dd2-180861192680"
        },
        "item": {
          "id": "222c85ca-75bc-4b49-ba99-5fe46fcc38d5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9a5491c7-a6b1-4a3f-81d2-4019f7519137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f45a396-9edb-4622-87ad-631209905ed3",
        "cursor": {
          "ref": "cce55761-47e1-4cb8-8ffc-c5debe26d2d2",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b924e8f6-807d-4228-88ae-53fe76c47a21"
        },
        "item": {
          "id": "0f45a396-9edb-4622-87ad-631209905ed3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "59fd35fe-442f-4034-ac33-8c841778d9b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 907,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "71f5493a-4646-4946-a47d-2124881e62de",
        "cursor": {
          "ref": "babaeb2c-5213-4f06-8658-fe0af1f6026f",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bc1d2c48-63ba-4bc2-a83f-5bcedd615143"
        },
        "item": {
          "id": "71f5493a-4646-4946-a47d-2124881e62de",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "72b97a84-963c-4ca9-bdc6-7b6850294db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 927,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "98bbf9ec-f9da-4895-9cad-1e0ed854f225",
        "cursor": {
          "ref": "bb6c3a97-6df3-42c6-a6d9-6a12411bb5fd",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9e3c1510-83fb-4aff-9575-c20eded38524"
        },
        "item": {
          "id": "98bbf9ec-f9da-4895-9cad-1e0ed854f225",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ac03c7eb-cd04-4aaf-9e28-884f0f5771cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "dd09df16-d4a6-40f6-8910-fd23faab22de",
        "cursor": {
          "ref": "33edf944-b658-4989-966a-a0dd1db69c29",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e2a3aaf7-cfc1-45c7-a284-b8c1aacc6a57"
        },
        "item": {
          "id": "dd09df16-d4a6-40f6-8910-fd23faab22de",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "00d11a0d-8db0-4620-8016-c5978fff0fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 831,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "b0fb9dce-3efa-438a-ad4f-e153abc0bddf",
        "cursor": {
          "ref": "a7e1efa3-5574-42cf-a4ab-7ae602228643",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8480067d-7e1b-4c3c-aa2d-3a28601cd3d4"
        },
        "item": {
          "id": "b0fb9dce-3efa-438a-ad4f-e153abc0bddf",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "61e7dabd-a962-4101-b409-fd3d4c54a474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "dc480152-180d-4211-be54-2e47e2edff2d",
        "cursor": {
          "ref": "152cac7d-3636-47dd-a9af-5cf5ae5ab437",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c9bf6291-b1ac-48c0-a0f7-ceb73f2fe51c"
        },
        "item": {
          "id": "dc480152-180d-4211-be54-2e47e2edff2d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "cc530c1e-dc7d-4426-a8fd-4e51b1f659e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84241006-c115-40fe-b09c-ccff20356212",
        "cursor": {
          "ref": "f3318168-428d-4d26-a50f-7a0d70e6368f",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1b908e62-e225-457c-99d0-273f93d9104d"
        },
        "item": {
          "id": "84241006-c115-40fe-b09c-ccff20356212",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8a3963c3-8d77-4996-a505-4d972888a509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4635748-a5d4-4b02-ad64-757b23b15dac",
        "cursor": {
          "ref": "032d92bb-22ec-4e2d-9fcc-11f0ec22dcfc",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c7b8486c-fa06-4c7e-a5c5-2a7c36c7e033"
        },
        "item": {
          "id": "b4635748-a5d4-4b02-ad64-757b23b15dac",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c714634f-14d1-4278-9dd3-8a3e97916eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c838290-e804-4c9e-9a12-93570232fc56",
        "cursor": {
          "ref": "6f316c00-6e18-4fb4-b3b3-9aad828704ec",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "95096f4d-4081-487d-b396-465e4ec4825b"
        },
        "item": {
          "id": "9c838290-e804-4c9e-9a12-93570232fc56",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "93d60be6-29fe-4bad-91c1-b3f59e9ae958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06dcc7a-0abe-4dd6-8364-32df98cde5dc",
        "cursor": {
          "ref": "d2668953-4788-436b-9be8-abd209ba4911",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "349a608f-e13a-424e-a27d-2df74c68fcae"
        },
        "item": {
          "id": "a06dcc7a-0abe-4dd6-8364-32df98cde5dc",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d32ce73a-f953-4219-bfb2-241e7fb13b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad6ed85-0269-4179-933c-90f5d5f8e3c9",
        "cursor": {
          "ref": "d18b3114-524f-4ed6-ae98-9a0ca76ed7e2",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0e3d5714-99a4-4c64-afb4-2391de578821"
        },
        "item": {
          "id": "1ad6ed85-0269-4179-933c-90f5d5f8e3c9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "60d5bb1c-2d00-41de-adf3-186953ebcc3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6c95ef-98fe-403f-b264-4c0aad17e009",
        "cursor": {
          "ref": "88c6f933-cdb7-4a99-8c59-e2436da5b101",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a29206f9-4d76-4806-ba32-93259e19b5b6"
        },
        "item": {
          "id": "8c6c95ef-98fe-403f-b264-4c0aad17e009",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1a672103-bc7c-4ba1-b747-e4d84db9bfbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f472b87-08e3-4b5f-8d5a-b8860adfb74e",
        "cursor": {
          "ref": "533fedd0-d6ba-46d4-a483-7fd97e44d615",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a95a62b3-6601-46af-9d34-b8e901b3f15c"
        },
        "item": {
          "id": "6f472b87-08e3-4b5f-8d5a-b8860adfb74e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "930100ee-6d45-4f12-a7e0-1e599c245d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f431b2c-d64b-40fd-8b63-e41555141be2",
        "cursor": {
          "ref": "a460510a-2b4f-4efc-b4c7-dcb196c86861",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2c142380-7e97-4d56-98ae-1911cf1ae50a"
        },
        "item": {
          "id": "2f431b2c-d64b-40fd-8b63-e41555141be2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2fd6f16e-6e88-4ab2-9a1b-8a2f21a05827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c03ccaa-0786-4ec8-b372-1f8ff255daf5",
        "cursor": {
          "ref": "fc5e6bf8-2370-4563-8fe0-d8b0774b9105",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d475c4c7-2551-40f0-9d38-931d65dd928b"
        },
        "item": {
          "id": "5c03ccaa-0786-4ec8-b372-1f8ff255daf5",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "55717a1f-f881-43ca-be4c-04c620a86c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c8f791f-ebf3-4daf-b8d6-005eb000c607",
        "cursor": {
          "ref": "dc94b280-b613-4e03-8521-fb79534e24e7",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "fe4f9e55-6e11-4aa0-832a-ff890ca4ce81"
        },
        "item": {
          "id": "1c8f791f-ebf3-4daf-b8d6-005eb000c607",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c3f5fd11-5004-4dee-ad1c-1ff2b23531ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee603f7-5e1f-4a22-bca7-75501a1916f7",
        "cursor": {
          "ref": "e31ba68f-c7f8-4109-b5d7-050a2836624e",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "4c0f6292-6789-484e-9a5b-a3c347f6de37"
        },
        "item": {
          "id": "9ee603f7-5e1f-4a22-bca7-75501a1916f7",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "696a2143-f985-4044-8347-8ec72075466e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0bce0c5-815a-4578-814b-21887d86ecc4",
        "cursor": {
          "ref": "cdbcef5c-07a5-4dcc-99bb-f7daeebd7478",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "0dfe4e10-3de3-49eb-9b74-01dedea66f88"
        },
        "item": {
          "id": "d0bce0c5-815a-4578-814b-21887d86ecc4",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ec0ee227-2b84-45f1-92fe-12e6f6de75ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b017e0-d104-46e4-8b3c-c3f55103676f",
        "cursor": {
          "ref": "65381ffd-a8cd-489d-8e00-989978487098",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "fdacb2d5-ce4c-4a50-9888-3b848372519a"
        },
        "item": {
          "id": "14b017e0-d104-46e4-8b3c-c3f55103676f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "696719c4-014d-4bb4-b409-435989a9c6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1752e6d7-8df1-439b-a98f-73be45dcea38",
        "cursor": {
          "ref": "13fdf49e-ae2e-40c0-b47e-bd2178c0e71f",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "d624ff84-11ca-4be9-a2ff-5175d9c2935d"
        },
        "item": {
          "id": "1752e6d7-8df1-439b-a98f-73be45dcea38",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bf16effd-21d7-476a-85b4-afc4bcd16a26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e8a396-78c3-443d-a618-bb8d2def23a4",
        "cursor": {
          "ref": "42695451-a860-423c-bd98-f2fbedc35b4b",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "b24dace2-7831-4b1b-a629-d61d7297fab0"
        },
        "item": {
          "id": "45e8a396-78c3-443d-a618-bb8d2def23a4",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "83df65e9-8eb9-48fe-ade1-6740b8fbea75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c5d697-f113-403e-8bf8-b99bbceeceb8",
        "cursor": {
          "ref": "0eeb07a3-dd02-48e7-9d48-68d63e230df2",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "860f705f-c1d3-4ee0-aa4a-0f6f91becae9"
        },
        "item": {
          "id": "16c5d697-f113-403e-8bf8-b99bbceeceb8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "abfeff4c-7bab-42a9-bbd8-c3f41eb62796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd3c86b-64e4-4d72-aa2f-ca9b2cc7a838",
        "cursor": {
          "ref": "bc19f198-023e-4a05-880f-89183a671158",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "f5fd5a92-8ae3-42c0-b330-fbfef7f0ce50"
        },
        "item": {
          "id": "ecd3c86b-64e4-4d72-aa2f-ca9b2cc7a838",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d00f1a88-a121-4342-8035-115556a2dbd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeba2320-164a-4cc1-b623-b54dfff45ddc",
        "cursor": {
          "ref": "db416894-1a65-4d33-8c62-2970e3077433",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "b1f1eb16-b061-45f9-a794-b6b91d22b966"
        },
        "item": {
          "id": "aeba2320-164a-4cc1-b623-b54dfff45ddc",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "acfada96-e099-457f-9966-3c16ef9876eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a53970e-4070-4a82-92e8-25bc1d662eba",
        "cursor": {
          "ref": "09a9d667-67b3-429a-8da0-2bf26c26f4f2",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "d33a067e-dd63-4881-b8f2-97f0775cb956"
        },
        "item": {
          "id": "2a53970e-4070-4a82-92e8-25bc1d662eba",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "010447a7-af84-4d08-9566-d07dd3e0e9a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f132f14-54b6-402f-95c8-155dc62f708a",
        "cursor": {
          "ref": "cdb05a5a-a929-4f49-a93a-a56efb1db717",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "b5d8db70-b98b-49d3-8cda-c290bde56722"
        },
        "item": {
          "id": "6f132f14-54b6-402f-95c8-155dc62f708a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8dbb94a6-6396-43dd-8027-72179f92f680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9e42fcd-aed7-4eb9-b046-eaac72685e7c",
        "cursor": {
          "ref": "206a79cb-99b9-4afc-8177-8f081192eb63",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "f754bc68-a75a-4cd4-b98b-26c74a49ce7a"
        },
        "item": {
          "id": "b9e42fcd-aed7-4eb9-b046-eaac72685e7c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "81a7e2d7-3151-4941-a41d-90395e06ee3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0fcf6c8-29c4-4e93-8859-bf0b497ba6f2",
        "cursor": {
          "ref": "b2410270-d00c-471a-9d40-6c83bfdb8c50",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "a3a0ae2b-b8a3-4465-8ac5-2d4150712038"
        },
        "item": {
          "id": "b0fcf6c8-29c4-4e93-8859-bf0b497ba6f2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ba9ff593-f322-4c26-93e4-61c7a04cc5ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1de2776-cf75-4cb8-8901-338602ed3009",
        "cursor": {
          "ref": "3367e3c7-5711-4a4f-a630-fb9fd2c869c7",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "22a11e52-9bc5-4db1-a382-e9f4383cee70"
        },
        "item": {
          "id": "e1de2776-cf75-4cb8-8901-338602ed3009",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "55fc40a0-6309-473f-8bfe-37a864871d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e634ce-323f-4ad2-a848-7606915be76e",
        "cursor": {
          "ref": "4c8d27d4-317c-403d-9dbb-27444cccfc85",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "2271e366-9a14-4b08-a045-ca02cbcd82df"
        },
        "item": {
          "id": "35e634ce-323f-4ad2-a848-7606915be76e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "041266e9-ca48-4a15-931d-22c2ded3d776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "763ac9a5-8423-4eca-898c-3854040c352c",
        "cursor": {
          "ref": "0fd9bbc5-0b3a-4492-a8cc-13e4d0fd6b37",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "c4a2288b-4e75-4b79-9526-f46405fc3a8e"
        },
        "item": {
          "id": "763ac9a5-8423-4eca-898c-3854040c352c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0b038cd1-f00e-4c53-a31c-95ef4a4c66e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75a035b-d9bb-4743-9251-7a6acb5fb5eb",
        "cursor": {
          "ref": "2ca5ac58-c507-47b6-9082-63e39990893a",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "ee826620-e46d-4653-9190-5ea73c551483"
        },
        "item": {
          "id": "a75a035b-d9bb-4743-9251-7a6acb5fb5eb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6065f0fb-897c-4274-a533-959b38ba5308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10b97cd-17e7-4cb2-a319-7229c7fbd196",
        "cursor": {
          "ref": "7e266598-b516-4120-8dab-b3316c9a6ebb",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "7538ada3-b345-42dc-b591-73b295915376"
        },
        "item": {
          "id": "d10b97cd-17e7-4cb2-a319-7229c7fbd196",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0a6c69ad-9aeb-4da6-9992-e0d988ebc3aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d91b0df9-8dd6-49de-ab45-57dacfd737f0",
        "cursor": {
          "ref": "3ec6fb77-430e-414b-806a-5032fda54f9e",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "bd6e5b6c-339c-4db8-91e4-42859c062117"
        },
        "item": {
          "id": "d91b0df9-8dd6-49de-ab45-57dacfd737f0",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "23793ada-ad61-4185-a912-09195b8a3b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "645ad2e8-9f66-4806-aa37-c95e818d4f12",
        "cursor": {
          "ref": "4aa586e7-6f2e-4174-a530-853fac9def52",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "0a7257f1-0b0f-4c0b-b315-95e00e63919c"
        },
        "item": {
          "id": "645ad2e8-9f66-4806-aa37-c95e818d4f12",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f3e6b879-14ca-490b-866f-3dd138a2d56d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd7b66dd-b98c-41b9-8b9b-3f631b66597b",
        "cursor": {
          "ref": "46a17b4a-4919-4587-a895-40fc68698118",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "7b598bac-0c11-4853-b12c-77aa9c49eb16"
        },
        "item": {
          "id": "cd7b66dd-b98c-41b9-8b9b-3f631b66597b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7e2bbf89-8031-42e6-8d35-c720b2c70a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd00e70c-17c7-4260-988e-ce66c833bd63",
        "cursor": {
          "ref": "991d42a3-a8b3-4ce4-af08-1b559e0ce106",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "0cb42f33-487d-43f1-8af0-9108ae1fa483"
        },
        "item": {
          "id": "dd00e70c-17c7-4260-988e-ce66c833bd63",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a72bbf25-5a81-42a6-abb4-e34cf0c810e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d1711da-6040-49e3-8159-3da34d465523",
        "cursor": {
          "ref": "fa344a0a-81e3-4daf-b3fb-451935563918",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "484213e6-4a92-461b-ae2a-bfb488416359"
        },
        "item": {
          "id": "4d1711da-6040-49e3-8159-3da34d465523",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4622f1e8-6b97-473d-aade-428a02aa8116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa5269a9-21b2-4a6a-a82b-33a6cfc93b7e",
        "cursor": {
          "ref": "34192ead-8d18-4139-bd2c-cced7b6e3af5",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "8a7c53a5-8229-4ae0-afc4-d269a18e2ae6"
        },
        "item": {
          "id": "fa5269a9-21b2-4a6a-a82b-33a6cfc93b7e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d434de9b-ab0d-4f20-9de6-9c86b8fa61f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b90fcb-6d95-4e3f-ac96-c407362f4e42",
        "cursor": {
          "ref": "60a2f8a7-1641-4f87-b436-37eb284268e7",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "503a4d4c-caa8-40ab-82bf-12ae6ef3d067"
        },
        "item": {
          "id": "b8b90fcb-6d95-4e3f-ac96-c407362f4e42",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1ea2297f-8d5b-473a-88aa-83308dabb1f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "644c0529-0e35-4015-84c1-24909ab9b0c7",
        "cursor": {
          "ref": "6e423f61-cc1a-4a9f-ae1d-3d9679e8217f",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "9103a58d-53ef-495b-af14-0044115c6193"
        },
        "item": {
          "id": "644c0529-0e35-4015-84c1-24909ab9b0c7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3645dc9a-db97-4fdd-b2fa-083e73942aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "afdbae63-cdc0-4010-a207-a51852a571ab",
        "cursor": {
          "ref": "48aea0a2-d6ee-4d77-b4bd-5b7be53f9ec8",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "73318121-c99f-4dc8-8297-988ef8b980b0"
        },
        "item": {
          "id": "afdbae63-cdc0-4010-a207-a51852a571ab",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2418f514-10c3-4c78-ac42-5318b06f9394",
          "status": "OK",
          "code": 200,
          "responseTime": 882,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7dfd140-36d9-4725-b0be-f522cece028f",
        "cursor": {
          "ref": "fc7b5b8e-591b-4ce4-b962-0f5cd419683c",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "c7235cce-6ace-4b14-88b3-26c01ecf0563"
        },
        "item": {
          "id": "b7dfd140-36d9-4725-b0be-f522cece028f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9bc2dee0-eb14-41c3-a2d6-b6e73416c0eb",
          "status": "OK",
          "code": 200,
          "responseTime": 1150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "34227585-e9d0-4657-a9ef-ac17e0d61d3b",
        "cursor": {
          "ref": "e5219d50-a97f-4e4e-8a7f-70731b403dfd",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "0127e787-7d45-4ccf-b990-a4a536718e66"
        },
        "item": {
          "id": "34227585-e9d0-4657-a9ef-ac17e0d61d3b",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "34227585-e9d0-4657-a9ef-ac17e0d61d3b",
        "cursor": {
          "ref": "e5219d50-a97f-4e4e-8a7f-70731b403dfd",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "0127e787-7d45-4ccf-b990-a4a536718e66"
        },
        "item": {
          "id": "34227585-e9d0-4657-a9ef-ac17e0d61d3b",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "f7ee7e99-1abc-4492-ada7-923c53d8b61b",
        "cursor": {
          "ref": "9075299b-9934-49bd-bcdd-f211fc253a82",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ecb53788-779c-4779-881b-a514490170eb"
        },
        "item": {
          "id": "f7ee7e99-1abc-4492-ada7-923c53d8b61b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "619c30c9-aec3-4e83-833f-edd2299211b8",
        "cursor": {
          "ref": "9f0d42cb-0deb-4d75-b7ec-9561a69e8496",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "03e143fa-3f57-4e4c-b8f5-a55536f06231"
        },
        "item": {
          "id": "619c30c9-aec3-4e83-833f-edd2299211b8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}