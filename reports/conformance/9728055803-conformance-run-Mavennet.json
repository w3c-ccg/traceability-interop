{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6e7d8a4e-8592-40b2-9e4d-d14b803eed8d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "92443013-6c64-4d8d-9dd2-15172b5f4cb3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "860c5dd4-d245-473c-8cc7-2b14937592e1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f7cdfd3f-e268-47b3-9ed5-2d91686a6644"
                }
              }
            ]
          },
          {
            "id": "b917171c-1dfe-4203-ae8f-f83ba9af8a30",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0c8ec35f-fa97-425a-8264-52fede15dd77",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "adf7e9bc-0fbd-48eb-ac5e-46e3d8bab5d8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c3d1d1b4-09af-4b8b-afb2-6a85039b897d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "162b5408-2c07-49dd-b0b8-656c108cd913",
            "name": "Positive Testing",
            "item": [
              {
                "id": "292618dd-b285-449d-8303-f876d499abe1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "148920f8-acf8-470f-a153-012b9312203c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "27a224ea-fe09-4e4d-a592-bdeb3f1ea6b8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "30e76458-d68a-45cc-afe6-e42de027c907",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c84092cb-a148-4bef-80e7-c281c5aa6003"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bc1b8072-3ff4-420a-938e-fb5a72f87b14",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ede6a665-9f90-4c9e-9e94-a90c4a53e6e6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "272e56a3-ddc1-4447-9a25-9ab2b95b47f1",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "61cf3c65-59d4-41a6-99d1-0ece52416d9f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "805753bd-9d86-44ae-aeda-a148080ef444",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8b9f89fb-9518-436a-b720-c7bb3cdba775"
            }
          }
        ]
      },
      {
        "id": "d36aaaca-84f7-4aec-b0c2-46fe3784b783",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ee67a8c7-51f9-486a-bc2c-8afb5c4e5bd8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "258cc425-16a5-40a1-9459-34b26bcc7ef9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "aef72705-e2ff-4093-938c-0ebb01a2c72a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab858f4-5ce6-4dde-8abf-ad0214f8b06f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba36b86c-3cc8-4bf1-ba12-3170ee4cbb8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799f66bc-9022-413a-aadd-b525d65e91e6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "730800d6-f4b2-40f1-813c-78fedd4d19ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8cc8a82-ac40-456b-a470-0c4d9db43358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c771cb0f-8a0b-4bb1-9774-b1b88f2c2762",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b854cda-b0d9-47ed-817b-ab54480160d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7baa8330-6ca0-4d25-930f-e97c19c9cc3e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4af4f308-d11e-48f6-ab5d-e5aba048e2d6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eabef693-63be-4eb4-9226-6618cfc60a47",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7354e10-ff7f-4ec0-95ec-e979952af722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fef4d9e5-7280-45b9-a80e-ef1a0e423d03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a701a770-fa58-405c-a08c-49dc3dd356f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf0fe05-ac11-4f05-aec5-f0a72cfc8615"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "08cd876e-4017-4744-92f3-3294cef747d2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "47171dad-09d4-4b85-9781-2249583b117b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "75375360-201d-4b5d-b194-76a57a13f250",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f607b210-6439-4aa7-a6f4-2f38e96c8beb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0bcec386-0ded-4d24-8a7d-256c3afe4cf4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "dbb7edba-77cf-4bea-8638-3c8b81294940"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8484802-2285-488f-bb57-f19bf061dcc4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e9e29b3-5035-45aa-a821-2274cbf7a622"
            }
          }
        ]
      },
      {
        "id": "da275654-807c-4f01-a1cd-e2aad0dae27f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ad33503d-39dd-45ec-ae30-3a5fcc150c5a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3341e7bd-9913-4e5a-b59b-61054f869be4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "584f9310-7a09-41ca-a334-6d81996f4b90",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0142332a-e82b-4956-8c7d-c47dac8b2365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e74ddf8b-8c91-4c05-bcf9-d7df9ac12029"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7967dd3-2a7e-46e7-b81d-0aade0faad64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "776d9a0a-96c5-485d-b620-1814bb2b88e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e29747-2d9d-4dc0-9b59-7ff65b86de13",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be096fa-7ed5-43ca-be8a-f3ed4c22c401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de4974f7-20e3-4e73-b1a6-6f0770084377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24821aa3-8b0a-44b5-8518-f2db37519b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89e359f0-2ce4-475a-95cb-4e7cccc72033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c5ce79-3c53-4093-83ee-00c08bc26b23",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "939661d4-0684-4412-8791-75a90417391f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "898427e5-02b0-4a72-b1ca-d59ec503575d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef338aa-435f-4c6f-829b-83bc5dcbbac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ac5aecb-228a-4301-a1c7-72886ddfa5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca32884-c1fe-4373-b95e-27474b274d06",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1efd02b0-4016-4234-a1ed-6d4281977b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16a0ee85-1140-4c66-805d-ee358fb4edd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607cdd3b-f13c-4424-a354-fa7c71e08ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f3093a9-dfa5-4158-8f36-72125551bde3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5a22b1-2fdf-442c-ad2b-b3def9d7a9ff",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30cd9a9-2e13-4eec-858b-2385b9b8681a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13050e3b-8a24-4930-b72e-1b337f8fcc61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "517df3ad-5068-4e06-835c-b28fb6929fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8bb0e6d6-3abd-4322-8fb5-901b9db381e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570ad6c7-8624-44c3-a08c-9e193cf5e433",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41551edf-7848-48ff-95ac-e29255d3f9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14550d81-41d5-4dbb-a59b-ddcbd75f0e59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ab370f-35b9-4559-85c1-795c6d141682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "103dd146-9a86-46fb-9df6-fe326f19c9c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f1d9f0-4bfe-4615-a9cf-40bdea29e4a6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a090386-3520-4d9c-acb4-df2062e00429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b5d3140-1e26-4228-bc50-dc81ee45fe5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b14291e-c33d-44e9-bce5-d0eb13468578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad81e5d0-d5eb-4a6d-8068-89c78a37f0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b34241-abbb-4a2f-b941-ab6277f12fe3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b260f53-1389-4555-9250-3e96ecf70057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f097d0c4-d072-46d1-b2a8-13c285e72d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7aae15-24eb-4106-99df-2ba71beca969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46793a03-9563-46c5-ab34-18bee7540f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ead32da-eabf-479d-9de7-233a1b113966",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b323919-f193-463d-a4f2-ed0c0709a2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bd1c7c2-1303-4ae9-9dda-763968da9b83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf87625-df3a-4da8-94ae-a373be17c7f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb7d69d4-2855-4cb6-aa96-aae4f0833e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f5084e-52cd-4ec6-99ac-bb941aa9feb4",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bdf5e2-f809-4a8c-af42-8d86e785ba0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32d72b30-f69a-494d-9a0e-10004c453fce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066a3790-ded3-4444-a596-529277d9b662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7518eeed-675d-48d3-b929-8abe052b9f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544fabc6-8e68-4677-a994-6daaa9a04b1a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eca5b32-c541-4c90-839b-4c7c351e9cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eedd146-733e-4991-8cd8-3a87786f2ce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3c6ba7-2c8f-4f5f-aef3-0401695a9ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f1aa9ab-0c65-4bcd-9de1-d9ba50147fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159377eb-5a1c-45db-8cb6-a3f745e4b79a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "687163a1-0e5b-4d50-9561-77621599345c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80a66d9-57f4-4379-8d62-371b1a5ff327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5481f6-6726-41eb-ba5a-f2e083f5e534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b22038e-8eb4-40bd-b581-648aebc606d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4bcd07-0f63-48ac-b84f-dc40d51fa3c3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e188f3d-699d-4597-9513-756103d03a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "732a4500-c937-4223-a143-74ec6578231d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef3a577-ce7b-4656-8a82-7a3d8c6e5a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05874a83-f239-4a9c-8252-045324432d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3822f896-f1cd-4d19-8164-3749b456c55d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "575f42af-33c2-491f-9a2f-2677ffb151ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "371c715a-3b7b-40ef-800c-9c3eedfdd01e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e397a45-1160-4c26-8a9c-5fe2bb888409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0200b13d-b947-4cfd-a431-0c1505c11086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9b9824-c633-4313-960d-4ac8a39be367",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54195c6c-d182-42e5-bc72-36ed0481ca92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c37899b-4579-47fb-ba8e-df1fa051a626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaef7a81-ca54-4d22-9742-680ecd43ab94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a313d2a-c730-49f4-980f-5b0cfd6165b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15bcc0a4-3714-4491-931e-d934b409eced",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed71f9b6-03e5-42ff-b8b6-8ca6bc931d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb077053-5650-476b-b70a-fe198988e882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb84b028-9ed4-4e63-a3b3-c4462cbab97b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "595b96bb-a85d-44d2-8401-7dafbbd40db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "954d291e-0c82-48b4-b21b-2fa9cec439c8",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dcf00ec-c34e-4ce5-b034-3a09bc8b18e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bea14d1-5a13-4499-92e0-ae842061647b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28853788-811c-4e7f-b490-e97eed201c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "976ed451-527b-4ca5-be2e-0580233b9657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f81d0d-b75f-456e-bf11-392e9bc66bbb",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af389e3b-f560-46ba-b31a-3dd163da705b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ee5cc3e-c4ab-4d8d-a2de-6ec86780be6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c34a8ac-fdb5-4deb-a258-08b6dbebd73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b58511c0-f610-4b88-b9a1-e2250d7aab37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4adbfa30-d71c-4622-8c59-55ceb9b603fd",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b44fd5c-4733-44a0-852d-70b3b3855772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9686e340-e5d0-4efe-966d-74e4fea5e9be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5987ee0-3e48-427e-bdf0-2f0d548a724f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "00e70285-84cf-4676-87dd-2cc37da9cb76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62604c1-dd7a-4527-97dd-d581543e3c34",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42631d6-c489-4357-bf30-54659fb21d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7017eb38-42d9-43f5-b8c4-9d9770cd4636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fcb060-2894-42dd-bf32-20b6bff5f603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6433c35f-5aa0-4af0-b735-1462aa08024f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5dc880-6c44-4f3b-8395-27500f0dff49",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b012b7bc-3e6c-40a3-abfe-256bb3888f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c5c9eb7-5140-4ce5-8380-00c15c4b0484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72516d2e-2b67-465b-9391-451a8ceba8a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "71302eb7-11cd-4ee4-96ce-f486918f2144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4596c1e-f704-42dd-8ef4-72ce76de5667",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ccc7d8c-d4ac-4df9-86d1-36aefbe95db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed12cfe-5747-4fc7-8b52-250e006be6f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3924a98b-78f4-49e7-a802-a3aab038f505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ea1a382-830c-42be-bccd-011282ecdf77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "225be5da-a469-46f6-b8e5-224af8eef43f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7914330c-1daf-4808-9c81-fa2f862c611e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79a17c8e-958a-497b-9770-6dc1003c1df1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac3c5a4-9ce2-4078-8270-900fb12d55c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "297fc35c-6f28-46a9-ae3b-5a632ec2326e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8600f1-94d7-4838-86eb-77f65cc4351b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7810507c-f834-4d7b-8b4c-d6f7b77741fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa1a8cb-634a-462c-9b82-ee8ce59b20bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9edab5-17b9-4eca-b645-8d666dd36cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "66ec31fa-8d79-402f-b611-2526e2a89076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089243b9-f255-4e08-a9fd-f1d04c28a6cc",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2338c5-d582-40c3-9b14-86c28fa5aaf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52bc1164-9359-4942-95e5-a546e7af6012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8239177-83b7-413c-9421-ccb007962e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e19e9e1a-77f5-49c7-8808-88ee6155a8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5272b3-0f5b-4cc1-934f-6ee3b5074c0b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cd2abc1-a195-4ea0-8c54-ccb5f769c6be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b7a40bb-2731-42e2-9116-9c50defb725d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3f4a90-9a46-4b84-842e-fc0ff3b6467d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "633dda2b-c4b8-45a2-a846-7591a5ef808c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f887bb03-35f7-42bc-b330-5b09e0988bcd",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac388f5-e49d-41c8-b439-e632190072cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53f72cf0-c00b-46e2-a54e-b873c749d234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e1c5cd-5c94-4376-9ae2-11ddaf9c8ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "66d21296-d882-496b-99d9-64bad1eff648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ae9cc3-d77a-4362-b1a3-55b89226efef",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ab9009-0de0-40aa-91d5-727e4b268c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdde2e36-e038-4463-b971-af0b6b07902d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "896a380e-8970-4301-886e-cd3e8a6fd0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "faac8657-f181-4aea-974b-bc3104f85ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370d66b3-4edd-465c-9610-6707269776a4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb401d4-7055-4e72-95bd-b225b7b587e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d9a08a9-14b2-4ca3-9ff5-0c1fb55ef271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c442ee34-a3ee-4b77-8d08-bea3b09c122f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4a3251e-1597-4ac5-b5de-cb5f35908698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a716a42-65b5-4ee0-9745-a2f9f03daa82",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea3e0d4-5bf4-4e47-b771-2236007fe288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d21dabf-579f-4413-9055-1548d813bbe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb7c045-861a-4694-8509-1b60756b80f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3def22e5-37a3-4943-9180-096a809c8b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef8801d-d1e7-4135-b853-19b3921466fb",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03edb2ca-50d8-48e1-8d57-fcf68ce276ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3707b610-c9fb-4f1c-8013-a06861345400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0bd1dc-3a6b-4a36-8398-49042840e7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "07a9e5a9-9926-497b-b741-15d3914c1484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "239e2329-300d-4c0a-a603-ad522f021326",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8519a417-ce3b-42d9-a984-07441260f675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "075ff910-dec8-48a1-b2a3-4ece6ba79dd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0472df32-081c-4877-a1fd-117793f39d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1987880f-1817-4faf-b89f-d0d57bef5e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676ccf1d-053b-434f-a94a-064c9ca9f2da",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e814d03c-b3ae-4b53-8d83-400ee2f967e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4546e38-5dce-4fad-88ed-1c9b70ded5ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac69c29e-32d1-4f58-b8b4-f1b770358b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5e32ea8-3641-4bee-9487-9cadbe0f99e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae432413-11b9-4b6e-b04e-7275225ee813",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7e5113-ef71-417b-9e6a-a8e2fb994d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5306df20-f061-4f61-9578-dcba59daa07b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2c2a1fa-2025-4a3f-bd69-a8a84bd53ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "71ed5ffe-617b-4e3d-a919-871982183fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d6cd9e-6958-41a6-8ab4-45531e5e1b75",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d51890-2767-45b4-9c4c-c50978e4aa08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d3da41-5c36-410f-98ee-fc96c9c2c3e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb32108-47a3-40eb-916c-216ac6cf3d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "621b2b4f-8915-4553-80b5-2b3ec2a2f33d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18922cfa-8182-4303-9906-e61a5aed8cb9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4bdc1f-65ce-4e58-9e32-c9433932ffc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "294c441d-3c9d-4df4-a8e0-6c1bc9b3148e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef19ca11-f098-421b-a2b9-a740e9c0a143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d943bd0c-2311-41b2-99d4-bf2f2509e95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41efe534-55e2-4771-ba51-dc8746936551",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c418cd4-a6b3-461d-9fae-9072f328ce81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "604f6d3d-14f9-47ae-b50f-66e1474ca886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9f898f-205f-477c-8c17-c87373b2b4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fdb80cb-676d-46ac-90cd-0cd6795468a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305ccf73-0453-42db-80f1-d5f6f7c1752f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f112d0b-ef6a-4c5a-973d-61b0601e9138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a5eada7-f7b6-4d8a-a1e2-999401cc9e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5928dfd9-64e3-4aac-ae8a-9815bd7f3410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3990398d-820d-4e7a-8ee5-02bbbe9335fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7e0cff-f8c4-40bf-bcf7-6b694249aa9e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38fffb0-ef5c-40ab-aff1-faa478bca2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d336297a-ab9f-4a8e-ace3-5b11add4c502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9c74da-4c23-4f5f-ab49-fd0070322d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a49a0330-7c29-4c5d-802a-1b7e62b430c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2ad38c-9fee-46e7-9568-32358664f981",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a74e700-a613-4571-8d40-f9d3c1528c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f153629-d23e-46c1-9faa-69634d7cbac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4232d1dc-6c94-4900-a11a-c610e8f0d1e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3eea86f-f7ad-4251-a212-13375d2172fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aab6c53-f1d4-4499-b8ef-391e090707ea",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa4b68b-a9a4-41f3-bdb1-dbe6ff6ecbb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf676429-c0b7-4c9b-a9f7-0caae2046697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80cc4c25-b241-4dce-aaa8-dc71c54aaf33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c39c23da-5b9e-4227-a28a-d0690f2f4bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e1ec5d-06f1-4c8a-8ab8-194ce2310460",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a9c2a6-dbfb-44c0-93bb-bc0403a8968f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7fe27e7-ad5d-4b06-8497-5c1d0ffa6c5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d020c8-da9d-4504-931f-c695d3f20028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c078c088-855e-49f4-8528-b7ed02f1d0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b21472af-c44a-427e-a128-967c9528c88b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94748a2-72f8-43b3-80ff-ef8e1e9d28d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38b8dcf6-858e-47e1-b9f0-2f042e1feb33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a92856f-1d9a-4719-81ef-9823260e1a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8dacd46e-8727-458c-b75f-386067340aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326ba83f-f8e3-4654-9c3e-bfdac644bd1f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f42871-a973-4181-a109-d6923adf86e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "419ff51e-90ef-433d-bae2-8cda2a48f123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16aec3af-9867-4dd5-818a-554f23f30d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d758ea81-9afd-4a50-869b-a2021726352e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b657caf4-ad82-432f-930c-d12adfb92b66",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e7a9a4-c4c8-45bd-802c-7c8f957d7c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3008144-fca7-4aeb-816c-3996ad4a5456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f19ab7-7b04-491e-b719-72214459f237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2265c57-8ea1-469c-bb60-0afd0b2f4366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afdb5565-f5f1-4486-b7ec-541f3d2d6e46",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61576509-c0fa-4528-bb7e-b0f60c6a4339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a2b8e5d-8028-4ce0-a71c-947b9edcae95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2094fe-5e6d-4c9c-9b2b-b2a10267ddfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6acc8f29-e186-4db9-b818-d57fd812ab75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6f5c7d-fefb-4aa1-8b72-4b3ea91ed0d8",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85123bcc-4fac-4336-b073-2f92356fa741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c730deb-4934-4aae-a0fc-b5ec4379a998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e03ffb7-af25-4cca-8b64-06101c97c6a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8cbf05a-9eb3-4dd8-a53c-08f30f338352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef88d2f-125c-4f1b-99d9-870e4b8cb8a1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ccb254-8ed4-42ef-bd69-2230cede7e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dab8e445-9168-424c-be7e-6e2687bb7dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60de3baf-2ff4-4d99-82fd-3493424a48e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5baf5b5-365c-4516-9697-64607b411c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5a2c08-957a-4f95-8935-9d0a7be83d8f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe83987b-fb32-4bed-8b6e-fbeb13525d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0d1ed8-7cca-4a5b-a74a-a63afde47abf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6fe9d2e-e4b6-4fb2-8cf4-f1f5bddb713f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac3574d9-1850-40a4-bfff-37c4f47ae4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338fe9e1-daba-48ec-8402-313efab2e2ae",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b347214c-dbe6-47f5-bb68-2e0c8b056ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65a0d56d-56ac-431c-bd80-40d57509653a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f12124a-de31-452b-84fe-9d1dd3015dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0908d4c0-4131-41e1-84d9-33fae442e372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b28c5c09-b0fe-4196-805d-cc5be0678883",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6f9d61-6897-4f6e-b736-2ea9cf0fdffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63c6195f-eb88-4739-a498-750d54d55eb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2893c19-2b53-4444-b342-49067e07c82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c18d82b-8d92-464d-b4b9-4ad3ea56a4a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0515c160-138c-4d9c-9eb4-6ca1c12eceb5",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e787d26b-7bd5-4038-a1d7-66844bd07540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e004156-0ce8-4ecc-a30d-f0e52653131c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98fbf130-9513-4c49-a8e1-fcccfa5f6951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "98079c42-2a73-4c94-9406-316acd3fd889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d613bc25-e265-47db-8c04-df0d194ab631",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa2552c-2ca5-424c-8094-9a467abf181d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4012cbef-f16c-4e7c-a641-cf41e87769ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55e0bff-5443-4e5d-a174-714f08f10577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8776ef2-a7a4-49b2-adcf-c34627437f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d89d43-bad8-40e4-9a4f-928efaba921f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da8a6e90-ed98-4d9c-b895-fa2d4571285f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "767911d3-75b6-4db1-9d43-2c754830118a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab1621c-5163-4319-942d-3b89c6478a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43bfde03-d6e9-4578-8dcf-932c94f41760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7664cba9-2769-4501-89f6-c46451a38d5f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53542192-3ded-4b27-8d4c-478f176586bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5e4db94-e453-4ba8-bd5b-98fbca2d77d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328aa370-40f4-48ac-a229-2739e48253b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7653f292-4cb4-4da7-ac64-a83fe0704b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0b4fac-837b-4b45-a696-cee1b2fd8291",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "157e051f-1759-432c-ace5-1d3102ec9b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30ed903b-f913-4ddc-8fc2-f2c7f5d81ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb4c673-552f-4150-b512-563de596058c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2a7675d1-31f5-4df1-92e3-b85259b78d02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca294eb-e78d-4b57-8d0f-53bb5c99ccb2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c989282-c352-4d20-9194-79cf17f53fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7750bf83-bb36-4616-8a90-91e9073ba978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a2ccec-ce8d-4139-8985-d9dffbbb1d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ddde88d8-945a-43d0-a83d-53b1eedf5f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d73213-8b3e-4a4c-a8fa-c37ea6e53906",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72193fde-5794-42b5-a591-3cde41f95d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b96450cf-fcfc-41bf-b48e-eed2f1d33976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2274d68-a983-4487-a3b0-72a341f52cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f077dae-5922-4f72-83a5-0198731f5014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929ae1aa-c280-44fc-a9fa-2ee69afaae97",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f330c1c4-97c6-4e5a-9d4f-345e098df8d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb2b292d-edfa-4de2-a7c6-1eacbc108819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601f34b5-5fe9-448c-b5d1-1b68249a355b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb71b2fb-5f7a-4aa0-9a61-27999f66d42e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6151f4be-2564-458e-9b28-0e03b55675ac",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e03dac7-8d86-40d5-83f1-6416552174d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5743c88b-17f1-4f6f-81b9-fcfad58e5ad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b08d225-9e32-4949-b0c5-e250cd91bfde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c10500f4-11b5-4359-aff2-3f3269054c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341e8f6b-1aaa-4f69-ba9c-49054e902130",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf99ae4-2b16-4781-a401-8b1d0391ed90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7898abc-f460-47dc-85e8-4ac155eda0c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3676331-671a-4942-9d39-0d24575ef52d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe13d1cc-9785-4159-811a-f8cfee924495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2354e3c0-475e-4f1c-ab58-cd34ae7b4387",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c673ae-78ab-48b6-aab0-f01658079222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b6572d-807b-48b9-b5ea-e586a7dab1d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7faeed9b-4775-46b6-baa5-d57b0c2e6407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "884d28fb-4d5b-4720-92ca-ccbd71c71cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231fd7a0-2042-4c07-943e-269d5962c604",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e60977-aeb1-4669-a0eb-a7dc2298042d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebfac6b1-58c4-448f-b441-2c3dd8d15aa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0357939-c77a-45a5-940c-c376ecad5593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "97cedea1-e218-4c7a-b937-69e6f5cb4e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78c8fd1-60ee-4eb5-8b2c-83189ec3a4ce",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bf40d8-a24d-4f15-98a2-f104ec978672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc68181-86fa-4349-b667-79a87d8b6d66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4910f738-0499-422b-ae3b-10a13db44a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "356274e8-4fc4-436f-932f-4c6ed5071558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc61b70-fb39-48e8-bf9c-861c7718f257",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81ba85f-d107-4a4d-bf48-c82c5ec66384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ebd14f4-4a19-4ee0-b64f-656edef92833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f8bb2c-71b7-408d-aa1a-73655db2c606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "799615c4-ca41-40ef-9558-f311f613ad0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af716c4-5894-4240-9f70-dae5294d70b1",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d09bf51-11c6-4197-bcff-2bd8916e4a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60433b82-82bf-4a14-9714-087ed61dc9ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6da1a2-978a-4c2a-afe9-f9e503469f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38be7af0-c500-47d4-825e-3c7ab889af17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25575821-52ca-48fc-bd53-025af652839f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d58b19-05fe-40aa-ae51-a286e04224bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "729aa23e-a8b0-407d-ba83-ac7952bd144d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7411109-8533-4000-908c-9a7c20d23116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "874dbdbe-8ee1-4733-b0c8-33dec0d5345c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c147393-6fa1-415d-b1c8-9530c89ec3c9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d15931f-dbc0-45f9-838e-82fa231e69e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8182cd-dae2-4912-ba39-992ac49b8afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12600bed-1b31-4db7-be8e-10bf78d2a7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca8aa86-afc6-4396-85ff-8a6ee00fab0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4975f68-dcc8-4548-ae02-a2168a5629da",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffadcc6-1b34-4251-aa26-7fca2fa8e6b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a967ca3-0dcd-4802-81cf-801b4b42c25e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7200c176-377a-4382-9080-55c134b4fa00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ed4465-29e9-4d00-9d9a-d9bd5745ca5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36df7fc-1b3c-4d49-8cac-eee7da4165a2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da27aa9-2f48-4409-879c-d77163fee314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0b9164d-cd46-46e6-be5c-7921de389af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb83a63-87f3-47f0-92ae-7da79e4dbec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7988787a-20e1-4500-b39d-37e4e79c5e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "135179e0-bbad-42fa-b0ad-dc849ed37656",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b65a6a8-13f4-4f48-89c9-9426ca8c2233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1327f7a0-4f4a-4640-a4e8-e48dcff67101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34118796-c714-463e-bcf0-e6945f0228a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "35275ebc-19cf-4de6-98f5-79f7f36e3041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37832abb-3bec-4f61-b830-137fbd39ab4c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c499f6a8-307f-4325-b928-904aaeceb07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbc17ba8-b97d-4488-aa62-cdbf0da0baa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d289ee-79c0-4704-86e1-c5afabd9c523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a0646f4-87eb-49fa-baf1-9c6e5e154f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2213a0c9-623d-4b39-99b0-12fedb2b00ab",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f61030-0e8d-48d4-821e-13654b740fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c379b5b1-f9b7-4467-9b57-0d9a00da4974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667f22d4-7a0b-4b91-89ca-dc7150b6ea81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2858c7d-d777-4049-95c7-bc6870764314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c5dca0b-5520-4848-9ff8-6624edfc20fd",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dae72f4-faac-4417-ad8c-7d4453a921d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3a40bbb-ca53-4b23-a720-faa87f1078ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb510c1-3783-445f-a961-d4596143cede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "46cce132-01b4-4d50-905c-e52459f97c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3713d3-fca4-4d7b-9db7-d74f748f561d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "864b6493-cb31-4194-8f65-e14c374e2e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75376b3c-2ff2-4b4d-b9b6-4531283fc642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425700e4-7f37-4cbe-8ff0-bad0b265a8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "975852d0-a08a-4d67-9d08-32591480b7ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9515d4-7e3b-420f-9913-6ae533bec2dd",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb9a6d2-a9ac-46e9-afcd-11611a3db06a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "561575f1-a09c-4d82-880d-1fdfff4bafce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3962fbec-9378-496d-864a-fa2fc4ff320f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6eaf3111-aab4-4af6-b567-6ec517ca6bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752a915c-80ab-4619-80b6-55ed6bb6d643",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf363a8-582e-4d28-a9db-b10ab940efdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69d13ac9-c579-4385-9433-79ba12e37773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15fdd2d4-8059-426b-9d28-b0192768170a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc05126f-ef05-44ed-b984-438c0aac84e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37dcd20-39ff-4063-b566-4c4418aa1dfe",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1875eda5-1c94-4c31-8498-c0f1751d938e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41144e11-6623-4077-a929-476221f5d710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9348d513-bffa-4e40-ade9-9ae22c735a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "968c3af5-9454-45ac-b381-0152f59c380a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7052e28e-67e1-4fca-b832-31e699f323f2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3188fd13-6f46-4956-b2ff-fedf1784e2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f158f8d-a189-4c5f-8eda-5692889ca328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0247954d-7259-426e-ba06-a472f89e8507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6e6eaa3-faba-4744-89ce-63547f424904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87237afe-7048-4bee-a845-3b7b5eb698db",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd95a93d-aa61-43df-b0cf-d4e82d18cb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "849be92f-f263-4aec-9ffd-d0fc96302be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47187bd4-c356-45db-8977-f5a27b366402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "827880e1-7485-446d-b7ac-83cea6152181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda9aa7c-53d2-4ace-b6de-0e862760adaa",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f6323d-0e03-425b-8210-8bec308c228a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d280670-d822-4eaa-bd6a-530f32e3efaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "726601f5-19ad-4658-a5c6-b3961f095141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a11825ba-8d74-4ca4-901e-d687ec6f139c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da955e88-089c-4e06-b57f-580e01cd568b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6efccd85-be6a-4c6a-b5e5-c21e2a8ff74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3fd1ba8-470c-41ae-a5fb-a82a3eabcf67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb9755a5-4d8e-4141-a9fc-7935e711e1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "26ff7de3-bd29-40cc-b718-7b8562b3fb1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5c6f47-2ccd-4a44-b48a-ba7c95803df2",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62fbcd43-146d-45d5-8df2-27cc0d501985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d3315a8-1ab1-4c7c-a948-7cb5f3559791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "099c48fe-e540-445f-940c-f131c3a48df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "738ce17e-6f0f-4630-9ba0-679a4b04f3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b6d947-51bb-42df-975b-18667ede21bc",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f6f2da-6aa3-413b-8835-15f2800bf82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "469f7532-ba33-40b9-9e58-eaaf1cdece0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9fbb082-61d3-46d4-b2c4-535b740cf016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf78d0ac-0388-49da-b579-9d4ae70e25ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef01a716-f1cb-45a5-9c36-9b01e5f2d2a3",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bbbceb8-c5e6-4851-9409-774e130311c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d187ddd-949c-460d-abfd-b4df46bb3938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c68ecf2-f509-47fa-ac9f-c4ff6cdc3995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1b0c2cd8-1e51-41be-9c42-f5532ecfe38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9abc10-c434-4fff-9da8-414fff396b6c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "633fc973-81ad-46ce-9351-a1d29a5539f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebf90643-73dc-4669-bec8-950d182624c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88aef229-033d-4040-937f-463ce169b6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebb1745e-1508-440c-b193-911dca733367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839221ba-d702-468d-a694-219192a0ab89",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed5ce57-d96d-47a9-8921-b41ef0e6075c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "067284ba-3ab9-4a5b-b8e7-27c72646125f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97645879-c950-4e83-a905-6748ee1ebda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b88eb7f9-a077-477e-aa45-12f0983850d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932820d9-b91d-402b-b9ca-59fe347a5c41",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "676d7f0c-3823-49f1-9e8e-6affe734b531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e73b810-feca-40f1-b0f1-836aa2c7df42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265f4832-fbac-4dd7-a018-125b02f5860d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1c04e18-9038-4a60-801c-125865fb2f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38001687-bad0-49d7-beb1-ee718a93f8bf",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "033bf818-6d90-43df-ae5b-919c45357807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8001e70-8e14-450f-b30b-9a39128f90fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c399da-25a2-49ec-9ec0-24fee637e196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d2eba85-523b-47c5-ac0a-ca007a20735a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12685d21-05ae-4ce9-a1ff-1cf57ce9efa7",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a173545-36cf-4909-a5f7-c1ba242d1af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98781ffb-f508-47bb-b6ed-7b1a91a8988c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5498a82-d08a-40c3-86a6-a348e44611ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aafb2223-60d8-4cf9-b029-4888d1a87df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a32a49-f027-41f8-b043-7e0753c7747a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61551a0f-7e5e-4a12-914e-52c9a826ea63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e75c56c0-7dff-4e97-a83c-9780b8cea9d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2621d625-c724-4cd1-8370-22944164f913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "542b720e-1d8a-4b68-bbce-0ec77ae10847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8b555d-eb7a-467c-8582-ef892d8ff93b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e03cb35-888f-48f7-a329-e33b03cbd621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f0d51a5b-39bc-4895-a9fa-e02ec6dc2a35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "878a46b0-5b0a-4086-8ea6-f58a41ad4f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b51c16ed-b32e-4259-8600-bc482f4a0484"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5096972a-4272-4d19-8f02-a1a35f6b635c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "06055a2b-156e-4681-88e6-0b7fc9c6aafb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45a8a35-91f1-483c-aad5-55a08c720d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7a24a9c-5365-417f-828d-0dd4968ac577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36502345-afad-4717-b2a9-68cebc558686",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f897d5c5-b602-442a-aab7-567d98f09dca"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b64dedfb-4036-4517-b3df-51de5ff32968",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91caee20-216a-4bbc-b086-bbd8dd8babac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e75107f0-2f75-4734-aa93-394e6b6d7491",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39809de3-e224-449b-a2a8-243912f4ee45"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "767ff199-d892-4d49-b4f4-f7942504e658",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0640def9-6cc9-410f-be5f-26bbf867fd4f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "18c3a708-639d-4fd4-89ec-fa3287237aef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1fc7a7e9-86f5-47eb-b989-b4f85717d8e0"
                }
              }
            ]
          },
          {
            "id": "db9953fc-f46e-41e9-b3a0-436c5d2c878c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "629803ed-6d6b-41f8-ad12-32ed288bb8bf",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "d96f76bd-41fe-4f98-a1a4-8df97ffc36fc",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4bf4c1-a3b9-4ef2-9702-a14ae4712b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ce42b242-5b92-45c4-9e7b-37269c06472a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886d5745-e2e2-4066-ad0e-e09c02c363f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b974a59-d86a-4456-a76a-1fa6357171dd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8ae2e60f-c488-45d0-9bc5-6fefd7e8a57c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "452075fc-369c-46b4-a895-e2bf959d9d45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0fe5499c-f003-46db-80a5-b85c715de38c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d58b30e-9415-4a0d-9871-41aaf7e9ef30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "794fb111-35a7-4f39-add5-4d9ca129413c"
                    }
                  }
                ]
              },
              {
                "id": "63b3af5f-5f21-4641-8e08-83483360dfd0",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b62965b9-2a87-4248-8459-2148ad7db88a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cebd68da-032f-4f88-b698-556efc34592b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db3d4f9d-9743-437c-9da7-20ed72c81f57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bd900683-5bb0-4eb3-9a58-563267cf9b9b"
                    }
                  }
                ]
              },
              {
                "id": "cdaaeb8e-ad0f-42ab-9faf-8ac345c1defc",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2dfce32e-cc6c-4f5b-bfde-c9e8285c6a64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f1a07e2f-14a2-47e3-b5e4-0b591f736b96"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04e2086f-3906-42fe-a4c0-ffa4831764a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ebdefc16-04b2-4297-b177-b58d3c588773"
                    }
                  }
                ]
              },
              {
                "id": "9097bd8b-d0ab-4e8e-8203-6bc9fe078eda",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1a11551-53b0-4129-97f1-2a11d3acc911",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b445701-2068-4460-980f-a340563327c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cdcdba7b-10a1-42f6-96df-b1de3830ecde",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "84d14029-883f-40bc-ac3c-ee31a3a7e3cc"
                    }
                  }
                ]
              },
              {
                "id": "6ffa21ae-0c12-41fb-993d-bd2f2f6f4ebe",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61b3df13-4a1b-42b3-b26c-232657cdbd91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e81b9b41-de7b-4722-b697-8ace28df78e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ae8f2c7-1bdd-4176-857f-e2fd6ec91300",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "37d4df37-6ed1-40a8-af98-b1d2be3ecd44"
                    }
                  }
                ]
              },
              {
                "id": "f41992ec-976a-4a87-84b5-5a00fe37ec83",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b552a75-ee99-4ab6-bbb9-1a1d7a1cfd9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93a07db9-af22-426f-af14-c6aa79ea6df3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79d22fa1-8be7-41d8-a62d-eef8e2948da6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6f355255-f496-4adf-99ea-bdcffbf609f0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f7359f57-948d-437f-844f-804cc1f9dc3c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8c8d4ecf-35c4-4525-b89e-5447a0447b03"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "10880200-1d62-4374-b112-408c29eab68b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "229cd991-e0ba-4ea7-b4fc-b454f067888e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57493346-1f69-4507-a2be-79d7b2250f2b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "dc601f22-68d7-4585-a005-c59ef5d6440b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51693967-7d23-4f2c-9de7-6e711398795b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "812e4f9c-0d77-4f70-9024-2e6cb2fef729"
            }
          }
        ]
      },
      {
        "id": "efe65bfa-d5db-43c2-849f-d58c0361d2d9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8b74c5a7-0ee8-488a-848c-977b4770d578",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4bea04ba-1efb-49bd-85c9-df3ad26252d0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9b7eb574-b99b-4dea-adab-da4103e73226",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d29cdd-1cd7-44c7-92b0-4aeccba4059d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e1bbc8-2a34-4e70-a655-96d6417214a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38a5add-93e8-447e-8c20-b21505ea396a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "db663962-fe05-41f4-986b-83d693b8ef8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9673cf36-e70c-41ab-923f-81f52f50a264",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de10ff42-5bbd-477b-8fc2-f79b73c5c5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f751c5b1-b08b-4d6d-8f8c-e272159e6cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9b4955-b1df-433a-b31b-68573ae123fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1053c025-332f-4565-ab1c-71cd5bb7260f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee522bc7-88a6-462f-b855-4b252ae46c96",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3890a4a-8e27-44f2-8e76-ca7dd31e3db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4361f53-31d9-463b-8470-d6770b6c2570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0fa51f-add6-41ed-9ef4-c97fbe56166d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4127532-cfc6-4352-8abd-11a77b246c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0010bd1f-74e4-4022-ab62-61e295e3a27a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21bf0673-8209-4720-9ea2-151e88358061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c056536b-92e2-4e53-a8db-c8080a566fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70bcba50-6441-4efb-9aec-f00d0762f733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "12523e55-641b-4856-b026-7737bdb157c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab0aa1f-e9db-4715-80d7-90d2d7779581",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9223f36d-d5f0-429f-b046-19210e8103e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "709b93b1-9888-4fb5-9627-858784a0c80a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83f0583-5d81-465b-aa81-0381a7159e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd0f01f8-2698-4432-af58-96ca41f46aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe130f9-6d14-4eb2-acd9-b27184b224d2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b756317-5b22-4751-bb63-d8eebe698a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8c4f16-86c6-4d50-8298-ba8f8f146173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f412d83-de63-40dc-a3c9-f5a87712632b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "65292098-7369-4f51-a897-287676f98543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4a40bb-da58-4eb8-86cb-12c9d4e1622f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac88d32-07c9-4ebd-a101-2760d4e24332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40fa4d41-c791-4767-96db-a78667c4f743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db65e1b-08e0-4706-a703-fe5c530d891e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8d0f259-dcd1-492c-b077-4665c79bf039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688d08c0-8742-4507-bb39-9c15179910d1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2ca404-ff9b-451b-afef-3790a94e5969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "052dd7fd-4f85-4e99-b2fc-ca2bda417279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2018adc6-74ff-4e29-b0f3-f627034967d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76c35944-276e-4ef2-bc65-35465bf18823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd6c4833-2ae6-4d48-962a-79eb318cd032",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9302eced-c901-4da2-b1ba-73e53ff6cb24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b1c22c2-9d29-47fe-92d4-26372e6d8849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "656b555a-d962-48b3-bc0c-cbf275b69f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d382ad26-ed5c-4239-973a-44177f7b6b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27f2914d-51fb-454f-8c6d-5ec5a8c584ac",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75daafd3-e599-4e36-9f5b-36ad1baac731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76f79d14-a1c1-42bc-8ca8-93c5a8680fab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2091dc-ce1c-4e52-95d6-94f113fa75b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ad6249-ffef-4b47-9e61-14ef9321c9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584f7c85-13f4-46c7-bc21-b545fd0115da",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8ad16b-8d9f-4579-8e76-d0408e1bc55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "360ed854-1374-4ef2-9d0a-6cf0967d356a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe9f249-64a7-4f5b-bdd7-4f16e0dba6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d55b8583-39b9-4535-8528-008e47d9ba34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45cd88f5-0578-4a36-ac10-47a9a2e6baca",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd96f65-e972-4e62-8ea9-91fbb3c2d388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7633862a-8d28-4d0e-b8c3-55fc10a499d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0626a059-054b-4764-b8fd-ce22ca70c3aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a7694f5e-21ef-494d-89f3-90a2b6cddbab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3111c3bc-834e-4e8c-b68f-801ac871ab54",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1a6300-aaf2-47e3-8dc2-ffa13b13f0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc27a46a-dab4-4388-b575-4ed2765c52a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba84cc95-abd0-4c3b-be81-ffe1aeebb432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4705f515-cda3-4b94-881e-ecfd73fdad57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0f6b67-2576-48e8-9357-7f3d4360ba14",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa0a0e9-3d69-425f-9226-01473aac75b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e64641d6-6fd9-402e-afc6-526859551800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd0d240-bb19-405e-bd8e-62c8e73adc5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f819e55-58c1-4c14-bc54-fefccc52fca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef7d935-942f-4a73-990d-bd640912ce1e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fec040-9177-4ed7-8edc-8bfe6d55abf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5b832b7-04fb-429d-8424-6165097e8c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be0369c-0835-4a7b-adf8-d0362cf877b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "edc13853-c1cb-4265-aed8-eb89f9a5ee25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845b01dc-86ad-4151-b348-a03a85d4b145",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70fa3a22-35e5-40aa-afa6-ac9dbe2cc7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "702b8af4-9c01-4f12-8ad1-667f1452ab4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c80eeb67-d2dd-46a5-92b4-4708b2494e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c60f06e-7c5e-4295-8c38-100b35785839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc29dac-659a-4a7f-b200-aef38da973a2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d52904c-3aea-496b-9398-8dfcfc7921de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d208d4e-9a79-4419-be20-15449c3cf61a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7433f99b-afe3-4f66-8b08-a7bae7c8419a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "621121d8-c6ea-472b-8a60-86ade9301939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfb3e17-57ab-4d21-8fed-13dd7ea18a0a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52558a26-47a3-4354-a3a4-9145be0a5a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e2a214-ac94-4d1b-b6ef-7cb983420810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b131b68-4e84-431e-8962-7a277cb40cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "37b55c39-1908-4dd3-995c-139410d3ce8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "061330ed-f11a-4ed9-afa7-9b1176a5c397",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69a9cde-c200-4653-b527-6e1d3da1f469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "221a6bd0-b8ad-4611-8f80-a708cd62062f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9faa7d08-7162-413c-9c1f-2939098c8c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0eef9f0-fc9d-407e-8d1f-89b09eb98fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcca435b-daa3-44a8-bb56-4c1fd711c76e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91b4a93-97ed-4db2-b2e7-17fd2d7ccfe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54903021-296a-413f-9478-531187908988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903fd116-9cac-4e58-97f0-bd6d8c65826e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f3245e2-b665-47fe-9d04-b1e6efbadbe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5059eb39-bfb9-40fe-a5c3-7040696b0c68",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5015911d-cd2f-4ce0-ac6b-680dda541cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c01a8f98-dc1a-4cc4-b9ca-3fa6293d46a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897a70cc-40f0-4602-a6cc-8322eb13f11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6893715c-cd9f-4682-88e0-b87d189c7f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0aca6c4-4078-4c3b-9d01-5e8d33d9ac99",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "692ad9ce-e6a3-40fb-bea1-be514e2e423f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df6676a-345d-44ca-aa69-4b54238dc1b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c082250f-1032-48ed-9130-2a3a91dbcaf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74dda1f1-7b80-4d90-a80b-071f3e6b55dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ba5196-667c-4eb8-aef6-706f2e5f5697",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46348fa-d28c-49c1-b63e-58083610bd0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7a1c4a-df1f-4aa7-b9b7-36a8be50d99b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166fe38d-8ec9-4414-8e18-c6ae38322eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e37dedd-ccdd-4ffd-9d8e-7ab67fc6ce34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1644adb0-6474-4455-a5b5-bff548937cf9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e39e20-0c2b-4fe2-bf5b-36abdd7c21f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e74d32-20d5-4e2f-a33c-60696e45c65f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9aca3c-986b-4da7-97eb-d73a1b267331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc388402-f00e-4c2f-9d88-fcb25f78b9de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a5e2de-e5de-4b6c-8c3a-a253cfc81494",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58fd1c0c-3404-4134-8b4c-492d51cb1f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e592ed99-ce65-4283-b9b1-d7f80937cb9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d08c08-24c9-458a-beac-5f8cd6ca5862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2138483e-3221-41d1-aca1-ecb87c1d7a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12dfe065-5d84-42e7-9923-097ab7f27c1d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78bc003a-3aa9-4641-881a-6089477ff340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54885884-6bce-459d-b209-293c81d19d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e8a00fa-6b1e-4c2f-bfe6-8c1f024b1ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0835e08c-1f31-4b5a-aac7-9ee3eca624d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021722ee-3ae8-49bc-8a55-09adef9c1a06",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6620a44e-ae27-4390-b2b0-3509e74f9b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ccad08-1ea7-4c19-af07-0da52234f49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d2f567-8e15-4b55-bf79-a3cc27c8a30e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bfccf7c-62f8-46de-bba5-c9a930cb73db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86b2075-71a6-40ae-a066-a25d09c7a74e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b37afd-b76f-4319-8138-257921a65502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2e3a9d0-0d2a-4521-9a5b-ae52b9501c86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94bcac3-1dd7-4e34-86e4-c753802e3661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5edad883-1c98-44f0-8961-785e818ab442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b7cd46-4c64-4da9-b6ee-6e4736333311",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b00d9766-707c-4194-bc6c-0833bc733392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb6d5f6-3ec5-4948-a65b-01bdd9289093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93ad6f3-8ec9-4a1a-935f-77ea1b3c058b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49db6bd4-ce63-480e-809f-afceb0bbca85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f955a7-1f61-4edc-b463-d29567296c52",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86840867-9178-4890-ad3a-1b28653e385f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d85e9f2-d5ff-4154-a60f-dbb8675f95e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f4d681-fbc9-4ee9-8659-9f00466f95a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38a03917-5d37-44b0-95be-24fd200d7831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b874a9dd-406f-41ac-9989-587bf4db48bd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da14c1d4-b03b-4af9-b8b1-2e1148af0f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f914c5a7-f9c4-496d-990c-5ebfce835499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd52f189-cd8d-4f44-a2e6-9cd6b391a96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c73ca97-b99a-45a7-9810-06d4208b1e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe06e476-061a-4dc7-8dcb-cd4cc7fbe09f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21aaa530-cc49-4f0b-b8e7-4b31d472facd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66208f38-af5a-4b7e-ba65-43ecd619c614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe90d2d-0b77-4de5-a85a-f226bd8d3c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1eb0a115-d53e-4c3d-8ee2-96c8619922fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe48f572-e23b-47c8-aa35-bd107725ed06",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a882c9-0c19-4a35-ba53-91c431d17057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50758968-765b-48ae-a715-e5b62fa84031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0abb8f4-0d1b-4892-88fb-0046fc369602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "287b0717-c141-465b-8c7f-83a93c270dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04cf3b8-98cb-46cc-9a9f-f16776d77dd6",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9deb37f-4c8b-43e7-8bc8-22f6eca58db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c72bc96-397c-4f42-8eaa-6729cd631ec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1db47cb-6b56-424c-a024-ef247376c53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "625117a6-6640-4077-bec9-0e2ec8fca9ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616462fb-fd1e-49b8-af64-54b3f49f5cbf",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e31f79-72e5-45c5-a82d-10831a314ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1625c46e-412e-45c0-aff5-0acdf10ed36e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb8eb2bc-5d5a-4fa5-9221-3bf55b64059d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f9ad15b-68cf-47e9-9d40-d3d7ccfc7508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1c03be-162e-44c6-9f45-c834bafff326",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6ba00b-9a74-46ce-ad51-3818919a7c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5c49b4f-6ef4-40c1-a089-594ceba0a305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c062a0-d7b7-4234-9d31-f8a03cc9db0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3bc2256-de8d-47e4-aa9a-9cdfdb56224d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21205b8a-c56f-4af9-97d7-196369348d92",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de77e6ec-45e0-4c9b-b162-c858ef745592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81af7c32-4892-453d-85ae-7f2ec0e860a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "525cc047-7a80-4053-a600-73623f579cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0774fb17-179c-4f97-bd97-5d361170aecf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a1124073-9c27-495f-bf0d-c68f628c8a3d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2dff494e-177f-44f1-956b-d8512fd9c5c4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1be415-7f15-489e-ac11-f02cac394f9e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0e6dbdcc-e2be-4ec7-aa26-5e69e5573adc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08611c28-fd87-48ce-ad66-354b1f271492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc28eb1e-155f-42b0-855b-dc51d25ccbac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "302253c0-eb83-403c-9149-549821849545",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4dac912e-a28c-4ace-b869-edfcfa2453b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3eac618d-5eb8-47ef-a3f8-f6df5c4388ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5cc89d58-ca0e-451d-85d2-d903e480c726"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2f75130-21af-42fd-a172-1534f60eb2fe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "45ad3445-ece2-45fd-aec9-b0579a2dd18f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ddea2e73-d186-4c33-94a8-3382ed0d480d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53c77a13-3fb8-43b8-a52f-1103a41eb2b2"
            }
          }
        ]
      },
      {
        "id": "050b579f-a29d-4d93-82b3-5a5db07a88f5",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "222f49eb-d338-46a5-b787-9517e92b564d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8d87a5bb-acb8-4f7e-89d3-fb86f4552aec",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7684db52-e5f3-491f-9175-75b54ead08e2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6daea27e-0731-4f38-a1e8-dcd1326544ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b565d86-511b-467d-a1e0-47bbdeb61dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82054f1-5246-42c0-af6c-47240a7d2df3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4741f366-b358-4a7b-8f55-0e42dc0d9908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2aa767f-f028-4ff1-a7cb-157de7b92d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8689b5-3f0b-479c-9dd8-0055379f90de",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9cba07e-2e91-49a5-8a00-b4009568ded5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15fe4f8e-4333-47c8-a598-5b530fff5cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72741e56-a368-42a6-97db-913c873de1c9",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536584dc-c321-4138-b2d3-7f3d45808d72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb6872b2-8638-44d8-b5b3-1e0e757b1a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0390a29e-17a8-4074-8069-43e1f228e8fb",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ddffbe8-55db-4946-a415-e4ad442bdd23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6273198-23fe-41f8-8f9f-8f4edf4ca4b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37bc3ce6-81c5-41c7-ad8d-662dbb5a2492",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b924e6bc-8a31-402b-901e-18a5754c9a24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddc4f9ea-eee7-462e-890d-df8e915492da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c2e79b-ea70-4930-ab78-3c8638412944",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee66b2eb-6e1e-4a90-af95-3c1588b9e75b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "415bf9f4-f527-42c0-99d2-c0f764b999b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff131ae4-19f1-4099-b42f-6d5c50e37a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "293bd118-916f-43be-838e-5c007513ecd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f37c331-c8aa-4e23-95ec-2daca4f2402d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd24ba1c-a7ce-4258-9863-4c5e37ba9ec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "516b0309-bb9a-42c0-a999-b68c0f197cb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bdc30d1-28b3-413b-89b2-b94a54473129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9eccd33-50e2-45b8-9932-495b45750f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35b2f79-c5d3-45d9-9162-812614180e07",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb60b1c7-be28-4d1a-ab67-923b74479b60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cdf41fa-fbee-48b9-8b58-3ad1c6b4cc02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a0b20c-6382-49bf-9a80-4705c63771f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "211297ed-f401-488b-84d8-b559afa97e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5037082-e898-4e93-a2ed-162640f33851",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1498a03-497e-4a42-a8d8-0a14613140df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdc8c6fe-618a-4edf-be3c-e436cb60f19d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acff6550-52ef-4a01-be92-7223e95861d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c6cb69-22ff-470f-9806-c837dd57e75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad7a4cc-0219-4cef-9a26-2de78f460676",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c5f611-d258-43d9-88c4-662d48bca87a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8700a734-d826-464d-8f86-48a333ba80bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed8c5aa-7c9d-4f3c-94f6-4dd40f24452d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e864026-dccd-403a-a292-23b8c383e149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c27fd5-e2df-43f6-a60d-55796261ef7a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d6638e-2ff2-4e84-a35c-84c17e438d80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c222d071-2842-4710-a628-008d18b49df5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8fbaf9-f02d-4345-913d-1c8458f95d43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45f58418-d017-4c38-899d-259395e4dabb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0648ccad-52e7-47b7-a930-e0798bb55689",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf0b8dc-6c39-456c-b3ec-8a788eb76757",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02af0fff-a6c3-4aa2-a642-da7f8a143989"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4974304-2647-46af-9ebe-bbfc01de4f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2bb3fdb-9cb3-4174-b29c-5affa19b6f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13f6132-db4b-44f5-afa9-786b1ad68995",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a405b39-1928-4469-862a-42e866b3ca55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f87b762-78b1-45ba-863e-4549fc9e8c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ea922d-b6b2-45bb-a511-9b1ffad94202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69d826fd-dc88-458d-86fe-14043ebeecd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b002c656-de73-444d-8661-bc61a3e7d3ea",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f890ba-6abd-4816-9527-138fc634811d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "525bf6e5-ac4b-441d-88d4-2c38ed0b5293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "007312a8-049a-4713-9a55-050ab5aa980f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b772ec9-bf29-4f01-9b4a-d2c4fdee5171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8c6ca9-db7c-4d25-84a4-a0914afac3a2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29c8541-a729-414c-987e-5ed405daf043",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e89e518-ed0a-4ffc-9abb-cab0cdb8c4e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a92a643a-1e72-4a6b-87d3-27d0ee1519e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aa5124e-b043-4474-ab15-0925a74cd8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8204b641-b3ba-4f87-9963-913356450be6",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90f510d-609f-4bd8-af5f-6f29818b2caa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4201783e-9311-4670-9cae-e62b7fb39117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d672c106-9cb2-4908-a48c-87a774509cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc2713d4-1154-49fc-bc61-e0f795d7810e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5286b86f-ac8b-4e61-9a68-68670851a2b3",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0eccd13-139d-4c82-8fa7-18666ed1c1a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcade046-c7f3-4e35-a91d-3133dc662c64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b109141d-378d-4fe0-9002-d4d5fff26276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7071bb94-8019-4b02-95b2-617d0847b540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ccc240-2fff-4ab8-b956-0a0937261bf8",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d6920e-fd96-446d-9c71-aa3b3c396f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b47a970-0b92-4630-abdf-246c9785de3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c20e44-2132-441f-93d6-e7332d7a21b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d12f6670-72c9-42fa-8f1d-b67a16b3509f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9838f6c7-ccf4-4eaa-a2a9-f3d56a4965f3",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c266715-720c-480b-913f-6d7279249d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f187837-6cd7-49e9-9f14-3752c808501b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ef0562-929f-4427-bec7-e462909a6a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1424a163-3ec2-48a0-8d13-36d15ed49b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bae6192-c5c3-40fc-8f3f-cd4361403a3a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "033d0ccc-468e-44ca-ae2d-63d0a3c63301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d823d0-2c3b-4f2e-b910-2ea2cfbc0889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ac1237-cb45-4ebb-81b7-97a888d34976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc4231f7-fc43-4b61-9c3d-25725dc54984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbed8df9-7d8d-4b13-b911-c19c9f53d2a5",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4104e7d-2a98-4b23-ae85-219e3f5845e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3105bdd4-0b04-49c5-8aaf-39ecbf48e0a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0d3502-e63e-435c-8f6a-f7719cfdb0ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e0810d5-2bbd-4b24-96ae-fb7b7ceaf358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f856e5-d22f-4222-8441-76de740dd390",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af492bc8-d387-465d-bfdb-c1665a7dba36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ddef725-3286-443b-8692-440464ea52a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9179a0f-b591-45c2-88b4-47707c398445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "510e54e3-1cfd-4935-9f22-e2144fd49a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "403901a3-ce1f-4dee-9ec1-2c6bd58a5209",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c10235-3886-4887-b5a0-572c0e02ef31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b08af00-98f8-4da3-82dc-fdcf84f39ebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a262ed-6984-4883-af3c-4bd5cb14b5f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58cbbbbb-608d-4cca-aa10-051c8dc19b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb80da6-19de-4f95-ac35-ede052ec7218",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ca1600-5f55-438b-bbcc-a57dafa6defa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f101a96-a37b-4c72-ac86-979e7cbedd56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce4d8d1-b63e-4e60-867c-1112e2cb8220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58596d33-2a61-4c12-bc23-cb722740924d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c0d5fe-1fea-4e6f-956f-152f274ec1a3",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e935cd-e470-4e82-98f4-a98115a6795d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d374b375-1ae2-4235-8633-a633f7b8c66a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca8d590-190d-4ef5-be62-4eb12ce1d081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7355f8b-f953-4261-9a7a-cf5faccd777c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2266427-2904-41c6-a176-68a610138b23",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be02b3c0-e8a7-4faa-a343-74f468430234",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adb9e513-1797-448d-9cf0-8790776951eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b19c061-a238-48e1-8a6a-be4fb114be94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ae76511-9942-4e61-a7d2-555b53866564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb752b5b-341d-4463-9079-01076c694273",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b18205-5cc4-4a35-a5a7-3f31c88f37c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05773b8-e92f-4cf7-b626-3bdd834ea627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ae9192-fcfe-4332-86bf-7547fcc84ac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bbbb403-2f97-4dff-b1b9-a57e515b15cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828e5154-4e99-41af-8c0a-0d5fa67d7e07",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05c26b4-4ce2-4911-91fc-1c2bdf9e685b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "454f2266-6b57-4782-9031-8c1ad2d264d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5f01ca-bfe7-4fbd-9664-a8a2f8360fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c8a5bc5-cb7a-41d9-a7e2-0d597321a6c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2427add0-2495-4573-92e7-957d0f175d0f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9526db6-eed2-4104-a621-e6fcab6cc721",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13e5a4bb-6f7a-459e-bad0-4839ace73c9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f937c0-7772-4246-9340-72ab843218d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a201f7-3e2c-49cc-af44-03ee3e1e8853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceef68d6-e290-488a-84bd-852821fbfc8d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06aa0895-499f-4650-81c2-599edf171e67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4a15144-edf6-4a93-b04b-1594735416b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff64315-398a-4648-b578-21197cd90279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3db5a8f-bd13-4819-b4a6-e55ae222dad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05208207-5e97-4e21-a742-a9fca413b097",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cde7f5e-1ac9-457f-aa49-5b7933f603d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "154f5daa-94a2-46bf-bf39-25fa0d01487a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb19345a-2d9a-47b7-811b-6c5c57ef74b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93262713-ad26-4e76-b4ba-439ef6d9adb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a25d45-1a15-4e5f-9f86-a3fd0174bd7b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a194ba-1d13-4e4c-9b5d-67ab32da22ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62b37084-6c5c-4853-9c52-313256ffd913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35acc1e7-a17f-4092-8c9b-4ea4428634d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "712decc3-13c4-463c-b131-eadb884c6192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3116c1cd-46aa-467d-9ddd-e9d974b80514",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58696701-9de4-4b23-ba45-3598377d80ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e99bc61a-547c-41b6-9d52-0d7fdad589d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01aefa48-61f1-4d53-b905-1cb5fd46a686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30714d17-cda7-4f02-9436-b31c1074f083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8b5e61-55fd-46f3-ab34-ad2982a03574",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3d3a3d-b260-4b0d-99f3-8e35d324d933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b98b66c-da8e-4b8f-918e-cfd50c704ba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda93553-6db7-4d4b-96ca-3a1e726d9346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82482bbd-d0c7-4529-9f10-90426e60c915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73488923-4e1d-4dcd-981d-8606757e2eea",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "998452d9-1ff4-4583-8e61-076817882242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a4b48f-2a15-45e8-b8ae-912aa9bd8522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a857b330-fe6f-4297-bfd9-73f5fc1a38f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47760825-00d5-41c7-9e15-e9b498a89e4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "025e2681-a566-4cf2-8954-b699e0fc2f8c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8bba70-f17f-4f65-82bb-051dcc05cd8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6104011-0b7e-4348-9701-6ef6d3aa7c4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8185c6c-fe6f-4523-95c2-7c798cfaa07c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47254809-f845-4935-9f37-76659be04efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb4a328-c270-4cef-bfd1-3c43a0d0e94f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54cbe77-81d9-4b36-a1ca-2ca88ccd2eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde84ea5-4a09-4dda-ac1a-524a670e9fe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d159eea1-b5bc-4927-8b27-bf4e20d910da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b070f8-dc21-4f8c-aa89-3659b02f4051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38446b1-ff8c-42f8-8de5-323db2685735",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cc8980-2065-4813-a565-7eab0977ff9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cfce993-0ea4-4727-8bce-9a6547bb05d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21c0b09-50c4-4f61-8120-53e285f68718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "147a2ae1-c0a1-4833-be88-07b860773fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9ad796-a186-4ae8-be06-4adf6eec45e4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d8e948-d206-4f89-b559-4921d1930085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b820047b-9e09-4c8e-96a2-e6c143e2c25b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "596e2b66-8152-4344-b4c2-4756547adf6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "782ad761-8c43-4cc4-a4ad-9c11215413dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b0d3eb-d24a-4f46-b213-035c9dd7602a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a814a5f3-5236-41fa-b0fe-4280096ac414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a969dc3-364f-485e-8763-cb65d5f317c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "265e4e1d-61e3-41fa-a36a-fb03a3cdc559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e27608-972f-4a09-a4f4-82053906118d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d9f69c-1e00-46af-b662-28908b42fa6a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecda9df0-0f66-4ca2-889d-936d6b66225f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f884524-e580-48a9-949e-51c07dcaa786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03108fa4-8b46-4fb1-ab99-98ad5911ae4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db157347-5fe3-423e-8f1f-9bfbdcc2eeb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e6d02f7-8526-4732-a8b9-b206282df817",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60e88ea-af4e-4ec9-b590-297fe3ffcd18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eecde14a-0f10-40be-80ea-cb8bc4805df6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0839d1f-bf38-4aa8-8c69-93d40830746d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f26d90a9-a22b-4647-bf6b-dada16ddc2af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5681d588-e094-42e2-8d2e-4f8c94f70d05",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f85062-e542-417f-a768-38a32ff107af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "472a295a-a66f-40a1-879e-fcbbe62e4f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "087ebfcb-842b-44ba-b711-8a0e17538a72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea0de53b-04c9-4e7e-99aa-a42a6676ad20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8388806-fbc6-4e35-9807-af069cf2d0ab",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e665c6-183a-4e18-a899-4218cc9295b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b36d597-e664-416f-a326-df9cbd121196"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a2b82e-ddbf-43de-a669-879189806d30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86751d40-76c7-4146-8f97-771c59603b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5a6c5f-ff41-46be-99d6-a9f186882c1e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880654e8-49b7-4de0-b18e-15bfcb12500e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "177b4cef-11c3-4390-845a-eeb5298973ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "982f180c-0f51-425f-887f-e3a5ef3472b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47f8eba-1dda-4be1-a3f0-8af8e6c8647c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fefe6ea-aed4-4e8d-96b1-74c2362a8cc2",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d8918d-8907-44eb-883e-f7a4d3760197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ff75e7e-fe47-4f4d-bacc-50e07f93c58f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd586f2f-59cc-4f95-8ec9-1809b5b589a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dfaabb2-6cfe-4806-955b-ffcc92692618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a6bbcb-d295-4645-a7db-cd1b304c4976",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1790af8e-9d10-43b9-aa74-700b8bb71268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e633acb8-2a98-4714-95e4-530ca9ec792c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d96c7a4-6867-4710-85f7-ca6c757fc3e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc4c43f7-d3ba-417f-b0a1-c7e8948af0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcda48b2-c346-470f-8635-18ae578c89ab",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753d1119-fa41-4d02-846c-0339dfc45839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4eb19ea-76f8-4c09-88c7-8e473783fbe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e53060-eed1-4cd7-b6db-e7caea24c8a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0acb8dc6-b3d0-4963-9537-0a5c8e59e362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195b63cd-055c-4e59-8388-232327aacbbf",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6881fa5f-3e85-46b6-b45b-139d79d29863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ada005a-e9ff-4b35-b0d6-ddd4f74d2703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f903497f-3f93-4449-87e3-b11047a71d41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90716d65-5528-499f-a5f4-e308d90ae58c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df43f95-50c8-4954-b084-94d24b00a91f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6801186-b910-48a3-a77d-2963177533d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6edfb2d7-64fa-410d-be52-d2c4e7e21f6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7052dbf6-34ad-4c54-81a6-f7452b912013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a36331-6b01-4017-be4f-408a48409e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c518f9d9-3251-48f2-9373-4be77ac8fcca",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500b2a39-bf68-4d8a-8224-f2d0a2c99dfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "887ff405-ee5e-4f37-b5cc-bd2179b03393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14bff76-68cf-4b70-9f4f-35855ef11a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca2327c7-25e2-4c0a-9699-96e7713daa32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12eeb510-36f4-4cc2-a02e-7d1da1260151",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff6e0953-ee1a-463d-a6c9-845ac91e38f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddedf128-34cb-4b2d-8bcc-7414daf21a08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb50073c-907d-4e55-97b3-58a048da524d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24fecfa1-98cf-4a9e-9bd6-0fd121670f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1bcde3b-c151-4872-b102-7ad97402a81d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef1b914-bccb-4b4f-bca3-7f383cb83e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ea480c-2a18-4864-b34b-616abd1b6579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3b158a-832a-4795-9a1b-1edcfca66313",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39802e5f-8950-4222-8c4c-bb3218fb412f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88128bf-7500-45c4-bb4c-0f42c5001cf4",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b4a7c0-dabc-4770-b3dd-068d4f06943f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76477bc3-ef11-4d6c-8772-a457d548adac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "113e43bc-4889-47f8-8ed3-e5b6d5dbc040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4987cc61-1fb1-4636-ab9d-95c2c98e9400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc10eae-67cd-4c79-b0ea-d82cd42446d0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05b5fc1-c6cf-4206-876c-3d044f121b54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f136f0-49fe-4628-883e-a1ce8e223160"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae55f707-ebea-4d7f-9810-d6531d1c861e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf21a8a1-e544-4116-9243-e39ce16af144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2e5fa2-8b30-4119-84a8-96671fcc188c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c743b91-f861-4582-86a0-7fad456bcb25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "099fa825-0750-4dd0-b8bb-9f2aefe7c40f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e930ece6-5227-495d-ba22-d78a8577af96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "820bb496-1933-4c75-bbdf-e03e0492cfe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d28bcd-85eb-4fcc-980c-02a29325d183",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90400840-12ff-4f71-b796-affeb1a15f0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27bced22-5882-4e9b-bdc9-e2b3d876bcbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4335b3b5-6616-4f78-afed-e30cd3931744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "494cc56d-75cd-49ca-bb71-76795895d085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbea56ba-3582-46bd-b955-9373c83b4390",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0d4a03-fc7f-4efd-a80b-f739e00a8a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a3ac0f9-eb19-496d-972d-4d78cce35378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b7c970-dbce-444c-815c-fdca5991ffbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee4c67b3-4cac-49dd-a8e6-e7eddc51ee8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5093efba-dd0a-4365-8a39-94b310263916",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986d27b2-7bdc-47e3-b5cd-c8b261e993c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cae4c623-7e15-420f-b5d0-ffa90f5d39a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36dc326-d448-4b4d-b6a0-9b736469b8e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba36d606-3c10-4f83-b9fc-e5ec0b77d987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b481a5d1-b9bd-4bad-bab1-1098aad33894",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e16a38-3650-4a5a-aa10-257641c22a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "345a38a3-6ab1-4a37-abb1-140a674e0cd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "028ca04d-bcfa-493a-aa0d-facb8916b812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "691f9119-c595-4a1d-b4c5-44bc683f5c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c442126-ea02-4821-a977-5850badf824b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c3d301-27bb-4a72-938d-8ac00ca5a36f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b84dbbe-5bc3-4206-a162-fd5d8e43d7cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de11046e-9d3c-4c23-bcf3-85d9f48502ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c173fb-30cc-424e-8439-fafa0aa6c03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a503ee7-9ad9-4be4-b666-dacfcb746ebc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "261b24d8-cabc-40fd-9215-8ab04559058f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcce1d9d-d912-48c7-a314-015f2a96ece2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a784904b-3e89-4941-963f-53aece30cc7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce8a4035-5d4d-4663-bc9a-fe1f15797f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8988da68-9a2e-4792-ace9-b2cd78c11eb4",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c54fbe-2ca0-42d2-897e-e5cf8c0a73ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "090e5804-a41d-4fe7-8f38-cee15c181d0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69be8b14-0805-4962-94bd-8ab10923576f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2049405a-640c-4ba6-8864-c4c74950a48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a01ae85-a9ab-47da-956e-98e5ed4c8059",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9fb7b1-af54-46f1-9801-61410c042e2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "592ca65a-4791-4b1f-bbe9-6b1e21449499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d399493-6374-4690-bf40-c8cb29daa9de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "949552e5-5b8f-4f6e-aca7-67f1f872df5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade897c6-12fb-4ab6-8712-17d680925a55",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5ccb38-5538-4c38-b509-01605c7ba245",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "443cb4d2-8b0b-4bd6-9837-d3d80e9b1cd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e6475a-3ccd-4e3e-b52a-679089f40bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "059cee68-f02a-449c-989d-cb4e9307ca28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe04155-6d96-4184-803e-f8a1528674cd",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f77999e-9bbf-43d1-bccc-e4c2ff53cdde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72ff6d3a-5246-4efc-834d-4d56e5054660"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d748ca-af8d-4179-82ff-303c4038eb8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c75a8e99-2fb0-4ef3-9f76-ecded1bc9048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2cedcf-e5b0-40b7-b157-435b16c2d2e1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6a4a60-a1f8-4ea9-8bff-6aea5dc2933e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2f14cc0-7556-4311-9bbc-208a3c7ca96e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a783321e-ad4a-447b-a5d4-f59515865dea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "754ae082-3b5b-407a-86b4-15fd5074ad20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb75638-9212-4822-bb53-7c9e88437502",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4dae5f-aaa9-4a09-a109-c3508a3b1a7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aacab4af-dd6e-4610-a81f-3924b6e70048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2800f0b2-ce63-4366-8058-7d9eeab0c469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56eb90fd-c7b7-4f16-b6f6-3cbeaa807b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9eb6cf-66ac-4ba1-b0d6-38a079ce8b2d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdaa0d01-c0b3-4fac-b1f6-7ae9ccab8bf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f694031-822d-4bbe-a454-98d4d637f24d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdcb1196-dd78-4e09-8754-a4c80e687250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab3c6df-ca97-45de-af1e-137c839a055c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b997a5b8-e653-4595-b601-13dc850b447b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d969794-0bf5-4a58-86d0-4b9db0a1e1d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe87651a-78d7-4650-8959-045a177db4d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "801606bc-6528-47f9-ac27-38799b5431d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b9b7be-6a86-4d7f-84c7-8afcf3d7a2d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5747a6b0-399d-458b-8ed8-2159582d74c6",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12de62b4-59cf-45f9-add1-580550263275",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57b51792-dc89-4b83-b2fb-dff5ce656659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7119c202-cbe1-434a-8f8c-8fe0be927a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fedb5578-05a9-4943-aaa2-47aed0c59c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "735c9091-12e9-46a6-ac5b-8ccddd73c562",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1681fb9-7c06-40fb-ad35-c794ab2ac485",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e357dfc-3f61-4cec-b1fa-7f8874bced23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f5e427-e744-4750-86b3-0eb933291990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e838f716-b599-4f3b-8237-6f4eeaf622a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8491fa91-ec1e-4da9-922f-a119e36a56a5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adad4c78-e373-48db-a9f3-a19b5ffe1eca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e34d7731-0db5-4132-83b0-a6149c052dc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f412da02-35c5-4067-aa2b-97144fc50be9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af80ca4a-db96-40a9-ab86-ae9819a18978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd559246-8f88-486d-baa7-57f1f2e7dfdf",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05887cbb-4d98-4076-adda-081b2d4bec5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "013700c2-bc0b-40c4-90ce-0cec57cae915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de655e6c-ce08-4cef-bed7-77cbc3850607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6acba8b6-15fc-4c15-af95-06fd0592e297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43de1dd7-859c-435c-a40b-2a41328fbd84",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e9296b-971d-4bb6-8ebd-ccffcfafed36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12ebb5dd-a180-4b67-8a3c-caef6db60a2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91529923-e5f7-4d07-bc35-4217d1def56c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45eb5cb7-2ad6-4134-94da-be8549c5c193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc10433d-9278-4fbb-b169-979bd70aa956",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bdaece5-2e6e-4c17-8a60-6863fb2fa4e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ea240a0-b0be-4e6d-86a0-e3d185fb7557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7a6a8d-7c45-477f-9999-e6f1ebf144fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf4ddfe-7204-4024-b21e-5802e6443275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d171c0b-7629-4353-8e7f-32933ec086a4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307f0ae1-a37e-4f9c-bfd3-befdf3a92b11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23e13a01-68e6-40dc-9173-5ede5b3243fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d78dec-5611-4de2-9318-f24ca3891cb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b31eeba9-96ff-4842-b424-bfb33ff240ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849af544-c6cd-49b0-8edf-3b670b9c467a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7270f7-3934-447f-a5e2-eb223ebb6513",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e3bf534-667e-4d69-bf2e-b09c8a23529d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "893bbabd-4275-4e5d-bf0c-9680ad1727e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c99a75fd-2bd0-44a1-90e8-8f7ad78c8f9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5781549d-dcba-4e47-8e83-e4b73649d9fe",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e7b71d-ceb9-4b64-93ae-c7878f088a25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae9a9d9f-dc91-4c2e-ad87-2e7275e8f9b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0ab7d3-6d5c-49e4-8370-6dd2ee327dca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adbbb9e5-d64e-4a57-9971-8aee29cbb1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a39302-b2fa-4b37-a0c8-61aa5e8cfe29",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9578891e-eb66-4917-89d7-f88385c932eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0d3decc-d9c0-4051-a856-d7bea3abe1af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8eded01-15fb-4b80-aa0d-963b81d558d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b03fdbd2-a2f0-4c5f-ba8f-d9b1543b0f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9576d0-50e0-46e7-b35c-3e4be19ffcd5",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd7ef06-c0e2-4f67-8f76-489f3904e2a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23092c80-1e4a-4afd-b567-2e8f55255198"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "433fc301-58a9-409c-8db7-bd522b03e0b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b614e8-e517-4e6a-9321-e9f3ab30b3dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20101672-44e5-4f60-8e7e-fb71a02d8e76",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b862bf6-1cf3-4930-9a40-e48b9b23fb4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b54c7c4b-13f5-434b-a207-3821034bc6c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1c7c9a-ab7d-4670-8474-fdaede5c9d32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6d9f31e-1c0a-43a6-af13-1d7d372e3f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2774169-85a7-4c4b-af10-13c486a5378b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f01c8f-b5a2-4c7c-9ab4-13287a882784",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f7baeae-701b-4342-8589-a194a978d466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce54f807-516b-49b2-a7c1-33e362eea512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23933f0c-b298-4461-b2bb-ae69fe000704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1762ac09-ffda-4561-a568-5c401acc3282",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66177cee-a3ac-48ce-910a-1bd71cfd17ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd282ffb-33fe-4c7c-869f-f02d288aeb39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0e48ec-1326-4632-8308-27b61d2b4633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0123c9b-9a09-4359-be79-2f659c3ad7b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9aa4cf-9311-4e74-a88f-0f3a0576930b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "108a0afc-1485-4198-8576-28f5ab290fe4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c394ec1e-cf41-478f-8b1f-304a722a7a49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cbcca82-007b-4d87-b5e7-7b7ac9954c2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b122afde-cfd1-4a1c-8747-acc67df3b731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7881c4b7-f4ed-406e-85ab-05b2002ba0ce",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348f7a65-01d9-4175-92bc-1eef2e82f575",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6bdd058-8c9f-439f-9c1a-70e2c927b38d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6acf578c-d330-4ce0-9f43-aaf15936be1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab533e5-5a52-4a98-96ac-69c1557ff337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb0459f-0d82-46b3-bf9e-8e232f2434b0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96323235-662d-424d-90a4-7dd8687f8b56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4936d224-bef5-4b55-8876-020d9f4190d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf871bdf-13bb-41b1-a256-c35da4bc653c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab75050f-eefb-4a16-92f9-b9f56c0203d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61e787a-21ea-488a-a156-5e2c87123811",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5c7bb0-5fea-428e-b0dc-d9274b6058f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc6c347a-9754-4878-9fe4-3b4baec1a69e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef99b0b6-40dc-446f-a801-48da64295b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a5feeb2-2ed3-4b94-99ba-859dea1d7690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e27aab7-0fb3-4884-b395-4d8604ef1cdf",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839c4444-2317-49f4-9a3c-44858d95c054",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "260083eb-7a2d-440e-81ad-6e4c96722469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efe5e6d-ab03-4f94-8791-74730165a0c3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4541abac-90cb-4b3c-a31b-5d756afc6152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78101e4b-f48e-4fd3-81c0-550aeb0e82c4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd982ae-9d5e-4b52-a30e-e2c4db74cf4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22845ea7-6f98-4b3a-8d73-b9e055786df3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0615305-8f77-4e13-9deb-555153a04163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a466e5d-6f2d-4904-99df-94a9f1f22cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec17aac3-f96b-4bd5-9c9e-a7722b70475b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f4dd8d-b45b-4028-a7c6-8a7f35377e35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d076a477-838b-467b-ab13-fc4fd8f6a013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3d218c-af81-475e-8933-ce7860228bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e379f8cf-0b92-446c-ad2b-8f115a15901a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ddaa23f-8fef-461f-baa5-5458f07fb200",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6ba8a1-7df8-4111-ac88-b2573d49f452",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb5bde2a-392e-4e26-9c9a-7ff514d1858a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da87f495-f3d8-480e-885e-53cdcd2d364c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19f8cefe-4911-4358-a143-21a304aa9ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a80e816-0515-42e5-b688-a31d0b29e448",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f878c08d-8dae-403e-8f74-34f674144fbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bd0d25b-c06b-40ca-b668-c74a90a357af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2b5238-78a9-4523-a2c8-13ab0c738ee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e03b9c-f93f-4fba-af88-4766f3e0d4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f088b14b-6891-4945-b102-ffb645151532",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ba5fcd-93ce-4637-97b6-9abe8a3dc052",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15040deb-448c-4a0c-bf43-57d36ebda1ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd8bdb3-6d36-4186-83bf-58d0098f5754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "699e1dc5-62c6-4b63-af55-70ba53815767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2adc8036-2e27-4be3-9332-598e754dde2f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08287421-7b5a-47da-9d5d-6cf7961943a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdf36f5f-e471-4fbc-8d0d-929f4b59ee10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "022bab7d-0826-45a5-85ad-b264093b74be",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64d64415-8fa8-44bc-b829-dac43d23f92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9668db3-f7e3-4146-8e0b-59b6f907736a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3b05db-57b1-4161-b616-0827bccfcfb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02926d36-d12c-4e7e-b59f-a94ab289cfb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b673d3-2da4-4931-927b-c5e9e0082c3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92f50f5a-3139-4fb2-82ae-0e3272444f2f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ca03cbf-2f70-4784-9a9c-0dc108bac5ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ba18014-6d2b-4da2-a1c1-8f9f70efa621"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f3987f3-78bb-4c6c-a7a0-40bb3cbd8eeb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "029b3266-21aa-4a85-8fa9-ff91b44d8bf1"
                    }
                  }
                ]
              },
              {
                "id": "4abc001e-968a-41d6-9194-b2297a06f98c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f768ec71-7eeb-41c6-8faf-1f3d902cae6c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa9c686-2d79-489e-86c2-4bd5439728e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5e794ff6-b74f-4814-9f2d-1953fb96215e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d66d00d-822f-4728-89a1-ca6695d10871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10ef8a86-4d32-48ff-b0dd-464036aa66ac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e45d19f1-8177-488e-98b1-0e75605f3dc7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c23a7fd9-56c1-4b53-999d-4671b3255607"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6326dc5-d47e-49d2-b955-0fd2087d366f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "696b0ab3-6414-45a0-8648-d5d60c9b9735"
                    }
                  }
                ]
              },
              {
                "id": "ee82523e-5bd1-4bd4-96d6-e7934f6b5b8a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "edce0489-3090-4fe8-8071-77ba9aed00d3",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d158d0-18d1-4bb0-b42d-d86c7cb6c6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d5b569a9-186a-411d-b234-8ff2ee2e3999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7131fd87-3d52-43b1-99c5-44782e09e77d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19fd3151-9174-4e06-9394-96937d274d2b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "49bce509-2253-4b31-86d5-214c0ec44e46",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d1c62576-4a34-4229-b6c0-87066bc473e5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c37f0de-db18-46a6-9d8a-9074bb7c77e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d3fa51da-123f-460c-a6ad-34dabfbe8392"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "825d3445-29da-4d9d-84bc-79f4f80b8653",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5debfc6c-7626-4702-81ff-6868bd2ee511"
                    }
                  }
                ]
              },
              {
                "id": "2a5b4374-05de-421d-8c27-59ccab8c2fcb",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13dc0c28-89ef-429a-ab24-0281187e327b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3a20549d-2fe1-4a6a-b10f-443919526a3b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "305e109d-c735-4da0-bb5c-a1b1c4d1f1ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f650029-8427-471f-a077-879d3409491a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83e231e7-ccba-4fcc-8490-20309df666fe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2fddc8ad-abfd-4f9d-926b-451bd1859699"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8fcf9a22-47e9-4764-8f5c-5408c1a7429b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c6a8d6c7-ff27-486a-b7bf-f2a0b1452cd9"
            }
          }
        ]
      },
      {
        "id": "e31f6b1b-4361-4c46-b454-c3a62d68426c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "acb44088-88b8-4254-898d-62b1cc46f8cf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8a117fb8-6242-4a09-a4af-f8bb66ccf123",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d8ac1950-8bf1-4261-be8f-c539b17eabb5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5a5a89-b4b2-4aa4-9e2b-4ce4124aa6cd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ae786022-bd8f-437f-9d8a-ee98bedd6124"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "021d8a7a-4f7b-4b5b-bef7-32e78c5e05ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79ef03de-e30f-4261-aa43-62aa06bd238d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f0dce4f5-82ee-455a-89b2-35b13358fbc7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba2beaa3-7263-4bf1-9b57-074dad22f1e3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2e05b59-3214-4b8c-b0df-03f4542aa2f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0323e4bc-d10a-4293-8c05-3eae3f12d216"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "64a03a76-9f58-464e-b761-656df9a8fde5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "eb578081-80e8-41ed-af5b-7a4bd4862508"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31b4dde6-5dcb-43f8-be1a-bd04fc347d98",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "07c33e73-c42b-4aea-b3e5-629631b237b0"
            }
          }
        ]
      },
      {
        "id": "a5a18936-b2e4-457b-a550-c47c248403a2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "51eab0a2-0a35-4c31-93f0-f9d96b8e094f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "36134682-7fe8-441a-8660-8095f1cf2539",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52e64ef9-fee9-4597-856e-2366f9f63e71",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15099d0e-8601-41d3-88ff-d84a21ffea4d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9eca754-d5d5-4398-b787-5e2e6ebaa5de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e62f82b-59e6-432e-9889-e29508912641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d14d615-dfe3-4278-89ca-dbdd94439e93"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e86b2cdf-4187-4d60-8e4d-d0e4db8c24cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4c1dfef-3c31-42af-a78c-7f481dccdaf9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bf149ce-251b-480e-ae12-c6ca750d4e68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b56e33c-4238-46a1-be3d-ce0b30695252"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "146587c7-c58f-466b-affa-e2c85b087e36",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5f31e9c8-fe6d-41fc-a918-17e97d6e2fb7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91ac0995-da69-4124-9350-ab0775d12a3f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "930471c7-5ce2-4fb3-9e94-4f498102192f"
            }
          }
        ]
      },
      {
        "id": "b8fb7bb9-fd93-4fb8-8251-21a2dd93e308",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "44185a3a-5786-4084-a3b8-e14b9a458017",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0bfc926e-3f2e-465c-a1a1-ae31325a2f21",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e93b0c2-d463-4a25-b0cb-4865a9ccf186",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5448a963-fa7e-4ca5-9c83-075eb90a51df",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bb2bb1c-9a31-435d-ba09-47665eeb72f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9a284a-7b4b-4c3b-b64b-4df40b5d9b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6c9a81d-110c-4695-9ca3-bbff413940e9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb88adc3-e732-4f50-938f-f7b3ebe03caa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43a0f564-0b0e-4751-986a-000321ac4e79"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ae4030e-02f8-4087-a21c-7613e8e160b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70d1db2b-3138-4701-91cd-48273e6c12e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff1aa494-db91-4680-b802-ad9881f799b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4973366a-dde0-4565-8d92-95771285d12b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b1aafc87-1079-4101-91fb-2176f47bdea1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6f4972d9-2433-4e21-9bfd-3af9eb9b5534"
            }
          }
        ]
      },
      {
        "id": "69268e5d-1573-4bf1-95f1-9fffcdf4c7c3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a7962547-23ff-47ea-8c74-6ffeef9d2043",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b99c94c2-7015-4d06-99d4-8c97508ba813",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b81da6cc-9e5d-4e26-ac56-c14d5b87c9b1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f73fa059-a750-4c45-aca3-9e18ad16a3bc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67fb5641-c92d-4447-a461-05064b327921",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 64.71825396825399,
      "responseMin": 6,
      "responseMax": 652,
      "responseSd": 88.97696768211284,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1719708147428,
      "completed": 1719708172333
    },
    "executions": [
      {
        "id": "92443013-6c64-4d8d-9dd2-15172b5f4cb3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "23a08aa7-f7f6-49a5-ba23-07d75bef9e2f",
          "httpRequestId": "4383bfa8-a080-4481-8557-c7d657cf023b"
        },
        "item": {
          "id": "92443013-6c64-4d8d-9dd2-15172b5f4cb3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6f7f39e2-7b63-44c6-a34f-7a4adc5df30e",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 0
        }
      },
      {
        "id": "b917171c-1dfe-4203-ae8f-f83ba9af8a30",
        "cursor": {
          "ref": "9fd196b3-4aec-421e-98f9-d03abc1dbcfc",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7d4551e8-0381-44ff-a8b1-16d50852a796"
        },
        "item": {
          "id": "b917171c-1dfe-4203-ae8f-f83ba9af8a30",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "609e8603-f994-45cf-886b-884baa0871c0",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "292618dd-b285-449d-8303-f876d499abe1",
        "cursor": {
          "ref": "a853b8ab-678b-44d7-8e87-92343e6d1382",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "50ef90d6-0515-4451-a9be-f913aef26d0b"
        },
        "item": {
          "id": "292618dd-b285-449d-8303-f876d499abe1",
          "name": "did_json"
        },
        "response": {
          "id": "95ab77a2-257c-4a8b-87b6-344959ec3461",
          "status": "OK",
          "code": 200,
          "responseTime": 483,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef72705-e2ff-4093-938c-0ebb01a2c72a",
        "cursor": {
          "ref": "1579b26e-117a-407e-a870-bc09abfdf984",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "77dca2af-d7a1-4c4b-98dc-9747185b2197"
        },
        "item": {
          "id": "aef72705-e2ff-4093-938c-0ebb01a2c72a",
          "name": "did:invalid"
        },
        "response": {
          "id": "1441f38a-510b-459e-8c58-d03238eb3e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef72705-e2ff-4093-938c-0ebb01a2c72a",
        "cursor": {
          "ref": "1579b26e-117a-407e-a870-bc09abfdf984",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "77dca2af-d7a1-4c4b-98dc-9747185b2197"
        },
        "item": {
          "id": "aef72705-e2ff-4093-938c-0ebb01a2c72a",
          "name": "did:invalid"
        },
        "response": {
          "id": "1441f38a-510b-459e-8c58-d03238eb3e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "799f66bc-9022-413a-aadd-b525d65e91e6",
        "cursor": {
          "ref": "e314302c-b1cd-424e-9883-e32df80d32df",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4257ff6c-0ca2-4c73-89d6-277926974261"
        },
        "item": {
          "id": "799f66bc-9022-413a-aadd-b525d65e91e6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "73b9cae7-2b7f-414c-9470-abfd194c7ff6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 304,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c771cb0f-8a0b-4bb1-9774-b1b88f2c2762",
        "cursor": {
          "ref": "0f44d313-c3b5-47ad-acd9-ae7718c79f96",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2b33cc33-0719-4e30-a358-09d24a6d5e37"
        },
        "item": {
          "id": "c771cb0f-8a0b-4bb1-9774-b1b88f2c2762",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6d802438-1340-46b7-97a7-76d2668531ca",
          "status": "Not Found",
          "code": 404,
          "responseTime": 27,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eabef693-63be-4eb4-9226-6618cfc60a47",
        "cursor": {
          "ref": "8ce1f9b1-711a-4586-a2f4-5cdeb070a42f",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "59ba23eb-7ebc-4a71-82ef-9263bd47905f"
        },
        "item": {
          "id": "eabef693-63be-4eb4-9226-6618cfc60a47",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f8a3c749-d34c-4774-b89e-6bb506a25481",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47171dad-09d4-4b85-9781-2249583b117b",
        "cursor": {
          "ref": "e25a0f4d-2974-4976-9b8c-a3e605e762f3",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9a591d44-2f39-455b-ba12-707c3b74d019"
        },
        "item": {
          "id": "47171dad-09d4-4b85-9781-2249583b117b",
          "name": "identifiers"
        },
        "response": {
          "id": "9b67efd2-774e-459b-ad06-3bd4825c281a",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584f9310-7a09-41ca-a334-6d81996f4b90",
        "cursor": {
          "ref": "7573e22d-551f-4635-80f2-8c63ad98009c",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "cac87de7-30bf-4a56-a2dc-49e42f845a27"
        },
        "item": {
          "id": "584f9310-7a09-41ca-a334-6d81996f4b90",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5ca17efb-1e17-4063-92ed-8135c8080858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e29747-2d9d-4dc0-9b59-7ff65b86de13",
        "cursor": {
          "ref": "9b90051c-f452-48e1-8ad9-cc20139c9439",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9b88ac32-a3a2-4c66-beec-40d2f81351af"
        },
        "item": {
          "id": "71e29747-2d9d-4dc0-9b59-7ff65b86de13",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4f22415c-1960-4a50-b583-8ace52dca69b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c5ce79-3c53-4093-83ee-00c08bc26b23",
        "cursor": {
          "ref": "5a668dcf-f415-4e93-9236-f3dbeab2c51c",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "978beedf-f323-4027-bce7-b4a2da15c09d"
        },
        "item": {
          "id": "29c5ce79-3c53-4093-83ee-00c08bc26b23",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4cf29a5a-5a16-4e88-bc61-1201906578a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca32884-c1fe-4373-b95e-27474b274d06",
        "cursor": {
          "ref": "83adca4f-475c-4088-9774-f129cc97d890",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8a79f374-8724-442c-8a17-75924badd86b"
        },
        "item": {
          "id": "eca32884-c1fe-4373-b95e-27474b274d06",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "72cf4efb-baee-41d9-8ebd-654de9ebc5ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee5a22b1-2fdf-442c-ad2b-b3def9d7a9ff",
        "cursor": {
          "ref": "5ee47f3e-dd27-41b9-8179-5a7ee56506f9",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "cc3456a4-51df-4364-aaae-1058446127dc"
        },
        "item": {
          "id": "ee5a22b1-2fdf-442c-ad2b-b3def9d7a9ff",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7c358e45-b5e9-4158-926c-d13ae48776be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "570ad6c7-8624-44c3-a08c-9e193cf5e433",
        "cursor": {
          "ref": "7a15a7b8-12b9-4305-90c0-810309164ac7",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "62da8250-245c-4ed5-a77b-ffc382e7d298"
        },
        "item": {
          "id": "570ad6c7-8624-44c3-a08c-9e193cf5e433",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d7e2e8ea-cf9f-4133-879a-7ad69fcc1685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9f1d9f0-4bfe-4615-a9cf-40bdea29e4a6",
        "cursor": {
          "ref": "217018f0-30a1-4847-bf4a-52a335506832",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "049dd3a9-0f59-45dd-9920-44740cf77ccc"
        },
        "item": {
          "id": "a9f1d9f0-4bfe-4615-a9cf-40bdea29e4a6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5b690bd2-2eaf-4a6f-91d6-676c6832f67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b34241-abbb-4a2f-b941-ab6277f12fe3",
        "cursor": {
          "ref": "a17b3a98-f030-4e58-9162-d7c9f702aebb",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f1417ade-8271-4028-b78b-8b839842bcb0"
        },
        "item": {
          "id": "64b34241-abbb-4a2f-b941-ab6277f12fe3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bf8fbc88-1802-4c4d-8e3d-2304da5c4ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ead32da-eabf-479d-9de7-233a1b113966",
        "cursor": {
          "ref": "02c5e9b9-ec67-4077-bcb4-6b903ec9c755",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "006565b7-3f4c-42b7-820c-1c3b8d9923df"
        },
        "item": {
          "id": "5ead32da-eabf-479d-9de7-233a1b113966",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "372ddb3f-c000-4568-ae55-e72ceffe00b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f5084e-52cd-4ec6-99ac-bb941aa9feb4",
        "cursor": {
          "ref": "e9de03b4-c72c-43af-8499-854955a1912a",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "bfc5f64b-e5ba-41d9-b387-d1706e834070"
        },
        "item": {
          "id": "d4f5084e-52cd-4ec6-99ac-bb941aa9feb4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "933d3d14-b27b-421e-8033-37c13b1c805d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "544fabc6-8e68-4677-a994-6daaa9a04b1a",
        "cursor": {
          "ref": "d975f4f5-f92a-4f3a-8767-8821845a7a63",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2ae789c6-8e58-4265-bfc0-96014c13d0d1"
        },
        "item": {
          "id": "544fabc6-8e68-4677-a994-6daaa9a04b1a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6cf8dd0c-f4cb-451d-b27d-aba220da0405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159377eb-5a1c-45db-8cb6-a3f745e4b79a",
        "cursor": {
          "ref": "753b06c2-687b-4227-b282-7d5482842aab",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b3ee9f16-0c04-4e14-9a75-a474cbe8351c"
        },
        "item": {
          "id": "159377eb-5a1c-45db-8cb6-a3f745e4b79a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1ad258b3-174a-40ce-aca8-eab7140ca2d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4bcd07-0f63-48ac-b84f-dc40d51fa3c3",
        "cursor": {
          "ref": "56742760-84be-4774-9cb3-18058590295d",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a56d7a40-3f92-427f-9336-9f7cdafd32aa"
        },
        "item": {
          "id": "8e4bcd07-0f63-48ac-b84f-dc40d51fa3c3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "15ecf973-a8de-4129-9b56-b87328c8539e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3822f896-f1cd-4d19-8164-3749b456c55d",
        "cursor": {
          "ref": "15ff750c-bd31-4f5d-971b-63cdcf5e8aa7",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4c330ca2-82f9-4c14-9801-03e0a24d1897"
        },
        "item": {
          "id": "3822f896-f1cd-4d19-8164-3749b456c55d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "dc84e1a2-9317-48ff-b89c-ed43fd774afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9b9824-c633-4313-960d-4ac8a39be367",
        "cursor": {
          "ref": "ec727a5f-0108-4e92-bc7c-f03f79d2304d",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a35d8bff-96d8-44df-86ef-1e13f085ed08"
        },
        "item": {
          "id": "6a9b9824-c633-4313-960d-4ac8a39be367",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ed7261f7-e7e6-4a44-be59-fab871595f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15bcc0a4-3714-4491-931e-d934b409eced",
        "cursor": {
          "ref": "93593773-e185-4b51-8c09-7e20d00b8ef7",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "733e0ea7-b393-4670-8c47-62d9cc78c77b"
        },
        "item": {
          "id": "15bcc0a4-3714-4491-931e-d934b409eced",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b54ae9e9-2e9a-49ad-adfd-7dc5c7fadd62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "954d291e-0c82-48b4-b21b-2fa9cec439c8",
        "cursor": {
          "ref": "7364165e-3768-4fab-9fdb-de68b572c6e1",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cd243306-9421-4459-a6fa-1ef534b2d33f"
        },
        "item": {
          "id": "954d291e-0c82-48b4-b21b-2fa9cec439c8",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9b61fd6f-9225-4a21-bcbf-7921db2cbab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f81d0d-b75f-456e-bf11-392e9bc66bbb",
        "cursor": {
          "ref": "8c01afeb-7e6f-474c-9173-1a49981ecfee",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "77216bff-b9d0-4453-bfdf-a87e1d996f32"
        },
        "item": {
          "id": "f7f81d0d-b75f-456e-bf11-392e9bc66bbb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "48506d47-9959-41bf-abb8-146d365bf22b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4adbfa30-d71c-4622-8c59-55ceb9b603fd",
        "cursor": {
          "ref": "86ddff68-b6dd-4d8b-9f5b-3dd7523f3204",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "15a7b655-ad06-45a1-80b8-e1856cd306a1"
        },
        "item": {
          "id": "4adbfa30-d71c-4622-8c59-55ceb9b603fd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "7a23e47b-97e0-430a-a154-23a790efb4ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62604c1-dd7a-4527-97dd-d581543e3c34",
        "cursor": {
          "ref": "14207c9b-3a6c-4989-81d7-2fa76de1af36",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fa7c063d-c6bb-4dcf-84a3-a62a7b3a9c94"
        },
        "item": {
          "id": "b62604c1-dd7a-4527-97dd-d581543e3c34",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "bbe8fffc-1f82-4dba-883f-28a71a828f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c5dc880-6c44-4f3b-8395-27500f0dff49",
        "cursor": {
          "ref": "ae57c863-f84a-4ad3-a0e0-94c9176c38ff",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "91f30321-878b-4ec7-8263-8f9bccfc0b86"
        },
        "item": {
          "id": "0c5dc880-6c44-4f3b-8395-27500f0dff49",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9863e762-51b6-4d1b-aecb-5305819c18b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4596c1e-f704-42dd-8ef4-72ce76de5667",
        "cursor": {
          "ref": "8c6e473c-4977-445b-af02-79282a22a14a",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5a186217-6ac9-4073-b615-22a923b6aff5"
        },
        "item": {
          "id": "e4596c1e-f704-42dd-8ef4-72ce76de5667",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "99f9cb27-2281-4170-9891-2b3612e073e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "225be5da-a469-46f6-b8e5-224af8eef43f",
        "cursor": {
          "ref": "a9e952d8-70ca-4839-aa3c-45f411c4c82f",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "37659f66-a548-49a7-8fc3-a511f8d8bb85"
        },
        "item": {
          "id": "225be5da-a469-46f6-b8e5-224af8eef43f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a73da732-cd3f-431b-a6e1-693564a07d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc8600f1-94d7-4838-86eb-77f65cc4351b",
        "cursor": {
          "ref": "dd543cd2-f9dd-4c21-bd9e-03b65c755085",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "21d43e57-81da-462e-840b-cf87f59d83c3"
        },
        "item": {
          "id": "bc8600f1-94d7-4838-86eb-77f65cc4351b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "84c11f08-284b-4dca-96dc-997defc478c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089243b9-f255-4e08-a9fd-f1d04c28a6cc",
        "cursor": {
          "ref": "3d6da9ec-9cc0-4870-b55d-73dfd86d91a1",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c42371ce-1409-4835-b966-01b3c775e068"
        },
        "item": {
          "id": "089243b9-f255-4e08-a9fd-f1d04c28a6cc",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "8c5d94ca-d398-4858-b11b-fa347d38b603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb5272b3-0f5b-4cc1-934f-6ee3b5074c0b",
        "cursor": {
          "ref": "ed8aa71a-3c56-4ea0-a237-8025a925303c",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bd8fd812-c379-44f1-bd87-2571ec43cdd6"
        },
        "item": {
          "id": "bb5272b3-0f5b-4cc1-934f-6ee3b5074c0b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d011375f-815e-4b65-a023-8596659cde84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f887bb03-35f7-42bc-b330-5b09e0988bcd",
        "cursor": {
          "ref": "b962d0ad-ae26-485a-8f68-c967ec5dda59",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2b4b5604-bc35-435e-964e-3ebc807bba5c"
        },
        "item": {
          "id": "f887bb03-35f7-42bc-b330-5b09e0988bcd",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3b15f445-b1a9-47a4-a8ba-e6f05e48b125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ae9cc3-d77a-4362-b1a3-55b89226efef",
        "cursor": {
          "ref": "12066bb0-d751-4317-94a2-1ca264c138eb",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9a4a8d5c-d449-45c1-b378-158783bf02d4"
        },
        "item": {
          "id": "f6ae9cc3-d77a-4362-b1a3-55b89226efef",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "78bbdb63-69f9-4825-b9c3-46f1c2c53e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "370d66b3-4edd-465c-9610-6707269776a4",
        "cursor": {
          "ref": "6f72a575-4b2f-4b34-b79b-c66afdef2f51",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cc6dab4d-17ef-4077-b83b-ba69d80a281e"
        },
        "item": {
          "id": "370d66b3-4edd-465c-9610-6707269776a4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d3678cae-f0e8-42c4-aef2-1acf351b4b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a716a42-65b5-4ee0-9745-a2f9f03daa82",
        "cursor": {
          "ref": "78fa22ab-2f1e-4511-b58c-aadd8f09079c",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8f9a0c72-ea84-4c0e-afde-439704037346"
        },
        "item": {
          "id": "9a716a42-65b5-4ee0-9745-a2f9f03daa82",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c5b4220e-a677-438e-850d-a0ebdbc641ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef8801d-d1e7-4135-b853-19b3921466fb",
        "cursor": {
          "ref": "c4b359e4-10dd-4f63-9b9e-88886682c755",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7f9c556a-d3af-4059-bf13-f4c2dd87c590"
        },
        "item": {
          "id": "bef8801d-d1e7-4135-b853-19b3921466fb",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e608919f-0f2c-4c08-be20-7f76415d62eb",
          "status": "Created",
          "code": 201,
          "responseTime": 652,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "239e2329-300d-4c0a-a603-ad522f021326",
        "cursor": {
          "ref": "e9cc333c-a6f5-4ce6-8dba-38371ecea117",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7f7f6d34-d86e-4110-ba16-ed356806dedf"
        },
        "item": {
          "id": "239e2329-300d-4c0a-a603-ad522f021326",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b7cf6d2a-dd27-4871-96d2-084e7f04b523",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "676ccf1d-053b-434f-a94a-064c9ca9f2da",
        "cursor": {
          "ref": "33e4a8a3-8e3b-4a0f-aac3-c93845e70e43",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d51c8545-7d61-4d1c-91b4-79843ad50da7"
        },
        "item": {
          "id": "676ccf1d-053b-434f-a94a-064c9ca9f2da",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "32256047-35dd-411d-bd61-14d4c1e49bbe",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ae432413-11b9-4b6e-b04e-7275225ee813",
        "cursor": {
          "ref": "bdabe776-96a1-4eac-99a4-ac74d2bd26e7",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5ce65c29-9b2c-4894-ab7d-098571ee6511"
        },
        "item": {
          "id": "ae432413-11b9-4b6e-b04e-7275225ee813",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7fba7428-9de5-46e0-ae4c-036ec13c9929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d6cd9e-6958-41a6-8ab4-45531e5e1b75",
        "cursor": {
          "ref": "df971e99-07d7-4511-a2dc-f9abe0848619",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1b0ceb68-f6a4-4df6-ae4d-0c4779609a11"
        },
        "item": {
          "id": "55d6cd9e-6958-41a6-8ab4-45531e5e1b75",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "430b2bc2-5247-41e9-80c1-8c0fa56bf3d5",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "18922cfa-8182-4303-9906-e61a5aed8cb9",
        "cursor": {
          "ref": "cc4d20a1-1fe5-4c4c-ac43-bbd1427e01f1",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e24a3236-47a2-4946-8baf-cd2f79076073"
        },
        "item": {
          "id": "18922cfa-8182-4303-9906-e61a5aed8cb9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "cdff601e-32df-4c7a-bca9-e87b935e2f7b",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "41efe534-55e2-4771-ba51-dc8746936551",
        "cursor": {
          "ref": "63ef5e7b-0115-4908-811b-bd4351aa5409",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b5776d1f-ba1b-4567-8a9b-a1ba26e0bb18"
        },
        "item": {
          "id": "41efe534-55e2-4771-ba51-dc8746936551",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "875dcf89-9853-49a6-9c2e-520f2da31a94",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "305ccf73-0453-42db-80f1-d5f6f7c1752f",
        "cursor": {
          "ref": "2155141d-63ca-446a-99a2-fbf09df28470",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "cd2de97a-34dd-4b4f-ab7d-af680027a816"
        },
        "item": {
          "id": "305ccf73-0453-42db-80f1-d5f6f7c1752f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c2d4bfce-f7b9-400d-abca-0e1599a2e66c",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8a7e0cff-f8c4-40bf-bcf7-6b694249aa9e",
        "cursor": {
          "ref": "68952d63-9606-4da0-b566-3fd3a1cff6f1",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "bb3eda73-99cc-47d2-979e-26c3100b1c6f"
        },
        "item": {
          "id": "8a7e0cff-f8c4-40bf-bcf7-6b694249aa9e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "13b790ec-2e74-4c21-9428-6286d30e24bd",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7d2ad38c-9fee-46e7-9568-32358664f981",
        "cursor": {
          "ref": "4271c5c0-5112-44d8-8005-f16a3c55fba7",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a02a46ca-1281-48c2-b4c2-79d044e38df4"
        },
        "item": {
          "id": "7d2ad38c-9fee-46e7-9568-32358664f981",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "55d4d3d5-90a5-4f01-ba62-fcac6b56f1e2",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "2aab6c53-f1d4-4499-b8ef-391e090707ea",
        "cursor": {
          "ref": "63965a52-fb85-4739-be4e-40a64da554ad",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6e20a8c8-7416-49cd-a330-7f748aed615e"
        },
        "item": {
          "id": "2aab6c53-f1d4-4499-b8ef-391e090707ea",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b5cd39c1-2bf2-4ecd-86f8-21269646b975",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "89e1ec5d-06f1-4c8a-8ab8-194ce2310460",
        "cursor": {
          "ref": "752e2245-a854-4ccf-a40a-b9a043edacb8",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "67cb58bd-3568-45d4-94b3-b27d0f6103f3"
        },
        "item": {
          "id": "89e1ec5d-06f1-4c8a-8ab8-194ce2310460",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e5f92d61-f79b-4e8b-9ca4-c0c7b5664539",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "b21472af-c44a-427e-a128-967c9528c88b",
        "cursor": {
          "ref": "830abf87-d856-42cb-bee0-2ed89bc0af75",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f84af8a8-2a28-45dd-b0c4-312fed3f0411"
        },
        "item": {
          "id": "b21472af-c44a-427e-a128-967c9528c88b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c525c7ee-fbbc-4fe5-aa70-a699e9518727",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "326ba83f-f8e3-4654-9c3e-bfdac644bd1f",
        "cursor": {
          "ref": "0dad9ef6-8239-4a47-bc79-f50dcb4e3a55",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1b4886df-6710-42fe-a4f0-9480375c2d05"
        },
        "item": {
          "id": "326ba83f-f8e3-4654-9c3e-bfdac644bd1f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "722bbe5b-5290-4b59-a981-58b2e47b782b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b657caf4-ad82-432f-930c-d12adfb92b66",
        "cursor": {
          "ref": "041165d4-142f-4092-8345-c62f16157e93",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "69950f8e-e77f-4a29-a9be-7582f672f75c"
        },
        "item": {
          "id": "b657caf4-ad82-432f-930c-d12adfb92b66",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "cbf2573e-7039-4cb2-8a7c-7f2bfc774f7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afdb5565-f5f1-4486-b7ec-541f3d2d6e46",
        "cursor": {
          "ref": "35121d37-37c6-4ba5-ad3d-a3c0fc0846c8",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c441ca7f-cf87-4ae7-8d3e-09b1ad5eb426"
        },
        "item": {
          "id": "afdb5565-f5f1-4486-b7ec-541f3d2d6e46",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5b7112bd-c0f5-4db3-be8e-e6a8a67e6fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd6f5c7d-fefb-4aa1-8b72-4b3ea91ed0d8",
        "cursor": {
          "ref": "ad5d3884-8250-4768-8c16-3d131824a378",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "27fd5f7b-de61-4d80-9388-b31896be6c08"
        },
        "item": {
          "id": "fd6f5c7d-fefb-4aa1-8b72-4b3ea91ed0d8",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "73dbdf03-006b-4ef6-8e93-4d023ea9d78e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef88d2f-125c-4f1b-99d9-870e4b8cb8a1",
        "cursor": {
          "ref": "4725fb17-807d-4bbd-bc0e-cb62f8236c62",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d0a297db-0889-4df9-8871-c8d5b5103855"
        },
        "item": {
          "id": "2ef88d2f-125c-4f1b-99d9-870e4b8cb8a1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "fa3c8f26-0f13-43e2-9bd4-f193e3765533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5a2c08-957a-4f95-8935-9d0a7be83d8f",
        "cursor": {
          "ref": "69761312-e23d-47d2-a214-22fa44a21863",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f70d0f08-b498-4a1d-90a5-63acb3189553"
        },
        "item": {
          "id": "5a5a2c08-957a-4f95-8935-9d0a7be83d8f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "57840b99-e18f-484a-b5c0-0825df0ec356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "338fe9e1-daba-48ec-8402-313efab2e2ae",
        "cursor": {
          "ref": "971dd804-3cd7-4907-b789-75c745d76fbc",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8a0419df-0e8c-4809-ba79-bfe36c120c4e"
        },
        "item": {
          "id": "338fe9e1-daba-48ec-8402-313efab2e2ae",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "aafc9d80-0c0a-42eb-a2a4-5bfc42297db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b28c5c09-b0fe-4196-805d-cc5be0678883",
        "cursor": {
          "ref": "91fc620f-c934-47bf-a260-a9411fa12b0d",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0f031d3a-ad86-42f2-8314-4336126786f2"
        },
        "item": {
          "id": "b28c5c09-b0fe-4196-805d-cc5be0678883",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e6b4f47b-3b62-4dcb-baf9-ebd34b50442a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0515c160-138c-4d9c-9eb4-6ca1c12eceb5",
        "cursor": {
          "ref": "29a6a034-2a7b-4b2b-b9cd-a1cd0ce2ecdf",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e1e3ce12-04c5-4219-a252-9f8a1756c312"
        },
        "item": {
          "id": "0515c160-138c-4d9c-9eb4-6ca1c12eceb5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c409af96-f9cd-413e-8a14-6da88be65544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d613bc25-e265-47db-8c04-df0d194ab631",
        "cursor": {
          "ref": "3b44d3bd-3750-422d-abae-7d0e028ce687",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "01b0462a-a325-4767-8953-77f8d2a953d6"
        },
        "item": {
          "id": "d613bc25-e265-47db-8c04-df0d194ab631",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "db2c5018-3a1c-4f94-92b7-8a9d303bd67b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d89d43-bad8-40e4-9a4f-928efaba921f",
        "cursor": {
          "ref": "1e6872fb-dc6d-499d-8ff1-b02b6caf1c00",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3dd1fa60-7419-402c-9ebc-08c2103bbd82"
        },
        "item": {
          "id": "c1d89d43-bad8-40e4-9a4f-928efaba921f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2fa0dca7-bdaf-4f14-9c8c-9207f3df83eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7664cba9-2769-4501-89f6-c46451a38d5f",
        "cursor": {
          "ref": "46bf8d21-186b-456c-9e2c-f093955afaba",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "577bec62-4c90-4ef3-82c4-6f36c8146b90"
        },
        "item": {
          "id": "7664cba9-2769-4501-89f6-c46451a38d5f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3bfebb35-3f12-4efc-a95c-97a9d0159fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0b4fac-837b-4b45-a696-cee1b2fd8291",
        "cursor": {
          "ref": "85cdad97-6a7a-40ba-9b36-bdfbb0bfb34e",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "00516966-bc5a-40d2-bae1-cca4f8b498a1"
        },
        "item": {
          "id": "ba0b4fac-837b-4b45-a696-cee1b2fd8291",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b80f9c0b-63ad-444b-a017-5bab99c8685d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca294eb-e78d-4b57-8d0f-53bb5c99ccb2",
        "cursor": {
          "ref": "d54b8cca-a12a-4abb-a9a8-5d9196288348",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2377f190-e2c3-4927-8fc4-270a10a88526"
        },
        "item": {
          "id": "bca294eb-e78d-4b57-8d0f-53bb5c99ccb2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ca3ca4e2-e19b-4be4-ae33-68d869f97b62",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "e5d73213-8b3e-4a4c-a8fa-c37ea6e53906",
        "cursor": {
          "ref": "0e6330b0-dcc7-48cb-8842-6f9e107d103b",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9ef4f834-b5c8-482c-b85c-5a09b26c342f"
        },
        "item": {
          "id": "e5d73213-8b3e-4a4c-a8fa-c37ea6e53906",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c9b1386d-0c53-45ec-b52b-121ced5c18bd",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "929ae1aa-c280-44fc-a9fa-2ee69afaae97",
        "cursor": {
          "ref": "33393cb5-9289-46e8-9060-61371fc8472d",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e702108b-a69f-44f0-9bdc-ede9cf83b5e7"
        },
        "item": {
          "id": "929ae1aa-c280-44fc-a9fa-2ee69afaae97",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e8e10d45-d55f-43f0-9655-11d6e61b802f",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "6151f4be-2564-458e-9b28-0e03b55675ac",
        "cursor": {
          "ref": "0fe19919-59f8-4420-9060-9ce936e63f17",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e366c242-f664-4538-8edc-273b3008a79d"
        },
        "item": {
          "id": "6151f4be-2564-458e-9b28-0e03b55675ac",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "cdabeec3-28a5-4723-aa90-6f798acb9370",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "341e8f6b-1aaa-4f69-ba9c-49054e902130",
        "cursor": {
          "ref": "f6201768-e6c3-4af8-b636-58b69e04dc95",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "459c092b-1fd5-449b-a3d3-d7979cd16dad"
        },
        "item": {
          "id": "341e8f6b-1aaa-4f69-ba9c-49054e902130",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "10bc429f-da7b-420b-9688-e92b29cd0aeb",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "2354e3c0-475e-4f1c-ab58-cd34ae7b4387",
        "cursor": {
          "ref": "1ff9fc14-1380-4d5a-8f3f-c1394151333f",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e9adda93-5cfc-4d2c-808f-b7fffbda1225"
        },
        "item": {
          "id": "2354e3c0-475e-4f1c-ab58-cd34ae7b4387",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a206d640-edcb-4db9-a859-3947ca264998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "231fd7a0-2042-4c07-943e-269d5962c604",
        "cursor": {
          "ref": "36b2b9c4-50e2-4736-8003-66d1fabf7932",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0fefe85b-c34c-4219-9fdb-a77f1c2c2d61"
        },
        "item": {
          "id": "231fd7a0-2042-4c07-943e-269d5962c604",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f35605c8-482e-4e38-a03d-a89fc4fad978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e78c8fd1-60ee-4eb5-8b2c-83189ec3a4ce",
        "cursor": {
          "ref": "e52b7694-ed2e-4686-8701-7e275d0a8e05",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "010e7b92-e3b4-4cbf-9fa1-899264f9b647"
        },
        "item": {
          "id": "e78c8fd1-60ee-4eb5-8b2c-83189ec3a4ce",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8c77bed4-30ca-455e-aae2-17562d271d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc61b70-fb39-48e8-bf9c-861c7718f257",
        "cursor": {
          "ref": "95db372f-3577-46cc-83bc-7b74a34ee5f5",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "cc5d5d41-edae-4fb4-a333-bc2803cb332a"
        },
        "item": {
          "id": "fcc61b70-fb39-48e8-bf9c-861c7718f257",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e86d7ef7-27bb-45e7-99de-8512c73daacd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af716c4-5894-4240-9f70-dae5294d70b1",
        "cursor": {
          "ref": "d19d933e-2604-4926-b1d0-fac9b2c7088f",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "950c6a2c-6737-4e93-825f-58b1ff36f85f"
        },
        "item": {
          "id": "2af716c4-5894-4240-9f70-dae5294d70b1",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "27237f0c-3445-4400-bb84-8a48c9ed2b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25575821-52ca-48fc-bd53-025af652839f",
        "cursor": {
          "ref": "6ccbccec-43f5-474a-844f-4d551abd39de",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "00b8549e-2d8a-4392-bebc-9cfe98712f92"
        },
        "item": {
          "id": "25575821-52ca-48fc-bd53-025af652839f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b0e5d233-8af6-4ced-bce9-44b6b3b6fdac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c147393-6fa1-415d-b1c8-9530c89ec3c9",
        "cursor": {
          "ref": "7112a6b7-a80d-4055-985f-a3a97fb5d044",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "078d5d08-990c-4661-a620-16f57fa01f4a"
        },
        "item": {
          "id": "2c147393-6fa1-415d-b1c8-9530c89ec3c9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c0f53ff3-be97-4456-8aa2-f9c3df6f3f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4975f68-dcc8-4548-ae02-a2168a5629da",
        "cursor": {
          "ref": "94f5e7fe-4b26-4255-9204-5401d21e4e8f",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "27aed58e-f97b-426d-b24b-38e62f152127"
        },
        "item": {
          "id": "d4975f68-dcc8-4548-ae02-a2168a5629da",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1bf8455d-f9a6-4dfb-af61-30cc09a36e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36df7fc-1b3c-4d49-8cac-eee7da4165a2",
        "cursor": {
          "ref": "096d4a95-f89e-4bb8-97dc-c8ee9a77575d",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "9d110fa2-31e8-4d61-bb95-085c133fa55d"
        },
        "item": {
          "id": "d36df7fc-1b3c-4d49-8cac-eee7da4165a2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6979f26f-f56f-4f09-adde-beab81bc0aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "135179e0-bbad-42fa-b0ad-dc849ed37656",
        "cursor": {
          "ref": "727e1b21-a691-4e75-9205-3eb31d457180",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "899ea7ac-570a-45bf-ad92-9544386b8e4b"
        },
        "item": {
          "id": "135179e0-bbad-42fa-b0ad-dc849ed37656",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b45c91ee-941e-4cb3-afbb-3e6420992d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37832abb-3bec-4f61-b830-137fbd39ab4c",
        "cursor": {
          "ref": "52d5a3d0-2eff-456f-b9c1-51a7e20de7c7",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c39b3e44-1753-4480-8130-8b716eadd6ac"
        },
        "item": {
          "id": "37832abb-3bec-4f61-b830-137fbd39ab4c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1b5743fd-27fc-43cc-8848-cc8e21cee282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2213a0c9-623d-4b39-99b0-12fedb2b00ab",
        "cursor": {
          "ref": "6ee2c5a3-ba61-48ea-8b1c-8edc93683854",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7a7ce4a7-5dc0-4590-b3df-911d17e64429"
        },
        "item": {
          "id": "2213a0c9-623d-4b39-99b0-12fedb2b00ab",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7081bdca-fd33-4779-9122-681799eaa1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c5dca0b-5520-4848-9ff8-6624edfc20fd",
        "cursor": {
          "ref": "33fa00f7-c353-4f45-a3b1-71d1ca498dfd",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2ccaef2b-efba-45b0-86e2-dcb77b915f96"
        },
        "item": {
          "id": "4c5dca0b-5520-4848-9ff8-6624edfc20fd",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b505978f-e0fc-42f8-967e-96c9dfa41640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3713d3-fca4-4d7b-9db7-d74f748f561d",
        "cursor": {
          "ref": "2e3ff7d8-bea4-4196-ab51-753c136138d2",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8047c90e-326f-4283-aa36-01fff8d1fd56"
        },
        "item": {
          "id": "fc3713d3-fca4-4d7b-9db7-d74f748f561d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1bcf8651-0717-4eea-997e-f488e396c3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9515d4-7e3b-420f-9913-6ae533bec2dd",
        "cursor": {
          "ref": "9091182b-69ee-4e3e-a802-d8f281ddd6d2",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "69f7bc7e-898b-46de-8919-3e1d717e7107"
        },
        "item": {
          "id": "bc9515d4-7e3b-420f-9913-6ae533bec2dd",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "98f2ea8e-d510-4301-a0a0-347c4d42fedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752a915c-80ab-4619-80b6-55ed6bb6d643",
        "cursor": {
          "ref": "1eb2ed81-0656-4fbb-ad76-a57ef5ecac4c",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6c5a9858-20da-4e0a-a4ac-900c478cd06b"
        },
        "item": {
          "id": "752a915c-80ab-4619-80b6-55ed6bb6d643",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "116772d3-bc2f-4353-89ad-d7ba989e4dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37dcd20-39ff-4063-b566-4c4418aa1dfe",
        "cursor": {
          "ref": "5f79ef0d-0daa-46d1-9bdd-b752e25dd530",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ed1fe236-0cc0-48b9-911a-eb5cf5c424b4"
        },
        "item": {
          "id": "f37dcd20-39ff-4063-b566-4c4418aa1dfe",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "dfdfecf0-a3d6-474c-a69a-b5cfb3e80510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7052e28e-67e1-4fca-b832-31e699f323f2",
        "cursor": {
          "ref": "22777a51-1467-4baa-a129-bddfa318b99f",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "1ec17431-7a5c-46fe-a279-774ccbee2d33"
        },
        "item": {
          "id": "7052e28e-67e1-4fca-b832-31e699f323f2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6a7834b6-1aa7-4cc4-b8b4-5b6e647a57dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87237afe-7048-4bee-a845-3b7b5eb698db",
        "cursor": {
          "ref": "fd912348-4cf5-4db3-a06e-337d8c6e8704",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5c645e03-fee7-4486-a911-6277bc5e8868"
        },
        "item": {
          "id": "87237afe-7048-4bee-a845-3b7b5eb698db",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d138251d-cca1-4ac0-9d4c-b7decd54bb1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda9aa7c-53d2-4ace-b6de-0e862760adaa",
        "cursor": {
          "ref": "6202320c-7c4d-4434-bd97-9a05ebc40852",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3b089054-b235-4b01-a4a4-52d35704cb4d"
        },
        "item": {
          "id": "bda9aa7c-53d2-4ace-b6de-0e862760adaa",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "146f5dac-64a5-4940-9aee-b5ebf4c92eee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da955e88-089c-4e06-b57f-580e01cd568b",
        "cursor": {
          "ref": "885c9bb4-f596-4ee6-85f5-c29ed65a8881",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c16c2c30-b999-446d-8622-bf2b941a4b1e"
        },
        "item": {
          "id": "da955e88-089c-4e06-b57f-580e01cd568b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ac9209b7-e1e7-4fbd-8062-236c143528a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5c6f47-2ccd-4a44-b48a-ba7c95803df2",
        "cursor": {
          "ref": "7456a685-30e1-4a65-b01f-8b39a454bf8a",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8c061fca-ce4c-48f9-a823-cba678913f2f"
        },
        "item": {
          "id": "7c5c6f47-2ccd-4a44-b48a-ba7c95803df2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "08018bc6-ba7d-4a70-8bfe-f6164513a3ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b6d947-51bb-42df-975b-18667ede21bc",
        "cursor": {
          "ref": "20173235-2eb1-43ac-81be-32bfd6fc4fba",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "90830346-ecd8-468f-9318-85c62c1fabc0"
        },
        "item": {
          "id": "e3b6d947-51bb-42df-975b-18667ede21bc",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d29ec06a-34bb-4776-81a5-f93f9e42f97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef01a716-f1cb-45a5-9c36-9b01e5f2d2a3",
        "cursor": {
          "ref": "7d802790-45a9-4273-85be-1cbd4e936d01",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e804f2c1-4e5e-4525-ab1e-7572d7f92f33"
        },
        "item": {
          "id": "ef01a716-f1cb-45a5-9c36-9b01e5f2d2a3",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c01af947-aff4-4d49-bb13-a2949f49bd48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9abc10-c434-4fff-9da8-414fff396b6c",
        "cursor": {
          "ref": "db7736ed-a787-492a-99ba-82e1dedfd92c",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6045c70d-11f5-49c2-b25c-3290fecb25e6"
        },
        "item": {
          "id": "2c9abc10-c434-4fff-9da8-414fff396b6c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "541561b2-1ec3-482a-96ce-5e6446ffb3bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "839221ba-d702-468d-a694-219192a0ab89",
        "cursor": {
          "ref": "1c3ea973-f0ea-4cec-ae91-d5141185e84f",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e930fa46-d890-48d9-aef5-9a4489edc4fb"
        },
        "item": {
          "id": "839221ba-d702-468d-a694-219192a0ab89",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b2bf3c16-c69a-4c9c-8928-559f9eb7f01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932820d9-b91d-402b-b9ca-59fe347a5c41",
        "cursor": {
          "ref": "b0dd4a80-aa3c-47b4-b653-568acf9f2c97",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f0a698ac-0b1e-400f-ab9c-2f6454963b70"
        },
        "item": {
          "id": "932820d9-b91d-402b-b9ca-59fe347a5c41",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7d4010cb-15b1-40d0-a942-5102f2bfb8dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38001687-bad0-49d7-beb1-ee718a93f8bf",
        "cursor": {
          "ref": "4d73116f-34fa-4908-b32f-0d1e921326d2",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8ef96783-f7cf-4a07-bec4-8ad34d8a2518"
        },
        "item": {
          "id": "38001687-bad0-49d7-beb1-ee718a93f8bf",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f5216816-510f-4faf-a9f4-80da02249444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12685d21-05ae-4ce9-a1ff-1cf57ce9efa7",
        "cursor": {
          "ref": "c567dd71-355c-47fe-9949-665c87662099",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "89a0cbc5-c81f-4d61-af5a-0b6b7f90bd69"
        },
        "item": {
          "id": "12685d21-05ae-4ce9-a1ff-1cf57ce9efa7",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "9eaf4720-5f9c-47fc-9ab0-d53bf46abf03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a32a49-f027-41f8-b043-7e0753c7747a",
        "cursor": {
          "ref": "ed7a5915-e05d-4f33-9d86-f9ae7bc955e7",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f55fd374-7c8a-4d2b-ae9c-02307f256bcd"
        },
        "item": {
          "id": "75a32a49-f027-41f8-b043-7e0753c7747a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "1e0293e1-8971-4dd0-94de-8923706d9570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8b555d-eb7a-467c-8582-ef892d8ff93b",
        "cursor": {
          "ref": "6e82cc7d-2634-4a44-98c3-bc92dab340a8",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2167cdba-bd3a-41a4-b413-213af0bea51a"
        },
        "item": {
          "id": "2a8b555d-eb7a-467c-8582-ef892d8ff93b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "799d7eb2-9986-4eab-aeb5-b8417a2ee9d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06055a2b-156e-4681-88e6-0b7fc9c6aafb",
        "cursor": {
          "ref": "2a235491-228e-4f07-8f22-080c5b3d9bbc",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "52000c8b-f09f-480b-8143-9fe92f5bd463"
        },
        "item": {
          "id": "06055a2b-156e-4681-88e6-0b7fc9c6aafb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f3b34387-cdcd-4d69-8162-6f7168c8a673",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96f76bd-41fe-4f98-a1a4-8df97ffc36fc",
        "cursor": {
          "ref": "db8706cb-ebf9-4a1a-a326-f62b7760817a",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "fd0a4280-4ce2-4e57-af6d-29802c370bad"
        },
        "item": {
          "id": "d96f76bd-41fe-4f98-a1a4-8df97ffc36fc",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8794d869-b31f-44b7-ba47-ddde17a20dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "8ae2e60f-c488-45d0-9bc5-6fefd7e8a57c",
        "cursor": {
          "ref": "969dfcaa-4874-461d-b077-407b19599450",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f6d79323-713d-46c1-b267-500671d63f0e"
        },
        "item": {
          "id": "8ae2e60f-c488-45d0-9bc5-6fefd7e8a57c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "77f2ca36-9fcd-4a75-9266-27f6cc52aedf",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b3af5f-5f21-4641-8e08-83483360dfd0",
        "cursor": {
          "ref": "6d0472b8-6d17-4b54-8967-9d45fec3f9e3",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e44c9f3f-0fe4-472e-af51-1596cb93e7e6"
        },
        "item": {
          "id": "63b3af5f-5f21-4641-8e08-83483360dfd0",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "33e352ed-8477-4a85-be64-8687f5f5b212",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdaaeb8e-ad0f-42ab-9faf-8ac345c1defc",
        "cursor": {
          "ref": "9d79ebe2-eb9e-421b-ba05-82d767ab75b6",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e3be489a-f1b9-4247-ab94-a39152c01d1f"
        },
        "item": {
          "id": "cdaaeb8e-ad0f-42ab-9faf-8ac345c1defc",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9062d525-7a1a-4556-be68-54b40e9a3400",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9097bd8b-d0ab-4e8e-8203-6bc9fe078eda",
        "cursor": {
          "ref": "58ae0e42-f58c-4fd8-80b7-7deff30b0b30",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f0792fe4-d13c-4807-b084-bd34d4af7f59"
        },
        "item": {
          "id": "9097bd8b-d0ab-4e8e-8203-6bc9fe078eda",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "cd6fc8ce-d2cf-4532-9bf0-846bf0a59c31",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ffa21ae-0c12-41fb-993d-bd2f2f6f4ebe",
        "cursor": {
          "ref": "901cbe1c-8608-43df-9135-9efa042f372e",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7115e2f0-aa42-46d5-9660-a6ddb83cf555"
        },
        "item": {
          "id": "6ffa21ae-0c12-41fb-993d-bd2f2f6f4ebe",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "addc6e7a-5d1d-45ec-8554-b13ccc0dae20",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-30T00:42:41.738Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-30T00:42:41.738Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "f41992ec-976a-4a87-84b5-5a00fe37ec83",
        "cursor": {
          "ref": "e5b4e736-0c2a-4318-a203-db1df14ace6f",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4ea704b4-3e8a-47d8-9ea0-d4ac7b5817ec"
        },
        "item": {
          "id": "f41992ec-976a-4a87-84b5-5a00fe37ec83",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "bc329c79-d7c6-4d13-be0f-9ca2c1c7c3bd",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b7eb574-b99b-4dea-adab-da4103e73226",
        "cursor": {
          "ref": "8db057e3-60f0-419b-8e8e-025589548d2d",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0246b3dc-29d1-43dd-bfb5-e853a8b9ad3d"
        },
        "item": {
          "id": "9b7eb574-b99b-4dea-adab-da4103e73226",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e0e4694e-be42-46fb-ac73-af099638f91d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9673cf36-e70c-41ab-923f-81f52f50a264",
        "cursor": {
          "ref": "c95f7302-5a6b-4239-913a-b748b0b34fff",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "295deed0-a7ce-42cf-85ed-0f78f210e0e5"
        },
        "item": {
          "id": "9673cf36-e70c-41ab-923f-81f52f50a264",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f83a5b9e-7e8d-4fe0-87c0-f55ccbb38a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee522bc7-88a6-462f-b855-4b252ae46c96",
        "cursor": {
          "ref": "a6fe068b-ba55-472c-bae2-2b786f349520",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b134e6e3-1637-4082-83d5-c2d28a0b687d"
        },
        "item": {
          "id": "ee522bc7-88a6-462f-b855-4b252ae46c96",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "aa618537-6063-4747-bf78-945728249eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0010bd1f-74e4-4022-ab62-61e295e3a27a",
        "cursor": {
          "ref": "7400e734-cf68-4ca6-84c5-efacad42c6ae",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4e5b157f-0771-4ea0-974d-522d4855f040"
        },
        "item": {
          "id": "0010bd1f-74e4-4022-ab62-61e295e3a27a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "66388288-290b-4b45-9893-12a2d678ad5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab0aa1f-e9db-4715-80d7-90d2d7779581",
        "cursor": {
          "ref": "0523e45e-e851-4141-8f13-cda8b90520e0",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d3fc56ef-a197-4f68-9867-d44c8f60f2b9"
        },
        "item": {
          "id": "aab0aa1f-e9db-4715-80d7-90d2d7779581",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4c98f017-3f6f-4c82-b4ea-35b7ccff1b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe130f9-6d14-4eb2-acd9-b27184b224d2",
        "cursor": {
          "ref": "59297d22-28fe-4051-8080-8efd78afc119",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "26d528aa-53d5-477e-b05c-6619e109723a"
        },
        "item": {
          "id": "8fe130f9-6d14-4eb2-acd9-b27184b224d2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b67ed717-5245-4cbb-a90e-00abfa99f65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4a40bb-da58-4eb8-86cb-12c9d4e1622f",
        "cursor": {
          "ref": "3aa9099c-87f3-4160-ba96-72f803352004",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3e110dee-daed-4119-bb5d-5bba8629db25"
        },
        "item": {
          "id": "9c4a40bb-da58-4eb8-86cb-12c9d4e1622f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8bd515c3-5e3a-439b-92ae-b006fd0e8f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688d08c0-8742-4507-bb39-9c15179910d1",
        "cursor": {
          "ref": "eb67602d-b753-435b-8199-9eef1603c792",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "fcb51a01-808c-4a3b-866e-baefd9aff52a"
        },
        "item": {
          "id": "688d08c0-8742-4507-bb39-9c15179910d1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "27b91302-c20d-4d23-9fa0-40099f2443c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd6c4833-2ae6-4d48-962a-79eb318cd032",
        "cursor": {
          "ref": "475d8bb7-7fb7-4d97-938b-6442096bb774",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e90b3437-7864-4211-beaf-56c431a9bf09"
        },
        "item": {
          "id": "bd6c4833-2ae6-4d48-962a-79eb318cd032",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ec791d15-0fa2-436c-a1d4-d4e6c1034bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27f2914d-51fb-454f-8c6d-5ec5a8c584ac",
        "cursor": {
          "ref": "986f5f3d-62f1-4d99-b64c-feb4fc20a29c",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "127875fa-e5d6-459d-87c3-636fb8015dff"
        },
        "item": {
          "id": "27f2914d-51fb-454f-8c6d-5ec5a8c584ac",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5e41da86-4ee9-4b58-81d1-686f82bb05be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584f7c85-13f4-46c7-bc21-b545fd0115da",
        "cursor": {
          "ref": "1e9ec4ec-9d55-40ad-a124-8481416885d1",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "484aeac5-2c89-4bbe-8f1b-ca5d4bc7e35e"
        },
        "item": {
          "id": "584f7c85-13f4-46c7-bc21-b545fd0115da",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c857c9eb-082e-4f9e-b2b5-6e23f3e5abc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45cd88f5-0578-4a36-ac10-47a9a2e6baca",
        "cursor": {
          "ref": "d29101f4-8ff9-437a-9c7e-7f25ba5e7972",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e8c61c9b-1523-4a4c-a337-b660886b12bc"
        },
        "item": {
          "id": "45cd88f5-0578-4a36-ac10-47a9a2e6baca",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0a6899be-54d7-4480-a1eb-267c65bf9ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3111c3bc-834e-4e8c-b68f-801ac871ab54",
        "cursor": {
          "ref": "f6dea417-4c86-4300-9031-dcf184835fd6",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a1ba22e7-f83e-46c9-a8f4-6d2d299d0d1b"
        },
        "item": {
          "id": "3111c3bc-834e-4e8c-b68f-801ac871ab54",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "605e0c7e-7ead-4e81-aef3-82bcf483958b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0f6b67-2576-48e8-9357-7f3d4360ba14",
        "cursor": {
          "ref": "68e4dc2e-8be7-4da0-888b-7e4ae1adde52",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ed25a63a-d1a0-4308-8a9a-6c5fca755322"
        },
        "item": {
          "id": "4f0f6b67-2576-48e8-9357-7f3d4360ba14",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c9d4fc0b-838f-4b5c-a821-f632a41c3937",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "5ef7d935-942f-4a73-990d-bd640912ce1e",
        "cursor": {
          "ref": "0f4156b6-0514-40dc-a380-d01663bebce6",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c2b0cfee-e179-4826-be03-3c9f678c0f8c"
        },
        "item": {
          "id": "5ef7d935-942f-4a73-990d-bd640912ce1e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c4156d09-0050-466f-b868-3848e6c1d3ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845b01dc-86ad-4151-b348-a03a85d4b145",
        "cursor": {
          "ref": "0fe2cc6e-a167-4f5b-90d5-8361464b499d",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "30e11d99-62d1-4ca8-94d1-77c56409b556"
        },
        "item": {
          "id": "845b01dc-86ad-4151-b348-a03a85d4b145",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "172d0625-0320-4162-920d-e448587ca074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc29dac-659a-4a7f-b200-aef38da973a2",
        "cursor": {
          "ref": "eec7518a-7bd9-4d2a-863a-6845b2872194",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "eb17fb58-6139-48b5-b379-26f51b51a38f"
        },
        "item": {
          "id": "3cc29dac-659a-4a7f-b200-aef38da973a2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "aad3fb65-4201-4e2b-b606-711c3533dd78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dfb3e17-57ab-4d21-8fed-13dd7ea18a0a",
        "cursor": {
          "ref": "8ba83358-a8b9-44ac-8f5c-5801951a6bf6",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "416af591-d5aa-42b5-9019-8f880e5ce421"
        },
        "item": {
          "id": "3dfb3e17-57ab-4d21-8fed-13dd7ea18a0a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b115080f-a245-4637-9f3c-a71eb33bbdaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "061330ed-f11a-4ed9-afa7-9b1176a5c397",
        "cursor": {
          "ref": "c9e479c7-8b37-4d9c-a3e7-07a1b9a8081d",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "decf2c12-6150-4273-95c3-672e4cc39cda"
        },
        "item": {
          "id": "061330ed-f11a-4ed9-afa7-9b1176a5c397",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7c4bfd01-eed8-4f18-be16-e554de9bf33a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcca435b-daa3-44a8-bb56-4c1fd711c76e",
        "cursor": {
          "ref": "562864cd-b9ee-4fab-9dcb-c1b46d91ddd8",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "48817cdd-e422-4afd-a3b2-9c5f970454f4"
        },
        "item": {
          "id": "fcca435b-daa3-44a8-bb56-4c1fd711c76e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9632446a-c75c-46a9-9012-9540408795d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5059eb39-bfb9-40fe-a5c3-7040696b0c68",
        "cursor": {
          "ref": "e76265ae-7aee-487f-96a7-14c6497512d8",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "39bd44ef-b7d6-4077-9b12-f532bb095cb6"
        },
        "item": {
          "id": "5059eb39-bfb9-40fe-a5c3-7040696b0c68",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "55151755-478e-47bf-ad12-39aa4f19cd5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0aca6c4-4078-4c3b-9d01-5e8d33d9ac99",
        "cursor": {
          "ref": "6e7d7bf5-9346-4637-a779-4840e650ddec",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f8d92752-8675-426d-9cbe-d64d17bed961"
        },
        "item": {
          "id": "b0aca6c4-4078-4c3b-9d01-5e8d33d9ac99",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "39732b09-7b5c-4ad0-9d4f-8c85b9c714d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ba5196-667c-4eb8-aef6-706f2e5f5697",
        "cursor": {
          "ref": "9505b03f-47f8-400a-af34-20e4464857b4",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d194469c-c6b3-449b-bfc9-7f2970a461eb"
        },
        "item": {
          "id": "b6ba5196-667c-4eb8-aef6-706f2e5f5697",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4e3f6c13-925e-4800-b04d-477fcb0a40ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1644adb0-6474-4455-a5b5-bff548937cf9",
        "cursor": {
          "ref": "c5afe565-704c-497b-8095-0845a42e6a98",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "57856987-2ba6-4e0e-bb6f-debead84986d"
        },
        "item": {
          "id": "1644adb0-6474-4455-a5b5-bff548937cf9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "694ec12e-d36d-46b3-af3d-75187a46b771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94a5e2de-e5de-4b6c-8c3a-a253cfc81494",
        "cursor": {
          "ref": "17ab7b23-ae49-47b9-aa15-be31c3978eee",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "db23a277-ab5b-40fc-abe3-fc9085980506"
        },
        "item": {
          "id": "94a5e2de-e5de-4b6c-8c3a-a253cfc81494",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c9563510-0967-4502-9f76-77f8d5b6f3cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12dfe065-5d84-42e7-9923-097ab7f27c1d",
        "cursor": {
          "ref": "646a24f2-9869-4751-8227-4ec96cb9d630",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4eb3449c-518f-44d1-9d4b-20fefb49c2ee"
        },
        "item": {
          "id": "12dfe065-5d84-42e7-9923-097ab7f27c1d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "07877a2f-482a-40c5-a7e4-55075959025b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021722ee-3ae8-49bc-8a55-09adef9c1a06",
        "cursor": {
          "ref": "612072da-6288-4428-8956-ce3aa2459016",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c3fed865-c2f3-4748-912d-09c2be3c1785"
        },
        "item": {
          "id": "021722ee-3ae8-49bc-8a55-09adef9c1a06",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f38b5ac6-1f93-42c3-a899-b306a7ea0094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86b2075-71a6-40ae-a066-a25d09c7a74e",
        "cursor": {
          "ref": "cbcd79a1-5bdf-42c2-ab6a-fdcc9cb4138c",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "32afb290-250c-4e81-92aa-6626c8102e80"
        },
        "item": {
          "id": "c86b2075-71a6-40ae-a066-a25d09c7a74e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e4847ae8-b9bb-4429-8443-d500c988a7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b7cd46-4c64-4da9-b6ee-6e4736333311",
        "cursor": {
          "ref": "3b878191-78ea-4be3-8b40-f4b5afbf2508",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "542ba198-e203-4f22-9595-c4bc038f5913"
        },
        "item": {
          "id": "05b7cd46-4c64-4da9-b6ee-6e4736333311",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c9a8dad0-d724-4620-b5c6-4d43159044ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f955a7-1f61-4edc-b463-d29567296c52",
        "cursor": {
          "ref": "b2071337-7114-43b9-99ae-82b9b3d2eda6",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ce5b8ff4-d52f-4802-9a15-91a178d2a970"
        },
        "item": {
          "id": "61f955a7-1f61-4edc-b463-d29567296c52",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f7b58a24-2746-4f93-95e1-19e25f7b476f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b874a9dd-406f-41ac-9989-587bf4db48bd",
        "cursor": {
          "ref": "f2d8e5fc-0b28-43c7-b28c-d43b4a6daf42",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "79776222-2f40-4979-b0a7-21c0c0aec60e"
        },
        "item": {
          "id": "b874a9dd-406f-41ac-9989-587bf4db48bd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b3c96e7b-7f16-4f21-ad93-e14c9556823b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe06e476-061a-4dc7-8dcb-cd4cc7fbe09f",
        "cursor": {
          "ref": "10825e0a-bbff-47c1-b7d0-d0f14364f487",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6bdc9b91-08ec-43e9-8dec-ae1790ed276c"
        },
        "item": {
          "id": "fe06e476-061a-4dc7-8dcb-cd4cc7fbe09f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "260d24fb-3dbf-4f5c-b12f-cf13bc76bb6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe48f572-e23b-47c8-aa35-bd107725ed06",
        "cursor": {
          "ref": "7d921683-5f02-46d2-8529-d84c27d8e2a5",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ddd50725-cac3-4a9d-93b4-54ec0840e650"
        },
        "item": {
          "id": "fe48f572-e23b-47c8-aa35-bd107725ed06",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "70f8b209-a14b-4da9-92ba-80fb8f8e4c3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04cf3b8-98cb-46cc-9a9f-f16776d77dd6",
        "cursor": {
          "ref": "68ff2eca-6087-48ce-99c8-2ecfeb218ed0",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1d6c19dc-cffe-46cc-8006-28514bc74e77"
        },
        "item": {
          "id": "a04cf3b8-98cb-46cc-9a9f-f16776d77dd6",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "5e63c081-0e9f-45d4-bc28-aefb10bb1d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "616462fb-fd1e-49b8-af64-54b3f49f5cbf",
        "cursor": {
          "ref": "a12e3836-266d-416c-b16a-e28288efa7fe",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9b3c04f3-4e93-4071-ab25-fce5f48ecc1d"
        },
        "item": {
          "id": "616462fb-fd1e-49b8-af64-54b3f49f5cbf",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7836a2be-5eb6-41bf-8b72-bd1ea0886ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1c03be-162e-44c6-9f45-c834bafff326",
        "cursor": {
          "ref": "35c8868d-bf2d-44d1-9517-00678a45c132",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5e668027-b081-497d-93da-7196dd2bb9f7"
        },
        "item": {
          "id": "7c1c03be-162e-44c6-9f45-c834bafff326",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3814d813-2f4e-4cd3-93d0-546f8127727e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21205b8a-c56f-4af9-97d7-196369348d92",
        "cursor": {
          "ref": "dc3acb83-a9a5-4bea-a1c2-81dfca6deaca",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "11f35359-cf77-48d4-b6db-d692ca2141c6"
        },
        "item": {
          "id": "21205b8a-c56f-4af9-97d7-196369348d92",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "06d67209-e1e0-48b8-b4c9-6c6ba74bb81e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dff494e-177f-44f1-956b-d8512fd9c5c4",
        "cursor": {
          "ref": "763ec429-0a4a-42be-af7b-1affa587c932",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "164d74cb-55c0-46de-b2fd-9211a07bfc46"
        },
        "item": {
          "id": "2dff494e-177f-44f1-956b-d8512fd9c5c4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b3332da6-70a2-4ea2-be35-0cd1ebc01d2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7684db52-e5f3-491f-9175-75b54ead08e2",
        "cursor": {
          "ref": "4a835f2b-081b-4de6-98e2-46e990fcf549",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "399e79c6-581c-4682-862c-7e5435cc81d4"
        },
        "item": {
          "id": "7684db52-e5f3-491f-9175-75b54ead08e2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fdc67035-6f8b-42eb-a66d-6337fa51b604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82054f1-5246-42c0-af6c-47240a7d2df3",
        "cursor": {
          "ref": "bdd2a3d8-b2f3-444d-97f1-d2ec14d9ef3d",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "27030328-25e1-440c-975d-af8c04710994"
        },
        "item": {
          "id": "e82054f1-5246-42c0-af6c-47240a7d2df3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7b7dc086-6605-44d1-bd5f-635674d81758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea8689b5-3f0b-479c-9dd8-0055379f90de",
        "cursor": {
          "ref": "06a8fa83-d8c1-4c8a-a6bb-c22411007412",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3a632251-1069-45e6-a82c-274fb25f08b5"
        },
        "item": {
          "id": "ea8689b5-3f0b-479c-9dd8-0055379f90de",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "066d523a-b6a3-4b4a-ae3b-f7017af1c281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72741e56-a368-42a6-97db-913c873de1c9",
        "cursor": {
          "ref": "2caeb80c-9ede-4c6c-afc7-f1afa92e1d75",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "83e601ee-3684-4b77-bea5-30ed4d537675"
        },
        "item": {
          "id": "72741e56-a368-42a6-97db-913c873de1c9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f0ccb198-8f6f-417e-b07b-777db30b64cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0390a29e-17a8-4074-8069-43e1f228e8fb",
        "cursor": {
          "ref": "4a796035-5837-4f0e-ad17-67045b9c0223",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7767fed7-1656-48f6-8b36-7b8c3ef2d393"
        },
        "item": {
          "id": "0390a29e-17a8-4074-8069-43e1f228e8fb",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5ce49a9d-1432-49d4-8538-5a549b6f3bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37bc3ce6-81c5-41c7-ad8d-662dbb5a2492",
        "cursor": {
          "ref": "5681efea-a43f-4947-a07d-555d5ccbe593",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5981bf90-b284-4155-85fe-e46e17b40a1b"
        },
        "item": {
          "id": "37bc3ce6-81c5-41c7-ad8d-662dbb5a2492",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "17b502dd-774d-4df5-8578-96dcb46985e2",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "f5c2e79b-ea70-4930-ab78-3c8638412944",
        "cursor": {
          "ref": "b260e3ab-cad0-435c-ac3e-6c17f7a41111",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "14934500-b8ed-4dde-b485-39dde5ce2e67"
        },
        "item": {
          "id": "f5c2e79b-ea70-4930-ab78-3c8638412944",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "56cc08a5-a819-4c41-b0b6-d2d11801a30d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f37c331-c8aa-4e23-95ec-2daca4f2402d",
        "cursor": {
          "ref": "eca0c0c7-d29a-426f-b702-8df1bd54744e",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ae2ea8c4-654e-4ee4-86cb-c084f12e7677"
        },
        "item": {
          "id": "2f37c331-c8aa-4e23-95ec-2daca4f2402d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "dd5f01df-41e3-42d0-bed0-b5d0dd66c107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b35b2f79-c5d3-45d9-9162-812614180e07",
        "cursor": {
          "ref": "d6fed8b6-ab52-48a0-a827-ea498dab7572",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "dccede30-11c5-42b0-8f3a-46c5c1de873d"
        },
        "item": {
          "id": "b35b2f79-c5d3-45d9-9162-812614180e07",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b8335b99-569f-40e9-be10-7209653b8a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5037082-e898-4e93-a2ed-162640f33851",
        "cursor": {
          "ref": "3001df6b-7631-4a47-9cf3-3b2490a81d71",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c136bad8-b723-4310-9262-9ee030567c77"
        },
        "item": {
          "id": "e5037082-e898-4e93-a2ed-162640f33851",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8b86b46d-d9a3-4820-9400-edbf019d0b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad7a4cc-0219-4cef-9a26-2de78f460676",
        "cursor": {
          "ref": "a8ead450-6daa-4d47-ba61-f23393b400f7",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "636ac8ed-c448-49e0-bdee-55af61f0b906"
        },
        "item": {
          "id": "aad7a4cc-0219-4cef-9a26-2de78f460676",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5b977fb2-0dfe-4817-b19b-cf44a9786844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c27fd5-e2df-43f6-a60d-55796261ef7a",
        "cursor": {
          "ref": "18c10297-42b4-4e2d-adaa-032304bea4c9",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4c98747b-81ee-4f95-ba4d-740ab984efd4"
        },
        "item": {
          "id": "48c27fd5-e2df-43f6-a60d-55796261ef7a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "27b77f15-8ee3-4f5d-92da-6b50d5acb703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0648ccad-52e7-47b7-a930-e0798bb55689",
        "cursor": {
          "ref": "cf77ae8b-b9e3-4d15-8147-831565eb3c3b",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1b801c4a-7dd1-453e-921b-db40c8de4837"
        },
        "item": {
          "id": "0648ccad-52e7-47b7-a930-e0798bb55689",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "49ed7a67-8883-414c-9e88-b4ff586892d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c13f6132-db4b-44f5-afa9-786b1ad68995",
        "cursor": {
          "ref": "2303b227-b6fd-47dc-a81b-3bf51f2fff07",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3a6b863c-3460-4ba2-a61e-5e21816878f3"
        },
        "item": {
          "id": "c13f6132-db4b-44f5-afa9-786b1ad68995",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "cc2116e3-18f8-48b5-8d44-ae99e74c52a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b002c656-de73-444d-8661-bc61a3e7d3ea",
        "cursor": {
          "ref": "7c9320ca-140a-4cf9-b696-7fc1cddc499c",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "aa97254c-641e-458f-8b25-216646c50383"
        },
        "item": {
          "id": "b002c656-de73-444d-8661-bc61a3e7d3ea",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6e9cce66-b77b-48a6-8d37-2234dae672ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e8c6ca9-db7c-4d25-84a4-a0914afac3a2",
        "cursor": {
          "ref": "f8a16f45-656c-418c-8a8b-4277c352878d",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "df8872c6-fa6b-40c3-b4f3-28c1b3e143f7"
        },
        "item": {
          "id": "6e8c6ca9-db7c-4d25-84a4-a0914afac3a2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4bef7897-13d0-4fae-8210-53d7df243d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8204b641-b3ba-4f87-9963-913356450be6",
        "cursor": {
          "ref": "238b4879-89dd-4bda-be54-bbc8ad20a512",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ce1a951a-200e-4b0b-a3a6-808788f34a0a"
        },
        "item": {
          "id": "8204b641-b3ba-4f87-9963-913356450be6",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b975f09b-92ea-46d3-a9e3-916f1e321294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5286b86f-ac8b-4e61-9a68-68670851a2b3",
        "cursor": {
          "ref": "811149ad-7b67-4c31-ae19-1b12882e5b88",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8fccea3e-2497-4a63-bc90-a15a662a0a41"
        },
        "item": {
          "id": "5286b86f-ac8b-4e61-9a68-68670851a2b3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "843da110-9bc4-4d29-973d-5498d1a66ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ccc240-2fff-4ab8-b956-0a0937261bf8",
        "cursor": {
          "ref": "917d7b88-102f-4c03-9b8d-ac9d0c64d017",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f2c929d5-924f-4897-bcd4-360d04fc5525"
        },
        "item": {
          "id": "76ccc240-2fff-4ab8-b956-0a0937261bf8",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e06533eb-b586-4d16-bc49-ce03c6b9f35a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9838f6c7-ccf4-4eaa-a2a9-f3d56a4965f3",
        "cursor": {
          "ref": "bbede38d-07dc-433d-81d1-10e462b7fe40",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "243db1eb-bb2f-4405-99cf-35e9cb6ea67b"
        },
        "item": {
          "id": "9838f6c7-ccf4-4eaa-a2a9-f3d56a4965f3",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "cacf5c13-6900-45e6-ba4b-c78659965e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bae6192-c5c3-40fc-8f3f-cd4361403a3a",
        "cursor": {
          "ref": "90ffed35-9ab2-4abe-8131-a1e530901dbe",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "bfaee0af-7d51-4d38-ab47-84fa01b97c1a"
        },
        "item": {
          "id": "6bae6192-c5c3-40fc-8f3f-cd4361403a3a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f1d97e1e-8bf8-46da-8464-bd35005800ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbed8df9-7d8d-4b13-b911-c19c9f53d2a5",
        "cursor": {
          "ref": "554c5ece-5ded-463e-a949-16700fc2802b",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "82f5c391-e378-4b5a-91ba-8513f5398912"
        },
        "item": {
          "id": "cbed8df9-7d8d-4b13-b911-c19c9f53d2a5",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f25b39e5-53c7-4ee6-95ad-12bca09cc4c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f856e5-d22f-4222-8441-76de740dd390",
        "cursor": {
          "ref": "4bc0df26-6da0-441b-8719-5426079f7f20",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2ccc761a-51b8-4891-8d76-305a30599279"
        },
        "item": {
          "id": "f3f856e5-d22f-4222-8441-76de740dd390",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "e6077fed-963a-4afb-86cb-3664eca6d146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "403901a3-ce1f-4dee-9ec1-2c6bd58a5209",
        "cursor": {
          "ref": "e45b738e-0b81-4cc5-b94e-e9dc24829770",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6f8b8551-2210-492b-a699-7ab6c70cf983"
        },
        "item": {
          "id": "403901a3-ce1f-4dee-9ec1-2c6bd58a5209",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c34c2754-a85c-456a-8c43-c5936380db06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb80da6-19de-4f95-ac35-ede052ec7218",
        "cursor": {
          "ref": "96115030-a2be-4a5c-9169-dfeaef57079b",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c326bac8-9924-4aaf-9600-c396c533ca3f"
        },
        "item": {
          "id": "6cb80da6-19de-4f95-ac35-ede052ec7218",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5e13dbfa-f857-48ac-b263-39072858740b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c0d5fe-1fea-4e6f-956f-152f274ec1a3",
        "cursor": {
          "ref": "ceb40ccb-382f-4518-8646-b10f8272237a",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a2ffb354-d640-4c9f-a57a-3d75f42b7b8c"
        },
        "item": {
          "id": "51c0d5fe-1fea-4e6f-956f-152f274ec1a3",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "13a537e1-86f8-4dbe-83fb-daaad2bc7cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2266427-2904-41c6-a176-68a610138b23",
        "cursor": {
          "ref": "fce14861-0761-419a-ab42-8b13b9ada43d",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3b29250b-8bcf-4c6d-8bc7-a5cc4ad50b98"
        },
        "item": {
          "id": "e2266427-2904-41c6-a176-68a610138b23",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "34759e48-3a83-4884-97e2-6b5459ed867c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb752b5b-341d-4463-9079-01076c694273",
        "cursor": {
          "ref": "b5b895d6-5c93-46ec-92f2-5b6f3308f1a9",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "08d84daf-701f-47b3-a125-1feeabc30ac7"
        },
        "item": {
          "id": "fb752b5b-341d-4463-9079-01076c694273",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2aa15234-b53c-48b8-97fe-9840dd9b8548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828e5154-4e99-41af-8c0a-0d5fa67d7e07",
        "cursor": {
          "ref": "7175dbbf-ca90-45bd-a335-fb42d8eccf9b",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "aa37e23b-a61f-43bd-a691-72b0c5e6d5ab"
        },
        "item": {
          "id": "828e5154-4e99-41af-8c0a-0d5fa67d7e07",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "dbc5d2d8-df80-4494-a033-7f8e87159272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2427add0-2495-4573-92e7-957d0f175d0f",
        "cursor": {
          "ref": "505aeac3-9667-4a6f-8c78-fa18accc7cd3",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6da14f3f-fa2c-4c63-a094-012f73958a56"
        },
        "item": {
          "id": "2427add0-2495-4573-92e7-957d0f175d0f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "00fc3f36-b239-4673-af77-a60107f15918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceef68d6-e290-488a-84bd-852821fbfc8d",
        "cursor": {
          "ref": "aaeea2a2-3035-4dfb-89fa-2d761d26e558",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d75b0344-5249-4fc4-a92a-f7e3c151fb92"
        },
        "item": {
          "id": "ceef68d6-e290-488a-84bd-852821fbfc8d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a66f3b8c-f288-4603-a0a0-6cb228ee1e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05208207-5e97-4e21-a742-a9fca413b097",
        "cursor": {
          "ref": "7b6cdc7a-32ec-45ed-8612-371126f6f9d2",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "229310f8-ddd1-4c79-b4b3-f720c57ada4a"
        },
        "item": {
          "id": "05208207-5e97-4e21-a742-a9fca413b097",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c68148c2-909e-4b72-99b0-a0209a30726b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a25d45-1a15-4e5f-9f86-a3fd0174bd7b",
        "cursor": {
          "ref": "4e2da944-b405-4935-8fb3-17d2fa67535f",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4c79d80b-289a-41f7-b8a4-bb470d292d3d"
        },
        "item": {
          "id": "a8a25d45-1a15-4e5f-9f86-a3fd0174bd7b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "afbe74b1-a97a-478e-ba80-873919396dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3116c1cd-46aa-467d-9ddd-e9d974b80514",
        "cursor": {
          "ref": "0a38d5a4-9893-4bb5-88f8-70a161a703a5",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c3622c39-ad83-4556-9705-b92a27145c77"
        },
        "item": {
          "id": "3116c1cd-46aa-467d-9ddd-e9d974b80514",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8791b80f-5b7d-4f65-99f4-9257030c33f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e8b5e61-55fd-46f3-ab34-ad2982a03574",
        "cursor": {
          "ref": "00c045a9-8c23-483a-a06c-60fcca5bb8d7",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "09b23fe7-6e5b-4f0b-913f-ff71ab2ff5eb"
        },
        "item": {
          "id": "3e8b5e61-55fd-46f3-ab34-ad2982a03574",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8ba1c1c5-f235-4b04-8db0-ed97e830e72a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73488923-4e1d-4dcd-981d-8606757e2eea",
        "cursor": {
          "ref": "788eafbe-20c8-44b9-9a37-a16480c38041",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ea361ae3-f791-467f-acc6-8d3699acfea0"
        },
        "item": {
          "id": "73488923-4e1d-4dcd-981d-8606757e2eea",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f5e82922-fb8a-4bc4-9ebf-0e06a27c6b45",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "025e2681-a566-4cf2-8954-b699e0fc2f8c",
        "cursor": {
          "ref": "860190ec-34fb-4d9f-a67b-a43da5573cce",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ca6ab295-3411-401d-8d73-777788093508"
        },
        "item": {
          "id": "025e2681-a566-4cf2-8954-b699e0fc2f8c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5bf0cebc-0fe4-4a26-8e4b-092b9127cac1",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "3cb4a328-c270-4cef-bfd1-3c43a0d0e94f",
        "cursor": {
          "ref": "cca47181-8f81-4963-8f31-8f9a38c7954d",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "370864f8-243d-4385-b319-262afe574e7f"
        },
        "item": {
          "id": "3cb4a328-c270-4cef-bfd1-3c43a0d0e94f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7e09bb0d-fe24-40b4-9cfa-41982a112545",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c38446b1-ff8c-42f8-8de5-323db2685735",
        "cursor": {
          "ref": "d4814d5b-83ca-4305-91b4-68ec306f41cc",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0402eee1-39b3-4630-a75b-7033b65cd692"
        },
        "item": {
          "id": "c38446b1-ff8c-42f8-8de5-323db2685735",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "595db08d-aac9-4ab8-8f34-3dcf7d186754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f9ad796-a186-4ae8-be06-4adf6eec45e4",
        "cursor": {
          "ref": "8f33f6e1-bfef-4043-95de-ed023d4d2e7a",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9b0971fb-c6f3-4a51-bf3d-da6532e703e9"
        },
        "item": {
          "id": "5f9ad796-a186-4ae8-be06-4adf6eec45e4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a62e2ff0-92a7-4faf-8888-623b2a2fefc6",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "c0b0d3eb-d24a-4f46-b213-035c9dd7602a",
        "cursor": {
          "ref": "e3c21cd3-8273-455a-974e-5c5d96b1b4a1",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3b96157b-5112-4ba7-8832-cfe860fb1953"
        },
        "item": {
          "id": "c0b0d3eb-d24a-4f46-b213-035c9dd7602a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5916db5b-058b-43ec-a32e-d4281f07484c",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "04d9f69c-1e00-46af-b662-28908b42fa6a",
        "cursor": {
          "ref": "31ad9ae1-41d3-4339-828e-8847ab2a162f",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c352ac52-9dc0-452c-a037-33dde819f95e"
        },
        "item": {
          "id": "04d9f69c-1e00-46af-b662-28908b42fa6a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "25968fc0-c4cf-4f48-8771-c361e7532bdb",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "7e6d02f7-8526-4732-a8b9-b206282df817",
        "cursor": {
          "ref": "aa298937-77e5-4ed6-a960-c0c008d19c88",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0421abb7-0ef5-44dd-9a26-3d0434d4372a"
        },
        "item": {
          "id": "7e6d02f7-8526-4732-a8b9-b206282df817",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "075c8d34-db62-4022-b350-62fe62e12caa",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "5681d588-e094-42e2-8d2e-4f8c94f70d05",
        "cursor": {
          "ref": "f8da2fc2-232f-4c96-8eec-29789ccce096",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3f91cea8-e8ca-4641-86a9-8e304b5f28e9"
        },
        "item": {
          "id": "5681d588-e094-42e2-8d2e-4f8c94f70d05",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8431c964-404f-453f-95e3-2daecadfe215",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "b8388806-fbc6-4e35-9807-af069cf2d0ab",
        "cursor": {
          "ref": "ca2a5f37-294c-4b3d-a8bf-bc3996410766",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9cc4a97f-ff26-4299-8b04-ead4e50f5b7e"
        },
        "item": {
          "id": "b8388806-fbc6-4e35-9807-af069cf2d0ab",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9f68df15-fad8-48ed-a8d4-b84671495e1a",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "7a5a6c5f-ff41-46be-99d6-a9f186882c1e",
        "cursor": {
          "ref": "6d037476-a2cb-4a50-9f54-e401f533d5f4",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "1ddf89c8-6cde-4c49-be36-c3165cf33d29"
        },
        "item": {
          "id": "7a5a6c5f-ff41-46be-99d6-a9f186882c1e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "58bcf302-c965-4365-84cf-8591ac47fb59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fefe6ea-aed4-4e8d-96b1-74c2362a8cc2",
        "cursor": {
          "ref": "22676ba2-e2ee-4cca-bed8-a832612e263a",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "fdf7661b-59ef-4a34-903b-5e45af5aebe9"
        },
        "item": {
          "id": "5fefe6ea-aed4-4e8d-96b1-74c2362a8cc2",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5d911fb1-c1ff-423b-8f01-c5ff009228df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94a6bbcb-d295-4645-a7db-cd1b304c4976",
        "cursor": {
          "ref": "d6e221a7-ab33-4afe-bace-5b674246f505",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2c4474a0-c05e-48e7-8994-bfd750244dcf"
        },
        "item": {
          "id": "94a6bbcb-d295-4645-a7db-cd1b304c4976",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9c5d3652-af9a-4b79-8d7a-1e9f7de9ab85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcda48b2-c346-470f-8635-18ae578c89ab",
        "cursor": {
          "ref": "8c57594c-3241-4e75-81a6-d47051eaea48",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5162eb82-9b97-4d59-96d1-81900bc52532"
        },
        "item": {
          "id": "bcda48b2-c346-470f-8635-18ae578c89ab",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4b6bdd7d-de05-4f40-8542-cbe1f80f56f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "195b63cd-055c-4e59-8388-232327aacbbf",
        "cursor": {
          "ref": "773b770d-1a07-4415-822c-e369194bd553",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c255164e-1eff-4e99-84b0-03ba954452fa"
        },
        "item": {
          "id": "195b63cd-055c-4e59-8388-232327aacbbf",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "b39e2044-663b-43eb-a6c0-71c4090c8c49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df43f95-50c8-4954-b084-94d24b00a91f",
        "cursor": {
          "ref": "a15c3747-6df4-496a-8610-b90837174137",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "46dd2f8f-be42-49a5-995b-470f1a2af2a4"
        },
        "item": {
          "id": "2df43f95-50c8-4954-b084-94d24b00a91f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ec937781-3ed4-45f2-b66d-0fa50b8837bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c518f9d9-3251-48f2-9373-4be77ac8fcca",
        "cursor": {
          "ref": "5b9217cd-1f12-4233-8b02-d29da9e50676",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "78df8d84-735c-435e-90ac-842769adac70"
        },
        "item": {
          "id": "c518f9d9-3251-48f2-9373-4be77ac8fcca",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "cbefaf47-563b-432e-99cf-0972d1363971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12eeb510-36f4-4cc2-a02e-7d1da1260151",
        "cursor": {
          "ref": "b48a7761-f776-4a12-aa35-8ba6c301353a",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "80822e2a-8d96-4da5-8cf7-0c5eda0f7762"
        },
        "item": {
          "id": "12eeb510-36f4-4cc2-a02e-7d1da1260151",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f536ff34-a953-423e-af7b-cf81645d35e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1bcde3b-c151-4872-b102-7ad97402a81d",
        "cursor": {
          "ref": "373a1b6b-5805-4e13-a9c5-ca99ecba9222",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a7c6ebec-e6f7-41bc-9c22-19d03a101f90"
        },
        "item": {
          "id": "d1bcde3b-c151-4872-b102-7ad97402a81d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "54dcb003-c918-4756-9554-82800414e065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88128bf-7500-45c4-bb4c-0f42c5001cf4",
        "cursor": {
          "ref": "f468ed43-056e-4a13-af76-c2619e1b5d5c",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f5808157-2d6f-4559-810b-91656ac9837d"
        },
        "item": {
          "id": "d88128bf-7500-45c4-bb4c-0f42c5001cf4",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ca97769d-7eda-4848-a41a-7eff53b5689a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc10eae-67cd-4c79-b0ea-d82cd42446d0",
        "cursor": {
          "ref": "0bc934f8-fc77-4f64-8aca-103c740b4609",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d20c950a-682b-4d06-b199-ec64f5c8e27a"
        },
        "item": {
          "id": "fcc10eae-67cd-4c79-b0ea-d82cd42446d0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f4a5653c-bac1-4170-90d3-2aedcdc1f771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2e5fa2-8b30-4119-84a8-96671fcc188c",
        "cursor": {
          "ref": "24b509c3-e279-4ac1-8813-d3251542942b",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ff9bb352-5813-4ce2-9e87-ed0389111fe8"
        },
        "item": {
          "id": "cd2e5fa2-8b30-4119-84a8-96671fcc188c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "20066403-5b81-4c7f-acca-e96f1a15d04e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d28bcd-85eb-4fcc-980c-02a29325d183",
        "cursor": {
          "ref": "aff03859-48ce-4f8c-b9f7-12574088de4e",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "18d1735f-6803-4148-8862-c8d976bade2f"
        },
        "item": {
          "id": "c1d28bcd-85eb-4fcc-980c-02a29325d183",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ae67afae-598d-4901-a2fe-1b4c86b8fcf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbea56ba-3582-46bd-b955-9373c83b4390",
        "cursor": {
          "ref": "241387d1-711a-4912-b9d2-bc4022261415",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "38cca63c-57a5-49a0-9b3b-2f52c130c775"
        },
        "item": {
          "id": "dbea56ba-3582-46bd-b955-9373c83b4390",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f0396d72-0672-4661-af06-09c1c5df502d",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "5093efba-dd0a-4365-8a39-94b310263916",
        "cursor": {
          "ref": "3beaeb54-61f0-472d-b19d-f20916153c84",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "074915ef-42da-45d0-8db2-7a05a1262972"
        },
        "item": {
          "id": "5093efba-dd0a-4365-8a39-94b310263916",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c5fa5cf5-9c1f-43cd-a131-14c399be8d2f",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "b481a5d1-b9bd-4bad-bab1-1098aad33894",
        "cursor": {
          "ref": "7a5cba65-cce5-4f15-abc7-f8b9ab6f5574",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "64337938-698a-429f-bad3-cacbdaff90f1"
        },
        "item": {
          "id": "b481a5d1-b9bd-4bad-bab1-1098aad33894",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "69ec4f15-92ba-4953-8882-409f8bf66acc",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "1c442126-ea02-4821-a977-5850badf824b",
        "cursor": {
          "ref": "2ce6fa89-d8b4-45cf-a5e3-3d545e570de6",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "17f3f50e-810c-4998-a6ce-5e936a72fb27"
        },
        "item": {
          "id": "1c442126-ea02-4821-a977-5850badf824b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c5fdbba6-53e1-493f-95f4-fb141aeef3cc",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "4a503ee7-9ad9-4be4-b666-dacfcb746ebc",
        "cursor": {
          "ref": "30353b8a-55af-48eb-ae93-2ecffcc327dc",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "c9ca06fd-e361-4030-a24a-118f3ea40548"
        },
        "item": {
          "id": "4a503ee7-9ad9-4be4-b666-dacfcb746ebc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "96eab935-a72c-4a2f-ae44-21a1c75141d7",
          "status": "OK",
          "code": 200,
          "responseTime": 191,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "8988da68-9a2e-4792-ace9-b2cd78c11eb4",
        "cursor": {
          "ref": "38d1aaa0-097d-4f8a-827a-26bf12ec0eaf",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "026dd031-f917-4dbf-b0e0-00010f4c506f"
        },
        "item": {
          "id": "8988da68-9a2e-4792-ace9-b2cd78c11eb4",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f3050604-c8df-4d04-a451-aaa0e17f4148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a01ae85-a9ab-47da-956e-98e5ed4c8059",
        "cursor": {
          "ref": "79b69c86-d1e1-4369-8845-a4672d63aebd",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bbfe74fe-eddc-428d-9a9e-0038f908d54b"
        },
        "item": {
          "id": "9a01ae85-a9ab-47da-956e-98e5ed4c8059",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "54ebaa3e-0089-472d-bb2c-5047d365efd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade897c6-12fb-4ab6-8712-17d680925a55",
        "cursor": {
          "ref": "339475f8-3a81-43a2-99d6-3387c0133def",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e3d104e9-aefc-4905-a4d5-fb985c8c88a8"
        },
        "item": {
          "id": "ade897c6-12fb-4ab6-8712-17d680925a55",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "92400c52-ab64-4c69-9907-dceeba629ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe04155-6d96-4184-803e-f8a1528674cd",
        "cursor": {
          "ref": "5ab02653-90fa-4c78-b0c1-1f097c950bdb",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "eae69166-89f8-4e77-aad9-5d99ae9b3b8a"
        },
        "item": {
          "id": "fbe04155-6d96-4184-803e-f8a1528674cd",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4fc988d0-1952-4279-9414-8671f2c6ecab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2cedcf-e5b0-40b7-b157-435b16c2d2e1",
        "cursor": {
          "ref": "f142dc18-22d8-4290-98df-8ed2e5d8893b",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "eb2b62e6-d065-4669-91f4-71b9cb598fa2"
        },
        "item": {
          "id": "7c2cedcf-e5b0-40b7-b157-435b16c2d2e1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6c42b878-7a9b-4cfa-9994-746c439525bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb75638-9212-4822-bb53-7c9e88437502",
        "cursor": {
          "ref": "81114a10-358a-47ac-a7e0-785eed0511c3",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fce5fab7-35fc-4cd7-ba78-66dd291cc22f"
        },
        "item": {
          "id": "8fb75638-9212-4822-bb53-7c9e88437502",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1b69a658-f2c6-48c0-a1d6-bc4d17ccac8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9eb6cf-66ac-4ba1-b0d6-38a079ce8b2d",
        "cursor": {
          "ref": "78841e3f-0e6d-4525-92be-2ede413a1cfe",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2350d924-4b8b-486d-a257-60cef683d9d5"
        },
        "item": {
          "id": "7d9eb6cf-66ac-4ba1-b0d6-38a079ce8b2d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "442fbaed-d5ae-4662-997e-4b5ffa7a882d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b997a5b8-e653-4595-b601-13dc850b447b",
        "cursor": {
          "ref": "97a98f5b-deb9-42de-b500-627df434ec33",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "6ca5c3cb-de21-490c-8ba3-9c42f3588b51"
        },
        "item": {
          "id": "b997a5b8-e653-4595-b601-13dc850b447b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5014fbe6-21c0-4e0c-be60-511b986f2d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5747a6b0-399d-458b-8ed8-2159582d74c6",
        "cursor": {
          "ref": "819cb13c-1685-4068-8ace-5b9eec723ab0",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c137e2c3-280a-4240-bfcf-f40b56522f53"
        },
        "item": {
          "id": "5747a6b0-399d-458b-8ed8-2159582d74c6",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "12756c32-708a-45b5-9319-ee233203e65b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "735c9091-12e9-46a6-ac5b-8ccddd73c562",
        "cursor": {
          "ref": "9b078c43-17fa-492c-84ad-1d59d1486c37",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "51f00707-adbb-432b-8d8c-9890d24c3ce0"
        },
        "item": {
          "id": "735c9091-12e9-46a6-ac5b-8ccddd73c562",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d1e6fe2b-f092-4beb-a5a6-d01944b1af9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8491fa91-ec1e-4da9-922f-a119e36a56a5",
        "cursor": {
          "ref": "13ce4719-24aa-4be5-9353-f19135904b19",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0bc2d441-49f0-4d5d-af05-0131c8fba289"
        },
        "item": {
          "id": "8491fa91-ec1e-4da9-922f-a119e36a56a5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "084d7872-6e52-488a-9d3b-e7888ae8a5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd559246-8f88-486d-baa7-57f1f2e7dfdf",
        "cursor": {
          "ref": "94e16236-f3e0-43c6-859f-676684e46d9d",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "51f7d23a-7ffd-4444-bd95-c5eaa9dfeac4"
        },
        "item": {
          "id": "bd559246-8f88-486d-baa7-57f1f2e7dfdf",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "10441a75-417d-437c-ab5a-1f364634719b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43de1dd7-859c-435c-a40b-2a41328fbd84",
        "cursor": {
          "ref": "5c17adaa-b519-4bdf-b111-f2c856248ac2",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e647c512-d94b-4dcf-a117-2d6a8bc01bb4"
        },
        "item": {
          "id": "43de1dd7-859c-435c-a40b-2a41328fbd84",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e39711a2-1f19-4c71-983d-9bd53afa6294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc10433d-9278-4fbb-b169-979bd70aa956",
        "cursor": {
          "ref": "d7a095ed-5c28-46a7-bd39-ebb1e9cf3fd9",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a5b54066-62b4-4b70-8373-559fe40f8c80"
        },
        "item": {
          "id": "fc10433d-9278-4fbb-b169-979bd70aa956",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f65e611b-6cd8-4600-a3ba-16b11270ebe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d171c0b-7629-4353-8e7f-32933ec086a4",
        "cursor": {
          "ref": "c3fcf26d-550b-4198-8516-4c7a6ff28487",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ff12ec65-7ea0-4233-9f95-4cbc93bd4be3"
        },
        "item": {
          "id": "1d171c0b-7629-4353-8e7f-32933ec086a4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ad76f1c0-f914-4ed8-87e7-26b5ccdb664c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849af544-c6cd-49b0-8edf-3b670b9c467a",
        "cursor": {
          "ref": "235d83e8-a0c7-48f3-a981-61aba3bbc075",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "bdc49a54-43a8-4aab-9196-c8198802b848"
        },
        "item": {
          "id": "849af544-c6cd-49b0-8edf-3b670b9c467a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ad1d4d19-8a9e-4dbc-80d9-0fb5a7b91ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5781549d-dcba-4e47-8e83-e4b73649d9fe",
        "cursor": {
          "ref": "35f179a5-0f5d-4f8f-98d9-f221c8146794",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "85012fcc-b73c-4626-91d0-f59c48720a54"
        },
        "item": {
          "id": "5781549d-dcba-4e47-8e83-e4b73649d9fe",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4a949e12-a36a-4dd0-a9ce-0b95deb8bafa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a39302-b2fa-4b37-a0c8-61aa5e8cfe29",
        "cursor": {
          "ref": "b79abff7-805f-4bf0-aa13-44ff270ae0cc",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "fdaec7b1-624a-49c6-abdf-2ec52d904d42"
        },
        "item": {
          "id": "e5a39302-b2fa-4b37-a0c8-61aa5e8cfe29",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9902604e-666a-4cdc-9fe8-28ad328600fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9576d0-50e0-46e7-b35c-3e4be19ffcd5",
        "cursor": {
          "ref": "c7687b57-5ac6-4bc0-8343-d56bbcfa46a8",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "83ed4fc0-3c72-486f-bb7e-2ab433f7eba4"
        },
        "item": {
          "id": "be9576d0-50e0-46e7-b35c-3e4be19ffcd5",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c7e6da06-02a7-4c19-9408-b06d50576969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20101672-44e5-4f60-8e7e-fb71a02d8e76",
        "cursor": {
          "ref": "be28283e-a52e-4401-899e-d4ca03ed4b27",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "110d9ce2-8ba1-4b88-a90e-7db5b3a65fc8"
        },
        "item": {
          "id": "20101672-44e5-4f60-8e7e-fb71a02d8e76",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a6b615cd-3ae9-4d38-be76-28416a85a0dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2774169-85a7-4c4b-af10-13c486a5378b",
        "cursor": {
          "ref": "b26ffa95-eef4-43ae-8a0e-488adcbc52c8",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1d6cc0df-498f-45d1-8590-f8d76205c077"
        },
        "item": {
          "id": "b2774169-85a7-4c4b-af10-13c486a5378b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2c9651fd-ed0c-49b9-90dd-7f132315405d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1762ac09-ffda-4561-a568-5c401acc3282",
        "cursor": {
          "ref": "59754ba2-298e-4a53-8c3c-0f8a8c64dea6",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1f428a8f-4981-43cb-8a0d-87994c00da4a"
        },
        "item": {
          "id": "1762ac09-ffda-4561-a568-5c401acc3282",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7cd12941-6756-43a5-9512-923253ec9cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9aa4cf-9311-4e74-a88f-0f3a0576930b",
        "cursor": {
          "ref": "dd912372-b1bb-4eb4-bffe-15adb641a706",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "74ec3005-805e-4c2d-be21-43d29806485e"
        },
        "item": {
          "id": "bb9aa4cf-9311-4e74-a88f-0f3a0576930b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5934f706-76a4-4942-aaa3-b00549c453ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7881c4b7-f4ed-406e-85ab-05b2002ba0ce",
        "cursor": {
          "ref": "69a2b0e3-de19-4bb0-a973-c416558dc471",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "df868b0e-3284-4175-a170-0593efc1fc50"
        },
        "item": {
          "id": "7881c4b7-f4ed-406e-85ab-05b2002ba0ce",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "4749703f-ac6f-447a-acc0-f40991666331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb0459f-0d82-46b3-bf9e-8e232f2434b0",
        "cursor": {
          "ref": "a2bed89b-35c5-4957-903b-d89c04f8ff88",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "df0ffee1-f6ac-4ba4-b5d4-d6c528898065"
        },
        "item": {
          "id": "3eb0459f-0d82-46b3-bf9e-8e232f2434b0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "381305d1-8751-4c50-8863-8f601f42ead7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a61e787a-21ea-488a-a156-5e2c87123811",
        "cursor": {
          "ref": "556087f6-1c83-4fb5-ae12-8b7fe98f5a86",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ec18a237-2a31-407b-bd84-4bde12edd16b"
        },
        "item": {
          "id": "a61e787a-21ea-488a-a156-5e2c87123811",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8f707c79-ace8-4be0-bf5f-c0884d6ddf3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e27aab7-0fb3-4884-b395-4d8604ef1cdf",
        "cursor": {
          "ref": "4210deab-a95d-4e07-aa92-7e52ba0e4a93",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b40812b6-e870-4ee4-8b27-44c0db692839"
        },
        "item": {
          "id": "2e27aab7-0fb3-4884-b395-4d8604ef1cdf",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e15e6f7e-b90a-4af6-b70d-a6cc52e4e72c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78101e4b-f48e-4fd3-81c0-550aeb0e82c4",
        "cursor": {
          "ref": "c7479297-f433-4123-8cc5-8a4990b777f4",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "77206f01-b14b-4ef5-95d3-e17fe8ed0a82"
        },
        "item": {
          "id": "78101e4b-f48e-4fd3-81c0-550aeb0e82c4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "69c49f52-d6c9-4890-9872-1f7cef6b0dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec17aac3-f96b-4bd5-9c9e-a7722b70475b",
        "cursor": {
          "ref": "cd0ee1eb-4443-47fe-8e3e-0fe7eefc1763",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1f4d67a6-8242-4989-9e8b-bcd887340969"
        },
        "item": {
          "id": "ec17aac3-f96b-4bd5-9c9e-a7722b70475b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c952e9df-7851-4b42-bb02-6a46ce21fdc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ddaa23f-8fef-461f-baa5-5458f07fb200",
        "cursor": {
          "ref": "1ef33a1c-4dff-4069-be0e-3be54d28a196",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "86d6949b-eb6b-4683-aba2-96bb89b8091f"
        },
        "item": {
          "id": "2ddaa23f-8fef-461f-baa5-5458f07fb200",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "87f7d35b-dd7e-4052-a6fa-51457bde325b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a80e816-0515-42e5-b688-a31d0b29e448",
        "cursor": {
          "ref": "8c4f8b69-4bec-4b3e-b5ba-34085cb5e19f",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8b182dff-02db-44a9-a89e-6c82c790e4b2"
        },
        "item": {
          "id": "0a80e816-0515-42e5-b688-a31d0b29e448",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f225d03d-6f2d-4db9-a234-51cafaa312cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f088b14b-6891-4945-b102-ffb645151532",
        "cursor": {
          "ref": "3d0352f4-d54b-4508-a082-84b3107027f5",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f244025e-eedf-4813-9d97-c5a652da8891"
        },
        "item": {
          "id": "f088b14b-6891-4945-b102-ffb645151532",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "20524669-b4dc-48a8-8209-46ad47d21ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2adc8036-2e27-4be3-9332-598e754dde2f",
        "cursor": {
          "ref": "fe6d7397-0137-4c73-85e8-2ed3a9b15238",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c15a4af3-3468-4600-9b0f-30cf3fe3fdd7"
        },
        "item": {
          "id": "2adc8036-2e27-4be3-9332-598e754dde2f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "21662695-5b74-4ef4-b1a1-f661ad68f565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9668db3-f7e3-4146-8e0b-59b6f907736a",
        "cursor": {
          "ref": "a5a7f4d1-5c2f-407d-8e00-f0a8a19b0e36",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "bbfd2d16-6706-4cad-91f7-163e81da55a2"
        },
        "item": {
          "id": "d9668db3-f7e3-4146-8e0b-59b6f907736a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "076e7038-779e-4633-9d0f-fe99fe469c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f768ec71-7eeb-41c6-8faf-1f3d902cae6c",
        "cursor": {
          "ref": "36233e3a-1c29-47d4-95fa-d578bd2dffa3",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "78358c69-4e1d-42cf-984f-862d84b3cd01"
        },
        "item": {
          "id": "f768ec71-7eeb-41c6-8faf-1f3d902cae6c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e2ee0d0f-7395-4e30-9df3-bba3c8652937",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edce0489-3090-4fe8-8071-77ba9aed00d3",
        "cursor": {
          "ref": "1d82c467-8d24-4737-bd79-2de9b2e94651",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9e6f5014-526f-459c-bf48-a26571409dff"
        },
        "item": {
          "id": "edce0489-3090-4fe8-8071-77ba9aed00d3",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a5748d1b-1b82-4953-8845-dfe3bf5c5a06",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "d1c62576-4a34-4229-b6c0-87066bc473e5",
        "cursor": {
          "ref": "9fe25c73-42ba-4fb7-8944-cbd5d1433055",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fe9dc731-9ec7-4d0c-a274-0faac255f5c8"
        },
        "item": {
          "id": "d1c62576-4a34-4229-b6c0-87066bc473e5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b848ff60-fba8-4494-9a3f-ddef8db44827",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5b4374-05de-421d-8c27-59ccab8c2fcb",
        "cursor": {
          "ref": "2dac0148-1956-4864-a6c5-371351d44462",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b155ea57-923d-477a-a3e1-be9615905832"
        },
        "item": {
          "id": "2a5b4374-05de-421d-8c27-59ccab8c2fcb",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "17f2dbaf-9c85-4138-82da-abacd784e584",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ac1950-8bf1-4261-be8f-c539b17eabb5",
        "cursor": {
          "ref": "e7d6984b-77d6-4bce-8e63-6b75254f623d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "577f2517-ffcc-4b5f-9187-4d55ead93500"
        },
        "item": {
          "id": "d8ac1950-8bf1-4261-be8f-c539b17eabb5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7b16802d-c81f-46ca-b42a-a7c58b72f47e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ac1950-8bf1-4261-be8f-c539b17eabb5",
        "cursor": {
          "ref": "e7d6984b-77d6-4bce-8e63-6b75254f623d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "577f2517-ffcc-4b5f-9187-4d55ead93500"
        },
        "item": {
          "id": "d8ac1950-8bf1-4261-be8f-c539b17eabb5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7b16802d-c81f-46ca-b42a-a7c58b72f47e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e64ef9-fee9-4597-856e-2366f9f63e71",
        "cursor": {
          "ref": "daf0a53c-403b-45b8-bfb5-c916ba4bec4d",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "19d7f541-46b4-4491-b043-b5a8ada3fa14"
        },
        "item": {
          "id": "52e64ef9-fee9-4597-856e-2366f9f63e71",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5024815e-cca0-4b46-80b5-e6feb497c70f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e93b0c2-d463-4a25-b0cb-4865a9ccf186",
        "cursor": {
          "ref": "6ed33bbe-e899-42d1-8055-9ae74df9910c",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9c403836-f38c-4780-81d2-ad01702e65df"
        },
        "item": {
          "id": "1e93b0c2-d463-4a25-b0cb-4865a9ccf186",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e2a77c4b-34cf-437d-a130-004cdebd23dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}