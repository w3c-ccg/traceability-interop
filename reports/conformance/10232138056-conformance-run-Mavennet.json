{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "053e72ab-aba3-4bbb-a454-a526160ad5fc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "21f3ebb7-2f6e-42dd-87b4-42d1f6b56902",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7fd382ca-a3d5-4c0a-9371-493257068f02",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c7cd6237-da93-4be5-89da-9dd50498f5e6"
                }
              }
            ]
          },
          {
            "id": "1b663998-4882-49a2-b70c-c94f7104ddca",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "55650a02-dfb2-466c-aa62-6745d99a5ff5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "71e29fae-29bc-4b88-adbe-3baf02289bff"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0e221c36-8a3e-40de-8e47-1ef8c34a7890",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "06b3599e-f250-43b2-b5e0-94d494d35e4c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5fea4b94-f502-48d3-ba0d-abae4589b2c0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8af43a50-a132-4299-9d01-6103d2c07464",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a3b5a007-931a-47b2-9b8b-cc9d9c8ccbae"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "609f2b47-8a4c-4c61-b155-2df6b42300af",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "957fe19b-76ce-4db4-a07a-cf27729dfb2c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7d43e64d-ae6e-4dd1-a468-a876a75385b6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0a38847a-3f12-4672-94ea-0ef94f9c1f46"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a862f5cf-db5e-4708-b933-e7f5bba11b3d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a05cf17d-02cd-4d8c-862f-52f57f4cd337"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "193542f6-852d-46c9-bdf6-f2622464e177",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8080d5d7-6f51-4d03-beb9-e0dcff99e604"
            }
          }
        ]
      },
      {
        "id": "8611b037-86b1-4d12-907d-0de527f8facc",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "740d9e4f-e454-4273-bf9c-1b3ad4122836",
            "name": "Negative Testing",
            "item": [
              {
                "id": "768c7c53-5a40-4458-83e6-393c3a2fcd0e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b9461ba8-a6c9-4ee8-90b1-e2c65fb84b17",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a682e732-9a35-4120-9351-65f01b685426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "530fb491-55ee-4609-93ca-726966fa0ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849092e8-10e8-4cc6-9008-476a41fbfe3b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d1997f-5d76-450b-9fc8-49be2a777728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8610e98f-b8da-45ba-8f30-3806caac3f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3768bade-8f25-4301-9469-24af7c7aeb7b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e557d9b2-3576-4187-933e-704068319f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "626713bb-68e7-4735-a6bd-b8a737391d98"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "92e6f2b7-8dec-47d0-b152-05e3b64379cb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a9e8c23-2774-4e92-9c38-1b1a02aeeb3c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc857000-42b4-4500-9404-2beb0eeffa2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6e04308-044c-4aef-89b9-c59b5bf16adb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf01b7a-8bb8-413c-bbf0-35be6ee05ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06547cbf-29d3-4d81-8221-42e1addc4826"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0d36a2f3-73c8-4ff6-9117-be464f842a93",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e9e85f5e-0ece-4898-832f-28a4ae185de3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c37d200-70e0-498a-a62e-bee20a219a01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5391473e-a826-42f0-9c23-fac278821903"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9a0b1baa-bff9-470a-9a67-3b8a433292ae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "83f96e09-b2a1-4530-a310-43e480bd0ff8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e7fb168-3186-4182-bbec-aa407efb9fb3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "758fc014-a6f4-4bbd-905c-4e27de7d272c"
            }
          }
        ]
      },
      {
        "id": "52de4645-d3c2-48bc-a9e4-75c1b5637932",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8c169317-8a54-4084-8233-c55514bad5c9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "952e8746-ba55-4624-b2c1-523538a44532",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e7ca6f8b-0bf3-4dcf-82c5-db50f416e93a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a79e899-9cf3-4064-b23e-f0425ade67b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83aa48ca-2de2-4c66-9c80-1cccd1b29294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68236591-a4cc-4d6e-b57e-2831bcfd5d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a742ba78-8bd1-4a2b-9bc1-18458548e6d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f417f0d-3b44-4706-a56d-fc449be0fcde",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b82769a-f20e-4b10-b476-e276e2ad963d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd7e29ee-7c50-4950-9245-b54e25893541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d1b36b-5e00-4acd-b5ce-428291a21025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd19ad47-76c4-4462-852f-53beee83caca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0aae79-f597-45e3-9fc0-6a26c65a6004",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "237c70c3-efa3-4778-b46b-20f655795536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d6d529e-ca6f-4cdd-9b75-2ce416cf9080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c7f6d9f-9885-4102-9628-e5499b0926f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e7cf0d2-6fb1-49e1-9cc2-043f6b7a8533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7748b85-5dd7-435f-b152-d301e3118578",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bde90c7-6fce-478a-ba9f-e09502d577e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20db42c2-a342-4402-af46-2411cc4effa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821e9ea2-157e-4b87-84e0-cfe003802aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a24d4228-bb89-4f3c-95ef-e2bcad05807f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6aa63a-a944-4987-8056-3b380cae5630",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7874c6ae-c879-4529-a53e-6da4bb596374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a9636f-86d1-4c32-b29e-ab0fdb5d2231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fccbc1-ca54-41cc-adbb-2e48c843fa11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b1acb94-7649-4ed9-b11d-efd83ff312cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a561345d-55ed-4566-9533-e90fc25ad414",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c35c22-3366-4103-baa7-d9b4c7392e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d778352-9b0d-4f60-a338-da734c35b309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8ef594-567a-4371-ac93-bf9b65320759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74d1b2e6-6fba-4761-a5d0-abee866dceb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2457442c-77ce-4766-ac8c-b1f849a8cde5",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "761cba19-c34d-4a07-9f06-061eea8a7c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c0b0001-74e0-4352-bd70-13b7e3263cf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e366c54d-7b7c-44f8-8902-3c856235a01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f18a0392-58da-4386-8452-bc1f905712b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7963f48f-6be3-4fbc-8d79-91bf94b880a8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ec1390-ae9d-40cf-80a0-5b43b2867cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c95bc6b-121d-4a5f-aaa9-6fe3162c2bc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb5379b-6d72-411d-91aa-1cb1806514c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1db0f99-802d-425d-9b25-c48d0178e930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660ac740-e7ba-41ac-a013-39d42c6deabe",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb20ad6-6a0d-43e4-81a3-eccc78d434cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "550d76ab-46b7-41da-8084-96fce4f13018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa3f37f-3177-4e38-bea3-0496d82cd13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8118e663-3c82-4067-afe0-85b5a1e2d066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14cb6026-02ea-4a8d-b278-31058a52b508",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a06b0dd-3793-4818-938e-dc7019804711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc81e64d-2bb9-4c83-a872-a5367794c2f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c35deb-3651-43de-8707-fc0b300fd079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe6ef8bc-b5dc-4f79-9cc7-db5be1a3695a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b32dd8-16b6-4cc9-b805-0bbccd014c0d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e95cbe-684a-4728-b99e-f138fea3311e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89aeb5b4-8d31-48bd-938f-b9ac56325a47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd2cfad-2af9-46c8-890a-211521cc4b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b708be48-bb1d-4a3b-a7b0-4970c056563b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551c0aa5-859d-44ce-a1cd-33803cd20ce2",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e9f96d9-96ec-4d6f-80a5-fd526a0ec17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac489dbc-c8b7-4598-b602-63e295fb7d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b6cd3d-5de6-46d4-99c8-0317de722867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9928f658-cee4-408a-86d4-f9786fe381dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39018ddc-48a5-4204-ac32-48d2361829c7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a4648d-18ea-4e75-ae39-d49ae79c662f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccb5fc40-3375-47e1-9a2a-516c2d3cec42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ade086b-389f-46f2-85e8-939ca1faa138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46452c5a-66eb-4ef6-9c9e-fa158c2c91fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9bdc84-793a-49a0-ab6c-1740e6fd0e90",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bcc6a3-f78b-4461-979b-fcd18c6f83f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8741c8a-987d-4120-ac88-152ef80f8ff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be33de2-7a56-429b-9790-c21f1ba4b903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7717e56-6402-49bb-9bdc-37ac39d05673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1693a7d9-74e2-4b8d-9236-440d00aae9a9",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c54a1003-c595-4037-b504-ab44c826a237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abf80e52-35ec-4049-ae5d-ff8529f4b653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b38d79f-fb3a-45c8-948a-dd10fe2f1347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cebdba7d-d766-417f-8df7-80bf14eed0dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858b3ed0-b854-4cea-888f-b646aa582a4e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d845eb2f-2d12-4eee-a34c-1f4fecd96350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5a8611a-8376-4980-955c-969e354750b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc07b18-5bd0-48dc-82df-f14061c8be07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aed473e5-af87-47a9-80b7-e07d7635ad4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d28318-8a4d-4904-b3e6-201f0bcc36f5",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03aa93f2-5085-451c-a4b4-f2b7c7f40ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8262133a-15be-4286-816b-264c28a3dd13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3a9ec1-d1e3-488c-b09a-9c4e86a3798d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de143eb8-424e-4c9f-8f21-9897bf0ddb17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff826c4f-24da-4cee-89bb-3c1b4c929469",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a77291-8201-4a8b-9135-75220b1c0aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31146d4a-24ca-4756-9cf4-1dd5bfdb8107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b651cb5-7f66-4040-bf4f-a44b0879f72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9b1e02b-3cd3-4fd6-9f54-6ccf99dd2bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951d423d-61d4-422a-af13-c05ecc225ecc",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb72a13-2b14-4324-add0-b43680cb50b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f77b244-cefd-4205-a60f-22354bece0e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e12eaac-ddad-4be1-9e07-57eb5e12c41e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f2cc69e-2567-4d2c-93a6-7653a2954752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d901ea65-c4e1-4c96-9c89-5074c9dc31fe",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "520a540f-044d-466d-8e46-52594d2ea193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c13a89eb-57f2-4dba-9e73-b20a061dbaf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7370eabb-442e-48c8-a575-bb2949e42bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b6660f-09e1-41c5-b406-501102d001f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70498b4a-6e05-4ae9-832c-10c94ef14b25",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6efc67d-d2d7-44ad-8c02-aa6f06b4e1f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea076458-9a79-4894-bf0b-3200e9e75e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf7d8c4-2f2c-4a04-9ea0-22e64d9b50f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "774a1d9e-3cf6-43c3-ab92-c368b57b57fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35294c0-29d1-4522-81a3-c6c707fe3709",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ba7c39-2f06-46d4-80f9-684ba6b5d4e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4edf20d5-e089-4bdb-8aec-a35a77b6cf88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42c41c3-39a1-453a-b404-25a79ad06434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "62226820-be9f-4593-885d-070884974fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8be3cd-a098-45fc-963c-2efb1f55082f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef5f9ce-43d7-4b68-af30-3b96b3094da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c46133ef-5041-435a-857e-aa7b19092fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed3d3924-e5f8-4a6f-a850-0d541b3a7a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "192005d9-7557-4db2-ad7a-40b50da4351d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2697db95-6b90-4a34-9588-75ed7377f1d3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68041a2-0ff2-4e02-996f-b2a1e9b234fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f741566-7fe4-4ee2-ab0d-9c8ac22a2df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322f34ca-e734-4c43-b3b3-ce184d6f1479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "269c2d32-d251-4250-94aa-3343716c930c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0de358-474e-4d22-a50a-0afb68f8d108",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3b54eb-1693-4bad-888f-9f5957cecd58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ce9ab9d-b2b5-4995-bad8-afd1bb5eb15f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21aac4a0-6a6e-44bd-b259-02fabb7409c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "23ae8ea1-4caf-4406-a2fd-6a543adccbb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19530d10-88bc-481b-a817-fbb8ad26f4d4",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de4ee92-542e-42aa-b923-932e3164b391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d17f265-c216-40c7-a886-8a225aaca543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe092e3-91df-4dfb-8882-b05fce0eac09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "80eebd6d-3ae6-44ae-a4be-1f5305e41fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d228b8c2-43f4-416f-ba0a-c48c373a90ca",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a94e98-84ae-4d11-a305-f69d589c4740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f158cdb0-9af1-4d3f-85ca-2e2830ef1d2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d84033c-493c-4db8-bf86-08afdcaa901c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "abcc0ba4-d8d2-4170-b4f9-d5b2455b5e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f023d27-5032-49da-ba8b-44415952c28b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ed203f-b5ea-4806-a7f8-b392d9135765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53aa6836-43a7-4481-8688-74aa5bba5cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae610fa4-c087-47c7-9b5a-f721ea3a01d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f32c586-3190-4329-b168-7cb5caf752a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d3c6d1-6ffa-4d8d-8800-1cbe3bc18c5b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad27f50-d227-4194-a854-a79738c3abcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1b2cb9e-aefa-4766-bb0f-493ec62ccd19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be55382-ba8e-4e25-96e9-e26e5e641357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "89b49346-1be7-4a40-893d-d08b87690505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a515694b-17d7-4b03-924a-cf55557c510d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426ac976-cbbd-4da5-b419-968cb880cc05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d67a1f5-e56d-4687-8c28-59c5ee942976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151c5d6f-9359-43b6-a9b2-811429703a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4994cf3d-de55-46cf-a285-94954c079ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e809e193-bb03-4ffc-a6b2-d69e2372bfae",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f82d7bb-2cc7-400c-a6ef-5c331e2c6f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7b57415-0711-4bb8-a92a-bf5da7b326d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1758e6fb-c4ba-41db-a538-eb3b05424609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "44289f05-de1a-498b-a6f9-e5ffeb8b9388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567354cd-deb9-4464-b998-745627c1879c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1beed580-a3f4-4e4d-824b-d7cd62c6ea39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18d89713-8713-4072-b43a-ceeae1c5457d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00838f5-727e-4b89-a1f7-92e3432ca7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cb0b556-a79b-492e-ac4e-f104c9c6f8da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8a7cd4-ee5f-4747-a05c-366724a7c0aa",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df64e1ba-e64e-42d6-9469-471de266b6a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "811294fd-aa94-4091-8234-0eb249c7a061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "764394a2-7f3e-4b52-a5d6-f8c544ab87a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b96f30d-593f-465f-951c-d1b3ee7d4e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5b18ef-17de-4240-abff-860bc7321096",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4c5a8f-5d93-4498-a87d-463f1d8c3072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55842805-6216-4eb3-a493-f4225d83b875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7816095d-7736-48fa-a378-bceb110ac498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6914adb4-c0f7-4d15-ab34-1cd06a4b5473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d963e84-8ae8-4a4a-8516-ff46c9ef56c2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3355a607-0fdb-4ac2-bd4c-69d8a6ceae69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efe994f6-41c0-4d47-84b2-d36e271f73c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33959081-3818-41d3-9478-8ae7eb8929c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "622009bf-13cd-4abf-947e-094fe9ee0ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f8a32d-12f0-411b-84ca-fcd93395efe3",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08c9ff7-f0f1-4862-920d-f469606d71fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f462a300-6492-49b3-b7fb-0d37efb60704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07eabd29-d487-4822-b826-2fa4adfe9401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad75d60-fd53-4fa9-944e-fe924553f4a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379a6020-dd02-4d10-9764-0491dff97568",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d1ea73-2075-4f4c-b22e-0c3620d0d8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beb52919-b191-4e13-a53d-9dba13f79c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60528b84-7627-4be6-858c-f872f21fe563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9020244-639b-4ce4-b6c4-44dbf315b117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828a5be6-cc60-413f-b3c7-8867701f96a7",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "574d1ca8-d4e6-4e28-adae-2fc01bb60b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "208fcd81-c52a-4b8f-8635-18643e456d57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853c12c7-2b5e-490a-9ccd-afbab7f2e614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e067047-26c2-4222-8c10-c4cb77d9d78d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9fa136-04b6-4459-8d1a-3949cd9e6b3c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b59e44e-c7c0-42ec-9ad8-37c49cd6f2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5090ec6-ab95-476a-840f-e31493ae4aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4920bf1-d44f-4dac-b94a-13bbc98736cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5940f452-59fb-4535-a51e-f761dd17f6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6dfa8f-09c9-4759-8238-5b32a9e45548",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d36f045-2e2e-432c-8743-f42c4a46d89c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "739f5c22-948b-400b-8773-e94c8466d4e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a73986-6bae-4029-8649-88c549abbea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8ff803b-cdb7-4e51-902f-f7013e4d5039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48777193-536a-4acf-9754-df3951606038",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c848cdea-4a20-4042-a0fb-7310ee25f863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e465c28c-2c07-48f3-ad9f-6c35851823c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854479d8-a7f8-432b-97ff-12af1442dc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "24924026-dff0-418a-86fe-6b2d0d380a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8b2ca4-a03b-4013-9900-e762900f9909",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4742c18d-0a99-42a0-b299-651ca8fb9bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65b90a9d-e997-4a3e-84fc-c728aad38487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dfd9fdf-7283-44b9-b84e-676511a93a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d0203978-a5d1-4d2f-8ede-011eb24918f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fcf5cdc-9203-476b-b6ce-a5dfc0a63200",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e933d3-13e3-4b8e-8e25-d4d067390f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6a8ad25-66f0-4e55-9bbd-1f1d4c1ce078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce8ac64-e45b-411d-9292-8e0f49117743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b68a560-d06a-4446-ab4a-57a8b54facba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3f7525-e8ca-4078-891b-b78c52c02ce3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44982a82-bf75-473c-8fff-90d8195b7ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42063cee-0b79-4e61-9280-4cdfac832d2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f951200e-a4be-43f6-a332-0c4fbaf4eb51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc1e40ea-cd84-4631-83fb-603ab469443a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869637d9-539a-4814-8914-b2cce47b53f7",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8371d24f-2e9e-47b9-8d63-501ab7cc6e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce35c30-9e51-400b-ad8f-a888a5b9a55b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5304882b-4053-446c-a94e-ac820ada4307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "936c3b94-31b8-44f7-bdd4-d0cb639e31e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3830a6db-57a4-4b21-b099-5f82423ae3ee",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4abca96f-a97b-45e7-92f8-8ae725663e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a050c6b0-8fe9-4d66-b199-12035e5a18eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29cc2b3d-b685-4189-b44f-b6b1ed76a6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eebf50a8-6a83-4f1c-822c-ce9c1082b879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a222acc2-7e5f-484d-a6ba-7afa729010e5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0adcbaba-bb03-4fa3-9f5b-f523328c573e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ce1aab-906d-4b0f-a366-53a981e4eb77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407ba3bb-f7c1-4a76-a700-d192ea7f68e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "873b2ba5-03b7-4c25-9a41-b4b4101a5e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7202ffb-2043-48e4-93dc-c86a05ada4c9",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2828f6-e998-4536-ab0d-49d81af2e6f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3c04189-bbf8-41c4-bb4e-48fbba51f9cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7dc8897-c130-49ac-adb0-aaf7bf3e47e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6f3696a-3824-4200-b38c-fdeb2305e5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef09945-f694-4249-a87a-6b98bee93050",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027bd4aa-b2d0-43b9-8398-322abf826860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "571210c6-00ec-43ea-b300-0a58f060dce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56abab4-7958-4e39-aa83-8740d151570c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "18e271eb-9972-4d34-919f-f67afc973c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c7555d-bd2d-45f3-8b85-42c5803ffd40",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1413ed4-df88-42c9-b575-78e4b1bb5481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f61ca5a9-5c0a-42a6-962a-ddaddcd937f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec4cd46-1274-467e-9d03-9066f2f2ea49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b31eef83-b769-40b0-adee-ebbc744672f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ed3c78-1a81-43ab-92b1-00162a4263b1",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "736639e0-5e9e-4672-b357-8756d8630334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a9a92e8-4f82-4c3e-b97d-4aec522c385c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e660237-988e-4585-a5fe-fbb2cd528bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "72caa196-a7f6-4e01-80b3-1107b7837025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5d8d98-c453-4902-906a-5392aff603aa",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c675a1c0-3f71-4d9c-896a-7e15ebabad9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63a94b1c-789e-4a62-8e45-99db8395e692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f3adb5-b527-4023-a78b-216ba4797c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f53be853-7c92-4c63-864d-acf5b6d25e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba235d8b-0aec-4ac8-a5f9-2f41dcf7e63f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e847ace-eef3-4331-be3e-a027e2e4ce75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b761997-6f8d-4772-ab27-19d422cb3f78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a662ce01-23ea-4a50-9273-d330f638d969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdbb6052-9ad0-496a-80e8-7f34e362e6a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4712f137-2c01-43f4-8d9f-681cda001339",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6767bcfd-f141-4106-b720-c0ce349fc176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4462eaed-f88d-453f-96e1-b4b83184ffbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5db17a1-d0ce-4480-af2b-7911d93ab051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d67651ff-5f11-44ed-8746-4411403530ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4995ea5-b7e5-4248-a7a1-a8641215ebff",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c93c73-12cf-4e0a-940e-bc8ea9624a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87c97ec0-bc5a-4527-b627-b426dbcdc8e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa31b634-315b-4e68-b2a9-e27a3deba23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc509ea-672e-40c5-91f7-f8d0b29268e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359ce4a7-c5b9-4916-abe8-ddf8b6e26702",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54873adc-e053-4c78-a611-53e7368eb851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd95eaa-1a28-4726-87b4-c1c0e2b4b78d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187695ce-f23c-404e-a8a0-b2e2b4c2939a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f255aea5-d688-4e07-8ec0-ccfb29c59ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0c07cb-9bef-4e89-8a2d-3d4e21397574",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07de6553-ea46-47af-bd9a-3bd22316c524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f09f4b-485a-42bd-9550-55a4470a9ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb79811b-00cb-4e9e-b598-34cacb0db135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "81e5589b-bab7-442e-9f8f-88cc1d0fb509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89902652-a5c2-4d4a-9139-bf462f12dee6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39aa0e98-9d00-40c6-843b-5978a0133711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c903246-8fc6-407c-ac47-92c116595338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473bac35-2ae2-4be3-a4f6-1a73daaf05d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fde4aeaf-9192-4433-a13c-bf3d260a4686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f6ae58-9cef-4003-9215-389a41736939",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba061179-1ddd-4357-aa67-f28321c3feb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59c0562a-4c5d-49f9-85b6-83eda15f678a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "305593b4-39e3-4506-adc9-611299f6baeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8bac57d-6cf9-4d47-ab14-064a875e268c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ba4bea-2c1b-452f-9658-a69622a6b7a2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1d7d7b-9746-4d29-9900-f1c440aa83ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6bb6574-16db-4191-b07a-fe4b313f5804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5293d54-1eaf-4283-8ad4-0d6e9d4a2bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "87e75de1-2f06-432e-a080-a8940ac82eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74c0e9c-e830-40b9-be4a-e8c5f1c437e6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7e1060-a3d5-45f7-bb2d-d6f7c4d009e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b50fac2b-03f2-4e8d-bd23-56e1a1b59536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11c0195-f88f-4765-94b2-f029b4eed27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "12a617b6-e9fb-4bcf-ad2a-b931459f33b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13319233-7c11-4858-a0ac-991b9ba56141",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7751c7-52bf-44ac-bda0-3e5be5b11a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "766d3570-e1e1-4c97-8c8a-55e984cb0a33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b003b1-1de5-4935-821b-f6311ba642bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "90738851-a63e-4684-b36c-3859d50667e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322c9628-fa1b-4bcc-b02b-7ca794f89f59",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8146f2f5-673c-4d6e-8360-cd3bce26d3e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f2e654f-99cf-403d-a03c-f9f377fff7a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012101b6-c3af-405f-998f-9fb5e28dbc66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6db9a4b4-fbac-4db2-829c-6537bb8ac7f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af02881-b949-49d5-ade4-27b8cfe898a8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49209f36-27cf-4142-b12d-af7e2579cf79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1086ed00-bb2e-4d63-ab35-a6a1541eb089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba90424d-fbb1-4fde-9dc3-8ed8db8035ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "37737a1e-a930-4d5f-b214-32b33ed04b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2bd5c3b-259e-4474-b60c-7dfd4dc8f179",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ab5449-d73a-44f2-b066-b4f18b00fc60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2c699fc-f542-49a6-b298-eae7c3fb8aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071a795c-31ff-425c-a199-c9b187729939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa72af1a-c620-4e56-96ec-5fc4384ea702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c519b401-bb07-43d8-9b8e-00fecc19d6e6",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "235e83e4-c8f9-41ff-bd83-1fa5149105bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "786630f3-2a41-4c2e-be13-eda1554a189c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f67ac8-b3fe-4862-bf7a-00da80f42658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d4f405b-5c15-4154-b21c-2bc5271da3c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63084dc8-b68e-46b9-bb6a-02104ac2d1d8",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc818718-1782-406b-a071-9d5d55fd9088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d6d6d96-c7bb-456c-9fdc-654ab8bb867c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b4277c-ed6b-4eeb-8484-3bae22d5f5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8135c752-826c-4db9-ba62-8bd98071e9c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e5eeee-e9e2-4720-9596-85a31d0c490a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec3aece-8faf-4dfd-9704-71eb1500b69e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a0da0a2-4ff9-4901-8bee-de1cd2584c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238aeda6-7eca-4f3b-b826-f98363f386e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "501a8701-db8b-408a-acd0-e21cd6f410ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021faf68-fe63-4d0c-88c9-f78ab87ddd66",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3cc85d-0c88-4da3-b277-4d8617999b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c302c2ec-c64e-49cb-807b-8c5a8c6635cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43eeea55-b179-4e4c-9078-4907dc2382c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "48c36c9c-cf25-4c2b-bb6a-14b3d6967b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f984f8f-db18-4e70-8852-a7555edcb603",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc1724b-9945-4a9e-a096-f741bfccd580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85819e2e-d49b-40b2-8531-483ad2c2219a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b64eff-2893-4df7-90c1-cb76941c7134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4f32899-dc02-471c-aeb7-96cc7c1eef6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d455b133-5c54-45b5-85cc-e3afea3b6bbe",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6bfc7a-176e-4137-9d1f-6bcc0fcef5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73690383-86ce-4fea-a8f1-9bb18725bdd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c310f88-43ab-4f32-b409-f3bce192bd5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "05db0b51-9faa-4097-8752-a62698b1aa33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36899d23-ba0c-459d-af6e-e78833b7fc98",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "124b7803-2072-4437-8d3b-f6088ec0ae8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c834b1d-be0a-443e-ad8d-4f494df4e8e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909a16bb-7525-4aa3-a243-875a53e61d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf98d28b-0fd1-48b1-bb9e-be03aa359c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "624aa5bd-c3e4-4ee3-88bf-c5e9c1dc67a8",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce002e6e-c8d3-4eb4-b8f4-448643e112f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ebb1072-6e15-4387-869b-a0cf95516d54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d88a864-cc2e-4e31-a416-8a195ff3e6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3dfde7eb-18e1-400b-98e4-425678ce6b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8aba1fd-a341-4d25-a2ab-de0c67aa533a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5cb7272-2eb8-4a33-8d09-a3c12e10a767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa3aa39-eeb3-4707-8b46-4cae87be6aba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c139d0d5-8e17-4068-a3f6-740f41a578ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1acfa988-fb9b-4f84-938d-1a62475bf393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e1d9b5-3e52-4df8-8d33-dacea132da6c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df35a51e-5dee-400c-9aa8-39a7bb989509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef2f2d46-26db-452b-a4b3-adc8abde2d35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0487743c-0a5c-447c-9b5a-3ed0213104db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "626598f1-ea97-42cb-8730-f74c0e44ecd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c7cda9-6d47-44e1-b30b-285e96c18e02",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b429b84-f68d-4dd7-9b4b-06534e03af25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14f9b894-6455-4afd-9a81-7d1576ce4e15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0649c1f3-13fe-43f8-a3f3-759bc4fa6f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56d63cc3-244f-4360-8db7-72cf090d32c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4653e8-f2d9-4119-a5cc-e33a96ed7ffb",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "048cff75-3560-4af1-a03f-8756ae93a66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "153ec602-0ed8-4d00-8e04-e7fde365a5fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b2215a-7d17-46bc-9976-504c0f7de2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fd69346-4ecf-4a32-819e-dbb35cb93219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19c1a4f-6286-408a-8844-9a2e41c019a8",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b37ba2f-5b39-4805-b567-c48a2bf8ae6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d764255a-f8fd-4a54-8ebc-8ea3d3410c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a67efa-71c8-4001-ac6c-1d658eeb119d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81c21100-92ce-4779-90af-a253c969154b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48e645e-9302-47bd-969d-41011abae4de",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b94f944-e35c-4d77-a40d-edb933cac546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abb72899-d5c9-4076-94f3-702334b0603d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c1ad80-d5b0-4a5e-be2a-bd83be599e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "646b1cb9-c221-4f5e-87c6-9a32009069db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd0e917-01ad-4c94-b514-36760fb21b6d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aee05af-793e-4b15-b8a6-2b5a4cc4a7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac38bcb6-b850-4dad-a07a-d7eef4c19e8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8516ab-cd05-4b59-bb8c-d8b2ca2aba6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ad764cef-00e1-4a8c-af49-d123a21e087e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ba1592-1cf4-4f3d-9e1e-5c9e727123ad",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63422873-3ae1-494d-8e51-76bc3ad80f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b40dd2c-9951-4007-ba19-7608fb21020b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d8097d-32df-464e-8119-d99b497f3d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d222baac-d73b-457d-b261-aabc7699e334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f831aab6-47e1-4052-97ec-d25ae49ce649",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c2007b-26e6-478a-b4c0-9066780374dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "522ae226-128c-4f32-9570-c6c8b0c02c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0fb508-c922-4a84-bf45-6fb89259c45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff11404b-776f-4ebb-977e-39d9fe9a03f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9bf489a-40d4-41e1-83ba-99bcd1284856",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9d9da6-1cf7-40c0-8c3a-76f4713e8034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd295ac-65f3-4bf6-a3bb-1c89b2425bbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3313a57-a1d0-450f-8158-2c43de99657d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76029916-91cc-48a3-8d7d-2b810a34a5ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61a663a-6930-40b7-a606-f77075c80704",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd3840c-50dc-48ea-9c5a-0e4328bd9423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44c4562b-3fa0-4588-aac4-80a07137d29b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "accf4278-6d21-40ae-9796-8e70d25cfdd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3872551d-4ea8-4bd8-a6af-9087e8915934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec391cc-e9cf-4f97-84c3-7bff550bada1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d27f74c-ec8a-446d-876e-829308e5d8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29f3725f-2e15-45f5-a555-8188412d4162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd9a949-e269-4cce-9cb3-a2fc02d24ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e00fcf72-4b9b-4ff6-8cff-5756e73fe02d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb27e48d-9e1c-4c33-94a8-ff8fff2cf247",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c626e567-a789-4340-8af9-077482c3e5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "893b8565-f582-44bf-8450-4589dbf3d128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2afb3270-0421-491b-863b-88c7898a9462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f48e21a9-3763-4aca-b6fa-cee3ef4671af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fcc6c72-6bf5-471a-bcf8-500138726826",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be79ba52-259d-4d80-a5a0-dcf3e852182e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e675fab7-b6af-4da2-9cbd-da832332b25a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7daeeba8-eead-4aa6-a942-e4ab51ede810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd0062d0-9def-47c5-a860-6412679b3e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfb566b-2911-4d6f-a4b3-01560d52522a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6955e79a-798d-43e1-95a0-ee8f2e36670d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80230fbe-cc8b-407e-9c4b-95b2a8205894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51852030-bfd9-489d-b2d0-3d28f4fbff85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "558d3948-5868-495a-b955-6633b4045a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423542a0-8154-432f-bc8a-93bcc2039812",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb18378-35ef-4c1b-ab62-98c90d6d5293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23076570-0234-4d48-848a-98e4c8523cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22956e7-78a0-42c8-917a-a1265529ef81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef1e0ca-f19f-4bda-b020-ca2be1dcb602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27202b11-52f6-4bec-aa93-7e9a6675227c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd3636c-3f2c-4f5a-a652-238e34d6a537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560aaad6-5830-4c5e-8496-7743737a86c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "914b8bc3-f251-4046-a9c2-7f7a3656d3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "050d8622-d3c6-4da1-9458-56f6933720ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d961e3-3819-452b-9fae-009600bdba96",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ebe8d14-5928-453f-97a9-33d693a2cede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06af6bd3-9fd3-46f3-a3a4-a76370b691f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a560c57-7bf7-439a-bafe-321d9b2ab54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ace5a20-f388-474e-a3cc-58c5e77621d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80a30c6-eb7b-4e51-a886-8e8123be78a9",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8a2793-b20d-480e-a2d6-a0a894bc0623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "aa20e5f7-cf01-45ca-803d-97a6abe35a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28b166a-6477-4296-9a2b-e7bdb885f09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "41c89a12-8cf6-44fa-bf77-e401c4df4a49"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "78809bed-a445-47a9-8d55-ee6d5d8b205a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11bb9c86-a8ca-4e1c-924f-2acd7fbbabf6",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19cfa05b-4018-4685-9e57-e2d6bd1518a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "862fd329-2d90-4b66-8a32-f1cf558c80b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef1e77e-16dc-4f35-8f81-0368ea786d46",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5289084e-b6b8-43dc-867a-e2575ee9cb44"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3f4952f-ea25-4b4f-869d-fd305a9aa3ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "777c98ce-6d46-468f-9e60-3bdc9e4c52a4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ffea53b3-300a-437c-aab6-684ba9e78827",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c32738df-54be-4176-94b0-6f641f84bfb9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8f345f22-272e-4b4b-af71-5dec5964cef4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7a917f16-419f-4a75-8f37-b03838b3b159"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2f45d3aa-6af8-4d5d-aed5-1047f738d1a5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "96f905b3-3e03-4811-9c1e-179b7a4b7633"
                }
              }
            ]
          },
          {
            "id": "34d74135-1125-4cd8-82b6-082cfc4ef565",
            "name": "Positive Testing",
            "item": [
              {
                "id": "67ebcaf3-5243-467a-9b0d-17ef86289415",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "bdd6f924-c2db-408c-83bc-db7e6509490f",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69b6740-7d94-4783-bfe0-c97c6c8bdb87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c5f7f122-c849-454f-8685-d8a27b7717c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ffd38f9-89a6-4d30-b091-564bd525487d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d70f2432-427d-4065-8967-3cc0ff77560a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "73901604-8d49-4bf9-8b32-76e900df3a0a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93fc6e1f-5a5f-450c-a754-93f26f76282d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8c894d61-9422-41a4-8afc-b214fba443be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45b1f454-88a4-4f1f-863b-1bd1c67f7a7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9f923586-cf77-4f40-a6fa-9028911cb2c3"
                    }
                  }
                ]
              },
              {
                "id": "1ee87304-abe3-48ae-a7a1-2258cd011d1f",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4dd6c2b-248f-4a1a-b9d9-33dca3e8cc2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8dccf7b9-a367-424f-af4c-d784986085c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0fdf38be-a761-44e6-a210-a80b6c8cefea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "03d9118f-3612-4061-b0f3-60dcca1520c6"
                    }
                  }
                ]
              },
              {
                "id": "de429ee9-b360-4069-b2a7-8af009e9f11f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "415cde19-cca7-49e5-921a-d3bdbf05b960",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "45395d36-7fce-430c-b87d-769f7730e1f2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a96ae0b3-f688-4c3e-8ec4-18478bfa3ea8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5054232e-c8f8-4584-ab71-aa39c751eb09"
                    }
                  }
                ]
              },
              {
                "id": "6c21c49b-cb7e-41ee-a48e-4cc1b86b9373",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2af97f8-f561-4a3a-b33a-ec88d99d390e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a0017ed7-512b-43b5-90ee-d1345bd79087"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93e39f91-98bf-47a0-bf16-e67ea3b47bf0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "aceeba0b-752c-4661-a252-8ab6a9946440"
                    }
                  }
                ]
              },
              {
                "id": "bc9c9950-ff05-45c7-8ae5-ed45c8617e47",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5fe4b53-6b5b-4c49-adb0-1729d8805f78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8af1b6ad-120c-4b11-821f-b4dcdc4951ff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0bf2541f-e6c7-446a-b967-255d767511c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a9e38f7d-2899-47ff-a064-e4e74ea8cbcb"
                    }
                  }
                ]
              },
              {
                "id": "dbe6706f-4a06-4cc3-8ed1-dfa9f909f73e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5eff1ea6-fef6-4c23-975f-5108983ac673",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aafa9387-3eb7-428d-9ac0-35f01ae78989"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8126fb91-6810-49bd-bf77-9a0ac4ec378e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "56785839-2f15-4d16-a16e-1d3c3cfe905c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0292703e-20f4-4073-b90d-aab9608940dc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "754d825a-6da3-4980-84b0-ebdeb980978e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3361bb6f-8019-49b6-b70c-a8f00d2ade31",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7dfee386-e316-48b3-93d1-429d4c3dcd62"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8df51ae2-cd74-4ad8-bbe8-f61911bd6a3d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2e19dc71-dc34-4aa0-b31e-1891c6c28ad6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5a32bbf6-3fa1-4068-b466-e33972c0c40a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "794b28e8-b4e8-4688-96ed-07024f215715"
            }
          }
        ]
      },
      {
        "id": "b11f78ad-3950-4416-9d76-2eb24492bbdf",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "67a03f07-ceb2-4575-9076-fa33c254c344",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9cbf8f62-a3f8-426e-a56a-bb2b2beb0db4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5dad4ff8-be43-4a73-a186-e340594a8ee3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1844c2d8-893b-4ec4-8de9-83399ca066d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d00154-f194-492f-b5e3-69a28e577184"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e081a42f-e337-49bb-addf-29c7cb543302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a19fb9b-e473-4a85-a7b7-f59a9edfeef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e50615-b5de-42d2-a700-457f4f9a17bb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84d1065-781c-490a-b6da-dbd0fd3eda74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9246517-6121-41d6-8a4e-434870d62d2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dffe48e-8b9c-45ac-9562-49f76129296d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "401ae402-30f8-43bc-b165-1844e92ab031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182e57dc-6740-494d-9272-c88a6ed82391",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea94c70d-adc4-4cab-a81d-35155223bba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9627ed6-a00a-4c2f-bd7c-ae457d3c242d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0ed4f8-98f4-4a64-80c6-084219f8114b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc95169a-c677-4ae6-8e9e-b0f7c31517d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e694eb1a-6dac-47a0-a1de-2dc8cbc85442",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f480d06-e819-4bb9-b4de-f1c22934d30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88642b29-2264-4b24-b1b2-a36df8f0af5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c51075-70d3-4044-bf24-b3438b4137ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f01f22d-45c6-4eae-b617-1d15755cf66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5f363d-484a-4947-955a-c14e2713c143",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa79a8f1-2d74-4c0c-a201-799fefe57896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f3b7fb-da4c-45b5-ad33-5aa5d0939bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b022bfd-9387-43d1-b87c-608188fb5b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "04bdfe8a-9656-4823-b175-6e6b2d42c0b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf97a304-d17a-45e0-8fcd-bbe195555f2c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef3cdd1-2c7e-45b3-b137-0b917afd9bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5dbdde6-8e37-4327-a4b4-9acb945df880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105bdf64-0619-4529-82d3-27ddc28fd6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b4612e-b09a-42e6-b918-89e0ab0d88b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b319f2c-d111-47ad-b5a8-1827f64e7842",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f04006-6842-4003-8823-4903f061a8f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8db6e1fa-9c45-47c5-8ab7-9a0f169d95ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91987326-480e-4232-bbb5-1363e54b24a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f01df82d-17e5-420b-a0a2-3300c3fae933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad06f79-3a3c-454c-9946-25f6f83c0ac1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e7ef44-e816-4a19-bb9c-c6553caa9fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53afbc7e-6908-41de-abc9-cd3e1616c3b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae0da49-68a3-4058-8ff8-1452401abafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eab4c473-d4f6-4373-9afa-c118ed685dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b5fef0-81cc-4fe7-8bba-7902b0d24f36",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f0ce4a-23e7-4fb9-aa5b-4c7bce0e3847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c4e21c6-3145-4813-b708-440dea05792b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf5808f-4fe7-44cc-9ec5-10d0e74872c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c934eb1-8583-4b93-8641-ccf6c4769a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4429672-f05c-4726-854d-29621f6beafc",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc6f2f3-5fef-4349-8c86-c5a78b7f43f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6783bfd3-3b9c-48c9-8447-ff24cd3c0855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8463c78b-c5c3-470f-9490-bd4f0dce7ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c4afd71-aa26-47ae-972b-ab168c77c023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b4d465-0e87-4b3f-b9d6-d23d626b5874",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b1a7c5c-e785-4c9b-9dbd-02b069225b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bc84ee5-f273-4ff8-8109-5a137a0ac027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890a53a5-9e40-4aa4-a7c6-ffa51d4bd364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "38db13e7-d36f-4ce7-afa9-19c1520fa8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21af716-ee31-409c-914d-11ac7abf99a0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5618891d-f627-4618-8a63-6ddd55fb7ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3236e41-3c93-4971-8d4c-53f8e16bc95d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60ba0de-9599-403e-9cb0-7f65789931b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0dc5e927-142c-43aa-917e-dcc27295501e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "592f5fdd-8b19-49ab-84cf-33471fbd3843",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ece2eb6-8818-4361-b4d1-70c50bfe5e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bbfc00f-e451-405b-8f73-f80b42341f80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7157fb27-3402-4df7-85d1-2e411e5e4de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f09730c4-034b-47bd-9733-a3e5142f2087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96d523d-8aa1-415d-b899-464d0ffd5750",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d00286-6090-43b1-ad07-799323d97d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb2b2e6-a3e8-476e-a50e-87e8f87f3b61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf6e122-5993-4a6e-833e-bdb50daf0d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed257aa-2f5d-4235-8f56-5f4c4ae4051c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1982176-d393-48ba-af6d-50497e4387b7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1922ae-a9ea-4952-adff-f3512e381f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3923ee25-ccec-4d78-b5da-5d7448ef9ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e91533-4c1b-4d7a-862e-a99661bea053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfaa40ee-0968-429a-ab52-a3c6713ee9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ee2eec-62f8-40f6-8a3f-3723d9b9f0bf",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82852751-4176-4932-9a3c-616da8c02b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6571b7fd-7195-4702-853a-c416e354874d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8064866-7c49-4850-9253-655a738df2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "92f6e368-c57e-4c62-ad09-6081e0dab53e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8c2d18-486f-4bc7-a713-10850044ed14",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9334de8d-127b-4ced-bc2f-03d59dd2d6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b894c13-f287-4955-956d-17c80696c350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13dd9901-1b5b-4bfa-834f-09cdea9df0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d2f27ea-8c22-4258-8cab-d9abaf15b069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534098d6-7ad5-4604-8dd3-b87f1d3ba8c6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb34bf1-7694-4868-b2dd-bbe360a842f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7a5a9c-b8f8-430c-a2ca-48e92f48b540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b642c22d-71e1-4a00-883f-b153f671df5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "81fa1f30-0da7-42c1-b266-8ad89d6122f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7bf944-920a-4b89-bcee-6dc8cb0c2472",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30457be6-12a3-4a0d-9563-f119e3f0251b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "220150d7-7614-4f61-be09-cbdeb8395bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c48f27-b248-4a63-bf0f-e1e7eef25d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f975dca6-7e93-4081-8d07-1d8bfe531de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eda98f1-94c0-4552-9a99-33ebb74d1591",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2814d9fc-21ce-45c8-8b80-81a6c05df03e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "050a4f20-ea61-4749-ba30-7d5cb22dfdfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661ca68d-49e7-4087-9af2-50d078a743b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da82ed6a-62ff-4635-b38c-509dccdc9e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971f6ab9-bade-479b-a504-d9ba48402b23",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656bd17d-0470-4d9f-a4d7-99a6b7b8b49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3d4180b-8865-433c-876d-9c771411d0a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3402484f-05b0-4cf0-b759-6dfb7427dd23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ac9a394-a082-4045-a807-f707c7afe90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f16aa0-4dc0-4453-a784-d76a5d0e70b0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "044acbf4-7e13-49c1-8007-a281c2a621f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21fec961-44e0-4723-b8c2-83ab42c04fc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3d936a-cb6b-4878-a50a-898e625497d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bab648d-90ad-4af8-b61c-01c5d8913b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f55cc7-16fa-48b1-9e4b-83055b1918f8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed62aa6-ad18-440f-aa48-00091a8e297b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "139e22a1-971d-475f-a2d9-9da6e23b672d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837e3806-3e8b-4111-95ad-9cb50a205c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4762a67f-9128-4787-ba38-0dc2dae31e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0fdffc-e82d-4a65-82ca-b3d0e8595a3f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef2d177-44a4-48bf-ad8b-9cbc19056489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f292e4-3067-4327-91e6-e183a21c7c0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957c634d-9951-4c05-b305-a5ae1badf383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22a2369f-0190-4c45-acab-410b35872065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8685b76-979d-4e75-bbcc-5eba3367f93d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f837bbe0-9b7a-4ee6-87c7-13ba05571209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d43ae312-4cf3-49b9-b484-de5ebfa01e87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605f9a75-af8f-4b07-8f0b-2a3eb159ab39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1a09d37-e4c4-4233-8d49-b8daae4a1906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af53201b-d3b9-4f04-b7e1-7f4ae8fed00e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff82a9c-07ac-4ac7-bd3a-11b2e7783ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43a70655-9c82-40c6-810b-8f2b492972f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33089d5-f090-40e7-b765-8f76e1fce5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e9b580c-350d-4383-9e8a-637ecb42f501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb26dffd-ee67-40ad-a642-3603edd86b6e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5535b0a7-6817-43af-a6f2-586edbb86595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21fa96a4-122b-4c35-8bd4-224c2b99c2aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff3fe58-d10d-4057-8a31-5b77770f17ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7f71103-8b3c-4575-a1f8-b6b1d538466f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461e60c5-50a1-499c-ba34-580231adcba7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "178f035e-dced-463e-8899-3409e804ac5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891e313a-f16f-4f0e-b96c-fb153b7ecb12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6433c0-8d95-4805-a899-94a13e28e8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7aec04c4-22be-4c03-a97e-676cf5b2a0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5afb6b0-0979-4d80-bcc5-935ae7181dcd",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30a9c00-bcf5-4e3d-a060-fd43962d09f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8122f89f-4852-4225-b002-dee3e803f551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc76e21-364d-40f5-b7c6-6450e9aa861f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf8ef36-a90c-4d93-ae04-dee902048974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb9cc40-3fb4-4930-a8e2-7cf59c540067",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a7c4aac-0c7a-47b5-8f77-7de404a7c465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da71963a-baa4-4c4c-aa2a-39e4d7147cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57461c45-64f1-409b-bed0-330c88e09041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "003914c0-07d3-4cdd-b788-a65df310422d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b8fdee-0d2a-461e-9c0c-44492434a20c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c937a080-1881-400b-85f9-ac26d37568eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f127ef6d-d1b6-4c40-a6e6-aad741d8d2f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5edb41c1-99fc-4535-853d-76e5496a54d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90524055-cdf8-4fc3-ada9-7d1ea34cb4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43699f85-fe52-4efb-bb56-d25da7d10086",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3b82e4-64d9-4718-9e29-a873e1e61f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d322858-d3f0-4a1a-9207-0a368fa66bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d57167-8856-44cb-999b-3c97c3cf7dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea7d22d6-127b-425c-9aa0-ece9805df1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3bd035f-ea39-449d-b7b2-38383e4c08ca",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c21c0e6-0116-4e0d-8169-721a89127dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03238f3e-a2e2-447b-89db-488255de11d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486172fa-e46d-4d85-a21d-5c20ed4a8173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14f23764-2c94-474c-ad66-71882d4820fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f1041a7-3a43-407f-96a9-35b8f8b8f704",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ecc60a-b35a-4cf7-846e-f734d5dc3fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce56eac-9579-4d4c-80ec-afd4851c1967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1998321a-e2b5-480d-8cd0-8d2dc62fa4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6da2d22-9890-46fd-bfd1-9e2895051c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c7bd47-8e16-42be-91a7-34b8671b1f2d",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92bb219f-4c6d-4dd7-b6af-a145218e36a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "915c86f2-4dce-4659-9b34-fc75d3e1ce18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f17c2c-900e-41e3-8183-189b3d84c562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "045d742b-d58a-4173-baa6-7451ef65b53f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10da8e7d-de18-4756-a727-8c0dc2e18b94",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc48e18-de22-487c-a88d-56def976d5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6599ad3b-f19e-467e-b8c3-94543da7a0bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6465137-bab8-4dd4-9706-a3d2b8c68f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a14c51a7-87f9-48d9-ba8b-f79c54e52e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6317ae27-dd3e-4626-946b-4996b9c61639",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c549b4-a89f-47b8-86f0-603e579ce292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "442b2f78-f071-40eb-9a5b-23f3466aa4f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c558fcf-8849-436d-a527-95aec985a696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5dd1b54-f293-4fa9-943d-ae30655fd6e3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d08e5470-c46e-4767-a0b9-6a086f122668",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52d4727d-9553-4501-91bd-2bfcbab10751",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49cc20cf-48d2-4b2a-a872-6b93da9907f0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5f4830d2-012b-402c-bbaf-247f031eefa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f3c102-50ba-493d-ad7b-652226745c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5c19e54-b58b-4cac-b81a-e9a9c2213f35"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0045d22-4d18-4906-89a0-c7a55dec51d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d24d24e-49bf-47ad-b34c-51a00f286e41"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "35d1776f-8f75-40c1-8be0-4301909db324",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f01b9344-39d7-4148-ab85-488fd567466f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6159651-1bce-46f3-a974-a45d739a7435",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "de81215f-ca05-408a-babf-c64ae203e957"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22827243-07a3-433f-a1f6-5fbb85089c86",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a761d41f-f48e-4d50-9219-b78a8f3d27ee"
            }
          }
        ]
      },
      {
        "id": "3eeecd25-532d-49d2-91cb-de709858ce20",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "15b94255-b65e-4a61-bbb1-24acc47dd748",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b7276dd4-2597-4f0e-8932-104a14273c7b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1afffeed-e2d3-48f5-9dc8-c6a48f2a5be4",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ee62c6-97ec-40ec-b146-9fa7ae928265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91e19126-fd8b-400b-b7a5-1ed24e8421e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c7290e-7936-4c89-8113-5f0230a6016b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4004895b-9e4b-4e87-82c2-59306575f4c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "febe859c-222e-4489-ad7e-b3a1c6ef67fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed00eb8-5ff2-4aff-ae54-82a9a8523246",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9168892b-3316-49e0-8f31-a48c119864f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78038359-09da-493f-835a-16aff3b770cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74dc3ce8-8684-4f0a-ab35-005fb70c0347",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffdd0b94-5b8b-4c29-bf1c-c44809297066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0673c9b-8103-402c-b6bb-65395ad7ea90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff850fe3-5909-4471-9f77-31c53736ad5b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1de7d00-acda-467a-8241-a4c7020155e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c31edd5f-679d-4176-9a42-1522a7a0785e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900b1f67-5eb0-4002-8fc3-6fe7c3ce988e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b0919f-5b84-466e-b711-9462597d9eac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb1988ab-b30b-44e2-bb20-1db05fbe9f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ca1d92-8545-4282-9998-e893b8ea030d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8787dd3-0d4d-4800-9364-5567b29fb133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "967f8432-07f8-4c8a-bba5-0833d430cb6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73079ef8-811b-446e-82f8-7dd3f205ee84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed9dfcc7-c10f-4421-bc1f-47a90632eec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919eeda4-203c-4625-a817-cc7c296fb0b5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "143183dd-1090-49b3-9d41-d372898be3d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01dca7d6-620e-4b29-bf63-4d75f0d88d12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d373fdca-685d-4e7f-82a6-8dbd011877f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "867449a5-ec89-4844-b84d-61a8fc4e9752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f43fd3f-72b8-45ac-babd-dd89cc409f0b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1c87eb-e279-4698-a8f0-93bf0a02c6bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6db37d2-09af-4a89-9e31-47498e3e3c60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce01038-25ad-4ebb-aa62-952375a49d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4dfa0bc-f119-4118-93c4-b93c3a3ee5c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdae266c-d829-49b8-bb00-0409379bf3c6",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ced77f-8296-4b7b-a9d1-5af0bd35c0ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "570ad166-6d94-4af2-9611-e6e6d9fb1bee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d42f95-e032-4251-9db3-3041329db1eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ba02b38-c405-44e9-bbe2-ff4f3982e635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca220864-e4c9-4a39-997c-41ad97359dce",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb00a7fd-3efb-4b4c-9e75-c65574b508c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75a34f6b-d24e-4b18-9c7f-42f0708e8817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b1aafd-ffa5-437e-9a86-a929f01490d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "770a1703-c074-4fc7-bd0b-fcc8e68e7a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bfc982-8d74-4951-8354-6e0cdba41bc6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849b0ea9-df8b-4ca7-a57c-ca18109b6429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3008574d-d751-4178-a5e2-d29a74a8af7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30f5697-090c-445a-a670-be2d0570a078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a50f67c-c636-4adb-9731-cfbfe5761e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8205839-cf91-4e64-b67a-e03e04abf0f8",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e0e4c5-b600-48e9-a14d-1449da60100b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be061a77-dfc7-4a91-ac92-f67cc03fb75d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f24f92-7039-4fce-b00a-7fe327eb6904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b36ec9a-cbcc-47d0-91f0-162edc9fbd84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba8827c-e1ad-4781-9336-c5753cda00db",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61cba35-5bf6-4a61-8fbc-cfaca178b2cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e8ec365-06ec-40b7-9da1-3b925b045c1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd17c92f-d852-49a0-bb2d-0bf061e2156a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41c0555d-c9ae-4e39-9b91-d434be210a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f31775a-b477-455b-85fe-6eb850682cd3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c8301e-707e-4ab4-a41f-0e7ca32bafc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "465437a6-3ace-4e61-9474-91f9e6f6a53e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a1c917-2288-4e10-aed2-7c66922cc538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da10bae6-e8a9-4e5d-9298-055980a9ff92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "447a175a-2500-47d8-9bda-460e7c7ea34d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fbbeafc-8dab-403e-a247-db0f3dbeca9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bea4e2b-6fdf-4fe5-aee6-2363358f7cb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8861d636-591a-430d-b4ec-c60f92f49c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fefcf81-e23e-4308-96e4-aa702ba5063c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cbe3cda-aaf4-4ec1-aea9-e07ca90a11e5",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aaf019c-6f74-46c0-8794-63ebe60bf137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c58a231-46fd-4874-ab5c-e40c09d19862"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e891ee3-e333-44e3-b24f-e478aee73b5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9a295d7-9cc0-4787-825c-d4df976dbd8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed26bb6b-2204-4ad8-9222-d65ea87451b4",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ca097f-6965-4f48-8347-8281d5c54f3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f9632d3-aff4-4899-be36-6713697e62b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4829238-6de5-4e19-bf05-2736c0a12f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd9fe758-33b8-46bb-b357-c6404d1a8e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "167fc4b1-51eb-4f0d-b913-cfac351c20da",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fea0c5c-710c-4e51-9970-900e76c758a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b9885e-8d74-46c3-87f7-4131081a20e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b166535-44a0-4c75-b8d0-3efdc7d459b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c96bda38-e329-4225-9761-cc6b00c42c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5465eb0-8785-418f-b759-f68d96cbb9d0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4e9d68-b809-4f13-9cd4-a4f3a083248a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f7aa5e5-e495-4950-a6e9-c5fb4bb95470"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e0b8b5e-5ab4-4343-a8f1-a43fecf2c9b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b18e498-f5e9-49c3-a4eb-b799a1b61564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf377f5-24fc-4045-9c4a-79be219ca2a7",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a6afd6-3aa1-4bbb-a549-e334361de162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "571c1521-5cd8-4968-bf2c-50aba65155de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61243e3f-4d8c-4ab9-9015-da081926f594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d9384be-d627-4be2-a06b-664ee74c2690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63ee6cd-8e7a-44a2-b565-e3503bfb74b3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eadca4b6-74b6-402b-ba37-438fadb1d9dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "132d6b39-938b-4459-a5c3-de6742010f27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffddde6-7bef-4fb2-b0a3-e57680bfa8bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31af3655-3e2d-424c-8f29-1fe603f37989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc43a2fa-0817-4802-b084-f11d988f3237",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "104146d7-8148-4886-a0d1-cc4039174034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b22fbd1d-fab9-43c2-bccd-b482685cba56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a1e5dd-be1c-4e67-a243-a96723b579b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c37af1d5-ccb1-4876-8d8a-7ea9bdfae06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5725cae-3c7b-44c2-9bb6-a28eca612682",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef5035c-57ed-4d9b-8323-084ff03b5bdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfb6c4a8-ada2-4101-a61a-08b99cb70dd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "589924a4-dfe4-45d1-8d70-34a44eee706d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caa2b082-4db1-4abb-a7e2-eae32755dfdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c9ce04-7c82-4e53-a48a-c6042c55b4a9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53969dd3-c708-4674-ae9e-f666f264a41e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc5a135a-6506-422a-97ce-be759b20fdaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ad5f41-d20d-4772-ae57-a231c60aa3c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca55ab5a-5c31-4d41-924c-a569e03d51f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db06f7b5-1761-4047-bf0f-09a2f3884fba",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b855108-77ea-4883-ab3e-8c3c17e40591",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "012c4c6e-af97-4915-bf06-11ba73c23296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0552beb6-361b-4868-9384-e3ec4169024f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1514adc2-5d28-4eed-bd6f-32512caedfed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5271c0-7ef8-46e6-918f-a81162c0b55c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ee70ca-f68e-4a05-83dc-9fc7c7ed2d1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d957dc85-ac53-4f64-911d-09ecfea952f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46120ef-b6a5-417d-a297-bdd30d2059ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85c549b9-7e82-4dec-8e37-53ba484992f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343f2337-6952-4def-a7e8-cf488c8f474e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4530b616-31be-4c13-b12c-307c9f233c75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18a760f7-ea6a-48fa-b71c-6d9448236e54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fb70a8-ea1c-4af2-b1ff-53497058391d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afc7bdd8-4a82-4eb0-82d1-bcf240f991e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779f2678-b3ae-404d-bed6-1ff873a20e4f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf333fdb-f763-459e-aee9-130d55af3b78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b46a2db-2395-4e2a-a50a-085ffc10e4a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a64cbd2-0143-441a-914c-4f86f533751c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d5263bc-fc58-4e3e-910e-0d8af5be3a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7157718-23a1-42f0-ab55-013a9b1cb867",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3aacfc-f489-41e9-b564-b8ab461b279e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97fab572-ba58-45f4-bc44-1e5c77514006"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08926d46-032f-420f-873f-3d22711a7574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "692b8385-fcf8-4c02-8c6f-a8e20bf8a479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6828df0-68e8-4dbe-8780-c81698260ae4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cabf8518-4f98-41bc-a757-00e9cab75aec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5bcac0f-e75a-4aff-b264-ba8ddeb1bb16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68668f54-4b95-4cdf-90dc-4744189a7648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54dc875b-3021-4ccd-842d-f2709f361929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a738f210-6fea-4caf-93d0-b91862f55c8f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6466183-3181-4939-9018-7adbc4098e52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4d48f38-0c14-4f24-abd7-8b1f9fcb239e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4daff9b5-6a0d-4e01-b7e9-aef82bef2dbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6f573a5-75d2-44f0-a5cf-80dd4bcc252c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36dd4fb2-10b5-4567-ba72-85230619c2f6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698bb9a7-7565-4eb2-b436-b1dd18fe7145",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e5a8ddb-ed21-4d4f-a32f-8076ca8905e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2516175-89f9-4059-99a1-275189e5203f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e93ef537-1af8-46c6-8d5b-321b370b3a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3463ca94-271a-47f3-b6dc-e0c1fd3185ec",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6861b226-6c8d-43ce-8b1e-af0f415be702",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56171fe0-872e-4f94-b422-a348fe8fcebc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fa6bca-70c4-43c6-8bd4-c35d8b8934fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e70caf0-f3de-4500-80b4-cb459c65ad5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f072f9bd-6305-4e2a-b58e-aa368f8e6616",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69bce4fc-b9aa-4e49-a1ec-cf6dcfd9f875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcd2079c-f0d0-4974-8d21-2d2e89f7527d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f333b6-57b1-4c30-8df7-8e00cbd0a988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f929dd7-5789-404e-9790-08ef6e7a7028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9a978b-bd83-4ffa-b4df-78d3808a9bf3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011a9328-f361-41b1-b3a8-e6db64a83c63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb5cde2e-0645-476e-bb95-193411f045cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad57a946-a564-4438-a4c6-3d1e23885987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6476bc8a-f459-492f-aec9-8acaa5831ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8f7093-79fd-4235-bb89-a84afc5e96d9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047caeb1-d87f-45c6-b1cc-353e7f7e64ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acce009a-5fec-4e65-b17b-39e8f6cc8b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc952d4-a29a-418e-a873-d726bfbdacd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05c18a21-d604-4103-98fc-d245be2a05fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad4c0b0-6a1f-4a8c-96da-3f599cfe2a71",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba96dd76-3865-4e78-9040-3b6bc2ba7f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3785c903-dad4-4ae7-9686-03db609a1d97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6529535a-2bcd-442d-a8fe-6169eb61ba1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0f8ed3a-dd97-4b82-9f88-347a9c9d5d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2611b8c-bfc9-4b19-9e5f-66b5fa07ca48",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042ad21a-80d6-4498-aff2-4fd1a22c777b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5971a9ec-c48a-4bbf-a193-27e2b9c6b46e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8238f4-8fa9-40b4-be5f-3d8b69168511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e18f87e-6265-4e60-bede-bfc0c75eb5fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064492d3-7c74-49a0-8ad3-320523841c12",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e244bfa-5364-4cbf-b047-7329cbd85459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2226331d-1325-4347-b81e-3d74602ac469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6413050-f4cf-464a-91ed-761315689dba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c84e4b0-2927-4fa6-8770-d20727242c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be140fbf-0421-495c-9bc8-8338f442d5f5",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b62dca8-2789-4aa6-84f8-fa061eeda431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81f888bb-a864-4e93-82ef-008902a29dd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed9930c-4245-4ddc-8521-1db60bd1704a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af267fee-bb95-4fdb-a3f4-541a5f6e5a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9326340f-5768-49da-a4da-da5e758a7179",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3580a8-2b4d-4ab1-9059-6efa2918e2af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0194c32-a167-40d3-8a18-872cc1e10f1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a519da4a-8162-4fe8-be6f-5d86f442ec52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "637a7580-d46e-42fe-96c9-2ccfc5b5cd02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f1568ac-6444-491a-a27b-30777d39561b",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f04baa-a14c-43a0-ae62-145de6a7c324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e8341bf-2ce1-4ce4-9fb2-0dcad68b68fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce3bfd2-0316-4dad-8a1c-e182ff0b1f06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2946278-72e3-416e-952c-b1288050aaa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4424ca3a-0b1c-43fe-90db-08235a31b6f7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a24d9d-17d1-4e6f-be3c-a4ace2c89d16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1820c412-c0e7-40a1-8417-13d9ccf8126a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35833d40-b196-4822-9b8b-30c2da9a1f32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f1c7603-b649-4f13-9d2a-9ec57b526cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8131f86-2eac-41af-a9ec-788ad60391db",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d6d990-9708-4929-a8de-e8fc5e2217a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45531c88-2e08-452a-9a40-ecc65d4ffbc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a526007-6c33-4a69-a4c0-fa7a160379b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57877c25-c8e4-412e-a47c-cc6798cc36dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "926e600e-1fbb-494d-abfc-5ec051a1e0df",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6151d6fd-9c24-427b-abbd-9aa0884a176b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23af7a6c-0306-4f88-be14-47eae83d7c3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fef7017-2086-4129-a031-5fd389444b35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c62c2ee6-1a66-493e-b24c-cfb20bd226b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f83406d-d499-49d6-99dd-f0da6d61b437",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5fa3bfb-9164-49ab-8143-1ebc61c6c402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b9c48e5-5613-4a81-9620-3334c9430ff5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08be6773-1787-409f-a61b-af8e825d6a88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f51312-0d27-4a2c-85d5-65816cdcaeb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa1d9b0-11b5-4227-8795-d521d51dc689",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd41d261-b309-48df-8e78-f9b5545e9140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8273b512-c210-4436-b0b2-d0a47fe6d0b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a638f0b9-8530-4bbe-9e00-015652c23ee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e815142-9caf-445d-b767-7a3b7a1d582b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1fb76bd-2a48-4bb1-8080-4592a0cd53fd",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe241d1-8eca-4156-bd2b-884bbdd30f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e2d3fdf-28fd-440c-aad2-b8a39a1845d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dafac43-28ab-4141-ae3c-d55316c69c2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "551371b5-21dc-4e80-81c7-93b6e44eec57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0eb25d-211c-4793-b131-2e34c473834b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade8e807-39a3-4e45-9fa9-3430f28ce37b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e434e513-1c1e-454d-918a-6b5e73b1bd86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8d5556-f29f-474e-b912-fcc978ebf153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e54c3f-b559-447a-baca-be2339e3b559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59444942-7383-4a41-99c2-277d9986344e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f900ae-0a8c-48c0-ac0f-b2038097e307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5856d612-1e74-4c94-8a6a-c6053b79f360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d30c482-51cf-48ec-99a6-4c7bb6660068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7049516-3acf-455e-bb44-fd137172fe08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ed235d-efdf-48eb-8af2-f7df37973e2a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f881eb-d8bf-4270-8792-bcc4ffc81a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c25b4c6-79db-42dd-af53-706c47206b4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7522477-8594-4dc9-8ce9-ba0bb8154353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44fdf34d-f09e-40c8-b38e-2daaf6d0e390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13057287-61bd-40f9-a930-96c2fac8df8c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9204610c-3fab-4f46-9f8e-41bc7c1e48cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c54be483-54d0-4cb1-b065-03064450f8c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaffaadd-a180-4f59-89ba-8dd251191fa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba86794d-3d2b-47b2-9f31-6ddaf3d50d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202d54f4-154a-4359-8875-a243ea0ebc2e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81dc8a8-4469-4841-b763-aac4a67244e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3278f922-4a46-491f-ab32-32c56edb9f13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3afbe8e0-1107-4e11-a593-14b41f49ea36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a00099ed-743b-4a24-aaa7-1b97a3c2156c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2194af78-c271-4131-aa9c-53d2a0e74177",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3baa527-d37e-4c99-a7d1-a6bb9fdf7495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42e9224f-8e3c-457b-a8a1-e0cf605401a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba079227-6de7-41e6-915d-88f11552987d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6d66965-55a9-403a-82d0-d95854d2cffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35258d90-04db-4d80-a208-0dd3bb77c5e2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5326db0-0065-446e-acf2-c9d922a9ff11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5642e184-aec7-46e5-8361-a3df39cf1619"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee25949d-3caf-4eca-89f0-90cd057deb3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640ebe86-beed-45fc-b4a4-b2be80f16507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdad3c30-3956-4732-8d3f-3a42bd2eff19",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfce1866-d025-46de-ade5-632a50e65df1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef3eb043-50a1-4061-aea5-2c9bb81a0a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd681123-1abd-4b25-839b-aa19435ca42a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3972a0cb-ad56-42cb-87be-5c205cee298f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e8ed64-1580-4037-9e54-198100d0fe31",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "005c3ba0-d9a2-4fa5-83f0-76d970dbe3d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d22e008-6c42-46c7-9f42-a92733022dc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e51d92-6b26-447e-ae88-b23b95551ae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ac5f452-83f9-4ce0-a332-051418286cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c105ff-890a-4685-9dcb-bddcfa5a317c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a36eb5-2418-4ec0-99a5-ccbc82f75359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba4f23f-0d43-4b5c-b1f6-751b2af6dca7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b22122-19e9-46d1-9cd0-b53de80ee70b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32f2f97e-d1f0-4d81-adc0-c5201b199ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db56a7dd-efd0-4a40-adc3-a4caece5095b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc1f4ad-b630-45b7-b12e-ba3a81442ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aa07151-15aa-4ad9-b21f-f19ca53e934f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8e48fd-e2cb-4948-9959-531ab994fc3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83fd7e79-ac81-4a74-9b12-a64d55e3c4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b547da9-e764-4ec7-8f14-905e5ca3a658",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78366ed7-1912-432a-a984-e129fd80105d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5409beb1-39cc-4a73-a1e2-258ad94954a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18501491-2d7f-42e1-8b33-5e3fa67a90dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e08fff12-536e-4eb8-a1e1-0cd864ccf89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5465f8-62ce-469f-b2f8-7ade4d728e2f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0abb072-0e52-4f6f-a55b-e985222d51a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45f05e83-4016-487c-a9ce-f391f115604b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d6840d-c8a8-4d02-a845-845b6c4a1ea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22f8899b-2614-4279-bb70-40f126f25bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6add257-e5c1-4eea-bc13-dbcb06c1a2c4",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93047ecc-2049-4e3b-9ce7-5dc7027c40f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd6a3da-2c8f-4bd9-a2b2-e71d496e3ee5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "639f7baf-763e-482c-a3a0-e4f97bb63f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9257f1d2-ff2f-4513-95b8-9fac88402a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41250a97-b378-43df-ad1e-64a9c08063f8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5167913-26c8-4e9b-928b-55bb0b767959",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "005e40c3-392e-46e7-955d-09d604774fbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ada466-6cc6-4a81-b43e-7f9ff05fc1da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8190731d-4537-4d47-a8d6-1920974d778e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d653f122-c7b5-4c0b-86b9-42e298e8f0e1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "127fe60f-8886-428a-8d12-bdaf57ccfdb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56bbe0e3-b37d-42dc-a1ca-94abb3e0f1d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab16c019-251b-473f-9bdd-abf452f8b1c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa88e6b6-7f0d-44db-9035-ae29f444c528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281d0adb-e534-4894-9748-07710b4a31d0",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eceaeca7-f28a-4a9c-966f-afd870ced329",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e501d3a-0361-4721-ba08-0f7330b08295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baac405f-ace4-4d94-8e01-ac3210ae884f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c94f6e1-8f74-4aad-9e8a-3118a946f991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f332d5e1-885f-4e42-8b87-2ee4dc7e0f2a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c713d4c1-002f-48fd-9fa9-784e8240ae13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faecfa88-8208-4649-a3a3-24f8feb202e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7cde42-a6b1-4849-9d1e-548de619af67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "075b634f-abcd-44af-a5da-ebdf58ae7da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8137f9-dbac-46a5-99fa-78300311afd5",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea559369-95e9-48d6-8406-e08216672d05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d0228d2-8df5-4546-b70d-c2c88b07f882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7860c8c9-6c9d-4603-835f-5b1255149977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63cf5d44-ee94-4b09-98d2-59bb10061b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e841ea-49a2-4dcd-b28a-1096ca2971ef",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54fedabb-a81f-4058-9a55-e9ba2da5f1df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "deb6870c-2bde-4a8a-87ae-209639a02b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc0c58d-d902-453e-809b-58ce473c047e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7568b01-1937-4e58-965f-3261ea501399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e5cf02-9ce5-4619-85fc-bfe1635451ec",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd719412-b7a3-4d7c-84b2-2d916516356b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ea8ab33-443f-4be9-b2ce-d84ec555894f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60aa80a-46d6-48e0-bf97-c6983629db5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2d29df3-7eb8-4b6d-be06-c865873d457d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c1e0c1-8cad-4696-9a6f-1d7e7a7b4a0d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb92081-c144-4037-b45a-65e77914fdd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58780be4-e26d-4430-9062-d7b3e9660ce3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5afe9452-262b-4559-9c1b-30d5f0a94449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d18eb27c-f84c-4987-bdf5-e896b3c28782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ce74ea-a7e1-4158-9240-8402a29bacdf",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd8711b-9b2a-40e0-a768-b667f1000003",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bf71190-609d-4c6c-b86a-c8a1f7e18992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b69ab95-dae7-4000-957c-e5849e605ae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e161a4c-a85e-4850-8688-da6ee93c9d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e4d12db-241e-4c09-910d-4877d7710d41",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31639dd6-f957-4358-bcc8-a138a124d851",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45b8fa5a-af79-4125-9e0c-6cd1a0122518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ecb8da3-f715-4ddb-8707-ed0b67753889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe484f76-a196-4433-83a8-3ba9593c903d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2bf48a7-9222-45b8-bd31-fba760f5d944",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b10d0d-9d3c-430e-9dcf-78e99d945a28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa1e23f3-4e43-4f84-ba9f-f4587f5f41d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac7348e-81c3-4599-9266-2780fe057aca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d3908d-7e89-4125-8e07-436fe5894baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e58dff-4dd6-494c-bbaa-fcdec0312aa0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57fd2939-f30d-494f-8c4a-64e84a9041db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e191f0cf-b930-458f-b996-6119fc082e76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8b72c1-f7c5-4056-bde0-81e874f42b58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95a70a8b-f303-48b6-ad17-56294c33363b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dea66da-aada-4aac-9917-764fd890b14c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a73bc8-321a-452c-8095-08d1affb34af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ac16c7b-4106-4ec4-ad8b-e9c759f93e92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec5945c-9975-4b3f-be66-04748d548b71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ae246a-be66-4a1e-b9fb-9d5ec7cb35f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd43e672-fe97-47a9-9a50-4f0510f602e6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa8931a-1a18-4a83-bb24-520e45dbf61e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba8e480c-90bd-4024-a18a-8dde531a23c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3838fc21-78c7-44bb-a17f-dfb52e1a6328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51873dcb-cac1-420d-b844-ef0eb970a39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4025ab5d-4c19-4ce5-858a-d7bc3d53b966",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd004a48-6a19-493c-beb1-014b74296407",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ecf34f7-d7a7-4cb2-8e92-4365aa7d0e1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f3b51c-0abc-465b-add3-4372629044f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1c58be8-6609-4b01-9b07-0251d1f6754a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42f5cf3-4502-4745-abd4-e75796147e7e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cda6cc-fa7e-4b58-abb5-3dcb3cc9e37b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "362d2e13-6707-4a7a-ad6c-a8170373549c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03ae49b-ad70-4a6c-9af5-caa37c8c4b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e529dbe-b257-435f-aa6f-fe9a42b31f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de96f20-6e46-45cf-92cc-f43df2a02881",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4745f8e6-37f4-424f-bb42-e7c1867755cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ec0b14b-60bd-43b5-87c6-85e7398a248f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6adf2b90-d630-4fc5-b925-774abfe60261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07c5414b-add5-4c06-b7c5-0e929f113fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905d7ec7-fc64-4526-842f-9fa7803ec5b4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc7df88-4c10-4d4d-8f0d-5f3cc28d54c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a47e2ba4-1b31-4875-bbec-8c724f80a17c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f656063-b3da-444a-960c-cc8315e8bf58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55b2f670-97ba-47bb-8223-ee0851c30413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e1c20df-2719-4915-a092-b09cfd8a0420",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b33bee-f4bf-4d40-ba1e-ff15044e46d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be877c9a-c8aa-4e0f-94d9-0fcdb925b566"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea82ac9-3d9e-4622-8262-4576ed5cf333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e5bdc7-70f5-468b-807c-c51eaff20cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b00b3ba-6a9d-4113-837f-235102ea06f3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02eb220-4545-41fb-8f66-e2871eb6f035",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "001ae70e-a82b-489d-9d4e-5e168bb2e36f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da79f58-aa5c-49fb-845d-60ce17123f8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "607653da-301c-4881-9144-12a2cd21bc7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a2e95c-18e0-451d-810c-dd1e051a50d5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5ef9f7-6a9b-4787-a33f-6ee6471388e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "277291c6-9abc-4617-8065-93960b030715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26adacd2-9c89-41e2-968b-6dcceb35b81d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e88f3136-5d9a-48e6-bc53-2dafea385cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0d3b4c-3076-4909-be91-13885bfedf03",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d3779a-308c-4ff2-9f6a-ffdd01a1234a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eafc7ef-e4da-413f-8adb-697816a3f5ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "307c9676-1251-46c6-9039-4fce8a1350d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f3c2dd-fe9e-4d87-b0fc-752019043b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c68e0f-647a-4400-abba-d1725940061a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b9d745-9a82-4cdd-a622-9b9a32ddb393",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61e66122-2ca0-4738-9ade-bccf75673ce7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fed39e9-43bc-449f-81b4-617099bb163a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52256669-1335-40f6-8a26-f501fe4ac2fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a1bd08-11db-4d6b-9a3e-883fc5c1b8f6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faac6043-8103-42d5-abba-e234d701ad28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63df742f-5039-4040-b200-ad7e7d3e1d76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7835c896-2c2e-45b4-a108-d825e54f0aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "263c7a1d-e6a1-404e-8025-f3db55cb30ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5ffb5d-ea4a-441f-a270-b1ceb2699a00",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ea9ac8-9575-4a6e-bcfb-71c500b9f929",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "708e3d00-f825-4672-b735-beeffe2a8b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a81c911b-7485-4f24-af20-36166427a176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a78e47-1259-4d75-a4cf-c196dab9b340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a2f7d7-e53c-48e0-8fa0-18e5d850307b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbfb351d-2c9c-4a43-abf2-b5be7150ab43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5509a361-2823-46a9-931d-80e251267d5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "590cac40-7d1b-49cb-a15e-784cf1e99404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb9db0bc-bf0e-43ef-a33f-be702b854565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dea19bc-62f1-4bf0-a0dd-5f31810b11fd",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4074cd-ba1e-4d57-8907-f3d6b84518ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed6f276c-a59b-477d-b450-7648172569d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faad097a-2557-432e-8551-b4d0e192b5fa",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17e593c-400b-42a3-8bee-44e44a8d9aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9fad75-cd9e-46f6-99a0-4f8234139db7",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90bfa73c-28af-489f-880d-26b88724a3fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a87f3d6-5da1-4066-ac91-99ff33b15eb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec65961e-e768-4bb7-8a20-d6be88b8771e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a0a7c46-71a9-441d-a757-7a82c6cb5e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d485944-5c2f-4d9a-8e70-47205ec7f323",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82fa7393-219e-4565-befa-af1432320eed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b450c04-ca93-4415-8fec-57134f151a2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa0ee8d-e41e-4986-b741-85507933bdf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2c2f1c-c7aa-441f-85a4-d1775c90c416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbca33bb-c6f0-4f00-8761-6fb6eefb7699",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddcb143d-93b9-4f3b-be68-20b0097deaec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0de6b0ff-b439-4e58-bc82-a50c804a6c97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ccd6bd6-702a-420e-a1db-a66efca59fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fafa503-1643-4002-a699-d4aedfc9119a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f48bf2-efa3-4f18-b4dc-71c634dfc3af",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b288409c-cda9-4059-bc73-05a72aad522b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e655a4ee-296f-4bec-b94f-c40e4d34c141"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99772418-e70a-4165-85e7-0d8642e54e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "533519e9-1631-4f80-a325-c653c979a54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3d9a07-e884-40c2-90b0-4f3e40368f06",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34769ba9-03c5-4f8d-b70c-ea674e9a6cee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "484bc0fa-d38c-4e5d-a986-df9fa8a2ef5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7d5edb-ddc5-43ca-a22e-de20912b3ec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d72a0dec-e809-4381-9d0d-29b79a8b5581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c6fdbe-e148-4e60-9686-1b324e2588eb",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c47aca-3b2c-4df2-9414-adce279b9465",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e487a1b2-9e97-4473-ae53-9efe242533ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3e66a9-7f6e-487c-960e-cadbac7f1524",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76d3f5df-06a7-4486-a135-6b61a9d69de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7820cdbd-fbfc-4c7a-9c3c-de1ad5115cf2",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581443d9-429f-43d1-af0a-87717ea56797",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "892f72d2-8e17-4b7c-9bf2-6bdbeea7586b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d1b95b-8a8d-4e97-9e8e-9f3d69595347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2d7ea3b-7bbe-4b2b-88f2-09ad5b1a1772"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0912e440-5ff9-4727-8274-c91fd6c22660",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8bd9aff2-e40d-4b3f-95b9-533d247390af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c29f0ea-893f-4e14-9147-05a55cbcd914",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "329e379c-f0a9-4ec8-b7f2-ad3a7dc1e084"
                    }
                  }
                ]
              },
              {
                "id": "e7f45b31-1069-443a-9a5f-8e8be480a2ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3dabcb71-a8cc-4981-a02e-e9baad6dd5b4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57219600-5530-4504-a6aa-fbe2266ea7d9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a8f7852e-acbe-4856-bf8b-e788824684bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "651453c3-5b85-4b68-9b91-3c47fd28d0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16fee9fc-05e5-4f35-adc2-c08ae79b35c4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad8cc14d-5be9-4b72-a5b6-d8365e431e96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0d39c82-4103-4f3b-b8e4-74b173fe26bc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d06ab219-2b71-4d59-a5a3-d912478cb9d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "388d1b86-d898-42db-a55c-d592dc54a111"
                    }
                  }
                ]
              },
              {
                "id": "fdeba1b5-9860-4029-b273-1e71f724eae5",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3c27dc24-c55b-47dc-a2a8-ff877e25ed6b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17733242-aa89-464b-8ff0-ebefa3e72a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6883a29b-1d77-46e0-86b0-ccf23df3aa17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96545585-b630-434b-b01b-4c904fccc806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95494d79-c02d-44fc-9d7a-236c6159b042"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d48eaf5f-b0d6-402d-b2cc-d0a8bad874f2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "00bd01c8-3d1f-4811-8748-e5bb026b81e0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "21ab15d3-eb81-4d00-9b1f-8e34fe9c6d5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "57e31def-7fd9-46a4-82e8-4e4bb192896f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d5e404f-2bed-41ca-ad09-e4c83fb8a357",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15fb7f5e-10d1-40c4-bfd9-9acf98f9f3e7"
                    }
                  }
                ]
              },
              {
                "id": "05ba314f-7d47-43c1-9db4-895308fd65fd",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "17a45cde-1292-4be6-a2df-92fcf158a7f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6bc2796c-f481-4428-a586-4f0af27baa43"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb7c0c7f-5604-45b1-89f4-57ada09f45ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8da41451-cb7d-4e25-8383-2506e76662bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b43f8405-9257-4b6e-b33c-f6d9b84e1c33",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "773e640c-3519-4ad9-a45a-8d34ce357bd3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59eab570-440b-4003-9847-572030c795d0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4d4a5729-daf0-44ab-a1e2-6642c6fab288"
            }
          }
        ]
      },
      {
        "id": "33d2e403-d448-48de-a59c-450ca0955fe1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1e2354ce-66b5-46af-b155-8e95d8d57004",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d8589533-3ae2-4b88-a2ab-852d35da6c85",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e9a578ec-9e47-40c4-aa68-93d203be6aeb",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec81ba2-b89b-48b3-812d-1c88242d7937",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "499c265e-80fb-4f7f-99bb-c17d9cba9865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9dd9afc-8213-4fbf-9cd0-b43fdbe6181d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e798c164-4e31-4294-8091-7edea805af18"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aafc3a81-211a-4487-a941-6e37e530f624",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d990859-e578-4642-9080-c45b5c5baf27"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "20df0729-3bc2-482b-88d7-0c34e7e5c63f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf8eba51-43b8-4f3c-8821-c1efe6c2cacc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1523dae8-0399-4d62-a839-2e5957e6b7a8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "af3b621a-044c-4ddb-a7f7-da81265a506a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c62526cb-df17-42e7-aa35-b99f0143bbeb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0bb04857-5f00-4cf5-b2da-9196decbaed3"
            }
          }
        ]
      },
      {
        "id": "76dfab65-cf44-4372-9a75-d8a9c68f2a39",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d1419627-2242-4f2e-a444-92d162572f55",
            "name": "Negative Testing",
            "item": [
              {
                "id": "36dd3b91-90b6-4f14-af76-2799773c7f57",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7011c65-1559-4abb-95dd-53405b86bf2a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdac9a99-191f-4365-b90c-4946416858d7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8bf9111-e564-40ef-a80f-f0dba1afe51c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "298c05ed-bbf5-4529-be6a-3b1bf691af45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b358f4a-8864-4fcd-9062-cf693c028495"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ac5e16b-1df5-4b3f-9e5d-492acedbf9b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "882f2904-a784-476a-8033-018dafd0d58a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8c65718-81d6-4be1-970d-5c2430d523b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f9374d9-61b9-41da-a4e7-da157de7ce13"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "36fa7ba4-aa13-444b-88fb-33b058d928e6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "54516c59-7b50-441a-ba81-e85b6431de18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e64bda28-ec67-4762-8882-e3228f25508f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "259ceb26-de59-4ab8-abb6-5bf1fde3c2dc"
            }
          }
        ]
      },
      {
        "id": "e95df5f2-3a53-460a-8bec-5430163f93bb",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5463020d-6569-4faf-a6ca-5be00d30ab76",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7a637404-2f13-4b14-971c-e114dc9afb9d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "04ed6249-071b-47d6-a32f-4023176c347d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4203966-2fe0-4db7-bfd2-27dcca1e3a38",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60ece35a-eba5-4a08-9a3d-dc5a5c38ee80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4825116-4b43-43c7-85b1-b71c68209975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cd10f5c-e017-485e-97b9-182b2e0e33ac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17dc89a2-acd4-49a0-ae9c-385f6ed92b97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b48281d-3fc6-42b2-b3ab-02ec367b9cac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a31f39c-a7fb-46bb-aeb6-d53ab8c1a67e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c71ee9b0-4161-49ed-97ba-1ca7cb62ee85"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "309cff8c-2639-45f2-8734-2fe855d5ad24",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a27a3d30-86b8-4a19-a8ce-6b384bed394b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0c39bc62-1c13-4c04-90c5-749eed552ed7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "40874cb5-5f20-496f-8fc0-984f30e7e141"
            }
          }
        ]
      },
      {
        "id": "0cfa9a21-5f33-4afd-b297-5b39f31179e5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab7eb06d-d79d-4b92-a6bf-06c1762f5c85",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "da7d654e-0fbe-44be-9e8a-14198a2c9cf8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5e082631-2ddd-4315-a5e0-82b7e1137c0b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "58a35b39-4f6f-459a-a9f2-3c29a17f0113",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57c7c840-6c65-4250-84fb-3a750498d4ef",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 126.0277777777778,
      "responseMin": 7,
      "responseMax": 701,
      "responseSd": 78.17326110764844,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1722732227209,
      "completed": 1722732267466
    },
    "executions": [
      {
        "id": "21f3ebb7-2f6e-42dd-87b4-42d1f6b56902",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7d2cffde-feab-48a9-b161-69692d75e0ec",
          "httpRequestId": "61534fab-bbcf-4131-85ea-7d69256d879e"
        },
        "item": {
          "id": "21f3ebb7-2f6e-42dd-87b4-42d1f6b56902",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d84c8c1d-060d-49c2-bf03-3aecf7004710",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "1b663998-4882-49a2-b70c-c94f7104ddca",
        "cursor": {
          "ref": "f0a7072c-5a8b-4d0b-bb1c-daa55156f16a",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "75092b03-64fd-4108-b680-14fff940d2ac"
        },
        "item": {
          "id": "1b663998-4882-49a2-b70c-c94f7104ddca",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f4e3a027-c7b5-4605-a279-93feef169944",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "5fea4b94-f502-48d3-ba0d-abae4589b2c0",
        "cursor": {
          "ref": "2b3c8822-7802-43be-9d90-da47081c710c",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a09daabe-4e2f-44e4-a143-ed17a2a04772"
        },
        "item": {
          "id": "5fea4b94-f502-48d3-ba0d-abae4589b2c0",
          "name": "did_json"
        },
        "response": {
          "id": "d0f23081-b500-46bc-9c5a-600c177f36e4",
          "status": "OK",
          "code": 200,
          "responseTime": 266,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9461ba8-a6c9-4ee8-90b1-e2c65fb84b17",
        "cursor": {
          "ref": "0d12be31-5423-482c-829b-068d8e8df447",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "26ecd14d-0706-40bd-a531-f5144e317663"
        },
        "item": {
          "id": "b9461ba8-a6c9-4ee8-90b1-e2c65fb84b17",
          "name": "did:invalid"
        },
        "response": {
          "id": "c8c54c27-f305-487b-a6db-d917a036a2ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9461ba8-a6c9-4ee8-90b1-e2c65fb84b17",
        "cursor": {
          "ref": "0d12be31-5423-482c-829b-068d8e8df447",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "26ecd14d-0706-40bd-a531-f5144e317663"
        },
        "item": {
          "id": "b9461ba8-a6c9-4ee8-90b1-e2c65fb84b17",
          "name": "did:invalid"
        },
        "response": {
          "id": "c8c54c27-f305-487b-a6db-d917a036a2ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849092e8-10e8-4cc6-9008-476a41fbfe3b",
        "cursor": {
          "ref": "c8a97230-70a9-427a-a30e-07b44ac8571d",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "299479f0-901a-4279-bec1-88741be7f66b"
        },
        "item": {
          "id": "849092e8-10e8-4cc6-9008-476a41fbfe3b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "50554775-15c2-4e59-b1f0-6dd51b27a745",
          "status": "Not Found",
          "code": 404,
          "responseTime": 173,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3768bade-8f25-4301-9469-24af7c7aeb7b",
        "cursor": {
          "ref": "7e117349-41d8-468a-aa1c-f18f82de1581",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "716679f3-d959-4829-9772-ece3eb01625e"
        },
        "item": {
          "id": "3768bade-8f25-4301-9469-24af7c7aeb7b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "de364aca-9318-44ae-87b4-f20db07fa79c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 94,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9e8c23-2774-4e92-9c38-1b1a02aeeb3c",
        "cursor": {
          "ref": "9e1205d0-2427-4afe-9536-a088e85d4617",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "aa02c9b9-9eaa-4f37-9103-e2c73f95bc17"
        },
        "item": {
          "id": "1a9e8c23-2774-4e92-9c38-1b1a02aeeb3c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "13c5fd16-774e-404f-8b9b-55c7e66d8bd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 96,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e85f5e-0ece-4898-832f-28a4ae185de3",
        "cursor": {
          "ref": "11805ec7-e9c6-4445-8df1-0652cb70362e",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1260450d-8984-4cfd-942c-f2225847a89c"
        },
        "item": {
          "id": "e9e85f5e-0ece-4898-832f-28a4ae185de3",
          "name": "identifiers"
        },
        "response": {
          "id": "5cc0cd5e-a789-4483-af11-3c01e2291663",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ca6f8b-0bf3-4dcf-82c5-db50f416e93a",
        "cursor": {
          "ref": "657439de-266b-4fc0-8677-a6a5aeeb34d6",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e2b8ec87-6502-4ad3-8b43-c88b7bc4edb4"
        },
        "item": {
          "id": "e7ca6f8b-0bf3-4dcf-82c5-db50f416e93a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "23c9b746-5bce-423f-a888-40ec9836a306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "6f417f0d-3b44-4706-a56d-fc449be0fcde",
        "cursor": {
          "ref": "320034bf-b6f1-4028-b28a-e814009544fc",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "256df5b0-5724-4872-b101-8642c3fc922c"
        },
        "item": {
          "id": "6f417f0d-3b44-4706-a56d-fc449be0fcde",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2d87706b-a59f-444e-a23b-edc3564c4d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "cb0aae79-f597-45e3-9fc0-6a26c65a6004",
        "cursor": {
          "ref": "50e1113d-53b8-49f2-ab84-447378f11fca",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f811c746-68fa-4159-bc4a-a6dc5798ac09"
        },
        "item": {
          "id": "cb0aae79-f597-45e3-9fc0-6a26c65a6004",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "648e0b42-79cc-4cb4-96ec-c4d1f44e4fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "c7748b85-5dd7-435f-b152-d301e3118578",
        "cursor": {
          "ref": "5013dff8-c347-4d94-9405-aab9ede1bee2",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d0b0aa23-0b83-4bf1-a1ff-39e36a8614fc"
        },
        "item": {
          "id": "c7748b85-5dd7-435f-b152-d301e3118578",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "16b1aee3-6d7f-4b21-989a-9c2615597352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "dd6aa63a-a944-4987-8056-3b380cae5630",
        "cursor": {
          "ref": "a86ce706-4f35-4e69-8866-f5d34a640e74",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4d48ca71-a19b-46e7-9cc0-367c7adab56a"
        },
        "item": {
          "id": "dd6aa63a-a944-4987-8056-3b380cae5630",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "34602f5c-fbcf-4287-b678-0764b75c732d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "a561345d-55ed-4566-9533-e90fc25ad414",
        "cursor": {
          "ref": "591d93c2-bbb4-4984-92d4-7aba02fcede9",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "af6676f0-9fc3-4b17-936e-c8554db2004d"
        },
        "item": {
          "id": "a561345d-55ed-4566-9533-e90fc25ad414",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "beff1ce9-4511-435b-9575-0b2f23ff2589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "2457442c-77ce-4766-ac8c-b1f849a8cde5",
        "cursor": {
          "ref": "39d1f7b2-6ca9-41da-a23f-7d4c368f9ceb",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "36f2851f-b0fe-4ca9-bf3e-7f8a3f999468"
        },
        "item": {
          "id": "2457442c-77ce-4766-ac8c-b1f849a8cde5",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "60783620-738e-484f-8070-3c7d1773cd0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "7963f48f-6be3-4fbc-8d79-91bf94b880a8",
        "cursor": {
          "ref": "367d8741-de01-4e48-9b29-8997fd3c48cc",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9a763a0d-5a34-4ae4-a801-bc246eb949ca"
        },
        "item": {
          "id": "7963f48f-6be3-4fbc-8d79-91bf94b880a8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "cb05750d-44d0-4744-8ce6-92321494e024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "660ac740-e7ba-41ac-a013-39d42c6deabe",
        "cursor": {
          "ref": "12a3a641-a583-42da-99fd-2ff9825bcf75",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "156f04f6-2729-4439-9eac-55e7c73c83ee"
        },
        "item": {
          "id": "660ac740-e7ba-41ac-a013-39d42c6deabe",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b10e986b-0ce2-4db4-b547-1296ddb5d0fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "14cb6026-02ea-4a8d-b278-31058a52b508",
        "cursor": {
          "ref": "54b5f4e6-1991-4d35-aadb-3ff52caa4b7e",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0599dd7f-2a8a-43bb-a067-42d258194792"
        },
        "item": {
          "id": "14cb6026-02ea-4a8d-b278-31058a52b508",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "fffb2605-f59e-4871-a54e-f3d022853907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "f4b32dd8-16b6-4cc9-b805-0bbccd014c0d",
        "cursor": {
          "ref": "680e225d-dd57-4b3e-a9a7-2337378146f7",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d98d4249-91c8-479a-b955-7b004d7fa7d0"
        },
        "item": {
          "id": "f4b32dd8-16b6-4cc9-b805-0bbccd014c0d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e1133f34-ca58-4dc9-83ef-d467e84c983e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "551c0aa5-859d-44ce-a1cd-33803cd20ce2",
        "cursor": {
          "ref": "ea0853c6-662e-48a7-91e6-edf2f270240a",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2a19f786-1eaf-4fec-a873-bafae74ff969"
        },
        "item": {
          "id": "551c0aa5-859d-44ce-a1cd-33803cd20ce2",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f54e77d7-22bc-491d-b06c-6b29e0ebac6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "39018ddc-48a5-4204-ac32-48d2361829c7",
        "cursor": {
          "ref": "48f91c80-1914-40dd-8d21-bbd61924c631",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c8e980d2-2541-44d5-a2d8-5a9b87c4c0bd"
        },
        "item": {
          "id": "39018ddc-48a5-4204-ac32-48d2361829c7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d3c90e05-fb02-42b2-a42f-453c1c5ec3ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "ea9bdc84-793a-49a0-ab6c-1740e6fd0e90",
        "cursor": {
          "ref": "5d172713-50e8-4acf-a7f1-e65d7707ec19",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6c76cf8b-6d71-4173-906f-776639d2eba0"
        },
        "item": {
          "id": "ea9bdc84-793a-49a0-ab6c-1740e6fd0e90",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "89dfc680-da7d-48cb-9e7b-d1a1edb6d8d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "1693a7d9-74e2-4b8d-9236-440d00aae9a9",
        "cursor": {
          "ref": "fcfc2747-13af-4da8-b3f3-8e1b3d70ca9a",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0ee0913b-986b-4d08-9bc8-19456f15e254"
        },
        "item": {
          "id": "1693a7d9-74e2-4b8d-9236-440d00aae9a9",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "742056c3-27e9-4dbf-95bf-225aa5156875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "858b3ed0-b854-4cea-888f-b646aa582a4e",
        "cursor": {
          "ref": "9ba000a0-af85-4bc8-bede-3dff40e192c5",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "179a107e-c737-42d5-8612-249f4cf23c65"
        },
        "item": {
          "id": "858b3ed0-b854-4cea-888f-b646aa582a4e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3845a499-d17a-4d8e-9ad2-5388e10d7245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "a1d28318-8a4d-4904-b3e6-201f0bcc36f5",
        "cursor": {
          "ref": "bbe73fa6-740f-4ab6-a98b-0362c834d4e4",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "641f212d-d528-422c-b6f7-85878750a6a5"
        },
        "item": {
          "id": "a1d28318-8a4d-4904-b3e6-201f0bcc36f5",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4c87bd1a-2675-4914-afea-eded57365779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "ff826c4f-24da-4cee-89bb-3c1b4c929469",
        "cursor": {
          "ref": "f72acb3b-10a1-46e5-be25-a7e6901f1e1b",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0befc504-de7d-4a61-8c8f-79b3e2e06279"
        },
        "item": {
          "id": "ff826c4f-24da-4cee-89bb-3c1b4c929469",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1fced7c4-a03f-4fbe-84da-614c5abec2f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "951d423d-61d4-422a-af13-c05ecc225ecc",
        "cursor": {
          "ref": "82c0fbc3-3c4e-4ff6-a4c1-8a46d03ebeef",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f5d9c2b0-2d63-42ce-8916-0c37c689a4c1"
        },
        "item": {
          "id": "951d423d-61d4-422a-af13-c05ecc225ecc",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "04488137-2999-4ca1-9070-0c5d9653bc59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "d901ea65-c4e1-4c96-9c89-5074c9dc31fe",
        "cursor": {
          "ref": "3a17aec2-3b07-4bfa-856b-f3189596773a",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0a915969-58fc-4e89-ac6e-b4d2cbe34ded"
        },
        "item": {
          "id": "d901ea65-c4e1-4c96-9c89-5074c9dc31fe",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "78452e17-1436-4bab-9362-c3b21ebb5733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "70498b4a-6e05-4ae9-832c-10c94ef14b25",
        "cursor": {
          "ref": "2973e074-dbf2-4135-b0fb-ecf5673a85ac",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "05219a72-df48-4fe9-b637-6115fd99b21e"
        },
        "item": {
          "id": "70498b4a-6e05-4ae9-832c-10c94ef14b25",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1a1039fc-71ab-4846-9f80-ec1609889c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "d35294c0-29d1-4522-81a3-c6c707fe3709",
        "cursor": {
          "ref": "52bdf14f-f25d-476b-b239-ed799f85d2e0",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a8183ff2-8417-4c40-91aa-5e755be753f5"
        },
        "item": {
          "id": "d35294c0-29d1-4522-81a3-c6c707fe3709",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7e965f0c-3d59-4e40-a4b4-3bbfc569149e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "6a8be3cd-a098-45fc-963c-2efb1f55082f",
        "cursor": {
          "ref": "f1693f4c-fe1a-4577-a900-eecda8a9a0c7",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4c53b547-fa9e-4e48-9745-589ff272c436"
        },
        "item": {
          "id": "6a8be3cd-a098-45fc-963c-2efb1f55082f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3f6a7b97-6f36-4126-8017-3aaeb93d3131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "2697db95-6b90-4a34-9588-75ed7377f1d3",
        "cursor": {
          "ref": "bdacd5ba-3408-4f09-aa5f-a27afd332d80",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e90dbbc6-d33a-4667-a895-bc99d87464d7"
        },
        "item": {
          "id": "2697db95-6b90-4a34-9588-75ed7377f1d3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "309bff03-ff81-49af-83c7-84827955a778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "bb0de358-474e-4d22-a50a-0afb68f8d108",
        "cursor": {
          "ref": "e9d48ce8-3a90-44ae-ba5f-907ce23c97b5",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "084099a0-2ba7-4f68-9bba-00022f1452c7"
        },
        "item": {
          "id": "bb0de358-474e-4d22-a50a-0afb68f8d108",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "7b4a96f6-8810-470e-9599-0fe8abc0678a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "19530d10-88bc-481b-a817-fbb8ad26f4d4",
        "cursor": {
          "ref": "9c8862a8-9165-443f-882d-329f44410a17",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "84d6c739-b8d7-449a-9152-ebf9df3594a3"
        },
        "item": {
          "id": "19530d10-88bc-481b-a817-fbb8ad26f4d4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "cdb9ff74-3eb9-4edf-9d08-72aa01f964f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "d228b8c2-43f4-416f-ba0a-c48c373a90ca",
        "cursor": {
          "ref": "727a6b65-ea6e-4aeb-8e2d-91b4502e97cb",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3dd4a076-a9c0-438d-bca3-e060fc095603"
        },
        "item": {
          "id": "d228b8c2-43f4-416f-ba0a-c48c373a90ca",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f9120b0f-a79b-49b4-be34-399930aff7bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "8f023d27-5032-49da-ba8b-44415952c28b",
        "cursor": {
          "ref": "206305f3-e68f-4eb2-a180-9557dc890446",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "79b3e663-31d8-4ace-867f-3158968675a9"
        },
        "item": {
          "id": "8f023d27-5032-49da-ba8b-44415952c28b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ce7ccfdd-f35d-4b25-aea0-3e64a6605e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "b6d3c6d1-6ffa-4d8d-8800-1cbe3bc18c5b",
        "cursor": {
          "ref": "31279efe-ac7a-4a0a-a100-e369f33363ab",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "25b39f6b-c6ca-44ce-8462-cf9fe93233fd"
        },
        "item": {
          "id": "b6d3c6d1-6ffa-4d8d-8800-1cbe3bc18c5b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "5d18ebcf-30ad-47fc-bd03-134e53f5e031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "a515694b-17d7-4b03-924a-cf55557c510d",
        "cursor": {
          "ref": "1f3e7080-4e83-482d-95a3-bc34ac281985",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ee14e960-9b30-4826-bf20-4c72ef16fb2f"
        },
        "item": {
          "id": "a515694b-17d7-4b03-924a-cf55557c510d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ff9e648c-857f-4bc2-b59f-a085fdbb5f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "e809e193-bb03-4ffc-a6b2-d69e2372bfae",
        "cursor": {
          "ref": "43405758-4d0d-43e2-b9ec-dedde3c9fcd4",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fc23c78d-fe84-4ea8-b439-776844dd5e24"
        },
        "item": {
          "id": "e809e193-bb03-4ffc-a6b2-d69e2372bfae",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "db616d20-7c34-4aaf-9a2f-17b8fcf1aaef",
          "status": "Created",
          "code": 201,
          "responseTime": 701,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "567354cd-deb9-4464-b998-745627c1879c",
        "cursor": {
          "ref": "c4136ec4-902b-4343-a463-377c1924f9b2",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "71d9d2b0-4279-445d-babe-4f19492b70e3"
        },
        "item": {
          "id": "567354cd-deb9-4464-b998-745627c1879c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1ab3f32f-a2b0-459d-bf47-6f16cd9afc27",
          "status": "Created",
          "code": 201,
          "responseTime": 402,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "cb8a7cd4-ee5f-4747-a05c-366724a7c0aa",
        "cursor": {
          "ref": "1624cc00-4376-4682-9601-04c3c43ae195",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3146244e-d0f3-4239-a401-387c8ca69ec0"
        },
        "item": {
          "id": "cb8a7cd4-ee5f-4747-a05c-366724a7c0aa",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "bedf53a9-b33d-4986-8f8f-c382874640a9",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "5e5b18ef-17de-4240-abff-860bc7321096",
        "cursor": {
          "ref": "3f53a4eb-9e1a-4cda-af22-6c7e5acaf6d8",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "151b0d4b-31e4-44c6-8158-b45a2399b863"
        },
        "item": {
          "id": "5e5b18ef-17de-4240-abff-860bc7321096",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f0861231-2aae-446a-9408-431f61bda6be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "5d963e84-8ae8-4a4a-8516-ff46c9ef56c2",
        "cursor": {
          "ref": "f7392015-398a-4b88-8ced-90aa92cdd53a",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f86a255a-400b-458f-8044-caf594843a8f"
        },
        "item": {
          "id": "5d963e84-8ae8-4a4a-8516-ff46c9ef56c2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b7649da6-98fb-4d03-a613-2f5723608425",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "41f8a32d-12f0-411b-84ca-fcd93395efe3",
        "cursor": {
          "ref": "5a0accde-ecb0-4bc1-8d7c-425d5ee3906a",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c940ada1-c8ce-4bb7-a0c2-9d6bb314d601"
        },
        "item": {
          "id": "41f8a32d-12f0-411b-84ca-fcd93395efe3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f1beb1ef-9b80-4467-b510-e22df8fa4921",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "379a6020-dd02-4d10-9764-0491dff97568",
        "cursor": {
          "ref": "43d1f19f-de30-4590-880a-351fe7173e84",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d313ae50-19fa-4b4d-beb2-1c117e0922d0"
        },
        "item": {
          "id": "379a6020-dd02-4d10-9764-0491dff97568",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a694e7e0-2d46-4b4b-8b27-72ed237c0ffc",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "828a5be6-cc60-413f-b3c7-8867701f96a7",
        "cursor": {
          "ref": "22dccbf1-a106-44fc-a891-728dc0e7e3a6",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6994e75c-49d7-425c-9650-cdc360fd718e"
        },
        "item": {
          "id": "828a5be6-cc60-413f-b3c7-8867701f96a7",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "55e52c4d-0130-4b89-8619-8cbe364547de",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "be9fa136-04b6-4459-8d1a-3949cd9e6b3c",
        "cursor": {
          "ref": "0b31afea-397d-47b9-8048-4873c53a6092",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ec1a8813-384d-4e3b-94b2-f3a367436799"
        },
        "item": {
          "id": "be9fa136-04b6-4459-8d1a-3949cd9e6b3c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "78ee41a2-821c-4bed-b8e0-6dcb4d4fb3a8",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ce6dfa8f-09c9-4759-8238-5b32a9e45548",
        "cursor": {
          "ref": "068e75c2-81d4-4b30-b50c-c4f57a5941f2",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "906f9555-8540-4b0a-9710-7881207b0ffa"
        },
        "item": {
          "id": "ce6dfa8f-09c9-4759-8238-5b32a9e45548",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ca558c87-b24e-406d-9548-2bd45cd32ad5",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "48777193-536a-4acf-9754-df3951606038",
        "cursor": {
          "ref": "f6dbe780-72aa-49fa-9b2a-19de8ef90a51",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "766f7343-59d8-475f-a1af-51d9454bab9e"
        },
        "item": {
          "id": "48777193-536a-4acf-9754-df3951606038",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "bbfa6fbb-90c9-4e5f-b8c5-334ed1b5fb53",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1f8b2ca4-a03b-4013-9900-e762900f9909",
        "cursor": {
          "ref": "29d41851-dc89-460d-a26e-920b703c6455",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ef0071a3-d27b-43bd-a655-5c3d3236d357"
        },
        "item": {
          "id": "1f8b2ca4-a03b-4013-9900-e762900f9909",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9c5061e2-1415-4883-b139-ff724a837166",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "3fcf5cdc-9203-476b-b6ce-a5dfc0a63200",
        "cursor": {
          "ref": "04096513-a1e3-4fb4-be36-e4fb6bbd8404",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "497054ca-b9d9-4ac2-9c92-001dcdcbfb58"
        },
        "item": {
          "id": "3fcf5cdc-9203-476b-b6ce-a5dfc0a63200",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2fab1f4b-78f7-4203-b0f7-e3b141633472",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3e3f7525-e8ca-4078-891b-b78c52c02ce3",
        "cursor": {
          "ref": "84ca6adf-2692-4a2c-84bd-cad797db10ca",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "89b5282e-867a-4aec-b86e-b806bb7376f2"
        },
        "item": {
          "id": "3e3f7525-e8ca-4078-891b-b78c52c02ce3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0d6c5cd8-921d-43e4-afd6-55ac90e1a1c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "869637d9-539a-4814-8914-b2cce47b53f7",
        "cursor": {
          "ref": "7776d27d-e7a8-44f9-9372-85147d563314",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9d5cd6f7-d8e3-4649-bf42-8b18debc7a6f"
        },
        "item": {
          "id": "869637d9-539a-4814-8914-b2cce47b53f7",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ec3637aa-f043-4179-8c58-209c5f798f09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "3830a6db-57a4-4b21-b099-5f82423ae3ee",
        "cursor": {
          "ref": "25ef7446-b933-45cc-a52a-9492e2cfb9b7",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "eb68d540-518d-46ef-b14f-e3bd5c024af6"
        },
        "item": {
          "id": "3830a6db-57a4-4b21-b099-5f82423ae3ee",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "145cdbbe-2ead-49b3-8106-853448a3b079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "a222acc2-7e5f-484d-a6ba-7afa729010e5",
        "cursor": {
          "ref": "b26fd60c-5057-4c39-a9cd-dfe5445565ec",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fb068dc1-2660-4851-8f84-a74e8cc096e0"
        },
        "item": {
          "id": "a222acc2-7e5f-484d-a6ba-7afa729010e5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1588f63f-db21-4079-99bc-5800a93226e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "f7202ffb-2043-48e4-93dc-c86a05ada4c9",
        "cursor": {
          "ref": "ae1f3ba3-bb96-48c6-89f8-4d73e42fb5eb",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5e4a1591-9876-427c-a46b-ad58b64085d0"
        },
        "item": {
          "id": "f7202ffb-2043-48e4-93dc-c86a05ada4c9",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9d2420ab-67f2-4b9e-b7ea-8683ba4c4059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "0ef09945-f694-4249-a87a-6b98bee93050",
        "cursor": {
          "ref": "928a666f-0646-4355-82ff-cf27e8d6dd33",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d63de202-8da5-4382-bbe4-f5b47701f8d4"
        },
        "item": {
          "id": "0ef09945-f694-4249-a87a-6b98bee93050",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f1d3ed8c-75d3-43ac-a936-555a6c50ea38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "c6c7555d-bd2d-45f3-8b85-42c5803ffd40",
        "cursor": {
          "ref": "7223313a-afe6-40a5-8a6b-d751b23d2875",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "32c07490-d110-482d-9bb3-4e49c4b75a40"
        },
        "item": {
          "id": "c6c7555d-bd2d-45f3-8b85-42c5803ffd40",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "cd22c97e-9c90-4a6d-a06f-920e8a1552bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "d9ed3c78-1a81-43ab-92b1-00162a4263b1",
        "cursor": {
          "ref": "b952930f-f687-4e9b-8488-174c3ff2930b",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2fee6b30-76b9-4afb-88d2-41ea4866ec42"
        },
        "item": {
          "id": "d9ed3c78-1a81-43ab-92b1-00162a4263b1",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cb554674-ae38-4b8c-9939-50578300114d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "4d5d8d98-c453-4902-906a-5392aff603aa",
        "cursor": {
          "ref": "50d81eef-8ce1-4bf2-8915-c90af9b85f35",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b40f98c5-25d1-458e-918a-ccf5b006dc77"
        },
        "item": {
          "id": "4d5d8d98-c453-4902-906a-5392aff603aa",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3e2f89f4-5f21-43cd-ab09-2ad30b1fdb72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "ba235d8b-0aec-4ac8-a5f9-2f41dcf7e63f",
        "cursor": {
          "ref": "754fc111-24a3-4920-bb0e-3f26ca5dc7d5",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "788cea5e-5bf1-4c16-b8c6-e0d76b5a9f91"
        },
        "item": {
          "id": "ba235d8b-0aec-4ac8-a5f9-2f41dcf7e63f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b54d6d85-6c70-402e-81af-1425cb1ef4d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "4712f137-2c01-43f4-8d9f-681cda001339",
        "cursor": {
          "ref": "e5011bcd-1207-4330-8167-c336bbedf453",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "664172ab-5440-407c-81ed-fe325784b0fa"
        },
        "item": {
          "id": "4712f137-2c01-43f4-8d9f-681cda001339",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "be0d5504-f97c-41fd-a032-0d84eaa6aa84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "e4995ea5-b7e5-4248-a7a1-a8641215ebff",
        "cursor": {
          "ref": "5b42cce8-116b-4fad-b9c1-7a9e79c025f8",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d615629a-9cf0-4d2c-8bdb-f41de91c09ae"
        },
        "item": {
          "id": "e4995ea5-b7e5-4248-a7a1-a8641215ebff",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "73be9493-8589-4313-bf3f-df9b3f8993c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "359ce4a7-c5b9-4916-abe8-ddf8b6e26702",
        "cursor": {
          "ref": "f31c08cf-17f4-422d-8d2c-74807e0ef7d1",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "00fe5814-34e2-4f24-9b74-e28f8a564731"
        },
        "item": {
          "id": "359ce4a7-c5b9-4916-abe8-ddf8b6e26702",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9fc48c8c-e2e1-485b-a68a-55699b3ac8e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "af0c07cb-9bef-4e89-8a2d-3d4e21397574",
        "cursor": {
          "ref": "ed1905ec-eedb-4c87-a51b-006b8d9bdc86",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "59ad040d-da05-4160-aaa3-c48008c08c4c"
        },
        "item": {
          "id": "af0c07cb-9bef-4e89-8a2d-3d4e21397574",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "34f14eb4-fd56-4171-b791-c95b76a4fea7",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "89902652-a5c2-4d4a-9139-bf462f12dee6",
        "cursor": {
          "ref": "091b8643-67be-4c01-8716-2ed99b8168cb",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0affd01c-7de8-4fcc-a22a-9944e96a6494"
        },
        "item": {
          "id": "89902652-a5c2-4d4a-9139-bf462f12dee6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c42b0ed5-9470-4d82-9963-caba77a6daa4",
          "status": "Created",
          "code": 201,
          "responseTime": 403,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "92f6ae58-9cef-4003-9215-389a41736939",
        "cursor": {
          "ref": "ae9109ef-9965-40ff-bd80-a64b2a642606",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "dc69b0ac-4f3b-487f-aa04-d8a9acc2dfd0"
        },
        "item": {
          "id": "92f6ae58-9cef-4003-9215-389a41736939",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "952654d9-4341-4b31-9523-f10d0be8132d",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "c8ba4bea-2c1b-452f-9658-a69622a6b7a2",
        "cursor": {
          "ref": "58c2106d-f149-4287-9337-d174bb2b788a",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "de65771a-0188-4ce6-89ee-1bb09dd8ead3"
        },
        "item": {
          "id": "c8ba4bea-2c1b-452f-9658-a69622a6b7a2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a4bcdf85-90f7-4583-88fa-51d76c92f165",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d74c0e9c-e830-40b9-be4a-e8c5f1c437e6",
        "cursor": {
          "ref": "ab82bdca-ac17-4799-b4b9-ca9a52417d44",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1fd2ba2f-b45d-494a-9021-3e1d84a1cfb5"
        },
        "item": {
          "id": "d74c0e9c-e830-40b9-be4a-e8c5f1c437e6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3d7d9896-bd75-4f37-ae93-4d3d88c25495",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "13319233-7c11-4858-a0ac-991b9ba56141",
        "cursor": {
          "ref": "3c4ceca5-08c1-4a84-af69-5fe69fc0e679",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b932690c-7a94-4124-b164-5cdd59b9a5fa"
        },
        "item": {
          "id": "13319233-7c11-4858-a0ac-991b9ba56141",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c4eb5440-96e5-4f68-b82f-f485fe16fc00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "322c9628-fa1b-4bcc-b02b-7ca794f89f59",
        "cursor": {
          "ref": "38f5e61d-57de-4a4e-89c2-b35a978d9f7c",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "52b908af-038d-422f-b449-a7d82716aa13"
        },
        "item": {
          "id": "322c9628-fa1b-4bcc-b02b-7ca794f89f59",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "15eeeb49-ab51-48cc-a7a4-8513eb0e536e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "6af02881-b949-49d5-ade4-27b8cfe898a8",
        "cursor": {
          "ref": "349fd30f-4800-45a7-ad8b-18d135fe9bf0",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "87700bb1-b937-428f-86a3-67589acf729b"
        },
        "item": {
          "id": "6af02881-b949-49d5-ade4-27b8cfe898a8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8d97ec01-eaac-4848-8e95-711c7548f7dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "e2bd5c3b-259e-4474-b60c-7dfd4dc8f179",
        "cursor": {
          "ref": "62b21fd8-6fd3-4d45-907e-cf15372cc1ed",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6b8f30c9-1834-4cf9-b77a-74a2fdd41e23"
        },
        "item": {
          "id": "e2bd5c3b-259e-4474-b60c-7dfd4dc8f179",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "552ae29a-bf4e-4cb8-98bb-163a4caa8d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "c519b401-bb07-43d8-9b8e-00fecc19d6e6",
        "cursor": {
          "ref": "bb6a5862-4c76-40b4-9ce1-05c6007ae1af",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5d91b099-7a43-4ee0-b2e5-cf56b6f83b6b"
        },
        "item": {
          "id": "c519b401-bb07-43d8-9b8e-00fecc19d6e6",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "172fcd2a-d896-41b8-9367-ff34f184344c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "63084dc8-b68e-46b9-bb6a-02104ac2d1d8",
        "cursor": {
          "ref": "2094217a-8c79-4d54-b4ca-fc0f00ff7fc0",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6ef3ead4-5733-4cda-a5f0-37f77ec1c4e6"
        },
        "item": {
          "id": "63084dc8-b68e-46b9-bb6a-02104ac2d1d8",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8e5714af-d28f-4f46-80a0-4ad81f418b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "18e5eeee-e9e2-4720-9596-85a31d0c490a",
        "cursor": {
          "ref": "ec2ee10b-114f-436a-9a2a-fe82c8d3b9f5",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a2ad6381-701d-409c-a84b-5cbb10eaddc5"
        },
        "item": {
          "id": "18e5eeee-e9e2-4720-9596-85a31d0c490a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "99052e92-e885-4304-949b-4b69ddbb4bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "021faf68-fe63-4d0c-88c9-f78ab87ddd66",
        "cursor": {
          "ref": "94a70387-f740-47eb-ab01-3ac1b37e25a9",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "53806d67-9a09-489b-9fda-419131027995"
        },
        "item": {
          "id": "021faf68-fe63-4d0c-88c9-f78ab87ddd66",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "51b49b34-d252-4928-ab35-ff506feaa92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "5f984f8f-db18-4e70-8852-a7555edcb603",
        "cursor": {
          "ref": "90e2a735-b760-4e73-916d-d7a6285b4528",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d43262a3-9907-4f6c-a44c-fcd36587faf4"
        },
        "item": {
          "id": "5f984f8f-db18-4e70-8852-a7555edcb603",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "755aef93-2c91-410c-835c-99f037a50352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "d455b133-5c54-45b5-85cc-e3afea3b6bbe",
        "cursor": {
          "ref": "fd654eaa-3536-4036-82ad-c76f2a215ed7",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "686fe02f-a22d-4c35-9378-2af023086124"
        },
        "item": {
          "id": "d455b133-5c54-45b5-85cc-e3afea3b6bbe",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "723c5e88-6985-4f24-8886-2cd8ed9cf87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "36899d23-ba0c-459d-af6e-e78833b7fc98",
        "cursor": {
          "ref": "994fe1cc-8087-4a22-ba5c-de0864efee63",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "fc98dfef-51ad-4863-b72b-2f8e22bdf2b2"
        },
        "item": {
          "id": "36899d23-ba0c-459d-af6e-e78833b7fc98",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a9791368-b378-4bc1-8d8a-3344e1b40fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "624aa5bd-c3e4-4ee3-88bf-c5e9c1dc67a8",
        "cursor": {
          "ref": "0c1183c0-5be8-488e-90a4-25387e2245c2",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "37882de1-a5ba-4c11-a5ac-75a9c0d02210"
        },
        "item": {
          "id": "624aa5bd-c3e4-4ee3-88bf-c5e9c1dc67a8",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3c95c93e-c450-49ab-8749-22b20ad6cb84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "d8aba1fd-a341-4d25-a2ab-de0c67aa533a",
        "cursor": {
          "ref": "fbe3068e-3ce2-41dc-b279-6c55353b2e96",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f7ced024-3b4f-493f-b347-3ea6ed80a7a0"
        },
        "item": {
          "id": "d8aba1fd-a341-4d25-a2ab-de0c67aa533a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2cce9823-6e6c-4ba0-bc84-bff60fcb24bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "e6e1d9b5-3e52-4df8-8d33-dacea132da6c",
        "cursor": {
          "ref": "f878d96a-2e61-4110-96bd-793e6bb73501",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0cd69756-571f-4408-82db-aba7311093b8"
        },
        "item": {
          "id": "e6e1d9b5-3e52-4df8-8d33-dacea132da6c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "27728c4f-d617-411e-b4f6-ebf39bd228c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "50c7cda9-6d47-44e1-b30b-285e96c18e02",
        "cursor": {
          "ref": "57cb23d3-16f1-4344-8e33-32db9c60a83f",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1d467998-6a8e-4631-9bd3-1ffcc748e553"
        },
        "item": {
          "id": "50c7cda9-6d47-44e1-b30b-285e96c18e02",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "72169129-3c2a-4101-86ed-4d08ea53a674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "ed4653e8-f2d9-4119-a5cc-e33a96ed7ffb",
        "cursor": {
          "ref": "d3bfaca8-9a06-4abf-8608-cc91bf9fea8f",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6a589b0c-b721-4eab-9a08-26663c9d2b6e"
        },
        "item": {
          "id": "ed4653e8-f2d9-4119-a5cc-e33a96ed7ffb",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "103cc334-0312-4f1a-9c92-d36ae889dede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "a19c1a4f-6286-408a-8844-9a2e41c019a8",
        "cursor": {
          "ref": "3c389e08-cd50-45b1-8ac1-987a961b72f5",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5abd088d-41ef-44a0-9fce-7e7bb29f5481"
        },
        "item": {
          "id": "a19c1a4f-6286-408a-8844-9a2e41c019a8",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "fd1bfa18-44b1-4e93-8b22-cb225dc3137e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "c48e645e-9302-47bd-969d-41011abae4de",
        "cursor": {
          "ref": "c3af0ad8-21ca-413c-a8eb-26a349cf5964",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "88073716-1160-4dbf-982f-42d730d6010f"
        },
        "item": {
          "id": "c48e645e-9302-47bd-969d-41011abae4de",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d79dfedc-b217-4401-9458-a4619db6d23d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "9dd0e917-01ad-4c94-b514-36760fb21b6d",
        "cursor": {
          "ref": "291c15ce-649b-4aa2-9730-206f7e82406a",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e1e864c0-24a7-4d02-81fc-60e511087fbc"
        },
        "item": {
          "id": "9dd0e917-01ad-4c94-b514-36760fb21b6d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "870ec1b6-4386-4e74-8a16-6b0279befa44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "a5ba1592-1cf4-4f3d-9e1e-5c9e727123ad",
        "cursor": {
          "ref": "b9f85002-4b94-4530-8559-75d488b4d6e7",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "2e776490-5ca5-4d68-a772-9bdb2aadf9a0"
        },
        "item": {
          "id": "a5ba1592-1cf4-4f3d-9e1e-5c9e727123ad",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "35ea3416-77bf-4eef-aedd-c197b23849e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "f831aab6-47e1-4052-97ec-d25ae49ce649",
        "cursor": {
          "ref": "474bf931-0f8a-4e54-be9c-ba384af83e37",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "29174e99-070e-4e47-9152-5d2da3de11af"
        },
        "item": {
          "id": "f831aab6-47e1-4052-97ec-d25ae49ce649",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4816e8b2-4d22-4d0c-a96b-0f02aab7da01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "d9bf489a-40d4-41e1-83ba-99bcd1284856",
        "cursor": {
          "ref": "0683c869-23b6-49ac-838a-0a1430b8f792",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4c24be7d-5f6e-4ae2-aac1-79baff597424"
        },
        "item": {
          "id": "d9bf489a-40d4-41e1-83ba-99bcd1284856",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8d4631e6-e6a7-49ef-a838-0a2a3c81c744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "e61a663a-6930-40b7-a606-f77075c80704",
        "cursor": {
          "ref": "66bd6312-90b7-43f6-8932-dbb987833f97",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a937c48c-bb46-46b6-b0a1-7cce2c54dcb6"
        },
        "item": {
          "id": "e61a663a-6930-40b7-a606-f77075c80704",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c8c22517-2a6e-4c72-99bb-df032e4f34e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "5ec391cc-e9cf-4f97-84c3-7bff550bada1",
        "cursor": {
          "ref": "6486c5b0-771c-449a-9747-b0882b1a4390",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a8d9dac6-0411-4087-831c-663dd0ec495c"
        },
        "item": {
          "id": "5ec391cc-e9cf-4f97-84c3-7bff550bada1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "773c1d04-5912-410e-b5e6-9ebafb221fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "cb27e48d-9e1c-4c33-94a8-ff8fff2cf247",
        "cursor": {
          "ref": "dc6c6add-4507-4bf0-b11a-5a6af8835465",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d82d165d-f6dc-44f2-80ca-727832989121"
        },
        "item": {
          "id": "cb27e48d-9e1c-4c33-94a8-ff8fff2cf247",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3a93b253-bcee-49ba-82da-b391744e5e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "7fcc6c72-6bf5-471a-bcf8-500138726826",
        "cursor": {
          "ref": "fe228abf-27f3-4776-889d-07c1c5f1a2c3",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "13a00ffa-c9d2-409e-9321-64c051275f60"
        },
        "item": {
          "id": "7fcc6c72-6bf5-471a-bcf8-500138726826",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "6bfc096c-ca0e-4bae-b405-b4f3407c6f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "8cfb566b-2911-4d6f-a4b3-01560d52522a",
        "cursor": {
          "ref": "d3a9bb01-113a-4cea-8d5e-d98060879be6",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ec777f1a-a950-40ad-9caa-92b74d17f58b"
        },
        "item": {
          "id": "8cfb566b-2911-4d6f-a4b3-01560d52522a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "890aa298-a351-411f-a8d2-7f23f43539dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "423542a0-8154-432f-bc8a-93bcc2039812",
        "cursor": {
          "ref": "9cff6f29-1986-4b6b-9d38-dbe90fe2ef21",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b39af504-e9af-46cd-858b-b5f71b96a242"
        },
        "item": {
          "id": "423542a0-8154-432f-bc8a-93bcc2039812",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6f9a6f5f-ad83-4c32-b6a3-512fd465d74f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "27202b11-52f6-4bec-aa93-7e9a6675227c",
        "cursor": {
          "ref": "61640ad2-bb8a-4584-8884-23e575533f9d",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e181a6cf-e417-4acc-9373-e2fc81c2607a"
        },
        "item": {
          "id": "27202b11-52f6-4bec-aa93-7e9a6675227c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2b883dab-4cbe-4829-9fce-22cf340e04e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "87d961e3-3819-452b-9fae-009600bdba96",
        "cursor": {
          "ref": "a2bf3ea0-efe7-4591-81b7-05c69f3d14cb",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a4cdb7a5-ae11-48e4-b62f-11309f1cfb5a"
        },
        "item": {
          "id": "87d961e3-3819-452b-9fae-009600bdba96",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4e97e17a-9997-4352-a9bd-fefe9a83c476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "a80a30c6-eb7b-4e51-a886-8e8123be78a9",
        "cursor": {
          "ref": "b3006f4d-bbce-46f6-8a66-63401428dd81",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ef65f1ae-f35c-420a-b761-b08fecf6a1bd"
        },
        "item": {
          "id": "a80a30c6-eb7b-4e51-a886-8e8123be78a9",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d7e8cf24-91e1-481b-a6c7-f321c24cce80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "11bb9c86-a8ca-4e1c-924f-2acd7fbbabf6",
        "cursor": {
          "ref": "a465f42f-266c-4d51-9d31-4f94cfe22e78",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2b6e5a05-90f6-46e3-8ebf-efa5af2ed064"
        },
        "item": {
          "id": "11bb9c86-a8ca-4e1c-924f-2acd7fbbabf6",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "26e6e6b9-fe05-416f-80af-86d27e8c5d32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd6f924-c2db-408c-83bc-db7e6509490f",
        "cursor": {
          "ref": "eb7412c3-9064-4bc9-ab0a-9d8ef2e1595c",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "49fe40a3-a752-4bc0-8000-b60b19802ffd"
        },
        "item": {
          "id": "bdd6f924-c2db-408c-83bc-db7e6509490f",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c55a9efc-fe5f-41c3-9d3b-c789216d4d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "73901604-8d49-4bf9-8b32-76e900df3a0a",
        "cursor": {
          "ref": "909d23ed-e8cc-4192-b101-b5e7086fc5b9",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0470015b-5eeb-4915-a10f-5d2e41a0899e"
        },
        "item": {
          "id": "73901604-8d49-4bf9-8b32-76e900df3a0a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "be0fd93f-1f68-456f-85fa-a499253d8473",
          "status": "Created",
          "code": 201,
          "responseTime": 455,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee87304-abe3-48ae-a7a1-2258cd011d1f",
        "cursor": {
          "ref": "d7ea86df-0f75-4c82-b206-1155d27270e4",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "bdea0a99-9876-4433-a203-c8dbc2139de9"
        },
        "item": {
          "id": "1ee87304-abe3-48ae-a7a1-2258cd011d1f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "93aa48e6-f051-430d-8d62-5a463e4e12d1",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "de429ee9-b360-4069-b2a7-8af009e9f11f",
        "cursor": {
          "ref": "42f407ba-e843-44f8-9ffa-2a0205cc0502",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c06e1140-6cfa-4ac4-8a98-d08500a6dba7"
        },
        "item": {
          "id": "de429ee9-b360-4069-b2a7-8af009e9f11f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "fe5f54bc-9335-40c6-9047-d808a8689784",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c21c49b-cb7e-41ee-a48e-4cc1b86b9373",
        "cursor": {
          "ref": "32ee498c-1b3c-4d32-9804-d59c072b75cd",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9411864b-ec5b-49ae-b8f0-136ce91234fe"
        },
        "item": {
          "id": "6c21c49b-cb7e-41ee-a48e-4cc1b86b9373",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "20fccfe8-be1a-4869-a972-c3cfbf9e8ae4",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9c9950-ff05-45c7-8ae5-ed45c8617e47",
        "cursor": {
          "ref": "1acd8658-ee9c-4048-8c9b-91e2056b723e",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "57172904-d0a1-494a-a45a-ac071f9f2958"
        },
        "item": {
          "id": "bc9c9950-ff05-45c7-8ae5-ed45c8617e47",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1d843ac4-6588-47c4-9f3a-a045d9fe6e26",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-08-04T00:44:07.546Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-08-04T00:44:07.546Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "dbe6706f-4a06-4cc3-8ed1-dfa9f909f73e",
        "cursor": {
          "ref": "ace95d0e-dabd-404b-b4cd-360db20519b9",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e8b371e5-9d83-4138-ab54-d03c790e32a1"
        },
        "item": {
          "id": "dbe6706f-4a06-4cc3-8ed1-dfa9f909f73e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8e89345a-16bb-4cd2-81e5-2dd46c12cc80",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dad4ff8-be43-4a73-a186-e340594a8ee3",
        "cursor": {
          "ref": "1fb3df43-52d6-40fd-a42c-00b98d70ba33",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "69194dd3-9f11-4ad8-8269-984af5e2a0db"
        },
        "item": {
          "id": "5dad4ff8-be43-4a73-a186-e340594a8ee3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "706928c3-0cf5-43ab-8058-8252a02f4295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "c2e50615-b5de-42d2-a700-457f4f9a17bb",
        "cursor": {
          "ref": "49db3cbd-6a9a-4f92-8adc-67537b810078",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6edfb0f1-bc38-4a95-bea1-1ab02e6839ed"
        },
        "item": {
          "id": "c2e50615-b5de-42d2-a700-457f4f9a17bb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3ff0ac7d-f1e3-4589-b2a4-3347dba54b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "182e57dc-6740-494d-9272-c88a6ed82391",
        "cursor": {
          "ref": "4dfc4a36-3e18-4e0d-bbbf-b62bf14dee26",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "83f34c3f-07a8-4f31-8c26-3203e92843d8"
        },
        "item": {
          "id": "182e57dc-6740-494d-9272-c88a6ed82391",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "14398e2d-9b9f-4b07-93fc-96c772415d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "e694eb1a-6dac-47a0-a1de-2dc8cbc85442",
        "cursor": {
          "ref": "6be322f4-f60d-4267-8f1e-5bcbebb11e5b",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6536d452-b312-4e99-97f7-643d996474b0"
        },
        "item": {
          "id": "e694eb1a-6dac-47a0-a1de-2dc8cbc85442",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "94e8fcf9-02cd-4c65-b1c2-e2ba098ac625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "3c5f363d-484a-4947-955a-c14e2713c143",
        "cursor": {
          "ref": "698bfb16-0283-468c-ba59-aa37a008c39b",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "495bcf17-2ee7-4d3e-b423-789d7a7c2652"
        },
        "item": {
          "id": "3c5f363d-484a-4947-955a-c14e2713c143",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ea2f3014-9831-4f66-9f72-f7478dd666a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "bf97a304-d17a-45e0-8fcd-bbe195555f2c",
        "cursor": {
          "ref": "e6fd5abc-54e9-41b5-8b9f-620e191dfe1a",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "84211c7c-4626-4e6f-8f6e-5368c27f4a73"
        },
        "item": {
          "id": "bf97a304-d17a-45e0-8fcd-bbe195555f2c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8b8ff0ef-3f58-4ee7-8d1e-696d1c40e34e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "2b319f2c-d111-47ad-b5a8-1827f64e7842",
        "cursor": {
          "ref": "dc727c0b-f334-4091-a6f2-2e6247d6cc68",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "34267f94-3253-4f64-b4a8-e51b2a768097"
        },
        "item": {
          "id": "2b319f2c-d111-47ad-b5a8-1827f64e7842",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d3d331d2-3101-480e-896a-7503ebf9fb0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "7ad06f79-3a3c-454c-9946-25f6f83c0ac1",
        "cursor": {
          "ref": "468988da-56b7-4939-afcb-d8b2cf822763",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "03dc6e03-3ea1-4430-8c0d-e02c11dfe246"
        },
        "item": {
          "id": "7ad06f79-3a3c-454c-9946-25f6f83c0ac1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7850c3db-fd1c-40fd-a8aa-84bf3e27fb75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "34b5fef0-81cc-4fe7-8bba-7902b0d24f36",
        "cursor": {
          "ref": "8d52b4a3-e1c3-42ff-9367-a6cf276cdd52",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d24403de-8390-420b-8eb8-ec93985df567"
        },
        "item": {
          "id": "34b5fef0-81cc-4fe7-8bba-7902b0d24f36",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "19699406-651b-4de3-86cf-dde5cc923e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "c4429672-f05c-4726-854d-29621f6beafc",
        "cursor": {
          "ref": "febfc0c5-7506-4351-b0a4-47b5bdd6483a",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "36b05629-f1c7-4973-aba7-a3b5181cd365"
        },
        "item": {
          "id": "c4429672-f05c-4726-854d-29621f6beafc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3584ed73-925f-4ea9-b596-548eda070f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "92b4d465-0e87-4b3f-b9d6-d23d626b5874",
        "cursor": {
          "ref": "f0a36982-cf21-4e2c-9974-194866343f92",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d894851f-f481-41eb-9bc3-3b8c53d2b435"
        },
        "item": {
          "id": "92b4d465-0e87-4b3f-b9d6-d23d626b5874",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d8eba211-7ea4-4970-b395-eb9ea7f31acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "e21af716-ee31-409c-914d-11ac7abf99a0",
        "cursor": {
          "ref": "358ed6b5-9bc7-44a6-8489-e0e9132ea73a",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b2a25e63-adc6-4db6-ae18-df24ce019834"
        },
        "item": {
          "id": "e21af716-ee31-409c-914d-11ac7abf99a0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "86e5ed01-5ead-4b0d-808f-7f771241fbcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "592f5fdd-8b19-49ab-84cf-33471fbd3843",
        "cursor": {
          "ref": "b2d5452c-b6aa-4766-bc2c-dc8bf966862b",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "842d630e-362b-4ec6-a0f9-d23e4a4db047"
        },
        "item": {
          "id": "592f5fdd-8b19-49ab-84cf-33471fbd3843",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "06f919a4-3478-47c4-a597-3d451b202764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "e96d523d-8aa1-415d-b899-464d0ffd5750",
        "cursor": {
          "ref": "6f74f438-e97b-4b6c-b753-1a5bdc8c4bc5",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "82223059-3bd0-4f90-a1ba-b2947f3e683a"
        },
        "item": {
          "id": "e96d523d-8aa1-415d-b899-464d0ffd5750",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "899eb444-ce11-4638-9767-f3bb8addb35a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 132,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "f1982176-d393-48ba-af6d-50497e4387b7",
        "cursor": {
          "ref": "6f471a4c-9e02-4883-8d45-7dcef4d156bf",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "cfe6165f-1de6-489d-98e3-564f6e124c16"
        },
        "item": {
          "id": "f1982176-d393-48ba-af6d-50497e4387b7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ca25ab22-f25c-475d-b081-650cf219321d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "b7ee2eec-62f8-40f6-8a3f-3723d9b9f0bf",
        "cursor": {
          "ref": "4175911b-1cff-474d-b568-414122f4ef72",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b5be8078-2aa2-49a5-9a9c-c6ed0e44434c"
        },
        "item": {
          "id": "b7ee2eec-62f8-40f6-8a3f-3723d9b9f0bf",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ddf2bd97-ee0b-4f80-a3c3-e6e7b1dcbf72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "2a8c2d18-486f-4bc7-a713-10850044ed14",
        "cursor": {
          "ref": "bfee7e24-537d-4b47-b9af-b49253ce8829",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "cf708b06-38d0-432b-a2c6-25995bbfeb30"
        },
        "item": {
          "id": "2a8c2d18-486f-4bc7-a713-10850044ed14",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9d9e9349-93d9-48ee-848e-c49f27084d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "534098d6-7ad5-4604-8dd3-b87f1d3ba8c6",
        "cursor": {
          "ref": "4c9f3f66-1533-4c00-b9a7-88f65d30472a",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "032b46a7-a95a-45f6-a205-d3556540ef8e"
        },
        "item": {
          "id": "534098d6-7ad5-4604-8dd3-b87f1d3ba8c6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "88c78540-aa3a-4830-881c-35909e924e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "dc7bf944-920a-4b89-bcee-6dc8cb0c2472",
        "cursor": {
          "ref": "67a2bae5-a67c-46a5-b787-64f287ca5f51",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2689fe0a-cba0-4f30-86d4-9df96db1f561"
        },
        "item": {
          "id": "dc7bf944-920a-4b89-bcee-6dc8cb0c2472",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "26ac1ec2-7031-4735-9914-2fb159ac48a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "9eda98f1-94c0-4552-9a99-33ebb74d1591",
        "cursor": {
          "ref": "b8e7f15b-4fbc-48b5-979c-623494ce9183",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "93b10dc7-e4dd-489b-b7fa-b023f792bc08"
        },
        "item": {
          "id": "9eda98f1-94c0-4552-9a99-33ebb74d1591",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "123baf32-b32d-4d33-8d3a-63a6ec5235f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "971f6ab9-bade-479b-a504-d9ba48402b23",
        "cursor": {
          "ref": "954d03cb-c6f7-4e08-87e1-9997d22fdee7",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0f9a2227-8da8-4aa8-904c-a1ece76c60f0"
        },
        "item": {
          "id": "971f6ab9-bade-479b-a504-d9ba48402b23",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2482eda3-4516-4f75-b690-010395587db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "e5f16aa0-4dc0-4453-a784-d76a5d0e70b0",
        "cursor": {
          "ref": "a8194697-a03f-4797-9ab0-ea899356fd6b",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "14f67911-7141-4cc8-be73-7c53d40cf89d"
        },
        "item": {
          "id": "e5f16aa0-4dc0-4453-a784-d76a5d0e70b0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "406b6db9-fac6-46e9-81d4-45987086d176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "d5f55cc7-16fa-48b1-9e4b-83055b1918f8",
        "cursor": {
          "ref": "f56e6724-dd63-4ff0-82c3-b0d72a082d23",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a3cbdbba-fdb9-46f7-9f83-794832bfbf24"
        },
        "item": {
          "id": "d5f55cc7-16fa-48b1-9e4b-83055b1918f8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b3cf6328-3795-49e6-9d7d-56102e300576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "bc0fdffc-e82d-4a65-82ca-b3d0e8595a3f",
        "cursor": {
          "ref": "9c797d05-74ff-4f14-9ad5-d05d321372bb",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5168e54b-abc1-4bc4-9168-513222f22d77"
        },
        "item": {
          "id": "bc0fdffc-e82d-4a65-82ca-b3d0e8595a3f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "051c6ee8-e8a9-4cc6-ba20-58f4c0a30596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "b8685b76-979d-4e75-bbcc-5eba3367f93d",
        "cursor": {
          "ref": "f9b742f1-9675-40ea-89cb-e24c6db10312",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b88ba162-1015-4bf3-a10b-910e25fc1f85"
        },
        "item": {
          "id": "b8685b76-979d-4e75-bbcc-5eba3367f93d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "25650dbd-8f7b-4af3-9526-cf25b642917f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "af53201b-d3b9-4f04-b7e1-7f4ae8fed00e",
        "cursor": {
          "ref": "a5e404b1-e631-4612-8ed6-98ccf53c8ccf",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5c458dd5-baed-4db6-b56e-5c30fcd59c72"
        },
        "item": {
          "id": "af53201b-d3b9-4f04-b7e1-7f4ae8fed00e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5f057d1d-5202-4c00-835e-f5468238abca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "cb26dffd-ee67-40ad-a642-3603edd86b6e",
        "cursor": {
          "ref": "b86fb53b-3765-42dd-8ba2-06fb4a4a7bb7",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0359b26b-2d08-4719-9962-e56a4bc13de7"
        },
        "item": {
          "id": "cb26dffd-ee67-40ad-a642-3603edd86b6e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2d206cb8-de96-4836-8b9f-84cde2a93397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "461e60c5-50a1-499c-ba34-580231adcba7",
        "cursor": {
          "ref": "c67916e8-49df-43ab-833f-62291767751d",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6d593b49-c58e-4f4d-95bb-272392806bc6"
        },
        "item": {
          "id": "461e60c5-50a1-499c-ba34-580231adcba7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9cf8ecd4-cfc3-4c3f-b387-c09c2988f130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "e5afb6b0-0979-4d80-bcc5-935ae7181dcd",
        "cursor": {
          "ref": "be8e19dc-657a-4029-9505-dedc0b1cefad",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6dc519f4-35ec-486d-86df-20ac9dd28833"
        },
        "item": {
          "id": "e5afb6b0-0979-4d80-bcc5-935ae7181dcd",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "994054ed-7318-4465-a701-7081a6111dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "3eb9cc40-3fb4-4930-a8e2-7cf59c540067",
        "cursor": {
          "ref": "2e6c5895-193c-4f5c-9016-608bfcde29ca",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a230d74c-49a7-4edb-a093-e927601ff732"
        },
        "item": {
          "id": "3eb9cc40-3fb4-4930-a8e2-7cf59c540067",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "40b3d2d0-7eae-4a81-8361-979f5eac66cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "76b8fdee-0d2a-461e-9c0c-44492434a20c",
        "cursor": {
          "ref": "7a3f6f8d-f8ad-4016-82fc-3c55360f99b5",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "12144387-9403-4dc3-8a3e-66c75da0e366"
        },
        "item": {
          "id": "76b8fdee-0d2a-461e-9c0c-44492434a20c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0ccb580f-eddd-42ad-950f-5bfceb766786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "43699f85-fe52-4efb-bb56-d25da7d10086",
        "cursor": {
          "ref": "00f9bb8d-4671-4afc-9737-12517bf3cbce",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "512cdb5f-fa06-417d-a995-c964570fdcea"
        },
        "item": {
          "id": "43699f85-fe52-4efb-bb56-d25da7d10086",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "c149637c-34c5-4d3d-bbfa-a78e0c8a3628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "b3bd035f-ea39-449d-b7b2-38383e4c08ca",
        "cursor": {
          "ref": "1ab0f841-52b7-4fcf-81d0-fb365f69deed",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "5c98e4db-c614-4f94-9b38-75021ee9255e"
        },
        "item": {
          "id": "b3bd035f-ea39-449d-b7b2-38383e4c08ca",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "8ef74e7d-b7a2-403b-8a6a-804680648bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "5f1041a7-3a43-407f-96a9-35b8f8b8f704",
        "cursor": {
          "ref": "e35b4df3-3c34-446f-915e-0fd0304b60ea",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7972d72f-9ad7-4334-b3af-665733f40fdb"
        },
        "item": {
          "id": "5f1041a7-3a43-407f-96a9-35b8f8b8f704",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "2be2e46e-b551-4ffa-821a-212ddc4c5c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "c7c7bd47-8e16-42be-91a7-34b8671b1f2d",
        "cursor": {
          "ref": "eae5b118-95e5-4384-9c5a-fc034a31a71f",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c6fb435b-13f5-4873-876a-3459a6ac9ffd"
        },
        "item": {
          "id": "c7c7bd47-8e16-42be-91a7-34b8671b1f2d",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "371dcc6b-09ef-42b4-a31c-0c02aa96ad2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "10da8e7d-de18-4756-a727-8c0dc2e18b94",
        "cursor": {
          "ref": "834e31f6-f2ee-4a73-a944-8773b33ec4d4",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8c5af283-70b9-4b08-b2b9-519a0a0f8abe"
        },
        "item": {
          "id": "10da8e7d-de18-4756-a727-8c0dc2e18b94",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "509af3bf-b5b7-4ae9-bf67-04a5084ff9e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "6317ae27-dd3e-4626-946b-4996b9c61639",
        "cursor": {
          "ref": "b1b08f68-80dd-43bf-b666-00cfe998a6eb",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8aa54b7a-13e4-45a5-b672-3f44bb7307a8"
        },
        "item": {
          "id": "6317ae27-dd3e-4626-946b-4996b9c61639",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "6f6cb94b-7f64-49c9-94f6-4501e2c3a921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "52d4727d-9553-4501-91bd-2bfcbab10751",
        "cursor": {
          "ref": "5d790912-06cb-4ee8-8511-1f1bef5fa38b",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9dd444e0-a487-4888-98f6-7814d9045f3c"
        },
        "item": {
          "id": "52d4727d-9553-4501-91bd-2bfcbab10751",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e97eed09-0b79-4a27-9b15-e3232062dd38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 94,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1afffeed-e2d3-48f5-9dc8-c6a48f2a5be4",
        "cursor": {
          "ref": "7f773074-f3a3-463b-94d6-1dfa97fa4936",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "33156831-2025-45ce-b4d6-35121cbd75ba"
        },
        "item": {
          "id": "1afffeed-e2d3-48f5-9dc8-c6a48f2a5be4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e0302bb2-9015-4a66-85f7-f77d128d4689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "93c7290e-7936-4c89-8113-5f0230a6016b",
        "cursor": {
          "ref": "08464022-41d4-4417-8c7b-32f9e152778c",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "43387a81-bafe-458d-ad49-3ddf697e816e"
        },
        "item": {
          "id": "93c7290e-7936-4c89-8113-5f0230a6016b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e91c1409-6f79-4fb8-8cf1-d0ed78e8f7f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "5ed00eb8-5ff2-4aff-ae54-82a9a8523246",
        "cursor": {
          "ref": "1f37286a-c30d-4c44-93d1-ff71d8dd356e",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3d3cee74-b28e-4017-99f7-ec3bed3152d6"
        },
        "item": {
          "id": "5ed00eb8-5ff2-4aff-ae54-82a9a8523246",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6323433f-d1a8-41bb-a725-fccb4e683b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "74dc3ce8-8684-4f0a-ab35-005fb70c0347",
        "cursor": {
          "ref": "7d257da6-8456-4743-87d2-162a760bdd84",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "befd50b5-0ec1-4c77-a8a2-0266bf9ba89d"
        },
        "item": {
          "id": "74dc3ce8-8684-4f0a-ab35-005fb70c0347",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "3a30fe47-9e1a-4dcf-9bd9-66e2af361c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "ff850fe3-5909-4471-9f77-31c53736ad5b",
        "cursor": {
          "ref": "6d785411-c29d-4ca2-9ef2-3208361d55e1",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "be60674c-95c4-4ba3-b813-4e2d419582f5"
        },
        "item": {
          "id": "ff850fe3-5909-4471-9f77-31c53736ad5b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7033b6fd-f064-4119-9ab0-a674b4a7b9ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "900b1f67-5eb0-4002-8fc3-6fe7c3ce988e",
        "cursor": {
          "ref": "ca3cfdf1-7012-4b67-b417-ec30481081ac",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "300bbfe2-f634-48ff-b18c-b622415642ba"
        },
        "item": {
          "id": "900b1f67-5eb0-4002-8fc3-6fe7c3ce988e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f9584748-73c1-4122-bfd6-a661bbbe3d0a",
          "status": "OK",
          "code": 200,
          "responseTime": 163,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "92ca1d92-8545-4282-9998-e893b8ea030d",
        "cursor": {
          "ref": "2ceed368-cf27-4e66-9a71-42f0b3e9db57",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "96c28808-5738-4471-8dfb-179b23db15e4"
        },
        "item": {
          "id": "92ca1d92-8545-4282-9998-e893b8ea030d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3298f358-7623-46ed-9029-6ab26dd68c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "919eeda4-203c-4625-a817-cc7c296fb0b5",
        "cursor": {
          "ref": "08d00205-7694-42db-8273-71e0691e8c4a",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f5989ad6-f288-4281-9b40-277c8c23e316"
        },
        "item": {
          "id": "919eeda4-203c-4625-a817-cc7c296fb0b5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a794e59e-837d-4e4f-9ae6-5176787e0fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "9f43fd3f-72b8-45ac-babd-dd89cc409f0b",
        "cursor": {
          "ref": "e0d1d824-6f06-47f2-a0c4-125ba2d5c315",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c802ee7f-8161-4467-b753-ce106c436587"
        },
        "item": {
          "id": "9f43fd3f-72b8-45ac-babd-dd89cc409f0b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "71212ac9-e44a-43a4-91c9-2294e5cb80ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "fdae266c-d829-49b8-bb00-0409379bf3c6",
        "cursor": {
          "ref": "35bf49dc-1151-4eab-977b-c6f275eb7ce1",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "169062f6-8dd2-4c40-b2bd-c115f75b0969"
        },
        "item": {
          "id": "fdae266c-d829-49b8-bb00-0409379bf3c6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "bf175ce2-7364-468e-9c17-efb283282868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "ca220864-e4c9-4a39-997c-41ad97359dce",
        "cursor": {
          "ref": "072aa92c-93f3-427e-8d2c-2f04b4a2c873",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "03fcb11a-0b62-4445-9069-f4d685ac9e10"
        },
        "item": {
          "id": "ca220864-e4c9-4a39-997c-41ad97359dce",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ebf01ea7-948a-445f-b706-84f88a457e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "94bfc982-8d74-4951-8354-6e0cdba41bc6",
        "cursor": {
          "ref": "2bb8b6b6-5e7e-4c91-9906-f88802500283",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a7be42fb-0009-4f17-a9ff-262055311a78"
        },
        "item": {
          "id": "94bfc982-8d74-4951-8354-6e0cdba41bc6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "4f27cd85-35c1-4462-906e-9166bb2ccb49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "f8205839-cf91-4e64-b67a-e03e04abf0f8",
        "cursor": {
          "ref": "8b847e7f-18ce-42ae-aad8-b00e7537e100",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7365d438-9850-49d2-97e8-a39a900d23e5"
        },
        "item": {
          "id": "f8205839-cf91-4e64-b67a-e03e04abf0f8",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "30f7394d-3d72-47a1-932a-25b3584ffefa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "2ba8827c-e1ad-4781-9336-c5753cda00db",
        "cursor": {
          "ref": "f4894544-30cf-43bb-bd68-96af50915799",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "245b3990-706f-47ac-ab1f-b86857b89fb4"
        },
        "item": {
          "id": "2ba8827c-e1ad-4781-9336-c5753cda00db",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a52fe91f-5349-4dbe-a7af-847e19614c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "7f31775a-b477-455b-85fe-6eb850682cd3",
        "cursor": {
          "ref": "69d603d8-15c7-4639-a74e-0fabec7992d4",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4d97d3c7-af62-4f9c-b4a7-1dcaf6b3013a"
        },
        "item": {
          "id": "7f31775a-b477-455b-85fe-6eb850682cd3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "48465ccd-7b81-4c6d-a053-20b196387b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "447a175a-2500-47d8-9bda-460e7c7ea34d",
        "cursor": {
          "ref": "b3ce79aa-291b-42bd-982b-f1e8e96295d4",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1a9a9bd5-1b20-4ef7-b5d1-d0d37907261e"
        },
        "item": {
          "id": "447a175a-2500-47d8-9bda-460e7c7ea34d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1a58fdec-8924-4caf-acee-e76b31e55a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "7cbe3cda-aaf4-4ec1-aea9-e07ca90a11e5",
        "cursor": {
          "ref": "f5ac40ec-a801-48be-9f05-1d6b5bfbbc28",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ec76920b-e41f-4ae7-9082-7a3d9b7fa180"
        },
        "item": {
          "id": "7cbe3cda-aaf4-4ec1-aea9-e07ca90a11e5",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cc0a77a8-cc84-4fef-adb7-51804f0b5ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "ed26bb6b-2204-4ad8-9222-d65ea87451b4",
        "cursor": {
          "ref": "6c102c86-11ec-4bd2-8161-7ff810ab4300",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6f3ff3b0-78bd-4810-81ec-3056a1a6e22b"
        },
        "item": {
          "id": "ed26bb6b-2204-4ad8-9222-d65ea87451b4",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7f32f70d-42a4-4fe4-a89a-2f0035779154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "167fc4b1-51eb-4f0d-b913-cfac351c20da",
        "cursor": {
          "ref": "7a91cef8-cc55-4384-a76b-d77be2e91f97",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fa5cdfd6-e624-413c-9863-dc469ea763e6"
        },
        "item": {
          "id": "167fc4b1-51eb-4f0d-b913-cfac351c20da",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "af26c508-d01b-4b53-ad61-656af08bf01e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "e5465eb0-8785-418f-b759-f68d96cbb9d0",
        "cursor": {
          "ref": "525ef387-0138-46dc-b351-08b8be99aeb2",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "607800aa-04eb-49e6-966b-66649f6a6517"
        },
        "item": {
          "id": "e5465eb0-8785-418f-b759-f68d96cbb9d0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "cb2c56b9-2311-4cdc-99d7-de01ab085558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "1cf377f5-24fc-4045-9c4a-79be219ca2a7",
        "cursor": {
          "ref": "dbd0b355-be7e-4573-af2a-ab589ab47873",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e74e0f8f-9fbb-4866-bd63-8fe016c4daa9"
        },
        "item": {
          "id": "1cf377f5-24fc-4045-9c4a-79be219ca2a7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "93ec2ea3-c5b6-40e5-b0b5-2e8fde445296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "f63ee6cd-8e7a-44a2-b565-e3503bfb74b3",
        "cursor": {
          "ref": "f9b34ff1-641e-4c9f-8892-3c29f0914f5f",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "cdd409ef-e0f5-4db4-9103-738aa170a552"
        },
        "item": {
          "id": "f63ee6cd-8e7a-44a2-b565-e3503bfb74b3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8dd2f757-c10f-41ed-acfb-5809114b396f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "bc43a2fa-0817-4802-b084-f11d988f3237",
        "cursor": {
          "ref": "6fe29852-9aaa-487d-9348-c1a924b497c0",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "68e8610d-acb2-45c7-9e2d-716a579ce4c6"
        },
        "item": {
          "id": "bc43a2fa-0817-4802-b084-f11d988f3237",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "35ef4c54-3ebe-4b22-ad81-a6b769903982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "b5725cae-3c7b-44c2-9bb6-a28eca612682",
        "cursor": {
          "ref": "9f37b8ff-888b-48b3-86c5-8a217439d7b0",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "aaabcbef-cd89-4ac8-9e88-bd50aa068afc"
        },
        "item": {
          "id": "b5725cae-3c7b-44c2-9bb6-a28eca612682",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a0ab82cf-f225-4b4d-9e09-f945281a2184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "d3c9ce04-7c82-4e53-a48a-c6042c55b4a9",
        "cursor": {
          "ref": "49e4dacf-5153-4ce5-b789-b5c7034c38b6",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "04b5882b-5860-40af-a3ee-aef584ac2936"
        },
        "item": {
          "id": "d3c9ce04-7c82-4e53-a48a-c6042c55b4a9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "99b5a072-98cc-4b78-b7b3-5e0c7bb1684e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "db06f7b5-1761-4047-bf0f-09a2f3884fba",
        "cursor": {
          "ref": "b4f727f6-564e-4627-b360-88ba864729f4",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d429d28c-81d3-485b-8f9f-08c76b81617c"
        },
        "item": {
          "id": "db06f7b5-1761-4047-bf0f-09a2f3884fba",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e4cfd8e8-0fd3-4f8d-88b8-a100a4111b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "aa5271c0-7ef8-46e6-918f-a81162c0b55c",
        "cursor": {
          "ref": "f22042aa-913c-49ba-be92-e2fd9706db5b",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "167e69d3-98e2-46d3-999d-23a617287c6f"
        },
        "item": {
          "id": "aa5271c0-7ef8-46e6-918f-a81162c0b55c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1194e85d-bcb8-4fe1-8f61-15c01536e9ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "343f2337-6952-4def-a7e8-cf488c8f474e",
        "cursor": {
          "ref": "988b41d5-502c-44f0-bccd-8963353b6c65",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "07939c54-19d5-4303-bc6c-47f6738b984a"
        },
        "item": {
          "id": "343f2337-6952-4def-a7e8-cf488c8f474e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6fec5565-03ce-488a-bebc-db3db66a6f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "779f2678-b3ae-404d-bed6-1ff873a20e4f",
        "cursor": {
          "ref": "cc6efd78-e6ff-4a43-93a2-60deac526421",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1f65af0e-f880-4dfd-a4fe-a2847cec0482"
        },
        "item": {
          "id": "779f2678-b3ae-404d-bed6-1ff873a20e4f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d458fc7d-729a-4efc-93e7-08e35115c48a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "f7157718-23a1-42f0-ab55-013a9b1cb867",
        "cursor": {
          "ref": "9c10589d-27fb-4da4-81cd-1e8fb64c8504",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "09b44cc1-0b4a-4874-bb63-c26782e26423"
        },
        "item": {
          "id": "f7157718-23a1-42f0-ab55-013a9b1cb867",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a2b03278-73b6-40b5-bf1a-149e920ff799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "c6828df0-68e8-4dbe-8780-c81698260ae4",
        "cursor": {
          "ref": "a8b5dc72-f3a7-4f43-9e87-2f4f2fdb625b",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b40d488c-eabf-4ee3-900f-1bed4c91743a"
        },
        "item": {
          "id": "c6828df0-68e8-4dbe-8780-c81698260ae4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "cae5cde1-28fa-4fc0-ae51-ee0102d3c70b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "a738f210-6fea-4caf-93d0-b91862f55c8f",
        "cursor": {
          "ref": "01e55a88-01f2-4e12-aeb7-2f6d2ea3927c",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f79a187f-f4cd-4421-a72f-9f6d91d97bd9"
        },
        "item": {
          "id": "a738f210-6fea-4caf-93d0-b91862f55c8f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "605f542c-746c-47bd-b0cf-9f31ce8fea98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "36dd4fb2-10b5-4567-ba72-85230619c2f6",
        "cursor": {
          "ref": "b2677f8f-ec47-4873-ac8d-4054cd1cfc91",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0a100963-58e6-4890-9771-d005ec8de1cf"
        },
        "item": {
          "id": "36dd4fb2-10b5-4567-ba72-85230619c2f6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "319bf819-76e5-4f6b-9aed-13a556cd8949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "3463ca94-271a-47f3-b6dc-e0c1fd3185ec",
        "cursor": {
          "ref": "b6f9d9d7-0ba3-4b5b-8c0a-977854b0afca",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "54fbeef6-819b-4b51-8ea5-4d469f5a3872"
        },
        "item": {
          "id": "3463ca94-271a-47f3-b6dc-e0c1fd3185ec",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1de71006-9c29-407f-9940-6144c7718a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "f072f9bd-6305-4e2a-b58e-aa368f8e6616",
        "cursor": {
          "ref": "f0db3736-999c-4fff-98ad-6fee94fd0c8c",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ae45de93-75b9-4169-9d5d-f4e977255974"
        },
        "item": {
          "id": "f072f9bd-6305-4e2a-b58e-aa368f8e6616",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7f235605-93a2-4992-8a5e-06660f1a2032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "9c9a978b-bd83-4ffa-b4df-78d3808a9bf3",
        "cursor": {
          "ref": "f684fe2e-8e91-42c4-bf86-aaa24b6bbd04",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "931f5338-5590-495b-b67c-ccf320445aff"
        },
        "item": {
          "id": "9c9a978b-bd83-4ffa-b4df-78d3808a9bf3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9a0ba7c3-c2b9-440f-9188-7dbb6155e2d6",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "4f8f7093-79fd-4235-bb89-a84afc5e96d9",
        "cursor": {
          "ref": "b3886212-e3fe-49a2-a8a5-9de0f3da18fd",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5a591f3b-bbe2-4e4f-bb57-add989eb8df8"
        },
        "item": {
          "id": "4f8f7093-79fd-4235-bb89-a84afc5e96d9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f965dd9e-448c-4cbc-b682-8faf226b1cd2",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "0ad4c0b0-6a1f-4a8c-96da-3f599cfe2a71",
        "cursor": {
          "ref": "3fb4812a-4caf-47e0-8734-1bf91078e9d5",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "75939bfd-5bf2-45c2-9348-222e5c2c964f"
        },
        "item": {
          "id": "0ad4c0b0-6a1f-4a8c-96da-3f599cfe2a71",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7ba39f0c-cb22-4923-b460-a688306b802d",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c2611b8c-bfc9-4b19-9e5f-66b5fa07ca48",
        "cursor": {
          "ref": "cba98a36-e1e0-4088-8ebf-343fe72a27ad",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e8065c46-52c3-4f2b-a29c-1730657a3271"
        },
        "item": {
          "id": "c2611b8c-bfc9-4b19-9e5f-66b5fa07ca48",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8e51cd90-dccb-477a-927c-b1e92a62b579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "064492d3-7c74-49a0-8ad3-320523841c12",
        "cursor": {
          "ref": "874a4570-9605-4fec-94ef-ec0c24e39652",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a74db072-118a-4a0c-8068-5f8a0644d9ce"
        },
        "item": {
          "id": "064492d3-7c74-49a0-8ad3-320523841c12",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0f946b01-6e42-4e8c-9af7-aaad5087d347",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "be140fbf-0421-495c-9bc8-8338f442d5f5",
        "cursor": {
          "ref": "8170af16-e676-4c4f-a74e-7af69502391b",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "398057a4-e5df-46e4-af1b-34365a6e46da"
        },
        "item": {
          "id": "be140fbf-0421-495c-9bc8-8338f442d5f5",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8caf7c72-cc92-4e55-b093-26fc88bec2ac",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "9326340f-5768-49da-a4da-da5e758a7179",
        "cursor": {
          "ref": "36618a58-80cc-4b58-b42d-8798594265f2",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5ba5a152-9d67-482b-b850-14572ec3a73d"
        },
        "item": {
          "id": "9326340f-5768-49da-a4da-da5e758a7179",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "27780d30-e924-453c-a6be-f5eec415627e",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "5f1568ac-6444-491a-a27b-30777d39561b",
        "cursor": {
          "ref": "1def00e3-5735-4ffa-a561-0792b7ca3b30",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "cdd02651-ff99-4672-b4d9-c893b85a017a"
        },
        "item": {
          "id": "5f1568ac-6444-491a-a27b-30777d39561b",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4164adc3-785e-474c-8d19-2e9b19d8063c",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "4424ca3a-0b1c-43fe-90db-08235a31b6f7",
        "cursor": {
          "ref": "4c64e074-fab2-4cf8-ab79-27bc9496e170",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0346a058-67c1-4ac8-9cc4-959eb74e48ef"
        },
        "item": {
          "id": "4424ca3a-0b1c-43fe-90db-08235a31b6f7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0995c1b4-e685-4939-905c-359903fc518f",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "b8131f86-2eac-41af-a9ec-788ad60391db",
        "cursor": {
          "ref": "30d747f7-81d1-496a-99b7-4e56b4ff30bb",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8b8813bb-c263-426d-8f6d-c4f6e6eae1ee"
        },
        "item": {
          "id": "b8131f86-2eac-41af-a9ec-788ad60391db",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e4dcb98f-7396-4c05-a914-7e45958c0cd4",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "926e600e-1fbb-494d-abfc-5ec051a1e0df",
        "cursor": {
          "ref": "ab541894-ced6-4cdd-b83e-db0b16920231",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "51a3142d-a8ff-4673-b6af-89fe1939c897"
        },
        "item": {
          "id": "926e600e-1fbb-494d-abfc-5ec051a1e0df",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "105b028d-89b0-48f7-8d83-b64e4bc87168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "2f83406d-d499-49d6-99dd-f0da6d61b437",
        "cursor": {
          "ref": "4fede480-6a2c-4b2c-a922-71bba956d801",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7b73027d-3d39-449c-8157-307fa846b44c"
        },
        "item": {
          "id": "2f83406d-d499-49d6-99dd-f0da6d61b437",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6f9f9853-0c0a-4688-af47-e40d86c68104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "baa1d9b0-11b5-4227-8795-d521d51dc689",
        "cursor": {
          "ref": "a09f8d2e-3390-4bd7-8ac4-71543fc65a4c",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6d557ec6-1dbf-45a9-9998-3b293c205d8a"
        },
        "item": {
          "id": "baa1d9b0-11b5-4227-8795-d521d51dc689",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b60111be-cead-4bca-a65a-a78dd9c45e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "a1fb76bd-2a48-4bb1-8080-4592a0cd53fd",
        "cursor": {
          "ref": "ea8eef1c-04c6-40f2-a02a-1eb0415675b6",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2eea01bf-d068-4f69-bbc9-9165cf851045"
        },
        "item": {
          "id": "a1fb76bd-2a48-4bb1-8080-4592a0cd53fd",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d0d34af4-1f74-4383-8589-1674dd45b619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "6e0eb25d-211c-4793-b131-2e34c473834b",
        "cursor": {
          "ref": "9d6b649a-f12d-46f1-b5b1-cf7685fd37eb",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4b08fe06-99e3-4905-bdc6-0b52299a894c"
        },
        "item": {
          "id": "6e0eb25d-211c-4793-b131-2e34c473834b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "cd2c4395-aa90-4d24-a8f7-80ca05090f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "59444942-7383-4a41-99c2-277d9986344e",
        "cursor": {
          "ref": "782e5f8f-996e-4558-9940-899c8e00ec11",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "60cda96e-ea7d-40ff-85a1-83a6ca0013ca"
        },
        "item": {
          "id": "59444942-7383-4a41-99c2-277d9986344e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a2403086-1d64-4931-ab9e-0e1c6cd05b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "25ed235d-efdf-48eb-8af2-f7df37973e2a",
        "cursor": {
          "ref": "962ba766-54ec-4e72-80b6-700d9584d888",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "652fd07f-a926-4f4c-badf-7b16fe79692d"
        },
        "item": {
          "id": "25ed235d-efdf-48eb-8af2-f7df37973e2a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b2e9ffa4-d43b-48b6-ab3f-5757f97ed548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "13057287-61bd-40f9-a930-96c2fac8df8c",
        "cursor": {
          "ref": "daae1b30-9ba8-4934-ba8d-2877f7c808fa",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2432b269-000a-4b8f-a688-ec70d53533fc"
        },
        "item": {
          "id": "13057287-61bd-40f9-a930-96c2fac8df8c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ea20a443-cb2f-4cbc-93d5-3fe1f8097583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "202d54f4-154a-4359-8875-a243ea0ebc2e",
        "cursor": {
          "ref": "802b323d-4122-446c-946e-4952e4c465fa",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e79ab201-d975-4086-a17b-0885d06049b8"
        },
        "item": {
          "id": "202d54f4-154a-4359-8875-a243ea0ebc2e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3455d4a9-fe4c-4c0d-8c43-8b29048a3847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "2194af78-c271-4131-aa9c-53d2a0e74177",
        "cursor": {
          "ref": "f0e17652-26fb-4344-877c-931dc16fb5dd",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e84ec679-8e3e-4ec3-b353-c7b2ccdca4e3"
        },
        "item": {
          "id": "2194af78-c271-4131-aa9c-53d2a0e74177",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "fb5a7884-abab-4470-8768-9db0fb472a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "35258d90-04db-4d80-a208-0dd3bb77c5e2",
        "cursor": {
          "ref": "12cd4954-3064-41f3-a31f-ed8aa6d6d410",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b73f699b-9c56-416b-852f-328e75c10353"
        },
        "item": {
          "id": "35258d90-04db-4d80-a208-0dd3bb77c5e2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6ac8d60c-9351-47a3-ac24-070417dd0416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "cdad3c30-3956-4732-8d3f-3a42bd2eff19",
        "cursor": {
          "ref": "bcb11ea2-a184-4086-a116-be913c916b9d",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "89b9932c-5ecd-4b0b-9094-49434dd3cf11"
        },
        "item": {
          "id": "cdad3c30-3956-4732-8d3f-3a42bd2eff19",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ab2843ae-df22-4f38-b54d-175045d9a807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "a1e8ed64-1580-4037-9e54-198100d0fe31",
        "cursor": {
          "ref": "964cc7c3-e500-4305-bcc4-edcdd1fe8a12",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8c6e9d67-d498-41c2-ad06-e81f13a08eb9"
        },
        "item": {
          "id": "a1e8ed64-1580-4037-9e54-198100d0fe31",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "661342bb-ea7a-4d1e-99fa-20d4b91a9faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "84c105ff-890a-4685-9dcb-bddcfa5a317c",
        "cursor": {
          "ref": "9b72bce3-cc28-4f6b-8821-50adfb56d957",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6f49f0d3-b6d5-493b-acba-4b1970edafda"
        },
        "item": {
          "id": "84c105ff-890a-4685-9dcb-bddcfa5a317c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "215acc9b-adc0-47df-a22b-151f28b86be5",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "db56a7dd-efd0-4a40-adc3-a4caece5095b",
        "cursor": {
          "ref": "6654d58d-fc8d-45b4-aff9-5bfaae42b2a6",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "75616fea-ce83-4345-b66b-3fa5e3b9a0a1"
        },
        "item": {
          "id": "db56a7dd-efd0-4a40-adc3-a4caece5095b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "513e1ceb-f28c-4e76-b613-631b0fdb94c9",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "8b547da9-e764-4ec7-8f14-905e5ca3a658",
        "cursor": {
          "ref": "1836c54f-535f-487b-ac85-1c823b294622",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0b634cfa-84b5-40f1-a03d-191daf12ed4e"
        },
        "item": {
          "id": "8b547da9-e764-4ec7-8f14-905e5ca3a658",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "eaada6dc-3bed-4d13-b65b-d0c7fdeebfd9",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "cc5465f8-62ce-469f-b2f8-7ade4d728e2f",
        "cursor": {
          "ref": "13b379ba-6eac-4adc-bbd1-ec5f513289a4",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d9dcb26c-bc37-4fcd-80f2-61f3dd650158"
        },
        "item": {
          "id": "cc5465f8-62ce-469f-b2f8-7ade4d728e2f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8c2537fe-a52e-4d5a-ba50-a3053f432980",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "d6add257-e5c1-4eea-bc13-dbcb06c1a2c4",
        "cursor": {
          "ref": "1d35d578-fd25-4a6e-93b8-74a80aad242e",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "dd60f358-7f40-429e-bd2c-92dfaae8eb3e"
        },
        "item": {
          "id": "d6add257-e5c1-4eea-bc13-dbcb06c1a2c4",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5ce20c0e-4e6b-43dc-8291-928a7c9951f0",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "41250a97-b378-43df-ad1e-64a9c08063f8",
        "cursor": {
          "ref": "3b987d94-3ae8-4677-a1ac-d0ea5816410c",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7cdcf387-e66c-46bf-bd50-522971220e56"
        },
        "item": {
          "id": "41250a97-b378-43df-ad1e-64a9c08063f8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e1cfb2e3-2c1b-46ce-a4bc-c521b0f1dce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "d653f122-c7b5-4c0b-86b9-42e298e8f0e1",
        "cursor": {
          "ref": "0f1a5ad7-1150-4166-b03a-d29664db5540",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "57613848-ea2b-4f69-80da-d600f288c329"
        },
        "item": {
          "id": "d653f122-c7b5-4c0b-86b9-42e298e8f0e1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "479f5102-2ce7-4987-9c87-211426f0a9ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "281d0adb-e534-4894-9748-07710b4a31d0",
        "cursor": {
          "ref": "dcfafa10-d194-4f2b-a7dd-8cd9fdac9f34",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0cddd5d0-a411-4efe-bd85-8805d2314a43"
        },
        "item": {
          "id": "281d0adb-e534-4894-9748-07710b4a31d0",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1712ef11-23e5-423a-9afe-b0401f192461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "f332d5e1-885f-4e42-8b87-2ee4dc7e0f2a",
        "cursor": {
          "ref": "0b1d84a4-9aba-4ace-aead-345b86b369cb",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "dc9593c9-6989-49e8-8719-daada0fcc21a"
        },
        "item": {
          "id": "f332d5e1-885f-4e42-8b87-2ee4dc7e0f2a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ba3b856c-74dc-4609-9900-49bba5e17324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "7f8137f9-dbac-46a5-99fa-78300311afd5",
        "cursor": {
          "ref": "1fa0167b-ab13-4dc2-95f4-ed27ab81bedf",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9237ccd4-a9fa-4634-8be3-96b468c3ad6d"
        },
        "item": {
          "id": "7f8137f9-dbac-46a5-99fa-78300311afd5",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ac185e91-f975-40e3-b6b3-f54332b3aeec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "04e841ea-49a2-4dcd-b28a-1096ca2971ef",
        "cursor": {
          "ref": "422b588f-dde7-418a-be67-bc425f29adcd",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e5972a6e-0a3b-4c07-9359-49e61ca6996d"
        },
        "item": {
          "id": "04e841ea-49a2-4dcd-b28a-1096ca2971ef",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a0845156-6220-42a1-9ed2-ef7fb3802e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "29e5cf02-9ce5-4619-85fc-bfe1635451ec",
        "cursor": {
          "ref": "46cb9bca-733b-4008-9220-fdfe4d7ec45e",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9a4578b5-39a5-4917-a01a-411ea8050336"
        },
        "item": {
          "id": "29e5cf02-9ce5-4619-85fc-bfe1635451ec",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2a56ec7c-8208-4872-be0a-5d0dad0705f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "d9c1e0c1-8cad-4696-9a6f-1d7e7a7b4a0d",
        "cursor": {
          "ref": "cba32302-dc69-449b-9ae3-e7fb94d62a1c",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "67beb94b-73ed-44ea-967c-e99dbfaa5b3f"
        },
        "item": {
          "id": "d9c1e0c1-8cad-4696-9a6f-1d7e7a7b4a0d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f710a3c5-adcd-46e9-9aa1-49765335e050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "47ce74ea-a7e1-4158-9240-8402a29bacdf",
        "cursor": {
          "ref": "ca268e6b-af48-4db1-8a02-2af31dd32052",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "56fa8b9e-5b73-4593-bbe5-f790275d702e"
        },
        "item": {
          "id": "47ce74ea-a7e1-4158-9240-8402a29bacdf",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "58eecb14-7694-4318-b05f-1b518747e1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "4e4d12db-241e-4c09-910d-4877d7710d41",
        "cursor": {
          "ref": "43425118-45a2-414d-b9fa-f31749fb2dae",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "2a69d3b7-9ecc-4c69-b610-f5f423889db7"
        },
        "item": {
          "id": "4e4d12db-241e-4c09-910d-4877d7710d41",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d999ba0e-12aa-446e-bdec-be91144591e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "a2bf48a7-9222-45b8-bd31-fba760f5d944",
        "cursor": {
          "ref": "a31b6f65-ac13-454d-b22e-83c7664c7e29",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6a591f15-8f90-46a2-a75c-8ab4ada23a7a"
        },
        "item": {
          "id": "a2bf48a7-9222-45b8-bd31-fba760f5d944",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4b008b5a-f39f-4653-a3bd-b0bddf73c455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "20e58dff-4dd6-494c-bbaa-fcdec0312aa0",
        "cursor": {
          "ref": "d9dbbb3d-59bc-4321-bc7c-62709ae5c6c3",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "af2487fd-73d2-40b9-b35a-9f2a020df075"
        },
        "item": {
          "id": "20e58dff-4dd6-494c-bbaa-fcdec0312aa0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3146abc2-93a5-438a-9df0-c9d529292a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "2dea66da-aada-4aac-9917-764fd890b14c",
        "cursor": {
          "ref": "b1960518-3565-478e-9fab-6986a7d9af0c",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d81cc765-22e4-4793-8133-1119886be5d8"
        },
        "item": {
          "id": "2dea66da-aada-4aac-9917-764fd890b14c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8386a1d2-f117-4238-82b1-2083506dfdac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "dd43e672-fe97-47a9-9a50-4f0510f602e6",
        "cursor": {
          "ref": "8f4cc712-6c1e-45ea-a0ab-f09a1381ad09",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "45522a6a-e504-4129-a947-98f2bd003eb6"
        },
        "item": {
          "id": "dd43e672-fe97-47a9-9a50-4f0510f602e6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "5bdab684-b659-467e-9998-57f89bbd7e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "4025ab5d-4c19-4ce5-858a-d7bc3d53b966",
        "cursor": {
          "ref": "bb90ccf1-8c5e-4391-bd37-842a51edc02e",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8e9c2fc8-fc3a-4770-8a42-faf4f98fc533"
        },
        "item": {
          "id": "4025ab5d-4c19-4ce5-858a-d7bc3d53b966",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8f5fbb52-f196-4c8c-bdbe-081f96f090ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "c42f5cf3-4502-4745-abd4-e75796147e7e",
        "cursor": {
          "ref": "ab18ee73-6f86-49d8-93a2-21cd426c7435",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6e861b73-4610-4c11-baa4-b7f8f7787593"
        },
        "item": {
          "id": "c42f5cf3-4502-4745-abd4-e75796147e7e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "06db6fe7-1491-4eae-9961-79114770da76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "7de96f20-6e46-45cf-92cc-f43df2a02881",
        "cursor": {
          "ref": "f1ace403-5df1-435f-a738-b1098f14b63c",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b0fa06fd-9d51-4a9f-8495-0f0dba67c16b"
        },
        "item": {
          "id": "7de96f20-6e46-45cf-92cc-f43df2a02881",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b9500517-a601-4f76-98d3-2cc3421abae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "905d7ec7-fc64-4526-842f-9fa7803ec5b4",
        "cursor": {
          "ref": "a04d44bd-62af-4d84-b464-a27ab8cd622d",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1e3ca730-598e-4138-8508-58b88b8c7fbd"
        },
        "item": {
          "id": "905d7ec7-fc64-4526-842f-9fa7803ec5b4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "71714ceb-8668-4cba-9857-825740192084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "2e1c20df-2719-4915-a092-b09cfd8a0420",
        "cursor": {
          "ref": "d700f958-851c-4bee-b7ca-1b21d93eb47e",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1ab3c817-4b9b-441d-a194-396b6b16499b"
        },
        "item": {
          "id": "2e1c20df-2719-4915-a092-b09cfd8a0420",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ca93a254-f41d-422f-a295-bcda15aaad99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "8b00b3ba-6a9d-4113-837f-235102ea06f3",
        "cursor": {
          "ref": "a7d26a68-b305-44c6-b446-ecfb25fd0c85",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "85ef8f43-74b8-4f0e-beae-7cff24f6344b"
        },
        "item": {
          "id": "8b00b3ba-6a9d-4113-837f-235102ea06f3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6a4da8f1-6083-450f-838b-858b58db4d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "81a2e95c-18e0-451d-810c-dd1e051a50d5",
        "cursor": {
          "ref": "8f5473f7-327d-48ab-9721-505d9d7269d4",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7ac8beb2-a65d-4b12-b38d-3f30b57375eb"
        },
        "item": {
          "id": "81a2e95c-18e0-451d-810c-dd1e051a50d5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0e3f4735-d3ec-4c6e-9bd1-6af475b28052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "8b0d3b4c-3076-4909-be91-13885bfedf03",
        "cursor": {
          "ref": "46a47bc9-9aff-4d0e-94aa-f3756831ebe4",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b381f29e-6998-4f35-a04d-09bd2ea08ec6"
        },
        "item": {
          "id": "8b0d3b4c-3076-4909-be91-13885bfedf03",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "01d112ab-2c79-43e1-a791-9bba8e2186b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "f1c68e0f-647a-4400-abba-d1725940061a",
        "cursor": {
          "ref": "74c28e1e-ce3f-4c47-b4ca-48a97c91b733",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0141cc77-7075-4773-99d5-d67b71bfcb09"
        },
        "item": {
          "id": "f1c68e0f-647a-4400-abba-d1725940061a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b2b0e56f-f8cd-47b0-99e5-c5e0b64e9ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "d2a1bd08-11db-4d6b-9a3e-883fc5c1b8f6",
        "cursor": {
          "ref": "f7ab2cc8-f9fe-4603-a68b-9f5186591910",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c691875d-64ba-4699-917c-b2c9ae3f7444"
        },
        "item": {
          "id": "d2a1bd08-11db-4d6b-9a3e-883fc5c1b8f6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "61c66ddd-c29c-4c27-b85b-680a1d695790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "df5ffb5d-ea4a-441f-a270-b1ceb2699a00",
        "cursor": {
          "ref": "72752f4e-01f7-43ee-9087-f9593697b832",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d120eb70-fc58-49b4-bf5a-d35c1370e7d5"
        },
        "item": {
          "id": "df5ffb5d-ea4a-441f-a270-b1ceb2699a00",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ea9694cd-0be4-47f9-ad83-5e94550ac1ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "e1a2f7d7-e53c-48e0-8fa0-18e5d850307b",
        "cursor": {
          "ref": "69d5a764-4235-45be-8356-5151ecbb48ff",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "10b6c485-ba65-4492-bce9-b24880a9a316"
        },
        "item": {
          "id": "e1a2f7d7-e53c-48e0-8fa0-18e5d850307b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "79cd5f87-cd50-4b51-8fe4-763cb470cc9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "1dea19bc-62f1-4bf0-a0dd-5f31810b11fd",
        "cursor": {
          "ref": "7e53b171-5ba8-438e-a1e1-741f89573514",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "26dc233e-741d-47b0-b972-cbe3deb9fd97"
        },
        "item": {
          "id": "1dea19bc-62f1-4bf0-a0dd-5f31810b11fd",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8e4da58b-592e-4e43-842c-188ff031c5d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "1d9fad75-cd9e-46f6-99a0-4f8234139db7",
        "cursor": {
          "ref": "499fe1b4-ea96-4261-9d28-18cc4a4cabba",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8dadccf8-162d-4137-82fa-a6d3c5fc86ae"
        },
        "item": {
          "id": "1d9fad75-cd9e-46f6-99a0-4f8234139db7",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c7765ee9-8230-4e0b-a6d7-fa691c046dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "5d485944-5c2f-4d9a-8e70-47205ec7f323",
        "cursor": {
          "ref": "ac659f99-b40a-4726-9160-8e8660165c3f",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9cd3048e-3cc2-4daf-b1e4-8d0e83ffd167"
        },
        "item": {
          "id": "5d485944-5c2f-4d9a-8e70-47205ec7f323",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3d300b1c-51dd-438c-a231-06bec11eba60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "dbca33bb-c6f0-4f00-8761-6fb6eefb7699",
        "cursor": {
          "ref": "f6faed22-94c0-4f78-921b-2fb4211b4ff0",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3455e094-8a58-42ec-be2e-e49da1fd7043"
        },
        "item": {
          "id": "dbca33bb-c6f0-4f00-8761-6fb6eefb7699",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "28f79c33-6069-4a58-ace3-d4c69e88d2d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "c4f48bf2-efa3-4f18-b4dc-71c634dfc3af",
        "cursor": {
          "ref": "49ea727b-e7df-4551-a633-a837f84075ac",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2454089f-8894-4839-805b-3a26424d117e"
        },
        "item": {
          "id": "c4f48bf2-efa3-4f18-b4dc-71c634dfc3af",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7e945757-3bd4-4f0f-aaf0-16824891c7fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "be3d9a07-e884-40c2-90b0-4f3e40368f06",
        "cursor": {
          "ref": "7d07c335-726f-4c95-b6d1-a02f58bd89f9",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d42c6cda-9636-4666-a69e-693b206d058d"
        },
        "item": {
          "id": "be3d9a07-e884-40c2-90b0-4f3e40368f06",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "31866988-c133-4840-a5d7-b8bceccab6ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "06c6fdbe-e148-4e60-9686-1b324e2588eb",
        "cursor": {
          "ref": "1432e03a-c2c7-4f07-976c-969a618d2589",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "16d4b7b1-5466-40f5-b0be-f3d9b48a1793"
        },
        "item": {
          "id": "06c6fdbe-e148-4e60-9686-1b324e2588eb",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c157b2dc-e6c3-4c34-b090-b00ce472611f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7820cdbd-fbfc-4c7a-9c3c-de1ad5115cf2",
        "cursor": {
          "ref": "7dfb6a56-ebd6-4c6d-8e0c-0b4f5fba0f7c",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9bdb100f-2734-41f6-82bf-229ca7fd46da"
        },
        "item": {
          "id": "7820cdbd-fbfc-4c7a-9c3c-de1ad5115cf2",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "49549d65-9d91-4552-b94e-dbc5d5c854a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "3dabcb71-a8cc-4981-a02e-e9baad6dd5b4",
        "cursor": {
          "ref": "4f1356b0-f9dd-41d5-aa15-8d96c50cd6a8",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4cc87571-d4c0-41e9-bb7b-b2bdea6f8e7b"
        },
        "item": {
          "id": "3dabcb71-a8cc-4981-a02e-e9baad6dd5b4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "63e54a67-b1c6-47a2-a1b7-0418b9e48d14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c27dc24-c55b-47dc-a2a8-ff877e25ed6b",
        "cursor": {
          "ref": "9c429b51-dcc6-4e2e-b970-c46535d3dbe5",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b95d216a-dfdd-4347-aff0-e0b04303aa4a"
        },
        "item": {
          "id": "3c27dc24-c55b-47dc-a2a8-ff877e25ed6b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "39d70748-5a71-4fb6-94a5-676201fa811b",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "00bd01c8-3d1f-4811-8748-e5bb026b81e0",
        "cursor": {
          "ref": "de4dd53e-7e8c-42ee-a5d9-106adb35dd56",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b7e55734-19ee-42b7-81e0-573338d9a932"
        },
        "item": {
          "id": "00bd01c8-3d1f-4811-8748-e5bb026b81e0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3d957fe7-23f8-442d-b1fe-014852548169",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ba314f-7d47-43c1-9db4-895308fd65fd",
        "cursor": {
          "ref": "9f28b544-15dc-4392-aaf9-8afe61930d96",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ee4387f1-8719-4d64-8918-70249c0cc27d"
        },
        "item": {
          "id": "05ba314f-7d47-43c1-9db4-895308fd65fd",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "91325c07-b9fa-4187-bdbf-69cea9c5a195",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a578ec-9e47-40c4-aa68-93d203be6aeb",
        "cursor": {
          "ref": "bee373f0-118f-41d3-aa9d-c221b68ee7c3",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "74f290db-4b9c-44e7-be38-744e7670ac22"
        },
        "item": {
          "id": "e9a578ec-9e47-40c4-aa68-93d203be6aeb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "381cdaa9-6021-4eec-b64c-a812bc4d191e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a578ec-9e47-40c4-aa68-93d203be6aeb",
        "cursor": {
          "ref": "bee373f0-118f-41d3-aa9d-c221b68ee7c3",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "74f290db-4b9c-44e7-be38-744e7670ac22"
        },
        "item": {
          "id": "e9a578ec-9e47-40c4-aa68-93d203be6aeb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "381cdaa9-6021-4eec-b64c-a812bc4d191e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7011c65-1559-4abb-95dd-53405b86bf2a",
        "cursor": {
          "ref": "735ba2de-f3be-4f58-9eac-76c3cfa2ef48",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e90dadcb-1895-46c2-b6c6-a582d18dd014"
        },
        "item": {
          "id": "f7011c65-1559-4abb-95dd-53405b86bf2a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "587bcd1b-a774-49ac-9f8a-9d11c1355df0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ed6249-071b-47d6-a32f-4023176c347d",
        "cursor": {
          "ref": "13e9458f-dab9-4323-96a7-56ca62f0b5cb",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2dd9f85e-cdfe-401b-a6a0-7fb12cb8e87c"
        },
        "item": {
          "id": "04ed6249-071b-47d6-a32f-4023176c347d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "416a54a0-c836-4970-a846-480f28183bf3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}